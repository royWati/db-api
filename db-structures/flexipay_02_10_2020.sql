--------------------------------------------------------
--  File created - Monday-November-02-2020   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for View VW_ALLCUSTOMERS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_ALLCUSTOMERS" ("ID", "PIN", "PIN_CHANGE", "RESET", "CLOSE_REMARK", "UNBLOCK_REMARK", "PIN_RESET_REMARK", "LANG", "ACTIVE", "CUSTOMER_NO", "IDENTIFICATION_ID", "DATE_OF_BIRTH", "FIRST_NAME", "SECOND_NAME", "LAST_NAME", "LOCAL_BRANCH_ID", "DOMICILE_BRANCH_ID", "PARTIAL_REGISTRATION", "PHONE_NUMBER", "FIRST_LOGIN", "OTP_GENERATED_TIME", "CREATED_ON", "REFERRAL_CODE", "IMSI", "IMEI", "IMSI2", "IMEI2", "EMAIL_ADDRESS", "TRIALS", "APPROVED", "GENDER", "ACCOUNT_STATUS", "DORMANT", "DORMANCY_DATE", "MWALLET_ACCOUNT", "CUSTOMER_NAME", "ACTUAL_BALANCE", "AVAILABLE_BALANCE", "DEVICE_CHANGE", "VALIDATION_ID", "CHANNEL", "MODE_OF_IDENTIFICATION_ID", "ID_CARD_NUMBER", "LOYALITY_POINTS", "BLOCKED_BY", "BLOCKER_REMARK", "BLOCKED_TIME") AS 
  SELECT      A.ID, B.PIN, B.PIN_CHANGE, B.RESET, B.CLOSE_REMARK, B.UNBLOCK_REMARK,
 B.PIN_RESET_REMARK, B.LANG, B.ACTIVE, 
            B.CUSTOMER_NO, A.IDENTIFICATION_ID, A.DATE_OF_BIRTH, A.FIRST_NAME,
             A.SECOND_NAME, A.LAST_NAME, 
            A.LOCAL_BRANCH_ID, A.DOMICILE_BRANCH_ID,  
            B.PARTIAL_REGISTRATION, B.PHONE_NUMBER, B.FIRST_LOGIN,
             TO_CHAR(B.OTP_GENERATED_TIME, 'DD-MON-YYYY HH24:MI:SS') AS OTP_GENERATED_TIME,			
			 A.CREATED_ON, A.REFERRAL_CODE,
            NVL(B.IMSI,'') IMSI, NVL(B.IMEI,'') IMEI, NVL(B.IMSI2,'') IMSI2, NVL(B.IMEI2,'') IMEI2, A.EMAIL_ADDRESS, 
            B.TRIALS , A.APPROVED, A.GENDER, B.ACCOUNT_STATUS , A.DORMANT,A.DORMANCY_DATE,
A.MWALLET_ACCOUNT, A.FIRST_NAME || ' ' || A.SECOND_NAME || ' ' || A.LAST_NAME AS CUSTOMER_NAME , C.ACTUAL_BAL AS ACTUAL_BALANCE ,
C.AVAILABLE_BAL AS AVAILABLE_BALANCE, B.DEVICE_CHANGE , 
B.ID AS VALIDATION_ID, A.CHANNEL, A.MODE_OF_IDENTIFICATION_ID, A.ID_CARD_NUMBER, 
A.LOYALITY_POINTS , B.BLOCKED_BY, B.BLOCKER_REMARK, B.BLOCKED_TIME
FROM  TB_CUSTOMER A INNER JOIN
      TB_CUSTOMER_VALIDATION B ON A.CUSTOMER_NO = B.CUSTOMER_NO INNER JOIN TB_ACCOUNT C ON A.CUSTOMER_NO = C.CUSTOMER_NO 
      WHERE C.ACCOUNT_CLASS = '256';
--------------------------------------------------------
--  DDL for View VW_ALL_GROUPS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_ALL_GROUPS" ("ID", "GROUP_NAME", "CREATED_ON", "GROUP_ADMIN", "ACTIVE", "MEMBER_COUNT", "GROUP_ID", "PHYSICAL_ADDR", "POSTAL_ADDR", "MINIMUM_TO_VOTE", "MANDATE", "VOTE_PERCENTAGE", "MINIMUM_NUMBER_OF_MEMBERS", "REWORKED_ON", "CREATED_BY", "REWORKED_BY", "REWORKED", "SESSIONID", "APPROVED_BY", "APPROVED_ON", "DECLINED", "CHEKER_REMARKS", "GROUP_ACCOUNT", "GROUP_NAME_BUFFER", "MAXIMUM_NUMBER_OF_MEMBERS", "VOTE_EXPIRY", "CHANGE_ADMIN", "GRP_CLOSED", "GRP_CLOSED_BY", "GRP_CLOSED_ON", "CHANGE_VOTE_PERC", "CHANGE_MANDATE", "PROPOSED_MANDATE", "PROPOSED_VOTE_PERC", "REMOVE_MANDATE", "ADD_MANDATE", "PROPOSED_MANDATE_REMOVE") AS 
  SELECT 
   "ID","GROUP_NAME","CREATED_ON","GROUP_ADMIN","ACTIVE","MEMBER_COUNT","GROUP_ID","PHYSICAL_ADDR","POSTAL_ADDR","MINIMUM_TO_VOTE","MANDATE","VOTE_PERCENTAGE","MINIMUM_NUMBER_OF_MEMBERS","REWORKED_ON","CREATED_BY","REWORKED_BY","REWORKED","SESSIONID","APPROVED_BY","APPROVED_ON","DECLINED","CHEKER_REMARKS","GROUP_ACCOUNT","GROUP_NAME_BUFFER","MAXIMUM_NUMBER_OF_MEMBERS","VOTE_EXPIRY","CHANGE_ADMIN","GRP_CLOSED","GRP_CLOSED_BY","GRP_CLOSED_ON","CHANGE_VOTE_PERC","CHANGE_MANDATE","PROPOSED_MANDATE","PROPOSED_VOTE_PERC","REMOVE_MANDATE","ADD_MANDATE","PROPOSED_MANDATE_REMOVE" 
FROM TB_GROUPS;
--------------------------------------------------------
--  DDL for View VW_ALL_SACCOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_ALL_SACCOS" ("ID", "SACCO_ID", "SACCO_NAMES", "SACCO_WALLET_ACCOUNT", "BRANCH_CODE", "POSTAL_ADDRESS", "CONTACT_PERSON_MOBILE", "CONTACT_PERSON_EMAIL", "BUSINESS_MOBILE", "PHYSICAL_ADDRESS", "CREATED_ON", "CREATED_BY", "APPROVED", "APPROVED_ON", "APPROVED_BY", "REWORKED", "REWORKED_BY", "DELETED", "DELETED_BY", "DECLINED", "REMARKS", "CHECKERREMARKS", "DECLINED_ON", "DECLINED_BY", "DELETED_ON", "REWORKED_ON", "SACCO_TYPE") AS 
  SELECT 
  "ID","SACCO_ID","SACCO_NAMES","SACCO_WALLET_ACCOUNT","BRANCH_CODE","POSTAL_ADDRESS","CONTACT_PERSON_MOBILE","CONTACT_PERSON_EMAIL","BUSINESS_MOBILE","PHYSICAL_ADDRESS","CREATED_ON","CREATED_BY","APPROVED","APPROVED_ON","APPROVED_BY","REWORKED","REWORKED_BY","DELETED","DELETED_BY","DECLINED","REMARKS","CHECKERREMARKS","DECLINED_ON","DECLINED_BY","DELETED_ON","REWORKED_ON","SACCO_TYPE"  
FROM TB_SACCOS;
--------------------------------------------------------
--  DDL for View VW_COBMISSINGDRCR
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_COBMISSINGDRCR" ("AMOUNT", "TRXREFNO", "DRCR", "DRCRMATCH") AS 
  (SELECT d.amount , d.TRXREFNO , d.DRCR,d.DRCRMATCH FROM TBCOBMISMATCHDR d WHERE d.DRCRMATCH = 0 )UNION 
(SELECT c.amount , c.TRXREFNO , c.DRCR,c.DRCRMATCH FROM TBCOBMISMATCHCR c WHERE c.DRCRMATCH = 0);
--------------------------------------------------------
--  DDL for View VW_COMMISSION_CHARGES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_COMMISSION_CHARGES" ("ID", "TRXCODE", "PROCODE", "CHANNEL", "AMOUNT", "FVR", "MINAMOUNT", "MAXAMOUNT", "SERVICE_DESCRIPTION") AS 
  SELECT A.ID,
  TRXCODE,
  PROCODE,
  CHANNEL,
  AMOUNT,
  FVR,
  MINAMOUNT,
  MAXAMOUNT,B.SERVICE_DESCRIPTION
FROM TB_TRANS_COMMISSION_CHARGES A INNER JOIN TB_SERVICES B
ON A.PROCODE = B.FIELD3 AND A.TRXCODE= B.FIELD100;
--------------------------------------------------------
--  DDL for View VW_CUSTOMER_CARDS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_CUSTOMER_CARDS" ("CARDS", "CUSTOMER_NO") AS 
  SELECT 
 JSON_ARRAYAGG( json_object( 'TOKEN_HASH' VALUE CAST(TOKEN_HASH AS NVARCHAR2(100)),
 'CARD_NUMBER' VALUE CAST(CARD_NUMBER AS NVARCHAR2(20)))) AS CARDS,CUSTOMER_NO FROM tb_card_linking
 GROUP BY CUSTOMER_NO;
--------------------------------------------------------
--  DDL for View VW_GLBALANCE
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_GLBALANCE" ("GL_DESCRIPTION", "GL_PARENT", "CURRENCY", "GL_TYPE", "GL_CODE", "DR_BAL_LCY", "CR_BAL_LCY", "GL_BALANCE", "OPENING_BAL", "WORKING_DATE") AS 
  SELECT UPPER(A.GL_DESCRIPTION)GL_DESCRIPTION,A.GL_PARENT,A.CURRENCY,A.GL_TYPE,
B.GL_CODE, B.DR_BAL_LCY, B.CR_BAL_LCY, B.GL_BALANCE,OPENING_BAL,
SYSTIMESTAMP AS WORKING_DATE FROM TB_GL A
INNER JOIN TB_GL_BALANCE B ON A.GL_CODE=B.GL_CODE
UNION
SELECT UPPER(A.GL_DESCRIPTION)GL_DESCRIPTION,A.GL_PARENT,A.CURRENCY,A.GL_TYPE,
B.GL_CODE, B.DR_BAL_LCY, B.CR_BAL_LCY, B.GL_BALANCE,OPENING_BAL, B.WORKING_DATE FROM TB_GL A
INNER JOIN TB_GL_BALANCE_ARCHIVE B ON A.GL_CODE = B.GL_CODE;
--------------------------------------------------------
--  DDL for View VW_INSTITUTIONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_INSTITUTIONS" ("APPROVED", "APPROVED_BY", "APPROVED_ON", "CONTACT_NAME", "CREATED_BY", "CREATED_ON", "CREDIT_LIMIT", "DELETED", "DELETED_BY", "DELETED_ON", "EMAIL", "ID", "IMAGE_PATH", "INSTITUTION_ACCOUNT", "INSTITUTION_ADDRESS", "INSTITUTION_CODE", "INSTITUTION_NAME", "INSTITUTION_TYPE", "PHONE_NUMBER", "REWORKED", "REWORKED_BY", "REWORKED_ON", "SERVICE_FEE_BEARER", "TRANSACTION_FEE", "ACTUAL_BAL", "AVAILABLE_BAL") AS 
  SELECT I.APPROVED,I.APPROVED_BY,I.APPROVED_ON,I.CONTACT_NAME,I.CREATED_BY,I.CREATED_ON,I.CREDIT_LIMIT,I.DELETED,I.DELETED_BY,I.DELETED_ON,
I.EMAIL,I.ID,I.IMAGE_PATH,I.INSTITUTION_ACCOUNT,I.INSTITUTION_ADDRESS,I.INSTITUTION_CODE,I.INSTITUTION_NAME,I.INSTITUTION_TYPE,I.PHONE_NUMBER,
I.REWORKED,I.REWORKED_BY,I.REWORKED_ON,I.SERVICE_FEE_BEARER,I.TRANSACTION_FEE,A.ACTUAL_BAL,A.AVAILABLE_BAL FROM 
TB_INSTITUTIONS I INNER JOIN TB_ACCOUNT A on I.INSTITUTION_CODE = A.CUSTOMER_NO;
--------------------------------------------------------
--  DDL for View VW_LINKED_AGENT_DEVICES
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_LINKED_AGENT_DEVICES" ("AGENT_CODE", "AGENT_NAMES", "COMMISSION_ACCOUNT", "ID", "DEVICE_IMEI", "DEVICE_MOBILE", "POS_ID", "DEVICEID", "ASSIGNED", "FIRSTLOGIN", "PASS_KEY", "ACTIVE", "LOGIN_TRIALS", "BLOCKED", "IMSI", "MWALLET_ACCOUNT") AS 
  SELECT a.AGENT_CODE, a.AGENT_NAMES, a.COMMISSION_ACCOUNT,
adl.ID, adl.DEVICE_IMEI, adl.DEVICE_MOBILE, adl.POS_ID,ad.DEVICEID, ad.ASSIGNED,adl.FIRSTLOGIN,  
adl.PASS_KEY,adl.ACTIVE,adl.LOGIN_TRIALS,adl.BLOCKED,adl.IMSI,adl.MWALLET_ACCOUNT FROM TB_AGENTS a INNER JOIN TB_AGENT_DEVICELINKING adl ON a.ID = adl.AGENT_ID 
INNER JOIN TB_AGENT_DEVICES ad ON adl.DEVICE_IMEI = ad.DEVICE_IMEI;
--------------------------------------------------------
--  DDL for View VW_ROLES_IN_PROFILE
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_ROLES_IN_PROFILE" ("ID", "CREATED_ON", "STATUS", "CREATED_BY", "ROLE_NAME", "ROLE_ID", "REMARKS", "PROFILE_ID") AS 
  SELECT trp.ID,trp.CREATED_ON, trp.STATUS, trp.CREATED_BY,
tr.ROLE_NAME,trp.ROLE_ID,tr.REMARKS, trp.PROFILE_ID  FROM TB_ROLES_IN_PROFILE trp 
inner join TB_ROLES tr on trp.ROLE_ID = tr.ID;
--------------------------------------------------------
--  DDL for View VW_SACCO_LINKING
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_SACCO_LINKING" ("ID", "SACCO_ACCOUNT", "SACCO_ID", "CUSTOMER_ACCOUNT", "CUSTOMER_PHONENUMBER", "SACCO_NAMES") AS 
  SELECT A.ID,
  A.SACCO_ACCOUNT,
  A.SACCO_ID,
  A.CUSTOMER_ACCOUNT,
  A.CUSTOMER_PHONENUMBER,B.SACCO_NAMES
FROM TB_SACCO_LINKING A 
INNER JOIN TB_SACCOS B ON A.SACCO_ID  =  B.SACCO_ID;
--------------------------------------------------------
--  DDL for View VW_SACCO_WALLETS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_SACCO_WALLETS" ("ID", "SACCO_ACCOUNT", "SACCO_ID", "CUSTOMER_ACCOUNT", "CUSTOMER_PHONENUMBER", "ACCOUNT_NAME", "ACTUAL_BAL", "AVAILABLE_BAL") AS 
  SELECT A.ID,
  A.SACCO_ACCOUNT,
  A.SACCO_ID,
  A.CUSTOMER_ACCOUNT,
  A.CUSTOMER_PHONENUMBER,B.ACCOUNT_NAME, B.ACTUAL_BAL, B.AVAILABLE_BAL
FROM TB_SACCO_LINKING A 
INNER JOIN TB_ACCOUNT B ON A.CUSTOMER_PHONENUMBER  =  B.CUSTOMER_NO;
--------------------------------------------------------
--  DDL for View VW_SECURITY_ANS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_SECURITY_ANS" ("QUESTION", "QUESTION_ID", "ID", "ANSWER", "CUSTOMER_ID") AS 
  SELECT sq.QUESTION,sq.ID AS QUESTION_ID,ca.ID,
ca.ANSWER,ca.CUSTOMER_ID FROM TB_SECURITY_QUESTIONS sq 
INNER JOIN TB_CUSTOMER_ANSWERS ca ON sq.ID = ca.QUESTION;
--------------------------------------------------------
--  DDL for View VW_TRANSACTIONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_TRANSACTIONS" ("ID", "MSGTYPE", "FIELD3", "FIELD24", "PAYMENT_NUMBER", "FIELD90", "CLEARED_BALANCE", "FIELD37", "FIELD32", "FINANCIAL_PERIOD", "FIELD100", "ISCUSTOMERGL", "AMOUNT", "AVAILABLE_BALANCE", "AUTHORIZED_ON", "FINANCIAL_CYCLE", "DRCR", "CURRENCY", "CREATED_BY", "AUTHORIZED_BY", "FIELD41", "STAN", "TRX_SERIAL_NO", "VALUE_DATE", "AUTHORIZED", "FIELD42", "NARRATION", "CREATED_ON", "ACCOUNT_NO", "TRAN_CODE", "ACTUAL_BALANCE") AS 
  SELECT 
ID,MSGTYPE,FIELD3,FIELD24,PAYMENT_NUMBER,FIELD90,CLEARED_BALANCE,FIELD37,FIELD32,FINANCIAL_PERIOD,FIELD100,ISCUSTOMERGL,AMOUNT,AVAILABLE_BALANCE
,AUTHORIZED_ON,FINANCIAL_CYCLE,DRCR,CURRENCY,CREATED_BY,AUTHORIZED_BY,FIELD41,STAN,TRX_SERIAL_NO,VALUE_DATE,AUTHORIZED,FIELD42
,NARRATION,CREATED_ON,ACCOUNT_NO,TRAN_CODE,CLEARED_BALANCE AS ACTUAL_BALANCE
FROM TB_TRANSACTIONS
UNION ALL
SELECT
ID,MSGTYPE,FIELD3,PAYMENT_NUMBER,FIELD24,FIELD90,CLEARED_BALANCE,FIELD37,FIELD32,FINANCIAL_PERIOD,FIELD100,ISCUSTOMERGL,AMOUNT,AVAILABLE_BALANCE
,AUTHORIZED_ON,FINANCIAL_CYCLE,DRCR,CURRENCY,CREATED_BY,AUTHORIZED_BY,FIELD41,STAN,TRX_SERIAL_NO,VALUE_DATE,AUTHORIZED,FIELD42
,NARRATION,CREATED_ON,ACCOUNT_NO,TRAN_CODE,CLEARED_BALANCE AS ACTUAL_BALANCE
FROM TB_TRANSACTIONS_ARCHIVE;
--------------------------------------------------------
--  DDL for View VW_TRANS_CBS_MINI
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_TRANS_CBS_MINI" ("MINI_DATA", "FIELD2", "FIELD102", "FIELD103", "FIELD100", "FIELD54") AS 
  SELECT json_object('REFERENCE' VALUE CAST(FIELD37 AS VARCHAR2(50)),
    'NARRATION' VALUE CAST(FIELD100 AS VARCHAR2(50)) , 
   'DRCR' VALUE CASE 
    WHEN LENGTH(FIELD102) > 1 
     THEN 'DR'
      ELSE 'CR'
      END
   ,'AMOUNT' VALUE FIELD4
   ,'AVAILABLE_BAL' VALUE CAST(A.FIELD54 AS VARCHAR2(50))
   ,'ACTUAL_BAL' VALUE CAST(A.FIELD54 AS VARCHAR2(50))
   , 'TRX_DATE' VALUE TO_CHAR(DATEX,'yyyy/MM/dd')
   
  FORMAT JSON) AS MINI_DATA,A.FIELD2,A.FIELD102,A.FIELD103,A.FIELD100,A.FIELD54
  FROM TB_MESSAGES_EXTERNAL A 
  WHERE FIELD24 IN ('MC','CM','CC') AND A.FIELD39= '00'
  AND FIELD54 IS NOT NULL
  ORDER BY ID DESC;
--------------------------------------------------------
--  DDL for View VW_TRANS_CBS_MINI_OLD
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_TRANS_CBS_MINI_OLD" ("MINI_DATA", "FIELD2", "FIELD102", "FIELD103", "FIELD100", "FIELD54") AS 
  SELECT json_object('REFERENCE' VALUE CAST(FIELD37 AS VARCHAR2(50)),
    'NARRATION' VALUE CAST(FIELD68 AS VARCHAR2(50)) , 
   'DRCR' VALUE CASE 
    WHEN LENGTH(FIELD102) > 1 
     THEN 'DR'
      ELSE 'CR'
      END
   ,'AMOUNT' VALUE FIELD4
   ,'AVAILABLE_BAL' VALUE CAST(A.FIELD54 AS VARCHAR2(50))
   ,'ACTUAL_BAL' VALUE CAST(A.FIELD54 AS VARCHAR2(50))
   , 'TRX_DATE' VALUE DATEX
  FORMAT JSON) AS MINI_DATA,A.FIELD2,A.FIELD102,A.FIELD103,A.FIELD100,A.FIELD54
  FROM TB_MESSAGES_EXTERNAL A 
  WHERE FIELD24 IN ('MC','CM','CC') AND A.FIELD39= '00'
  AND FIELD54 IS NOT NULL
  ORDER BY ID DESC;
--------------------------------------------------------
--  DDL for View VW_TRANS_MINI_JSON
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "APP_USER"."VW_TRANS_MINI_JSON" ("MINI_DATA", "ACCOUNT_NO", "ID") AS 
  SELECT json_object('REFERENCE' VALUE CAST(FIELD37 AS VARCHAR2(50)),
    'NARRATION' VALUE CAST(Narration AS VARCHAR2(100)) , 
   'DRCR' VALUE CASE 
    WHEN DRCR = 'D'
     THEN 'DR'
      ELSE 'CR'
      END
  , 'AMOUNT' VALUE AMOUNT
  , 'AVAILABLE_BAL' VALUE ROUND(VW_TRANSACTIONS.AVAILABLE_BALANCE,2) 
    ,'ACTUAL_BAL' VALUE ROUND(VW_TRANSACTIONS.ACTUAL_BALANCE,2) ,
    'TRX_DATE' VALUE TO_CHAR(CREATED_ON,'yyyy-MM-dd HH24:MI AM'),
    'TRX_REF' VALUE FIELD37
  FORMAT JSON) AS MINI_DATA,ACCOUNT_NO,ID
  FROM VW_TRANSACTIONS  ORDER BY TO_CHAR(CREATED_ON,'yyyy-MM-dd HH24:MI:SS') DESC,
  TRX_SERIAL_NO ASC;
--------------------------------------------------------
--  DDL for View VW_USER_PROFILES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "APP_USER"."VW_USER_PROFILES" ("ID", "USER_ID", "USER_NAME", "EMAIL", "PROFILE_ID", "PROFILE_NAME", "APPROVED", "DELETED", "ENABLED") AS 
  SELECT tup.ID, tup.USER_ID,tu.USER_NAME, tu.EMAIL, tup.PROFILE_ID, tp.PROFILE_NAME, tup.APPROVED, tup.DELETED, tup.ENABLED  FROM TB_USER_IN_PROFILE tup INNER JOIN TB_USER tu ON tup.USER_ID = tu.ID 
INNER JOIN TB_PROFILES tp ON tup.PROFILE_ID = tp.ID;
--------------------------------------------------------
--  DDL for Type LOAN_CHECKS_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TYPE "APP_USER"."LOAN_CHECKS_TYPE" as object 
(
    StatusCode nVARCHAR2(50),
    Narration nVARCHAR2(500)
);


/
--------------------------------------------------------
--  DDL for Table APP_USER33
--------------------------------------------------------

  CREATE TABLE "APP_USER"."APP_USER33" 
   (	"MWALLET_ACCOUNT" VARCHAR2(20 BYTE), 
	"INVITED_PHONENUMBER" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"DATE_INVITED" DATE, 
	"DATE_ACCEPTED" VARCHAR2(20 BYTE), 
	"CUSTOMER_NAME" VARCHAR2(20 BYTE), 
	"CHANNEL" VARCHAR2(20 BYTE), 
	"ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_DATA
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_DATA" 
   (	"ID" NUMBER, 
	"ENTRY_ID" NUMBER, 
	"TYPE" NVARCHAR2(50), 
	"DATA" VARCHAR2(2000 BYTE), 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_ENTRY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_ENTRY" 
   (	"ID" NUMBER, 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"USER_ID" NUMBER, 
	"DURATION" FLOAT(126), 
	"IP" NVARCHAR2(50), 
	"REQUEST_METHOD" NVARCHAR2(50), 
	"AJAX" NUMBER(*,0), 
	"ROUTE" NVARCHAR2(50), 
	"MEMORY_MAX" NUMBER(*,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_ERROR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_ERROR" 
   (	"ID" NUMBER, 
	"ENTRY_ID" NUMBER, 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"MESSAGE" VARCHAR2(1000 BYTE), 
	"CODE" NUMBER, 
	"FILE_NAME" NVARCHAR2(100), 
	"LINE" NUMBER, 
	"TRACE" VARCHAR2(1000 BYTE), 
	"HASH" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_JAVASCRIPT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_JAVASCRIPT" 
   (	"ID" NUMBER, 
	"ENTRY_ID" NUMBER, 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"TYPE" NVARCHAR2(50), 
	"MESSAGE" NVARCHAR2(2000), 
	"ORIGIN" NVARCHAR2(100), 
	"DATA" NVARCHAR2(2000)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_MAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_MAIL" 
   (	"ID" NUMBER, 
	"ENTRY_ID" NUMBER, 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"EMAIL_SUCCESSFUL" NUMBER(1,0), 
	"EMAIL_FROM" NVARCHAR2(50), 
	"EMAIL_TO" NVARCHAR2(50), 
	"REPLY" NVARCHAR2(200), 
	"CC" NVARCHAR2(50), 
	"BCC" NVARCHAR2(50), 
	"SUBJECT" NVARCHAR2(50), 
	"TEXT" NVARCHAR2(500), 
	"HTML" NVARCHAR2(500), 
	"AUDIT_DATA" NVARCHAR2(2000)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUDIT_TRAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUDIT_TRAIL" 
   (	"ID" NUMBER, 
	"ENTRY_ID" NUMBER, 
	"USER_ID" NVARCHAR2(50), 
	"ACTION" NVARCHAR2(50), 
	"MODEL" NVARCHAR2(50), 
	"MODEL_ID" NVARCHAR2(50), 
	"FIELD" NVARCHAR2(2000), 
	"OLD_VALUE" NVARCHAR2(2000), 
	"NEW_VALUE" NVARCHAR2(2000), 
	"CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTH_ASSIGNMENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUTH_ASSIGNMENT" 
   (	"ITEM_NAME" NVARCHAR2(50), 
	"USER_ID" NUMBER, 
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ROLE_UPDATE_BY" NVARCHAR2(50), 
	"ROLE_UPDATE_ON" TIMESTAMP (6), 
	"OLD_ROLES" NVARCHAR2(200), 
	"NEW_ROLES" NVARCHAR2(200), 
	"ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTH_ITEM
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUTH_ITEM" 
   (	"ID" NUMBER, 
	"NAME" NVARCHAR2(50), 
	"TYPE" NUMBER(*,0), 
	"DESCRIPTION" NVARCHAR2(200), 
	"RULE_NAME" NVARCHAR2(200), 
	"DATA" NVARCHAR2(200), 
	"CREATED_AT" NUMBER(*,0), 
	"UPDATED_AT" NUMBER(*,0), 
	"APPROVED" NUMBER(*,0), 
	"CREATEDBY" NVARCHAR2(50), 
	"GROUP_CODE" NVARCHAR2(50), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DECLINED" NUMBER(1,0), 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"CHECKER_REMARKS" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTH_ITEM_CHILD
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUTH_ITEM_CHILD" 
   (	"PARENT" NVARCHAR2(50), 
	"CHILD" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"DATEADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" NVARCHAR2(50), 
	"DELETED" NVARCHAR2(50), 
	"DELETEDBY" NVARCHAR2(50), 
	"ID" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTH_ITEM_GROUP
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUTH_ITEM_GROUP" 
   (	"CODE" NVARCHAR2(50), 
	"NAME" NVARCHAR2(50), 
	"CREATED_AT" NUMBER(*,0), 
	"UPDATED_AT" NUMBER(*,0), 
	"ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table AUTH_RULE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."AUTH_RULE" 
   (	"CODE" NUMBER, 
	"NAME" NVARCHAR2(50), 
	"DATA" NVARCHAR2(200), 
	"CREATED_AT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"UPDATED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MD_APPLICATIONFILES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_APPLICATIONFILES" 
   (	"ID" NUMBER, 
	"APPLICATIONS_ID_FK" NUMBER, 
	"NAME" VARCHAR2(200 BYTE), 
	"URI" VARCHAR2(4000 BYTE), 
	"TYPE" VARCHAR2(100 BYTE), 
	"STATE" VARCHAR2(100 BYTE), 
	"LANGUAGE" VARCHAR2(100 BYTE), 
	"LOC" NUMBER, 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."NAME" IS 'file name  //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."URI" IS 'The uri is the part of the file url after the base dir has been removed.  See MD_APPLICATION for base dir';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."TYPE" IS 'This will denote the type of file we have, including DIR, FILE (text), BINARY, IGNORE (where we choose to ignore files)';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."STATE" IS 'State will be how this file is operated on.  For example. it will be OPEN, NEW, FIXED, IGNORED, REVIEWED, COMPLETE';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."LANGUAGE" IS 'Language of the file that has been processed.';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."SECURITY_GROUP_ID" IS 'APEX';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."CREATED_ON" IS 'APEX';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."CREATED_BY" IS 'APEX';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."UPDATED_ON" IS 'APEX';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONFILES"."UPDATED_BY" IS 'APEX';
   COMMENT ON TABLE "APP_USER"."MD_APPLICATIONFILES"  IS 'Holds a tuple for each file that is being processed whether it is changed or not.';
--------------------------------------------------------
--  DDL for Table MD_APPLICATIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_APPLICATIONS" 
   (	"ID" NUMBER, 
	"NAME" VARCHAR2(4000 BYTE), 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"BASE_DIR" VARCHAR2(4000 BYTE), 
	"OUTPUT_DIR" VARCHAR2(4000 BYTE), 
	"BACKUP_DIR" VARCHAR2(4000 BYTE), 
	"INPLACE" NUMBER, 
	"PROJECT_ID_FK" NUMBER, 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."NAME" IS 'Name of the application suite  //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."DESCRIPTION" IS 'Overview of what the application does.';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."BASE_DIR" IS 'This is the base src directory for the application.  It could be an svn checkout, a clearcase view or something similar';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."OUTPUT_DIR" IS 'This is the output directory where the scanner will present the converted files, if there are converted or modified.';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."BACKUP_DIR" IS 'This is the directory in which the application files are backed up if a backp is chosen';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."INPLACE" IS 'Designates whether the changes have been made inplace, in the source directory or not';
   COMMENT ON COLUMN "APP_USER"."MD_APPLICATIONS"."PROJECT_ID_FK" IS 'project of the database(s) this application relates to';
   COMMENT ON TABLE "APP_USER"."MD_APPLICATIONS"  IS 'This is the base table for application projects.  It holds the base information for applications associated with a database';
--------------------------------------------------------
--  DDL for Table MD_CATALOGS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_CATALOGS" 
   (	"ID" NUMBER, 
	"CONNECTION_ID_FK" NUMBER, 
	"CATALOG_NAME" VARCHAR2(4000 BYTE), 
	"DUMMY_FLAG" CHAR(1 BYTE) DEFAULT 'N', 
	"NATIVE_SQL" CLOB, 
	"NATIVE_KEY" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE ) ;

   COMMENT ON COLUMN "APP_USER"."MD_CATALOGS"."CONNECTION_ID_FK" IS 'Foreign key into the connections table - Shows what connection this catalog belongs to //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_CATALOGS"."CATALOG_NAME" IS 'Name of the catalog //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_CATALOGS"."DUMMY_FLAG" IS 'Flag to show if this catalog is a "dummy" catalog which is used as a placeholder for those platforms that do not support catalogs.  ''N'' signifies that this is NOT a dummy catalog, while ''Y'' signifies that it is.';
   COMMENT ON COLUMN "APP_USER"."MD_CATALOGS"."NATIVE_SQL" IS 'THe SQL used to create this catalog';
   COMMENT ON COLUMN "APP_USER"."MD_CATALOGS"."NATIVE_KEY" IS 'A unique identifier used to identify the catalog at source.';
   COMMENT ON TABLE "APP_USER"."MD_CATALOGS"  IS 'Store catalogs in this table.';
--------------------------------------------------------
--  DDL for Table MD_COLUMNS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_COLUMNS" 
   (	"ID" NUMBER, 
	"TABLE_ID_FK" NUMBER, 
	"COLUMN_NAME" VARCHAR2(4000 BYTE), 
	"COLUMN_ORDER" NUMBER, 
	"COLUMN_TYPE" VARCHAR2(4000 BYTE), 
	"PRECISION" NUMBER, 
	"SCALE" NUMBER, 
	"NULLABLE" CHAR(1 BYTE), 
	"DEFAULT_VALUE" VARCHAR2(4000 BYTE), 
	"NATIVE_SQL" CLOB, 
	"NATIVE_KEY" VARCHAR2(4000 BYTE), 
	"DATATYPE_TRANSFORMED_FLAG" CHAR(1 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE READS LOGGING ) ;

   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."TABLE_ID_FK" IS 'The table that this column is part of //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."COLUMN_NAME" IS 'The name of the column //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."COLUMN_ORDER" IS 'The order this appears in the table';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."COLUMN_TYPE" IS 'The type of the column';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."PRECISION" IS 'The precision on the column';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."SCALE" IS 'The scale of the column';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."NULLABLE" IS 'Yes or No.  Null signifies NO';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."DEFAULT_VALUE" IS 'Default value on the column';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."NATIVE_SQL" IS 'The SQL used to create this column at source';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."NATIVE_KEY" IS 'Unique identifier for this object at source';
   COMMENT ON COLUMN "APP_USER"."MD_COLUMNS"."DATATYPE_TRANSFORMED_FLAG" IS 'This is set to ''Y'' to show if the data type was transformed.  This is useful so we don''t apply more than 1 datatype transformation to a column';
   COMMENT ON TABLE "APP_USER"."MD_COLUMNS"  IS 'Column information is stored in this table.';
--------------------------------------------------------
--  DDL for Table MD_CONNECTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_CONNECTIONS" 
   (	"ID" NUMBER, 
	"PROJECT_ID_FK" NUMBER, 
	"TYPE" VARCHAR2(4000 BYTE), 
	"HOST" VARCHAR2(4000 BYTE), 
	"PORT" NUMBER, 
	"USERNAME" VARCHAR2(4000 BYTE), 
	"PASSWORD" VARCHAR2(4000 BYTE), 
	"DBURL" VARCHAR2(4000 BYTE), 
	"NAME" VARCHAR2(255 BYTE), 
	"NATIVE_SQL" CLOB, 
	"STATUS" VARCHAR2(30 BYTE), 
	"NUM_CATALOGS" NUMBER, 
	"NUM_COLUMNS" NUMBER, 
	"NUM_CONSTRAINTS" NUMBER, 
	"NUM_GROUPS" NUMBER, 
	"NUM_ROLES" NUMBER, 
	"NUM_INDEXES" NUMBER, 
	"NUM_OTHER_OBJECTS" NUMBER, 
	"NUM_PACKAGES" NUMBER, 
	"NUM_PRIVILEGES" NUMBER, 
	"NUM_SCHEMAS" NUMBER, 
	"NUM_SEQUENCES" NUMBER, 
	"NUM_STORED_PROGRAMS" NUMBER, 
	"NUM_SYNONYMS" NUMBER, 
	"NUM_TABLES" NUMBER, 
	"NUM_TABLESPACES" NUMBER, 
	"NUM_TRIGGERS" NUMBER, 
	"NUM_USER_DEFINED_DATA_TYPES" NUMBER, 
	"NUM_USERS" NUMBER, 
	"NUM_VIEWS" NUMBER, 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE READS LOGGING ) ;

   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."ID" IS 'Primary key';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."PROJECT_ID_FK" IS 'The project to which this connection belongs //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."TYPE" IS 'The type of the connection - For example it could be used to store "ORACLE" or "MYSQL"';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."HOST" IS 'The host to which this connection connects.';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."PORT" IS 'The port to which this connection connects';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."USERNAME" IS 'The username used to make the connection';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."PASSWORD" IS 'The password used to make this connection';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."DBURL" IS 'The database url used to make this connection';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."NAME" IS '//OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."NATIVE_SQL" IS 'The native sql used to create this connection';
   COMMENT ON COLUMN "APP_USER"."MD_CONNECTIONS"."STATUS" IS 'Status of Migration, = captured,converted,generated,datamoved';
   COMMENT ON TABLE "APP_USER"."MD_CONNECTIONS"  IS 'This table is used to store connection information.  For example, in migrations, we could be carrying out a consolidation which occurs across many connections.';
--------------------------------------------------------
--  DDL for Table MD_FILE_ARTIFACTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_FILE_ARTIFACTS" 
   (	"ID" NUMBER, 
	"APPLICATIONFILES_ID" NUMBER, 
	"PATTERN" VARCHAR2(4000 BYTE), 
	"STRING_FOUND" VARCHAR2(4000 BYTE), 
	"STRING_REPLACED" VARCHAR2(4000 BYTE), 
	"TYPE" VARCHAR2(200 BYTE), 
	"STATUS" VARCHAR2(4000 BYTE), 
	"LINE" NUMBER, 
	"PATTERN_START" NUMBER, 
	"PATTERN_END" NUMBER, 
	"DUE_DATE" DATE, 
	"DB_TYPE" VARCHAR2(100 BYTE), 
	"CODE_TYPE" VARCHAR2(1000 BYTE), 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	"PRIORITY" NUMBER(*,0), 
	"SECURITY_GROUP_ID" VARCHAR2(20 BYTE) DEFAULT '0', 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(4000 BYTE), 
	"LAST_UPDATED" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."PATTERN" IS 'Pattern used to search source file for interesting artifiacts';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."STRING_FOUND" IS 'String found in source from the pattern supplied';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."STRING_REPLACED" IS 'This is the string which replace the string found if it was replaced.';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."TYPE" IS 'This is the type of the replacement.  It could be a straight replace from a replacement pattern, or we could have passed the string to a translator which would change the string depending on the database.';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."STATUS" IS 'Pattern used to search source file for interesting artifiacts';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."DUE_DATE" IS 'Due date is used by the TODO mechanism to manage the validation and work to complete this change';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."DB_TYPE" IS 'Source database calls type';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."CODE_TYPE" IS 'Source code db api, like dblib, jdbc';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."DESCRIPTION" IS 'This is a description of the artifact which will have a default generated by the scanner and then can be modified by the user to be more appropriate for their use';
   COMMENT ON COLUMN "APP_USER"."MD_FILE_ARTIFACTS"."PRIORITY" IS 'The priority is set for the TODOs so they can be managed by the user';
   COMMENT ON TABLE "APP_USER"."MD_FILE_ARTIFACTS"  IS 'Holds a tuple for each interesting thing the scanner finds in a file';
--------------------------------------------------------
--  DDL for Table MD_GROUP_MEMBERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_GROUP_MEMBERS" 
   (	"ID" NUMBER, 
	"GROUP_ID_FK" NUMBER, 
	"USER_ID_FK" NUMBER, 
	"GROUP_MEMBER_ID_FK" NUMBER, 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_GROUP_MEMBERS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_GROUP_MEMBERS"."USER_ID_FK" IS 'Id of member';
   COMMENT ON COLUMN "APP_USER"."MD_GROUP_MEMBERS"."GROUP_MEMBER_ID_FK" IS 'groups can be members of groups';
   COMMENT ON TABLE "APP_USER"."MD_GROUP_MEMBERS"  IS 'This table is used to store the members of a group.';
--------------------------------------------------------
--  DDL for Table MD_INDEX_DETAILS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_INDEX_DETAILS" 
   (	"ID" NUMBER, 
	"INDEX_ID_FK" NUMBER, 
	"COLUMN_ID_FK" NUMBER, 
	"INDEX_PORTION" NUMBER, 
	"DETAIL_ORDER" NUMBER, 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MD_MIGR_PARAMETER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_MIGR_PARAMETER" 
   (	"ID" NUMBER, 
	"CONNECTION_ID_FK" NUMBER, 
	"OBJECT_ID" NUMBER, 
	"OBJECT_TYPE" VARCHAR2(4000 BYTE), 
	"PARAM_EXISTING" NUMBER, 
	"PARAM_ORDER" NUMBER, 
	"PARAM_NAME" VARCHAR2(4000 BYTE), 
	"PARAM_TYPE" VARCHAR2(4000 BYTE), 
	"PARAM_DATA_TYPE" VARCHAR2(4000 BYTE), 
	"PERCISION" NUMBER, 
	"SCALE" NUMBER, 
	"NULLABLE" CHAR(1 BYTE), 
	"DEFAULT_VALUE" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_MIGR_PARAMETER"."CONNECTION_ID_FK" IS 'the connection in which this belongs //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_MIGR_PARAMETER"."PARAM_EXISTING" IS '1 represents a new parameter for PL/SQL that was not present in the origional. 0 represents a n existing parameter that was present in the origional';
   COMMENT ON COLUMN "APP_USER"."MD_MIGR_PARAMETER"."PARAM_ORDER" IS 'IF -1 THEN THIS PARAM IS A RETURN PARAMETER. 1 WILL BE THE FIRST PARAMETER IN THE PARAMETER LIST';
--------------------------------------------------------
--  DDL for Table MD_PARTITIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_PARTITIONS" 
   (	"ID" NUMBER, 
	"TABLE_ID_FK" NUMBER, 
	"NATIVE_SQL" CLOB, 
	"PARTITION_EXPRESSION" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE READS LOGGING ) ;

   COMMENT ON COLUMN "APP_USER"."MD_PARTITIONS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_PARTITIONS"."TABLE_ID_FK" IS 'The table that this partition refers to //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_PARTITIONS"."NATIVE_SQL" IS 'The SQL used to create this partition at source';
   COMMENT ON COLUMN "APP_USER"."MD_PARTITIONS"."PARTITION_EXPRESSION" IS 'The partition expression';
   COMMENT ON TABLE "APP_USER"."MD_PARTITIONS"  IS 'Partition information is stored in this table.';
--------------------------------------------------------
--  DDL for Table MD_PROJECTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_PROJECTS" 
   (	"ID" NUMBER, 
	"PROJECT_NAME" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_PROJECTS"."ID" IS 'Primary key';
   COMMENT ON COLUMN "APP_USER"."MD_PROJECTS"."PROJECT_NAME" IS 'Name of the project //OBJECTNAME';
   COMMENT ON TABLE "APP_USER"."MD_PROJECTS"  IS 'This is a top level container for a set of connections.';
--------------------------------------------------------
--  DDL for Table MD_REPOVERSIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_REPOVERSIONS" 
   (	"REVISION" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON TABLE "APP_USER"."MD_REPOVERSIONS"  IS 'This table is used to version this schema for future requirements.';
--------------------------------------------------------
--  DDL for Table MD_SEQUENCES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_SEQUENCES" 
   (	"ID" NUMBER, 
	"SCHEMA_ID_FK" NUMBER, 
	"NAME" VARCHAR2(4000 BYTE), 
	"SEQ_START" NUMBER, 
	"INCR" NUMBER DEFAULT 1, 
	"NATIVE_SQL" CLOB, 
	"NATIVE_KEY" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE) DEFAULT '0', 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE READS LOGGING ) ;

   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."SCHEMA_ID_FK" IS 'The schema to which this object belongs. //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."NAME" IS 'Name of this sequence //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."SEQ_START" IS 'Starting point of the sequence';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."INCR" IS 'Increment value of the sequence';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."NATIVE_SQL" IS 'SQL used to create this object at source';
   COMMENT ON COLUMN "APP_USER"."MD_SEQUENCES"."NATIVE_KEY" IS 'Identifier for this object at source.';
   COMMENT ON TABLE "APP_USER"."MD_SEQUENCES"  IS 'For storing information on sequences.';
--------------------------------------------------------
--  DDL for Table MD_TABLESPACES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_TABLESPACES" 
   (	"ID" NUMBER, 
	"SCHEMA_ID_FK" NUMBER, 
	"TABLESPACE_NAME" VARCHAR2(4000 BYTE), 
	"NATIVE_SQL" CLOB, 
	"NATIVE_KEY" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE ) ;

   COMMENT ON COLUMN "APP_USER"."MD_TABLESPACES"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_TABLESPACES"."SCHEMA_ID_FK" IS 'Schema to which this tablespace belongs //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_TABLESPACES"."TABLESPACE_NAME" IS 'Name of the table space //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_TABLESPACES"."NATIVE_SQL" IS 'The SQL used to create this tablespace';
   COMMENT ON COLUMN "APP_USER"."MD_TABLESPACES"."NATIVE_KEY" IS 'A unique identifier for this object at source';
   COMMENT ON TABLE "APP_USER"."MD_TABLESPACES"  IS 'For storing information about tablespaces.';
--------------------------------------------------------
--  DDL for Table MD_USERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_USERS" 
   (	"ID" NUMBER, 
	"SCHEMA_ID_FK" NUMBER, 
	"USERNAME" VARCHAR2(4000 BYTE), 
	"PASSWORD" VARCHAR2(4000 BYTE), 
	"NATIVE_SQL" CLOB, 
	"NATIVE_KEY" VARCHAR2(4000 BYTE), 
	"COMMENTS" VARCHAR2(4000 BYTE), 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UPDATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("NATIVE_SQL") STORE AS BASICFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  CACHE ) ;

   COMMENT ON COLUMN "APP_USER"."MD_USERS"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_USERS"."SCHEMA_ID_FK" IS 'Shema in which this object belongs //PARENTFIELD';
   COMMENT ON COLUMN "APP_USER"."MD_USERS"."USERNAME" IS 'Username for login //OBJECTNAME';
   COMMENT ON COLUMN "APP_USER"."MD_USERS"."PASSWORD" IS 'Password for login';
   COMMENT ON COLUMN "APP_USER"."MD_USERS"."NATIVE_SQL" IS 'SQL Used to create this object at source';
   COMMENT ON COLUMN "APP_USER"."MD_USERS"."NATIVE_KEY" IS 'Unique identifier for this object at source.';
   COMMENT ON TABLE "APP_USER"."MD_USERS"  IS 'User information.';
--------------------------------------------------------
--  DDL for Table MD_USER_PRIVILEGES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."MD_USER_PRIVILEGES" 
   (	"ID" NUMBER, 
	"USER_ID_FK" NUMBER, 
	"PRIVILEGE_ID_FK" NUMBER, 
	"SECURITY_GROUP_ID" NUMBER DEFAULT 0, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(255 BYTE), 
	"LAST_UPDATED_ON" DATE, 
	"LAST_UDPATED_BY" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "APP_USER"."MD_USER_PRIVILEGES"."ID" IS 'Primary Key';
   COMMENT ON COLUMN "APP_USER"."MD_USER_PRIVILEGES"."USER_ID_FK" IS 'User';
   COMMENT ON COLUMN "APP_USER"."MD_USER_PRIVILEGES"."PRIVILEGE_ID_FK" IS 'Privilege';
   COMMENT ON TABLE "APP_USER"."MD_USER_PRIVILEGES"  IS 'This table stores privileges granted to individual users';
--------------------------------------------------------
--  DDL for Table SYS_TEMP_FBT
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "APP_USER"."SYS_TEMP_FBT" 
   (	"SCHEMA" VARCHAR2(130 BYTE), 
	"OBJECT_NAME" VARCHAR2(130 BYTE), 
	"OBJECT#" NUMBER, 
	"RID" UROWID (4000), 
	"ACTION" CHAR(1 BYTE)
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table TBADVERTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBADVERTS" 
   (	"ID" NUMBER, 
	"MERCHANT_ID" VARCHAR2(50 BYTE), 
	"ITEM_NAME" VARCHAR2(500 BYTE), 
	"CURRENT_VALUE" VARCHAR2(20 BYTE), 
	"DISCOUNTED_VALUE" VARCHAR2(20 BYTE), 
	"IMAGE_STRING" CLOB, 
	"CREATED_ON" DATE DEFAULT sysdate
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMAGE_STRING") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TBCOBERRORS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBCOBERRORS" 
   (	"ID" NUMBER, 
	"COBERROR" VARCHAR2(1000 BYTE), 
	"ERRORDATE" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBCOBERRORS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBCOBERRORS_ARCHIVE" 
   (	"ID" NUMBER, 
	"COBERROR" VARCHAR2(1000 BYTE), 
	"ERRORDATE" TIMESTAMP (6) DEFAULT systimestamp, 
	"ARCHIVE_DATE" TIMESTAMP (6) DEFAULT systimestamp
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBCOBMISMATCHCR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBCOBMISMATCHCR" 
   (	"AMOUNT" NUMBER(18,5), 
	"TRXREFNO" NVARCHAR2(50), 
	"DRCR" VARCHAR2(20 BYTE), 
	"DRCRMATCH" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBCOBMISMATCHDR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBCOBMISMATCHDR" 
   (	"AMOUNT" NUMBER(18,5), 
	"TRXREFNO" NVARCHAR2(50), 
	"DRCR" VARCHAR2(20 BYTE), 
	"DRCRMATCH" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBDSSTXN_PERSONAL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBDSSTXN_PERSONAL" 
   (	"ID" NUMBER, 
	"DATEX" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"CIFNUMBER" VARCHAR2(20 BYTE), 
	"FIRSTNAME" VARCHAR2(100 BYTE), 
	"MIDDLENAME" VARCHAR2(100 BYTE), 
	"SURNAME" VARCHAR2(100 BYTE), 
	"GENDER" VARCHAR2(20 BYTE), 
	"DOB" VARCHAR2(20 BYTE), 
	"PLACEOFBIRTH" VARCHAR2(100 BYTE), 
	"IDTYPE" VARCHAR2(50 BYTE), 
	"IDNUMBER" VARCHAR2(20 BYTE), 
	"MOBILENUMBER" VARCHAR2(20 BYTE), 
	"PROFESSION" VARCHAR2(200 BYTE), 
	"BRANCH" VARCHAR2(200 BYTE), 
	"EMAIL" VARCHAR2(200 BYTE), 
	"BRANCHNAME" VARCHAR2(200 BYTE), 
	"PROCESSCUSTOMER" NUMBER(1,0) DEFAULT 0, 
	"CUSTESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSACCOUNT" VARCHAR2(20 BYTE) DEFAULT 0, 
	"ACCESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSPASSPORT" NUMBER(1,0) DEFAULT 0, 
	"PASSPORTESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSSIGNATURE" NUMBER(1,0) DEFAULT 0, 
	"SIGNATUREESBNARATIVE" VARCHAR2(200 BYTE), 
	"APP_USERREG" NUMBER(1,0) DEFAULT 0, 
	"APP_USERREGNARATIVE" VARCHAR2(200 BYTE), 
	"DSSSMS" VARCHAR2(200 BYTE), 
	"DSSFLEXID" VARCHAR2(20 BYTE), 
	"DSSACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"IMGPASSPORT" CLOB, 
	"IMGID" CLOB, 
	"IMGSIGNATURE" CLOB, 
	"ACC_CLS" VARCHAR2(20 BYTE), 
	"CUSTOMER_CATEGORY" VARCHAR2(500 BYTE), 
	"CARD_NUMBER" VARCHAR2(200 BYTE), 
	"DSSMOBILENUMBER" VARCHAR2(20 BYTE), 
	"PERMANENT_REGION" VARCHAR2(500 BYTE), 
	"PERMANENT_DISTRICT" VARCHAR2(500 BYTE), 
	"PERMANENT_WARD" VARCHAR2(500 BYTE), 
	"PERMANENT_STREET" VARCHAR2(500 BYTE), 
	"RES_DISTRICT" VARCHAR2(200 BYTE), 
	"RES_WARD" VARCHAR2(200 BYTE), 
	"RES_STREET" VARCHAR2(200 BYTE), 
	"POSTALADDRESS" VARCHAR2(1000 BYTE), 
	"PLOTNUMBER" VARCHAR2(2000 BYTE), 
	"RES_REGION" VARCHAR2(200 BYTE), 
	"SIGID" VARCHAR2(20 BYTE), 
	"INTRODUCTORY_LETTER" CLOB, 
	"TERMS_AND_CONDITIONS" CLOB, 
	"MARITAL_STATUS" VARCHAR2(50 BYTE), 
	"CITIZENSHIP" VARCHAR2(20 BYTE), 
	"INTROLETTERESBNARATIVE" VARCHAR2(500 BYTE), 
	"PROCESSINTROLETTER" VARCHAR2(20 BYTE) DEFAULT 0, 
	"CORRID" VARCHAR2(500 BYTE), 
	"CURRENCY" VARCHAR2(20 BYTE) DEFAULT 'TZS', 
	"APP_USER_STATUS" VARCHAR2(1 BYTE) DEFAULT 1, 
	"TIN" VARCHAR2(100 BYTE), 
	"CHECK_NUMBER" VARCHAR2(100 BYTE), 
	"TELEPHONE" VARCHAR2(200 BYTE), 
	"TRANSACTION_STATUS" NUMBER DEFAULT 0, 
	"PROCESSTRANSACTIONSTATUS" NUMBER DEFAULT 0, 
	"TRANSACTIONSTATUSESBNARATIVE" VARCHAR2(200 BYTE), 
	"EDITED" NUMBER DEFAULT 0, 
	"APPROVEDEDITED" NUMBER DEFAULT 0, 
	"EDITEDBY" VARCHAR2(200 BYTE), 
	"APPROVEDEDITEDBY" VARCHAR2(200 BYTE), 
	"APPROVEDBY" VARCHAR2(50 BYTE), 
	"SESSIONID" VARCHAR2(50 BYTE), 
	"APPROVEDON" DATE, 
	"REJECTEDBY" VARCHAR2(50 BYTE), 
	"REJECTEDON" DATE, 
	"EDITEDON" VARCHAR2(30 BYTE), 
	"TITLE_PREFIX1" VARCHAR2(20 BYTE), 
	"MAIDEN_NAME" VARCHAR2(500 BYTE), 
	"LANDMARKS" VARCHAR2(500 BYTE), 
	"ID_ISSUEDATE" VARCHAR2(200 BYTE), 
	"ID_EXPIRYDATE" VARCHAR2(200 BYTE), 
	"MONTHLY_INCOME" VARCHAR2(300 BYTE), 
	"INCOME_SOURCE" VARCHAR2(500 BYTE), 
	"RETURNEDBY" VARCHAR2(50 BYTE), 
	"RETURNEDON" DATE, 
	"REMARKS" VARCHAR2(140 BYTE), 
	"APPROVAL_REMARKS" VARCHAR2(200 BYTE), 
	"TITLE_PREFIX2" VARCHAR2(20 BYTE), 
	"TITLE_PREFIX3" VARCHAR2(20 BYTE), 
	"RECLASSIFY" NUMBER DEFAULT 0, 
	"RECLASSIFY_NARRATION" VARCHAR2(1000 BYTE), 
	"DISTRIBUTION" NUMBER DEFAULT 0, 
	"DISTRIBUTION_NARRATION" VARCHAR2(1000 BYTE), 
	"MANDATE_DECLARATION" CLOB, 
	"KYCREF" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("IMGPASSPORT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("IMGID") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("IMGSIGNATURE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("INTRODUCTORY_LETTER") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("TERMS_AND_CONDITIONS") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("MANDATE_DECLARATION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TBDSSTXN_REMIDIATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBDSSTXN_REMIDIATION" 
   (	"ID" NUMBER, 
	"DATEX" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"CIFNUMBER" VARCHAR2(20 BYTE), 
	"FIRSTNAME" VARCHAR2(100 BYTE), 
	"MIDDLENAME" VARCHAR2(100 BYTE), 
	"SURNAME" VARCHAR2(100 BYTE), 
	"GENDER" VARCHAR2(20 BYTE), 
	"DOB" VARCHAR2(50 BYTE), 
	"PLACEOFBIRTH" VARCHAR2(100 BYTE), 
	"IDTYPE" VARCHAR2(50 BYTE), 
	"IDNUMBER" VARCHAR2(20 BYTE), 
	"MOBILENUMBER" VARCHAR2(20 BYTE), 
	"PROFESSION" VARCHAR2(200 BYTE), 
	"BRANCH" VARCHAR2(200 BYTE), 
	"EMAIL" VARCHAR2(200 BYTE), 
	"BRANCHNAME" VARCHAR2(200 BYTE), 
	"PROCESSCUSTOMER" NUMBER(1,0) DEFAULT 0, 
	"CUSTESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSACCOUNT" VARCHAR2(20 BYTE) DEFAULT 0, 
	"ACCESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSPASSPORT" NUMBER(1,0) DEFAULT 0, 
	"PASSPORTESBNARATIVE" VARCHAR2(200 BYTE), 
	"PROCESSSIGNATURE" NUMBER(1,0) DEFAULT 0, 
	"SIGNATUREESBNARATIVE" VARCHAR2(200 BYTE), 
	"NMBMOBILEREG" NUMBER(1,0) DEFAULT 0, 
	"NMBMOBILEREGNARATIVE" VARCHAR2(200 BYTE), 
	"DSSSMS" VARCHAR2(200 BYTE), 
	"DSSFLEXID" VARCHAR2(20 BYTE), 
	"DSSACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"IMGPASSPORT" CLOB, 
	"IMGID" CLOB, 
	"IMGSIGNATURE" CLOB, 
	"ACC_CLS" VARCHAR2(20 BYTE), 
	"CUSTOMER_CATEGORY" VARCHAR2(500 BYTE), 
	"CARD_NUMBER" VARCHAR2(200 BYTE), 
	"DSSMOBILENUMBER" VARCHAR2(20 BYTE), 
	"PERMANENT_REGION" VARCHAR2(500 BYTE), 
	"PERMANENT_DISTRICT" VARCHAR2(500 BYTE), 
	"PERMANENT_WARD" VARCHAR2(500 BYTE), 
	"PERMANENT_STREET" VARCHAR2(500 BYTE), 
	"RES_DISTRICT" VARCHAR2(200 BYTE), 
	"RES_WARD" VARCHAR2(200 BYTE), 
	"RES_STREET" VARCHAR2(200 BYTE), 
	"POSTALADDRESS" VARCHAR2(1000 BYTE), 
	"PLOTNUMBER" VARCHAR2(2000 BYTE), 
	"RES_REGION" VARCHAR2(200 BYTE), 
	"SIGID" VARCHAR2(20 BYTE), 
	"INTRODUCTORY_LETTER" CLOB, 
	"TERMS_AND_CONDITIONS" CLOB, 
	"MARITAL_STATUS" VARCHAR2(50 BYTE), 
	"CITIZENSHIP" VARCHAR2(20 BYTE), 
	"INTROLETTERESBNARATIVE" VARCHAR2(500 BYTE), 
	"PROCESSINTROLETTER" VARCHAR2(20 BYTE), 
	"CORRID" VARCHAR2(500 BYTE), 
	"CURRENCY" VARCHAR2(20 BYTE) DEFAULT 'TZS', 
	"NMBMOBILE_STATUS" VARCHAR2(1 BYTE) DEFAULT '0', 
	"TIN" VARCHAR2(100 BYTE), 
	"CHECK_NUMBER" VARCHAR2(100 BYTE), 
	"TELEPHONE" VARCHAR2(200 BYTE), 
	"TRANSACTION_STATUS" NUMBER DEFAULT 0, 
	"PROCESSTRANSACTIONSTATUS" NUMBER DEFAULT 0, 
	"TRANSACTIONSTATUSESBNARATIVE" VARCHAR2(200 BYTE), 
	"EDITED" NUMBER, 
	"APPROVEDEDITED" NUMBER, 
	"EDITEDBY" VARCHAR2(200 BYTE), 
	"APPROVEDEDITEDBY" VARCHAR2(200 BYTE), 
	"APPROVEDBY" VARCHAR2(50 BYTE), 
	"SESSIONID" VARCHAR2(50 BYTE), 
	"APPROVEDON" DATE, 
	"REJECTEDBY" VARCHAR2(50 BYTE), 
	"REJECTEDON" DATE, 
	"EDITEDON" VARCHAR2(30 BYTE), 
	"TITLE_PREFIX1" VARCHAR2(20 BYTE), 
	"MAIDEN_NAME" VARCHAR2(500 BYTE), 
	"LANDMARKS" VARCHAR2(500 BYTE), 
	"ID_ISSUEDATE" VARCHAR2(200 BYTE), 
	"ID_EXPIRYDATE" VARCHAR2(200 BYTE), 
	"MONTHLY_INCOME" VARCHAR2(300 BYTE), 
	"INCOME_SOURCE" VARCHAR2(500 BYTE), 
	"RETURNEDBY" VARCHAR2(50 BYTE), 
	"RETURNEDON" DATE, 
	"REMARKS" VARCHAR2(140 BYTE), 
	"APPROVAL_REMARKS" VARCHAR2(200 BYTE), 
	"TITLE_PREFIX2" VARCHAR2(20 BYTE), 
	"TITLE_PREFIX3" VARCHAR2(20 BYTE), 
	"RECLASSIFY" NUMBER DEFAULT '0', 
	"RECLASSIFY_NARRATION" VARCHAR2(1000 BYTE), 
	"DISTRIBUTION" NUMBER DEFAULT 0, 
	"DISTRIBUTION_NARRATION" VARCHAR2(1000 BYTE), 
	"MANDATE_DECLARATION" CLOB, 
	"KYCREF" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("IMGPASSPORT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("IMGID") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("IMGSIGNATURE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("INTRODUCTORY_LETTER") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("TERMS_AND_CONDITIONS") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("MANDATE_DECLARATION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table TBMCC
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBMCC" 
   (	"MCC_CODE" VARCHAR2(20 BYTE), 
	"MCC_NAME" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TBREMIDIATION_ACCOUNTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TBREMIDIATION_ACCOUNTS" 
   (	"ID" NUMBER, 
	"ACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"DATEADDED" DATE DEFAULT SYSTIMESTAMP, 
	"FLEXRESPONSE" VARCHAR2(4000 BYTE), 
	"PROCESSED" NUMBER DEFAULT 0, 
	"DSSFLEXID" VARCHAR2(20 BYTE), 
	"ACC_CLS" VARCHAR2(20 BYTE), 
	"ACCOUNTNAME" VARCHAR2(100 BYTE), 
	"PERM_DISTRICT" VARCHAR2(100 BYTE), 
	"PHY_REGION" VARCHAR2(100 BYTE), 
	"PHY_DISTRICT" VARCHAR2(100 BYTE), 
	"PHY_WARD" VARCHAR2(100 BYTE), 
	"PHY_STREET" VARCHAR2(100 BYTE), 
	"BIRTH_PLACE" VARCHAR2(100 BYTE), 
	"IDTYPE" VARCHAR2(100 BYTE), 
	"IDNUMBER" VARCHAR2(100 BYTE), 
	"PHONENUMBER" VARCHAR2(100 BYTE), 
	"PERM_REGION" VARCHAR2(100 BYTE), 
	"DATE_OF_BIRTH" VARCHAR2(100 BYTE), 
	"UPLOADEDBY" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT" 
   (	"ACCOUNT_ID" NUMBER, 
	"BRANCH_ID" NUMBER(*,0) DEFAULT 1, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"ACCOUNT_NAME" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5) DEFAULT 'KES', 
	"ACCOUNT_CLASS" NVARCHAR2(10), 
	"ALLOW_DR" CHAR(1 BYTE) DEFAULT 1, 
	"ALLOW_CR" CHAR(1 BYTE) DEFAULT 1, 
	"BLOCKED" CHAR(1 BYTE) DEFAULT 0, 
	"STOPPED" CHAR(1 BYTE) DEFAULT 0, 
	"DORMANT" CHAR(1 BYTE) DEFAULT 0, 
	"OPENING_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHEQUE_BOOK_FACILITY" CHAR(1 BYTE), 
	"ATM_FACILITY" CHAR(1 BYTE) DEFAULT 0, 
	"IS_FROZEN" CHAR(1 BYTE) DEFAULT 0, 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"OPENING_BAL" NUMBER(18,5), 
	"TODAY_DR" NUMBER(18,5) DEFAULT 0, 
	"TODAY_CR" NUMBER(18,5) DEFAULT 0, 
	"ACTUAL_BAL" NUMBER(18,5) DEFAULT 0, 
	"AVAILABLE_BAL" NUMBER(18,5) DEFAULT 0, 
	"BLOCKED_AMOUNT" NUMBER(18,5) DEFAULT 0, 
	"DR_DATE" TIMESTAMP (6), 
	"CR_DATE" TIMESTAMP (6), 
	"DORMANCY_DATE" TIMESTAMP (6), 
	"MIN_BALANCE" NUMBER(18,5), 
	"MATURITY_DATE" TIMESTAMP (6), 
	"INTEREST_RATE" NUMBER(18,2), 
	"EOD_PROCESSED" CHAR(1 BYTE), 
	"NEXT_PROCESSING_DATE" TIMESTAMP (6), 
	"LAST_TRANSACTION_DATE" TIMESTAMP (6), 
	"PHONE_NUMBER" NVARCHAR2(50), 
	"PARTIAL_REGISTRATION" CHAR(1 BYTE) DEFAULT 0, 
	"PARTIAL_DORMANT" CHAR(1 BYTE) DEFAULT 0, 
	"PARTIAL_DORMANT_DATE" TIMESTAMP (6), 
	"ALLOW_OVERDRAFT" CHAR(1 BYTE) DEFAULT 0, 
	"WITHDRAWAL_COUNT" NUMBER(10,0), 
	"ISCLOSED" CHAR(1 BYTE) DEFAULT 0, 
	"CLOSED_BY" CHAR(1 BYTE), 
	"CLOSED_MAKER_REMARKS" NVARCHAR2(200), 
	"CLOSED_APPROVED_BY" NVARCHAR2(50), 
	"CLOSED_CHECKER_REMARKS" NVARCHAR2(200), 
	"CLOSEDBY_DATE" TIMESTAMP (6), 
	"PARTIAL_REG_BLOCK" CHAR(1 BYTE) DEFAULT '1'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_ARCHIVE" 
   (	"ACCOUNT_ID" NUMBER, 
	"BRANCH_ID" NUMBER(*,0), 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"ACCOUNT_NAME" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"ACCOUNT_CLASS" NVARCHAR2(10), 
	"ALLOW_DR" CHAR(1 BYTE), 
	"ALLOW_CR" CHAR(1 BYTE), 
	"BLOCKED" CHAR(1 BYTE), 
	"STOPPED" CHAR(1 BYTE), 
	"DORMANT" CHAR(1 BYTE), 
	"OPENING_DATE" TIMESTAMP (6), 
	"CHEQUE_BOOK_FACILITY" CHAR(1 BYTE), 
	"ATM_FACILITY" CHAR(1 BYTE), 
	"IS_FROZEN" CHAR(1 BYTE), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"OPENING_BAL" NUMBER(18,5), 
	"TODAY_DR" NUMBER(18,5), 
	"TODAY_CR" NUMBER(18,5), 
	"ACTUAL_BAL" NUMBER(18,5), 
	"AVAILABLE_BAL" NUMBER(18,5), 
	"BLOCKED_AMOUNT" NUMBER(18,5), 
	"DR_DATE" TIMESTAMP (6), 
	"CR_DATE" TIMESTAMP (6), 
	"DORMANCY_DATE" TIMESTAMP (6), 
	"MIN_BALANCE" NUMBER(18,5), 
	"MATURITY_DATE" TIMESTAMP (6), 
	"INTEREST_RATE" NUMBER(18,2), 
	"EOD_PROCESSED" CHAR(1 BYTE), 
	"NEXT_PROCESSING_DATE" TIMESTAMP (6), 
	"LAST_TRANSACTION_DATE" TIMESTAMP (6), 
	"PHONE_NUMBER" NVARCHAR2(50), 
	"PARTIAL_REGISTRATION" CHAR(1 BYTE), 
	"PARTIAL_DORMANT" CHAR(1 BYTE), 
	"PARTIAL_DORMANT_DATE" TIMESTAMP (6), 
	"ALLOW_OVERDRAFT" CHAR(1 BYTE), 
	"WITHDRAWAL_COUNT" NUMBER(10,0), 
	"ISCLOSED" CHAR(1 BYTE), 
	"CLOSED_BY" CHAR(1 BYTE), 
	"CLOSED_MAKER_REMARKS" NVARCHAR2(200), 
	"CLOSED_APPROVED_BY" NVARCHAR2(50), 
	"CLOSED_CHECKER_REMARKS" NVARCHAR2(200), 
	"CLOSEDBY_DATE" TIMESTAMP (6), 
	"PARTIAL_REG_BLOCK" CHAR(1 BYTE) DEFAULT '1'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_BALANCES_HISTORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_BALANCES_HISTORY" 
   (	"ACCOUNT_ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"ACCOUNT_NAME" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"ACCOUNT_CLASS" NVARCHAR2(10), 
	"ALLOW_DR" CHAR(1 BYTE) DEFAULT 1, 
	"ALLOW_CR" CHAR(1 BYTE) DEFAULT 1, 
	"BLOCKED" CHAR(1 BYTE) DEFAULT 0, 
	"STOPPED" CHAR(1 BYTE) DEFAULT 0, 
	"DORMANT" CHAR(1 BYTE) DEFAULT 0, 
	"OPENING_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ARCHIVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"TODAY_DR" NUMBER(18,5) DEFAULT 0, 
	"TODAY_CR" NUMBER(18,5) DEFAULT 0, 
	"ACTUAL_BAL" NUMBER(18,5) DEFAULT 0, 
	"AVAILABLE_BAL" NUMBER(18,5) DEFAULT 0, 
	"BLOCKED_AMOUNT" NUMBER(18,5) DEFAULT 0, 
	"DR_DATE" TIMESTAMP (6), 
	"CR_DATE" TIMESTAMP (6), 
	"LAST_TRANSACTION_DATE" TIMESTAMP (6), 
	"PHONE_NUMBER" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_BALANCE_SNAPSHOT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_BALANCE_SNAPSHOT" 
   (	"ACCOUNT_ID" NUMBER, 
	"BRANCH_ID" NUMBER(*,0) DEFAULT 1, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"ACCOUNT_NAME" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5) DEFAULT 'KES', 
	"ACCOUNT_CLASS" NVARCHAR2(10), 
	"ALLOW_DR" CHAR(1 BYTE) DEFAULT 1, 
	"ALLOW_CR" CHAR(1 BYTE) DEFAULT 1, 
	"BLOCKED" CHAR(1 BYTE) DEFAULT 0, 
	"STOPPED" CHAR(1 BYTE) DEFAULT 0, 
	"DORMANT" CHAR(1 BYTE) DEFAULT 0, 
	"OPENING_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHEQUE_BOOK_FACILITY" CHAR(1 BYTE), 
	"ATM_FACILITY" CHAR(1 BYTE) DEFAULT 0, 
	"IS_FROZEN" CHAR(1 BYTE) DEFAULT 0, 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"OPENING_BAL" NUMBER(18,5), 
	"TODAY_DR" NUMBER(18,5) DEFAULT 0, 
	"TODAY_CR" NUMBER(18,5) DEFAULT 0, 
	"ACTUAL_BAL" NUMBER(18,5) DEFAULT 0, 
	"AVAILABLE_BAL" NUMBER(18,5) DEFAULT 0, 
	"BLOCKED_AMOUNT" NUMBER(18,5) DEFAULT 0, 
	"DR_DATE" TIMESTAMP (6), 
	"CR_DATE" TIMESTAMP (6), 
	"DORMANCY_DATE" TIMESTAMP (6), 
	"MIN_BALANCE" NUMBER(18,5), 
	"MATURITY_DATE" TIMESTAMP (6), 
	"INTEREST_RATE" NUMBER(18,2), 
	"EOD_PROCESSED" CHAR(1 BYTE), 
	"NEXT_PROCESSING_DATE" TIMESTAMP (6), 
	"LAST_TRANSACTION_DATE" TIMESTAMP (6), 
	"PHONE_NUMBER" NVARCHAR2(50), 
	"PARTIAL_REGISTRATION" CHAR(1 BYTE) DEFAULT 0, 
	"PARTIAL_DORMANT" CHAR(1 BYTE) DEFAULT 0, 
	"PARTIAL_DORMANT_DATE" TIMESTAMP (6), 
	"ALLOW_OVERDRAFT" CHAR(1 BYTE) DEFAULT 0, 
	"WITHDRAWAL_COUNT" NUMBER(10,0), 
	"ISCLOSED" CHAR(1 BYTE) DEFAULT 0, 
	"CLOSED_BY" CHAR(1 BYTE), 
	"CLOSED_MAKER_REMARKS" NVARCHAR2(200), 
	"CLOSED_APPROVED_BY" NVARCHAR2(50), 
	"CLOSED_CHECKER_REMARKS" NVARCHAR2(200), 
	"CLOSEDBY_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_MANDATE_ROLE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_MANDATE_ROLE" 
   (	"ID" NUMBER, 
	"ROLECODE" NVARCHAR2(20), 
	"ROLENAME" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_MANDATE_STAGING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_MANDATE_STAGING" 
   (	"ID" NUMBER(7,0), 
	"INITIATOR" NVARCHAR2(50), 
	"APPROVER" NVARCHAR2(50), 
	"REQUEST_DATE" TIMESTAMP (6), 
	"ACCOUNT_NUMBER_FROM" NVARCHAR2(50), 
	"RECIPIENT_ACCOUNT" NVARCHAR2(50), 
	"TXN_TYPE" NVARCHAR2(50), 
	"AMOUNT" NUMBER(18,5), 
	"ORIGINAL_MESSAGE" NVARCHAR2(100), 
	"AUTH_CODE" NVARCHAR2(50), 
	"APPROVED" NUMBER(5,0), 
	"APPROVED_DATE" TIMESTAMP (6), 
	"EXPIRED" NUMBER(5,0), 
	"REJECTED" NUMBER(5,0), 
	"REJECTED_BY" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ACCOUNT_STATUS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ACCOUNT_STATUS" 
   (	"ID" NUMBER, 
	"STATUSCODE" NUMBER(*,0), 
	"DESCRIPTION" NVARCHAR2(100)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AD_USER_REPOSITORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AD_USER_REPOSITORY" 
   (	"ID" NUMBER, 
	"USER_NAME" NVARCHAR2(50), 
	"FULL_NAME" NVARCHAR2(100), 
	"FIRST_NAME" NVARCHAR2(100), 
	"SECOND_NAME" NVARCHAR2(100), 
	"LAST_NAME" NVARCHAR2(100), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"ORGANISANAL_UNIT" NVARCHAR2(50), 
	"DEPARTMENT" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"LAST_UPDATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENCY_NETWORK
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENCY_NETWORK" 
   (	"ID" NUMBER, 
	"AGENCY_CODE" NVARCHAR2(50), 
	"AGENCY_NETWORK_NAME" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"STATUS" NUMBER(1,0), 
	"REMARKS" NVARCHAR2(200), 
	"REWORKER_REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"SESSIONID" NVARCHAR2(50), 
	"BANK_CODE" NVARCHAR2(50), 
	"AGENT_CODE" NVARCHAR2(50), 
	"LOGIN_ID" NVARCHAR2(50), 
	"TERMINAL_ID" NVARCHAR2(50), 
	"AGENT_CODE_ALIAS" NVARCHAR2(50), 
	"TERMINAL_ID_ALIAS" NVARCHAR2(50), 
	"PIN" NVARCHAR2(50), 
	"EMAIL" NVARCHAR2(50), 
	"CONTACT_PHONE" NVARCHAR2(20), 
	"FLOATACCOUNT" NVARCHAR2(20), 
	"AC_ADDED" NUMBER(1,0), 
	"AC_ADDED_BY" NVARCHAR2(50), 
	"AC_ADDED_ON" TIMESTAMP (6), 
	"AC_ADDED_REMARKS" NVARCHAR2(200), 
	"AC_APPROVED" NUMBER(1,0), 
	"AC_APPROVED_BY" NVARCHAR2(50), 
	"AC_APPROVED_ON" TIMESTAMP (6), 
	"AC_CHECKER_REMARKS" NVARCHAR2(200), 
	"AC_REWORKED" NUMBER(1,0), 
	"AC_REWORKED_BY" NVARCHAR2(50), 
	"AC_REWORKED_ON" TIMESTAMP (6), 
	"AC_REWORKER_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENTS" 
   (	"ID" NUMBER, 
	"AGENT_NAMES" NVARCHAR2(100), 
	"DOB" DATE, 
	"LOCATION" NVARCHAR2(100), 
	"DETAILS" NVARCHAR2(100), 
	"LIMIT" NUMBER(18,5) DEFAULT 0, 
	"APPROVED" NUMBER(1,0) DEFAULT 0, 
	"BUSINESS_NAME" NVARCHAR2(100), 
	"BANK_CODE" NVARCHAR2(20), 
	"EMAIL" NVARCHAR2(50), 
	"ID_TYPE" NUMBER, 
	"ID_NUMBER" NVARCHAR2(20), 
	"BUSINESSMOBILE" NVARCHAR2(20), 
	"REJECTED" NUMBER(1,0), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"REMARKS" NVARCHAR2(200), 
	"CHECKERREMARK" NVARCHAR2(200), 
	"FIRST_NAME" NVARCHAR2(50), 
	"SECOND_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DELETED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"CUSTOMER_NO" NVARCHAR2(50), 
	"SESSION_ID" NVARCHAR2(50), 
	"SUPER_AGENT" NVARCHAR2(50), 
	"REWORK_REMARKS" NVARCHAR2(200), 
	"REWORKED_ON" TIMESTAMP (6), 
	"FIRST_LOGIN" NUMBER(1,0), 
	"POSTAL_ADDRESS" NVARCHAR2(50), 
	"REFEREES_CONTACTS" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"BUSINESS_CATEGORY" NVARCHAR2(50), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"ID_MODE" NVARCHAR2(50), 
	"DEVICE_ATTACHED" NUMBER(1,0), 
	"USER_TYPE" NVARCHAR2(50), 
	"ACTIVE" NUMBER(1,0), 
	"RESET_BY" NVARCHAR2(50), 
	"RESET_DATE" TIMESTAMP (6), 
	"AGENT_TYPE" NVARCHAR2(50), 
	"DEACTIVATE" NUMBER(1,0), 
	"COUNTY" NVARCHAR2(50), 
	"SUB_COUNTY" NVARCHAR2(50), 
	"STREET" NVARCHAR2(50), 
	"WARD" NVARCHAR2(50), 
	"AGENCY_EXPERIENCE" NVARCHAR2(50), 
	"CITY" NVARCHAR2(50), 
	"REGISTRATION_ID" NVARCHAR2(50), 
	"BUSINESS_REG_NUMBER" NVARCHAR2(50), 
	"CONTACT_MOBILE_NUMBER" NVARCHAR2(20), 
	"PASSPORT" NVARCHAR2(50), 
	"ID_BACK" NVARCHAR2(50), 
	"ID_FRONT" NVARCHAR2(50), 
	"FORM_IMAGE" NVARCHAR2(50), 
	"COMMISSION_ACCOUNT" NVARCHAR2(50), 
	"COMMISSION_BANK" NVARCHAR2(50), 
	"BRANCH" NVARCHAR2(50), 
	"BUSINESS_ENTITY" NUMBER(1,0), 
	"KIOSK" NVARCHAR2(50), 
	"GENDER" NVARCHAR2(10), 
	"AGENT_CODE" NVARCHAR2(20), 
	"PASS_KEY" NVARCHAR2(100), 
	"LOGIN_TRIALS" NUMBER(11,0) DEFAULT 0, 
	"QR_CODE_IMG" VARCHAR2(2000 BYTE), 
	"PAN" NVARCHAR2(50), 
	"CATEGORY_ID" NVARCHAR2(20), 
	"BLOCKED" CHAR(1 BYTE), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCK_REMARKS" NVARCHAR2(200), 
	"BLOCKED_BY" NVARCHAR2(20), 
	"COLUMN2" VARCHAR2(20 BYTE), 
	"AGENT_CODE_ALIAS" NVARCHAR2(50), 
	"AGENT_REF" NVARCHAR2(20), 
	"AGENT_REF_TYPE" NVARCHAR2(20), 
	"BANK_NAME" NVARCHAR2(20), 
	"BANK_ACCOUNT_NUMBER" NVARCHAR2(20), 
	"BANK_ACCOUNT_ON_US" NVARCHAR2(20) DEFAULT 1, 
	"API_URL" NVARCHAR2(500), 
	"NATURE_OF_BUSINESS" VARCHAR2(100 BYTE), 
	"CONTACT_NAME" VARCHAR2(100 BYTE), 
	"REGION" VARCHAR2(100 BYTE), 
	"ACCOUNT_NAME" VARCHAR2(100 BYTE), 
	"LIQUIDATION_TYPE" VARCHAR2(50 BYTE), 
	"LIQUIDATION_RATE" NUMBER(18,5), 
	"LIQUIDATION_FREQUENCY" VARCHAR2(20 BYTE), 
	"SALES_PERSON_NAME" VARCHAR2(50 BYTE), 
	"TOKEN" VARCHAR2(500 BYTE), 
	"SENT_TO_FINACLE" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENT_CATEGORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENT_CATEGORY" 
   (	"ID" NUMBER, 
	"CATEGORY_DESCRIPTION" NVARCHAR2(50), 
	"FLOAT_THRESHOLD" NUMBER DEFAULT 0, 
	"FLOAT_FROM" NUMBER DEFAULT 0, 
	"FLOAT_TO" NUMBER DEFAULT 0, 
	"NO_OF_AGENTS_FROM" NUMBER DEFAULT 0, 
	"NO_OF_AGENTS_TO" VARCHAR2(20 BYTE) DEFAULT 0, 
	"NO_OF_REGIONS_FROM" NUMBER DEFAULT 0, 
	"NO_OF_REGIONS_TO" NUMBER DEFAULT 0, 
	"COMMISSION" NUMBER DEFAULT 0, 
	"COMMISSION_PAYMENT_INTERVAL" NUMBER DEFAULT 0, 
	"REMARKS" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENT_DEVICELINKING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENT_DEVICELINKING" 
   (	"ID" NUMBER, 
	"DEVICE_IMEI" NVARCHAR2(50), 
	"DEVICE_MOBILE" NVARCHAR2(20), 
	"POS_ID" NVARCHAR2(20), 
	"PIN" VARCHAR2(2000 BYTE), 
	"CREATEDBY" VARCHAR2(20 BYTE), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVEDBY" VARCHAR2(20 BYTE), 
	"APPROVEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER DEFAULT 1, 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETEDBY" VARCHAR2(20 BYTE), 
	"DELETEDON" TIMESTAMP (6), 
	"DECLINED" NUMBER DEFAULT 0, 
	"DECCLINEDBY" VARCHAR2(20 BYTE), 
	"DECLINEDON" TIMESTAMP (6), 
	"REMARKS" VARCHAR2(2000 BYTE), 
	"CHECKERREMARKS" VARCHAR2(2000 BYTE), 
	"FIRSTLOGIN" NUMBER(10,2) DEFAULT 1, 
	"DECLINEDDON" TIMESTAMP (6), 
	"DECLINEDBY" VARCHAR2(20 BYTE), 
	"AGENT_ID" NUMBER, 
	"ACTIVE" NUMBER DEFAULT 1, 
	"BLOCKTIME" TIMESTAMP (6) DEFAULT NULL, 
	"BLOCKREMARK" VARCHAR2(200 BYTE), 
	"DOMICILEBRANCH" NVARCHAR2(20) DEFAULT 001, 
	"LANG" VARCHAR2(20 BYTE) DEFAULT 'en', 
	"UNBLOCKAPPROVEDON" TIMESTAMP (6), 
	"UNBLOCKEDON" TIMESTAMP (6), 
	"UNBLOCKAPPROVEDBY" VARCHAR2(50 BYTE), 
	"UNBLOCKEDBY" VARCHAR2(50 BYTE), 
	"BLOCKREMARKS" VARCHAR2(200 BYTE), 
	"BLOCKEDBY" VARCHAR2(45 BYTE), 
	"IMSI" VARCHAR2(50 BYTE), 
	"IMSI_RESET" NUMBER DEFAULT 0, 
	"IMSI_RESET_BY" VARCHAR2(20 BYTE), 
	"IMSI_APPROVED_BY" VARCHAR2(20 BYTE), 
	"IMSI_RESET_REMARKS" VARCHAR2(255 BYTE), 
	"IMSI_RESETTING_BRANCH" VARCHAR2(50 BYTE), 
	"DELETE_APPROVEDBY" NVARCHAR2(100), 
	"MWALLET_ACCOUNT" NVARCHAR2(20), 
	"LOGIN_TRIALS" NUMBER DEFAULT 0, 
	"PASS_KEY" NVARCHAR2(500), 
	"BLOCKED" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENT_DEVICELINKING_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE" 
   (	"ID" NUMBER, 
	"DEVICE_IMEI" NVARCHAR2(50), 
	"DEVICE_MOBILE" NVARCHAR2(20), 
	"POS_ID" NVARCHAR2(20), 
	"PIN" VARCHAR2(2000 BYTE), 
	"CREATEDBY" VARCHAR2(20 BYTE), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVEDBY" VARCHAR2(20 BYTE), 
	"APPROVEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER DEFAULT 1, 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETEDBY" VARCHAR2(20 BYTE), 
	"DELETEDON" TIMESTAMP (6), 
	"DECLINED" NUMBER DEFAULT 0, 
	"DECCLINEDBY" VARCHAR2(20 BYTE), 
	"DECLINEDON" TIMESTAMP (6), 
	"REMARKS" VARCHAR2(2000 BYTE), 
	"CHECKERREMARKS" VARCHAR2(2000 BYTE), 
	"FIRSTLOGIN" NUMBER(10,2) DEFAULT 1, 
	"DECLINEDDON" TIMESTAMP (6), 
	"DECLINEDBY" VARCHAR2(20 BYTE), 
	"AGENT_ID" NUMBER, 
	"ACTIVE" NUMBER DEFAULT 1, 
	"BLOCKTIME" TIMESTAMP (6) DEFAULT NULL, 
	"BLOCKREMARK" VARCHAR2(200 BYTE), 
	"DOMICILEBRANCH" NVARCHAR2(20) DEFAULT 001, 
	"LANG" VARCHAR2(20 BYTE) DEFAULT 'en', 
	"UNBLOCKAPPROVEDON" TIMESTAMP (6), 
	"UNBLOCKEDON" TIMESTAMP (6), 
	"UNBLOCKAPPROVEDBY" VARCHAR2(50 BYTE), 
	"UNBLOCKEDBY" VARCHAR2(50 BYTE), 
	"BLOCKREMARKS" VARCHAR2(200 BYTE), 
	"BLOCKEDBY" VARCHAR2(45 BYTE), 
	"IMSI" VARCHAR2(50 BYTE), 
	"IMSI_RESET" NUMBER DEFAULT 0, 
	"IMSI_RESET_BY" VARCHAR2(20 BYTE), 
	"IMSI_APPROVED_BY" VARCHAR2(20 BYTE), 
	"IMSI_RESET_REMARKS" VARCHAR2(255 BYTE), 
	"IMSI_RESETTING_BRANCH" VARCHAR2(50 BYTE), 
	"DELETE_APPROVEDBY" NVARCHAR2(100), 
	"MWALLET_ACCOUNT" NVARCHAR2(20), 
	"PASS_KEY" NVARCHAR2(100), 
	"LOGIN_TRIALS" CHAR(1 BYTE) DEFAULT 0, 
	"BLOCKED" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENT_DEVICES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENT_DEVICES" 
   (	"ID" NUMBER, 
	"DEVICE_IMEI" NVARCHAR2(50), 
	"DEVICE_MOBILE_NUMBER" NVARCHAR2(20), 
	"AGENTID" NVARCHAR2(20), 
	"BANK_CODE" NVARCHAR2(20), 
	"AGENT_CATEGORY" NUMBER, 
	"AGENT_CODE" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORK_REMARKS" NVARCHAR2(200), 
	"BRANCH_CODE" NVARCHAR2(20), 
	"ASSIGNED" NUMBER(1,0) DEFAULT 0, 
	"DECLINED" NUMBER(1,0), 
	"DECLINED_ON" TIMESTAMP (6), 
	"DECLINED_BY" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"SESSION_ID" NVARCHAR2(50), 
	"AGENT_ID_NUMBER" NVARCHAR2(50), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"DEVICE_TYPE" NVARCHAR2(50), 
	"TERMINAL_ID" NVARCHAR2(50), 
	"PIN" NVARCHAR2(50), 
	"LINK_MAKER" NVARCHAR2(200), 
	"LINK_APPROVED" NUMBER(1,0), 
	"AGENT_NAMES" NVARCHAR2(50), 
	"USSD_MOBILE" NVARCHAR2(20), 
	"DATE_LINKED" TIMESTAMP (6), 
	"LINK_CHEKER" NVARCHAR2(50), 
	"DATE_LINK_CHEKED" TIMESTAMP (6), 
	"ACTIVE" NUMBER(1,0), 
	"LINK_CHEKER_REMARKS" NVARCHAR2(200), 
	"LINKED" NUMBER(1,0), 
	"TRIALS" NUMBER(1,0), 
	"LOGGED_IN" NUMBER(1,0), 
	"FIRST_LOGIN" NUMBER(1,0), 
	"PIN_MAKER" NVARCHAR2(50), 
	"RESET_PIN" NUMBER(1,0), 
	"RESET_BY" NVARCHAR2(50), 
	"RESET_ON" TIMESTAMP (6), 
	"DATE_PIN_REQ" NVARCHAR2(50), 
	"OLD_TERMINAL_ID" NVARCHAR2(50), 
	"HASH" NVARCHAR2(100), 
	"FLOATACCOUNT" NVARCHAR2(50), 
	"LOCATION" NVARCHAR2(50), 
	"DEVICEID" NVARCHAR2(50), 
	"SIMCARD_IP_ADDRESS" NVARCHAR2(50), 
	"SIMCARD_PHONE_NUMBER" NVARCHAR2(20), 
	"SIMCARD2_IP_ADDRESS" NVARCHAR2(50), 
	"SIMCARD2_PHONE_NUMBER" NVARCHAR2(20), 
	"DEVICEIMEI2" NVARCHAR2(50), 
	"PHONE_IMEI" NVARCHAR2(50), 
	"USSDIMSI" NVARCHAR2(50), 
	"DELINKED" NUMBER(1,0), 
	"DELINKED_ON" TIMESTAMP (6), 
	"DELINKED_BY" NVARCHAR2(50), 
	"DELINK_APPROVED" NUMBER(1,0), 
	"DELINK_APPROVED_ON" TIMESTAMP (6), 
	"DELINK_APPROVED_BY" NVARCHAR2(50), 
	"AUTHENTICATION_CODE" NVARCHAR2(50), 
	"LANG" NVARCHAR2(10), 
	"GENDER" NVARCHAR2(10), 
	"USSD_PINBLOCK" NUMBER(1,0), 
	"USSD_PINBLOCK_DATE" TIMESTAMP (6), 
	"USSD_PINBLOCK_BY" NVARCHAR2(50), 
	"USSD_CUSTOMER_STATUS" NVARCHAR2(50), 
	"OUTLET" NVARCHAR2(50), 
	"TERMINAL_ID_ALIAS" NVARCHAR2(50), 
	"DEVICE_MODEL" NVARCHAR2(50), 
	"LOGIN_ID" NVARCHAR2(50), 
	"PIN_ALIAS" NVARCHAR2(50), 
	"AGENTCODE_ALIAS" NVARCHAR2(50), 
	"ASSIGNED_TO" NVARCHAR2(50), 
	"BLOCKED" NUMBER(1,0), 
	"BLOCKED_BY" NVARCHAR2(50), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCKED_REASON" NVARCHAR2(200), 
	"UNBLOCKED" NUMBER(1,0), 
	"UNBLOCKED_BY" NVARCHAR2(50), 
	"UNBLOCKED_ON" TIMESTAMP (6), 
	"UNBLOCKED_REASON" NVARCHAR2(200), 
	"DORMANT" NUMBER(1,0), 
	"LAST_WORKING_DATE" TIMESTAMP (6), 
	"OPERATOR_PHONE" NVARCHAR2(20), 
	"OPERATOR_NAME" NVARCHAR2(100), 
	"OPERATOR_DOB" DATE, 
	"OPERATOR_IDNUMBER" NVARCHAR2(20), 
	"OPERATOR_EMAIL" NVARCHAR2(50), 
	"PHYSICAL_ADDRESS" NVARCHAR2(100), 
	"LATITUDE" NUMBER(18,5), 
	"LONGITUDE" NUMBER(18,5), 
	"LOGIN_COUNTER" NUMBER, 
	"MIN_THRESHOLD" NUMBER(18,5), 
	"MAX_THRESHOLD" NUMBER(18,5), 
	"IS_VIRTUAL" NUMBER(1,0), 
	"VIRTUAL_COMM_ACCOUNT" NVARCHAR2(50), 
	"LAST_TRANSACTED_DATE" TIMESTAMP (6), 
	"CR_LIMIT_DAILY" NUMBER(18,5), 
	"DR_LIMIT_DAILY" NUMBER(18,5), 
	"TODAY_DRCR" NUMBER(18,5), 
	"STATIC_CR_LIMIT_DAILY" NUMBER(18,5), 
	"STATIC_DR_LIMIT_DAILY" NUMBER(18,5), 
	"IS_STATIC" NUMBER(1,0), 
	"TODAY_DR" NUMBER(18,5), 
	"TODAY_CR" NUMBER(18,5), 
	"APP_VERSION" NVARCHAR2(50), 
	"MASTER_AGENT_ID" NVARCHAR2(50), 
	"BANK_BRANCH" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGENT_HIERARCHY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGENT_HIERARCHY" 
   (	"ID" NUMBER, 
	"AGENT_CATEGORY" NVARCHAR2(50), 
	"FLOAT_FROM" NUMBER(18,5), 
	"FLOAT_TO" NUMBER(18,5), 
	"AGENT_NUMBER_FROM" NUMBER, 
	"AGENT_NUMBER_TO" NUMBER, 
	"REGIONS_FROM" NUMBER, 
	"REGIONS_TO" NUMBER, 
	"FLOAT_THRESHOLD" NUMBER(18,5), 
	"COMMISSION" NUMBER(18,5), 
	"COMM_PAYMENT_INTERVALS" NVARCHAR2(50), 
	"ADDED_BY" NVARCHAR2(50), 
	"ADDED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"REMARKS" NVARCHAR2(200), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKER_REMARKS" NVARCHAR2(200), 
	"SESSION_ID" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGGREGATED_C2B_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGGREGATED_C2B_REQUESTS" 
   (	"ID" NUMBER(7,0), 
	"DATE_RECIEVED" TIMESTAMP (6), 
	"STAGE" NVARCHAR2(50), 
	"TXN_TYPE" NVARCHAR2(50), 
	"PAYLOAD" NVARCHAR2(50), 
	"MSISDN" NVARCHAR2(50), 
	"NAMES" NVARCHAR2(50), 
	"RESPONSE_TOPG" NVARCHAR2(50), 
	"DATE_UPDATED" TIMESTAMP (6), 
	"RESPONSE_STATUS" NVARCHAR2(50), 
	"DATE_ADDED" TIMESTAMP (6), 
	"AMOUNT" NVARCHAR2(50), 
	"BUSINESS_SHORT_CODE" NVARCHAR2(50), 
	"TIME_STAMP" NVARCHAR2(50), 
	"MPESA_REF" NVARCHAR2(50), 
	"ESB_REF" NVARCHAR2(50), 
	"THEIR_REF" NVARCHAR2(50), 
	"BILLREFNUMBER" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGGREGATED_PAYBILL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGGREGATED_PAYBILL" 
   (	"ID" NUMBER, 
	"AGGRIGATED_PAYBILL_NUMBER" NVARCHAR2(50), 
	"ORGANIZATION_NAME" NVARCHAR2(200), 
	"PAYBILL_NUMBER" NVARCHAR2(50), 
	"BRANCH_NAME" NVARCHAR2(50), 
	"MAPPED_ACCOUNT_NUMBER" NVARCHAR2(50), 
	"UPLOADED_FILE" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0), 
	"CLOSED_BY" NVARCHAR2(50), 
	"CLOSED_ON" TIMESTAMP (6), 
	"CLOSE_REMARK" NVARCHAR2(200), 
	"APPROVE_CLOSE_BY" NVARCHAR2(50), 
	"APPROVE_CLOSE_ON" TIMESTAMP (6), 
	"APPROVE_CLOSE_REMARK" NVARCHAR2(200), 
	"REGISTERED2PG" NUMBER(1,0), 
	"REGISTERED2PG_BY" NVARCHAR2(50), 
	"REGISTERED2PG_ON" TIMESTAMP (6), 
	"REGISTER2PG_RESP" NVARCHAR2(200), 
	"REGISTER2PG_RESPCODE" NVARCHAR2(10), 
	"UPDATED2PG" NUMBER(1,0), 
	"UPDATE2PG_BY" NVARCHAR2(50), 
	"UPDATE2PG_ON" TIMESTAMP (6), 
	"UPDATE2PG_RESP" NVARCHAR2(100), 
	"UPDATE2PG_RESPCODE" NVARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGGREGATED_TILL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGGREGATED_TILL" 
   (	"ID" NUMBER, 
	"AGGRIGATED_TILL_NUMBER" NVARCHAR2(50), 
	"ORGANIZATION_NAME" NVARCHAR2(200), 
	"TILL_NUMBER" NVARCHAR2(50), 
	"BRANCH_NAME" NVARCHAR2(50), 
	"MAPPED_ACCOUNT_NUMBER" NVARCHAR2(50), 
	"UPLOADED_FILE" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0), 
	"CLOSED_BY" NVARCHAR2(50), 
	"CLOSED_ON" TIMESTAMP (6), 
	"CLOSE_REMARK" NVARCHAR2(200), 
	"APPROVE_CLOSE_BY" NVARCHAR2(50), 
	"APPROVE_CLOSE_ON" TIMESTAMP (6), 
	"APPROVE_CLOSE_REMARK" NVARCHAR2(200), 
	"REGISTERED2PG" NUMBER(1,0), 
	"REGISTERED2PG_BY" NVARCHAR2(50), 
	"REGISTERED2PG_ON" TIMESTAMP (6), 
	"REGISTER2PG_RESP" NVARCHAR2(200), 
	"REGISTER2PG_RESPCODE" NVARCHAR2(10), 
	"UPDATED2PG" NUMBER(1,0), 
	"UPDATE2PG_BY" NVARCHAR2(50), 
	"UPDATE2PG_ON" TIMESTAMP (6), 
	"UPDATE2PG_RESP" NVARCHAR2(100), 
	"UPDATE2PG_RESPCODE" NVARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AGG_C2B_TRANSACTION_STAGING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AGG_C2B_TRANSACTION_STAGING" 
   (	"ID" NUMBER(7,0), 
	"MNO" NVARCHAR2(50), 
	"MNO_REF" NVARCHAR2(50), 
	"ORIGINAL_REF" NVARCHAR2(50), 
	"BUSINESS_SHORT_CODE" NVARCHAR2(50), 
	"MSISDN" NVARCHAR2(50), 
	"NAMES" NVARCHAR2(50), 
	"TXN_TYPE" NVARCHAR2(50), 
	"CREDIT_AMOUNT" NVARCHAR2(50), 
	"AMOUNT" NVARCHAR2(50), 
	"ORIGINAL_MESSAGE" NVARCHAR2(50), 
	"STATUS" NVARCHAR2(50), 
	"STATUS_MESSAGE" NVARCHAR2(50), 
	"PROCESSED" NUMBER(5,0), 
	"REPOST_STATUS" NUMBER(5,0), 
	"REPOST_BY" NVARCHAR2(50), 
	"REPOST_ON" TIMESTAMP (6), 
	"REPOST_REMARK" NVARCHAR2(50), 
	"REPOST_APPROVED" CHAR(1 BYTE), 
	"REPOST_APPROVED_BY" NVARCHAR2(50), 
	"REPOST_APPROVED_O" TIMESTAMP (6), 
	"REPOST_APPROVE_REMARK" NVARCHAR2(100), 
	"REPOST_RESPONSE" NVARCHAR2(50), 
	"DATE_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_AUDIT_TRAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_AUDIT_TRAIL" 
   (	"ID" NUMBER, 
	"USER_NAME" NVARCHAR2(50), 
	"ACTIVEPAGE" NVARCHAR2(50), 
	"ACTIVITY" NVARCHAR2(50), 
	"CUSTOMER_ACCOUNT" NVARCHAR2(20), 
	"MODULE" NVARCHAR2(50), 
	"LOG_DATE" NVARCHAR2(50), 
	"LOG_TIME" NVARCHAR2(50), 
	"DATE_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHANNEL" NVARCHAR2(50), 
	"IP_ADDRESS" NVARCHAR2(50), 
	"WORKSTATION" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BANK
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BANK" 
   (	"ID" NUMBER, 
	"BANK_CODE" NVARCHAR2(20), 
	"SORT_CODE" NVARCHAR2(50), 
	"SWIFT_CODE" NVARCHAR2(50), 
	"BANK_NAME" NVARCHAR2(2000), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(20), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"SESSION_ID" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BANK_BRANCH
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BANK_BRANCH" 
   (	"ID" NUMBER, 
	"BANK_CODE" NVARCHAR2(50), 
	"BRANCH_CODE" NVARCHAR2(50), 
	"BRANCH_NAME" NVARCHAR2(500), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BENEFICIARY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BENEFICIARY" 
   (	"ID" NUMBER(19,0), 
	"MOBILE_NUMBER" NVARCHAR2(100), 
	"ACCOUNT_NUMBER" NVARCHAR2(100), 
	"BENEFICIARY_NAME" NVARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(100) DEFAULT 'SELF', 
	"FIELD100" NVARCHAR2(100), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BILLERS_MAPPINGS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BILLERS_MAPPINGS" 
   (	"ID" NUMBER, 
	"PROCODE" NVARCHAR2(10), 
	"FIELD100" NVARCHAR2(50), 
	"COLLECTION_GL" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(100), 
	"COUNTRY_CODE" NVARCHAR2(5), 
	"BILLER_CURRENCY" NVARCHAR2(5), 
	"ACTIVE" NUMBER(1,0), 
	"BILLER_STATUS" NUMBER(1,0), 
	"BILLER_CATEGORY" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"MAKER_REMARKS" NVARCHAR2(200), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BILLER_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BILLER_REQUESTS" 
   (	"ID" NUMBER, 
	"ESBREF" NVARCHAR2(50), 
	"DATE_CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AMOUNT" NUMBER(18,5), 
	"COMMISSION" NUMBER(18,5), 
	"PROCCODE" NVARCHAR2(50), 
	"SERVICE_ID" NVARCHAR2(50), 
	"BILLER_IDENTITY" NVARCHAR2(50), 
	"DATE_RESPONDED" TIMESTAMP (6), 
	"STATUS" NVARCHAR2(20), 
	"BILLER_STATUS" NVARCHAR2(100), 
	"BILLER_STATUS_DESC" NVARCHAR2(100), 
	"BILLER_RES_CODE" NVARCHAR2(20), 
	"BILLER_RESP" NVARCHAR2(100), 
	"BILLER_RESP_PAYLOAD" NVARCHAR2(2000), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"BILLER_ACCOUNT" NVARCHAR2(20), 
	"ORIGINAL_BILLER_REQUEST" VARCHAR2(4000 BYTE), 
	"PHONE_NO" NVARCHAR2(20), 
	"FIELD102" NVARCHAR2(20), 
	"PG_REQUEST_ID" NVARCHAR2(20), 
	"PG_BILLER_ACK_RESPONSE" NVARCHAR2(20), 
	"PG_BILLER_ACK_REQUESTID" NVARCHAR2(20), 
	"PG_BILLER_ACK_CLOUDPACKETID" NVARCHAR2(20), 
	"PG_BILLER_ACK_STATUS" NVARCHAR2(20), 
	"PG_BILLER_ACK_STATUS_DESC" NVARCHAR2(100), 
	"MPESA_NAME" NVARCHAR2(200), 
	"MPESA_REF" NVARCHAR2(20), 
	"THEIR_REF" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BLOCK_ACCOUNT_AMOUNT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"AMOUNT" NUMBER(18,5), 
	"WORKING_DATE" DATE, 
	"DATE_ADDED" TIMESTAMP (6), 
	"BLOCK_CODE" NVARCHAR2(50), 
	"BLOCKED_BY" NVARCHAR2(50), 
	"PROCESSED" CHAR(1 BYTE), 
	"PROCESSED_ON" TIMESTAMP (6), 
	"LEVEL1APPROVED" CHAR(1 BYTE), 
	"LEVEL1APPROVEDBY" NVARCHAR2(50), 
	"LEVEL1APPROVEDON" TIMESTAMP (6), 
	"LEVEL1REMARKS" NVARCHAR2(100), 
	"ISCANCELLED" CHAR(1 BYTE), 
	"ISCANCELLEDBY" NVARCHAR2(50), 
	"ISCANCELLEDON" TIMESTAMP (6), 
	"NARRATION" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BLOCK_REASON
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BLOCK_REASON" 
   (	"ID" NUMBER, 
	"BLOCKCODE" NVARCHAR2(10), 
	"BLOCKREASON" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BRANCH
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BRANCH" 
   (	"ID" NUMBER, 
	"BRANCH_CODE" NVARCHAR2(20), 
	"BRANCH_NAME" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BUFFER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BUFFER" 
   (	"ID" NUMBER, 
	"ITEM_VALUE" NVARCHAR2(2000), 
	"TABLE_NAME" NVARCHAR2(50), 
	"DATE_CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"BRANCH_ID" NVARCHAR2(50), 
	"IP_ADDRESS" NVARCHAR2(50), 
	"MAKER" NVARCHAR2(50), 
	"SESSION_ID" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_BULK_PAYMENTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_BULK_PAYMENTS" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,5), 
	"APPROVED" NUMBER(1,0), 
	"POSTED" NUMBER(1,0), 
	"TRIALS" NUMBER(2,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"BATCH_NUMBER" NVARCHAR2(20), 
	"DECLINED" NUMBER(1,0), 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"ACCOUNT_EXIST" NUMBER(1,0), 
	"DOMICILE_BRANCH" NVARCHAR2(20), 
	"VALID_BATCH" NUMBER(1,0), 
	"INSTITUTION_ID" NVARCHAR2(20), 
	"TXN_TYPE" NVARCHAR2(20), 
	"NARRATION" NVARCHAR2(200), 
	"CHARGE_AMT" NUMBER(18,5), 
	"OTHER_STATUS" NUMBER(1,0), 
	"FIELD37" NVARCHAR2(20), 
	"STATUS" NVARCHAR2(20), 
	"FIELD48" NVARCHAR2(200), 
	"POSTED_TO_ESB" NUMBER(1,0), 
	"PAYMENT_FREQUENCY" NVARCHAR2(20), 
	"IS_SALARY" NUMBER(1,0), 
	"PAYDAY" DATE, 
	"APPROVED_LEVEL1" NUMBER(1,0), 
	"APPROVED_LEVEL1BY" NVARCHAR2(50), 
	"APPROVED_LEVEL1ON" TIMESTAMP (6), 
	"VERIFIED" NUMBER(1,0), 
	"REQUEST_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_C2B_TRANSACTION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_C2B_TRANSACTION" 
   (	"ID" NUMBER, 
	"MSISDN" NVARCHAR2(20), 
	"TELCO_NAME" NVARCHAR2(20), 
	"FIRSTNAME" NVARCHAR2(100), 
	"MIDDLENAME" NVARCHAR2(100), 
	"LASTNAME" NVARCHAR2(100), 
	"TRANSID" NVARCHAR2(50), 
	"BILLREFNUMBER" NVARCHAR2(50), 
	"ESB_REF" NVARCHAR2(50), 
	"FIELD39" NVARCHAR2(10), 
	"FIELD48" NVARCHAR2(50), 
	"THEIR_REF" NVARCHAR2(50), 
	"TRANSAMOUNT" NUMBER(18,5), 
	"TRANSTIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"TRANSACTIONTYPE" NVARCHAR2(50), 
	"BUSINESSSHORTCODE" NVARCHAR2(50), 
	"ORGACCOUNTBALANCE" NVARCHAR2(50), 
	"THIRDPARTYTRANSID" NVARCHAR2(50), 
	"INVOICENUMBER" NVARCHAR2(50), 
	"STAGE" NVARCHAR2(50), 
	"TXNTYPE" NVARCHAR2(50), 
	"C2B_REQUEST" NVARCHAR2(500), 
	"MPESAPAYLOAD" NVARCHAR2(500), 
	"RESPONSE_TOPG" NVARCHAR2(500), 
	"RESPONSE_STATUS" NVARCHAR2(10), 
	"DATE_RECEIVED" TIMESTAMP (6), 
	"DATE_ADDED" TIMESTAMP (6), 
	"DATE_UPDATED" TIMESTAMP (6), 
	"CLIENT_IP" NVARCHAR2(50), 
	"REQUEST_HEADERS" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CAPTURED_ERRORS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CAPTURED_ERRORS" 
   (	"ID" NUMBER, 
	"ERROR_CODE" NVARCHAR2(20), 
	"ERROR_NARRATION" NVARCHAR2(50), 
	"ERROR_SOURCE" NVARCHAR2(50), 
	"ERROR_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"NARRATION" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CARDLESS_TRANSACTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CARDLESS_TRANSACTIONS" 
   (	"ID" NUMBER(20,0), 
	"FIELD37" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,2), 
	"TOKEN_HASH" NVARCHAR2(500), 
	"TRANSACTION_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CASHED_OUT" CHAR(1 BYTE) DEFAULT '0', 
	"EXPIRED" CHAR(1 BYTE) DEFAULT '0', 
	"EXPIRY_DATE" NVARCHAR2(30), 
	"CASHOUT_DATED" NVARCHAR2(20), 
	"REVERSED" CHAR(1 BYTE) DEFAULT '0', 
	"CASHOUT_REF" NVARCHAR2(50), 
	"REVERSAL_ERROR" NVARCHAR2(100), 
	"POST_MINI_VERIFICATION" CHAR(1 BYTE) DEFAULT '0', 
	"TRX_CHARGE" NUMBER(18,0) DEFAULT 0, 
	"CASHED_OUT_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CARDLESS_TRANSACTIONS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CARDLESS_TRANSACTIONS_ARCHIVE" 
   (	"ID" NUMBER(20,0), 
	"FIELD37" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,2), 
	"TOKEN_HASH" NVARCHAR2(500), 
	"TRANSACTION_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CASHED_OUT" CHAR(1 BYTE) DEFAULT '0', 
	"EXPIRED" CHAR(1 BYTE) DEFAULT '0', 
	"EXPIRY_DATE" NVARCHAR2(30), 
	"CASHOUT_DATED" NVARCHAR2(20), 
	"REVERSED" CHAR(1 BYTE) DEFAULT '0', 
	"CASHOUT_REF" NVARCHAR2(50), 
	"REVERSAL_ERROR" NVARCHAR2(100), 
	"POST_MINI_VERIFICATION" CHAR(1 BYTE) DEFAULT '0', 
	"TRX_CHARGE" NUMBER(18,0) DEFAULT 0, 
	"CASHED_OUT_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CARD_LINKING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CARD_LINKING" 
   (	"ID" NUMBER, 
	"CARD_NUMBER" NVARCHAR2(50), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CARD_EXP_DATE" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"TOKEN_HASH" VARCHAR2(100 BYTE), 
	"CVV" VARCHAR2(5 BYTE), 
	"TOKEN_HASH_1" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TOKEN_HASH_1") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TB_CARD_TRANSACTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CARD_TRANSACTIONS" 
   (	"ID" NUMBER, 
	"FIELD37" VARCHAR2(50 BYTE), 
	"FIELD100" VARCHAR2(50 BYTE), 
	"PAYLOAD" CLOB, 
	"CARD_NUMBER" NVARCHAR2(20), 
	"TRIALS" NUMBER(18,0) DEFAULT 0, 
	"RESPONSE_CODE" NVARCHAR2(20), 
	"STATUS" NUMBER DEFAULT 0, 
	"RESPONSE_PAYLOAD" CLOB, 
	"CALLBACK_REQUEST" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("PAYLOAD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("RESPONSE_PAYLOAD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table TB_CBS_PRODUCTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CBS_PRODUCTS" 
   (	"ID" NUMBER, 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"PRODUCT_NAME" NVARCHAR2(50), 
	"PRODUCT_DESCRIPTION" NVARCHAR2(50), 
	"MIN_OPENING_BALANCE" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHANNELS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHANNELS" 
   (	"ID" NUMBER, 
	"CHANNEL" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"CHARGE_CHANNEL" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHANNEL_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHANNEL_REQUESTS" 
   (	"ID" NUMBER, 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"MSG_TYPE" NVARCHAR2(20), 
	"REQUEST_STATUS" NVARCHAR2(20), 
	"TIME_STAMP" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHANNEL_TRANSACTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHANNEL_TRANSACTIONS" 
   (	"ID" NUMBER, 
	"FIELD0" NVARCHAR2(10), 
	"FIELD1" NVARCHAR2(10), 
	"FIELD2" NVARCHAR2(20), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD4" NUMBER(18,5), 
	"FIELD5" NVARCHAR2(20), 
	"FIELD6" NVARCHAR2(20), 
	"FIELD7" NVARCHAR2(20), 
	"FIELD8" NVARCHAR2(20), 
	"FIELD9" NVARCHAR2(20), 
	"FIELD10" NVARCHAR2(20), 
	"FIELD11" NVARCHAR2(20), 
	"FIELD12" NVARCHAR2(20), 
	"FIELD13" NVARCHAR2(20), 
	"FIELD14" NVARCHAR2(20), 
	"FIELD15" NVARCHAR2(20), 
	"FIELD16" NVARCHAR2(20), 
	"FIELD17" NVARCHAR2(20), 
	"FIELD18" NVARCHAR2(20), 
	"FIELD19" NVARCHAR2(20), 
	"FIELD20" NVARCHAR2(20), 
	"FIELD21" NVARCHAR2(20), 
	"FIELD22" NVARCHAR2(20), 
	"FIELD23" NVARCHAR2(20), 
	"FIELD24" NVARCHAR2(20), 
	"FIELD25" NVARCHAR2(20), 
	"FIELD26" NVARCHAR2(20), 
	"FIELD27" NVARCHAR2(20), 
	"FIELD28" NVARCHAR2(20), 
	"FIELD29" NVARCHAR2(20), 
	"FIELD30" NVARCHAR2(20), 
	"FIELD31" NVARCHAR2(20), 
	"FIELD32" NVARCHAR2(20), 
	"FIELD33" NVARCHAR2(50), 
	"FIELD34" NVARCHAR2(50), 
	"FIELD35" NVARCHAR2(50), 
	"FIELD36" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(20), 
	"FIELD38" NVARCHAR2(50), 
	"FIELD39" NVARCHAR2(20), 
	"FIELD40" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"FIELD43" NVARCHAR2(50), 
	"FIELD44" NVARCHAR2(50), 
	"FIELD45" NVARCHAR2(50), 
	"FIELD46" NVARCHAR2(50), 
	"FIELD47" NVARCHAR2(50), 
	"FIELD48" NVARCHAR2(100), 
	"FIELD49" NVARCHAR2(20), 
	"FIELD50" NVARCHAR2(50), 
	"FIELD51" NVARCHAR2(50), 
	"FIELD52" NVARCHAR2(50), 
	"FIELD53" NVARCHAR2(50), 
	"FIELD54" NVARCHAR2(50), 
	"FIELD55" NVARCHAR2(50), 
	"FIELD56" NVARCHAR2(50), 
	"FIELD57" NVARCHAR2(50), 
	"FIELD58" NVARCHAR2(50), 
	"FIELD59" NVARCHAR2(50), 
	"FIELD60" NVARCHAR2(50), 
	"FIELD61" NVARCHAR2(50), 
	"FIELD62" NVARCHAR2(50), 
	"FIELD63" NVARCHAR2(50), 
	"FIELD64" NVARCHAR2(50), 
	"FIELD65" NVARCHAR2(50), 
	"FIELD66" NVARCHAR2(50), 
	"FIELD67" NVARCHAR2(50), 
	"FIELD68" NVARCHAR2(50), 
	"FIELD69" NVARCHAR2(50), 
	"FIELD70" NVARCHAR2(50), 
	"FIELD71" NVARCHAR2(50), 
	"FIELD72" NVARCHAR2(50), 
	"FIELD73" NVARCHAR2(50), 
	"FIELD74" NVARCHAR2(50), 
	"FIELD75" NVARCHAR2(50), 
	"FIELD76" NVARCHAR2(50), 
	"FIELD77" NVARCHAR2(50), 
	"FIELD78" NVARCHAR2(50), 
	"FIELD79" NVARCHAR2(50), 
	"FIELD80" NVARCHAR2(50), 
	"FIELD81" NVARCHAR2(50), 
	"FIELD82" NVARCHAR2(50), 
	"FIELD83" NVARCHAR2(50), 
	"FIELD84" NVARCHAR2(50), 
	"FIELD85" NVARCHAR2(50), 
	"FIELD86" NVARCHAR2(50), 
	"FIELD87" NVARCHAR2(50), 
	"FIELD88" NVARCHAR2(50), 
	"FIELD89" NVARCHAR2(50), 
	"FIELD90" NVARCHAR2(50), 
	"FIELD91" NVARCHAR2(50), 
	"FIELD92" NVARCHAR2(50), 
	"FIELD93" NVARCHAR2(50), 
	"FIELD94" NVARCHAR2(50), 
	"FIELD95" NVARCHAR2(50), 
	"FIELD96" NVARCHAR2(50), 
	"FIELD97" NVARCHAR2(50), 
	"FIELD98" NVARCHAR2(50), 
	"FIELD99" NVARCHAR2(50), 
	"FIELD100" NVARCHAR2(50), 
	"FIELD101" NVARCHAR2(50), 
	"FIELD102" NVARCHAR2(50), 
	"FIELD103" NVARCHAR2(50), 
	"FIELD104" NVARCHAR2(50), 
	"FIELD105" NVARCHAR2(50), 
	"FIELD106" NVARCHAR2(50), 
	"FIELD107" NVARCHAR2(50), 
	"FIELD108" NVARCHAR2(50), 
	"FIELD109" NVARCHAR2(50), 
	"FIELD110" NVARCHAR2(50), 
	"FIELD111" NVARCHAR2(50), 
	"FIELD112" NVARCHAR2(50), 
	"FIELD113" NVARCHAR2(50), 
	"FIELD114" NVARCHAR2(50), 
	"FIELD115" NVARCHAR2(50), 
	"FIELD116" NVARCHAR2(50), 
	"FIELD117" NVARCHAR2(50), 
	"FIELD118" NVARCHAR2(50), 
	"FIELD119" NVARCHAR2(50), 
	"FIELD120" NVARCHAR2(50), 
	"FIELD121" NVARCHAR2(50), 
	"FIELD122" NVARCHAR2(50), 
	"FIELD123" NVARCHAR2(50), 
	"FIELD124" NVARCHAR2(50), 
	"FIELD125" NVARCHAR2(50), 
	"FIELD126" NVARCHAR2(200), 
	"FIELD127" NVARCHAR2(200), 
	"FIELD128" NVARCHAR2(50), 
	"TRANDATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHARGES_GL_MAPPING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHARGES_GL_MAPPING" 
   (	"ID" NUMBER(38,0), 
	"PROCODE" NVARCHAR2(20), 
	"TXNIDENTIFIER" NVARCHAR2(50), 
	"MWALLETCONTRA" NVARCHAR2(50), 
	"CBS_GL_DR" NVARCHAR2(20), 
	"CBS_GL_CR" NVARCHAR2(20), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" VARCHAR2(20 BYTE), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVEDON" TIMESTAMP (6), 
	"APPROVEDBY" VARCHAR2(50 BYTE), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKEDBY" NVARCHAR2(20), 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETEDBY" VARCHAR2(20 BYTE), 
	"DECLINED" NUMBER DEFAULT 0, 
	"REMARKS" VARCHAR2(500 BYTE), 
	"CHEKERREMARK" VARCHAR2(100 BYTE), 
	"REWORKEDON" VARCHAR2(50 BYTE), 
	"SESSIONID" VARCHAR2(50 BYTE), 
	"CHECKERREMARKS" VARCHAR2(50 BYTE), 
	"DELETEDON" VARCHAR2(50 BYTE), 
	"DECLINEDON" VARCHAR2(50 BYTE), 
	"DECLINEDBY" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHARGE_RANGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHARGE_RANGE" 
   (	"ID" NUMBER(7,0), 
	"PROCODE" NVARCHAR2(50), 
	"TRX_CODE" NVARCHAR2(50), 
	"RANGE_FROM" NUMBER(18,5), 
	"RANGE_TO" NUMBER(18,5), 
	"AMOUNT" NUMBER(18,5), 
	"FVR" CHAR(6 BYTE), 
	"CURRENCY" NVARCHAR2(5), 
	"CHANNEL" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" VARCHAR2(20 BYTE), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CHEQUE_BOOK_PARAMS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CHEQUE_BOOK_PARAMS" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"NUMBER_OF_LEAVES" NUMBER(18,5), 
	"OLD_PAGE_PER_BOOK" NUMBER(18,5), 
	"CHARGE_PER_BOOK" NUMBER(18,5), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER(5,0), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATE_REMARK" NVARCHAR2(50), 
	"REJECTED" CHAR(1 BYTE), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"REJECT_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CITY_LOCATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CITY_LOCATION" 
   (	"CODE" VARCHAR2(20 BYTE), 
	"LOCATION_NAME" VARCHAR2(100 BYTE), 
	"ID" NUMBER(20,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CLOSED_AGGREGATED_PAYBILL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CLOSED_AGGREGATED_PAYBILL" 
   (	"ID" NUMBER(7,0), 
	"AGGREGATED_PAYBILL_NUMBER" NVARCHAR2(50), 
	"ORGANIZATION_NAME" NVARCHAR2(50), 
	"PAYBILL_NUMBER" NVARCHAR2(50), 
	"BRANCH_NAME" NVARCHAR2(50), 
	"MAPPED_ACCOUNT_NUMBER" NVARCHAR2(50), 
	"UPLOADED_FILE" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100), 
	"STATUS" NUMBER(5,0), 
	"CLOSED_BY" NVARCHAR2(50), 
	"CLOSED_ON" TIMESTAMP (6), 
	"APPROVE_CLOSE_BY" NVARCHAR2(50), 
	"APPROVE_CLOSE_ON" CHAR(1 BYTE), 
	"APPROVE_CLOSE_REMARK" NVARCHAR2(100), 
	"REGISTERED2PG" CHAR(1 BYTE), 
	"REGISTERED2PG_BY" NVARCHAR2(50), 
	"REGISTERED2PG_ON" TIMESTAMP (6), 
	"REGISTERED2PG_RESP" NVARCHAR2(50), 
	"REGISTERED2PG_RESP_CODE" NVARCHAR2(50), 
	"UPDATED2PG_BY" NVARCHAR2(50), 
	"UPDATED2PG_ON" TIMESTAMP (6), 
	"UPDATED2PG_RESP" NVARCHAR2(50), 
	"UPDATED2PG_RESP_CODE" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CLOSED_AGGREGATED_TILL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CLOSED_AGGREGATED_TILL" 
   (	"ID" NUMBER(7,0), 
	"AGGREGATED_PAYBILL_NUMBER" NVARCHAR2(50), 
	"ORGANIZATION_NAME" NVARCHAR2(50), 
	"STORE_NUMBER" NVARCHAR2(50), 
	"TILL_NUMBER" NVARCHAR2(50), 
	"MAPPED_ACCOUNT_NUMBER" NVARCHAR2(50), 
	"UPLOADED_FILE" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100), 
	"STATUS" NUMBER(5,0), 
	"CLOSED_BY" NVARCHAR2(50), 
	"CLOSED_ON" TIMESTAMP (6), 
	"APPROVE_CLOSE_BY" NVARCHAR2(50), 
	"APPROVE_CLOSE_ON" CHAR(1 BYTE), 
	"APPROVE_CLOSE_REMARK" NVARCHAR2(100), 
	"REGISTERED2PG" CHAR(1 BYTE), 
	"REGISTERED2PG_BY" NVARCHAR2(50), 
	"REGISTERED2PG_ON" TIMESTAMP (6), 
	"REGISTERED2PG_RESP" NVARCHAR2(50), 
	"REGISTERED2PG_RESP_CODE" NVARCHAR2(50), 
	"UPDATED2PG_BY" NVARCHAR2(50), 
	"UPDATED2PG_ON" TIMESTAMP (6), 
	"UPDATED2PG_RESP" NVARCHAR2(50), 
	"UPDATED2PG_RESP_CODE" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_COMMISSION_RANGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_COMMISSION_RANGE" 
   (	"ID" NUMBER(7,0), 
	"PROCODE" NVARCHAR2(50), 
	"TRX_CODE" NVARCHAR2(50), 
	"RANGE_FROM" NUMBER(18,5), 
	"RANGE_TO" NUMBER(18,5), 
	"AMOUNT" NUMBER(18,5), 
	"FVR" CHAR(6 BYTE), 
	"CURRENCY" NUMBER(5,0), 
	"CHANNEL" NUMBER(5,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_COMMISSION_SETTLEMENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_COMMISSION_SETTLEMENT" 
   (	"ID" NUMBER, 
	"REF_NO" NVARCHAR2(50), 
	"DATETIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHARGE_AMOUNT" NUMBER(18,5), 
	"COMMISSION_AMOUNT" NUMBER(18,5), 
	"COMMISSION_OWNER" NVARCHAR2(50), 
	"AGENT_ID" NVARCHAR2(50), 
	"ACQUIRER" NVARCHAR2(50), 
	"ISSUER" NVARCHAR2(50), 
	"ACCOUNT_NUMBER" NVARCHAR2(50), 
	"TRANSACTION_TYPE" NVARCHAR2(50), 
	"RECORD_DATE" TIMESTAMP (6), 
	"SETTLEMENT_DONE" NVARCHAR2(50), 
	"SETTLEMENT_DATE" TIMESTAMP (6), 
	"WORKING_DATE" DATE, 
	"COMMISSION_OWNER_TYPE" NVARCHAR2(50), 
	"SETTLEMENT_COMPUTED" NUMBER(1,0), 
	"SETTLEMENT_COMPUTED_DATE" TIMESTAMP (6), 
	"BATCH_REF" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_COMMISSION_SETTLEMENT_TOTAL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_COMMISSION_SETTLEMENT_TOTAL" 
   (	"ID" NUMBER, 
	"AMOUNT" NUMBER(18,5), 
	"SOURCE_BANK" NVARCHAR2(50), 
	"BENEFICIARY_BANK" NVARCHAR2(50), 
	"WORKING_DATE" DATE, 
	"SETTLEMENT_DONE" NUMBER(1,0), 
	"SETTLMENT_DATE" TIMESTAMP (6), 
	"FILE_GEN" NUMBER(1,0), 
	"FILE_GEN_ON" TIMESTAMP (6), 
	"MAKER" NVARCHAR2(50), 
	"REMARKS" NVARCHAR2(200), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"BATCH_REF" NVARCHAR2(50), 
	"RECORD_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CORE_ACCOUNT_OPENING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CORE_ACCOUNT_OPENING" 
   (	"ID" NUMBER, 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"CUSTOMER_ID" NVARCHAR2(20), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"STATUS_CODE" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"BRANCH_CODE" NVARCHAR2(20), 
	"STATUS_MESSAGE" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_COUNTRY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_COUNTRY" 
   (	"ID" NUMBER, 
	"COUNTRY_CODE" NVARCHAR2(50), 
	"COUNTRY_NAME" NVARCHAR2(100), 
	"CURRENCY_CODE" NVARCHAR2(10), 
	"CURRENCY" NVARCHAR2(10)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_COUNTY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_COUNTY" 
   (	"ID" NUMBER, 
	"CODE" NVARCHAR2(50), 
	"COUNTY" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSION_ID" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CURRENCY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CURRENCY" 
   (	"ID" NUMBER(7,0), 
	"CURRENCY_CODE" NVARCHAR2(50), 
	"CURRENCY_NAME" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER" 
   (	"ID" NUMBER, 
	"FIRST_NAME" NVARCHAR2(100), 
	"SECOND_NAME" NVARCHAR2(100), 
	"LAST_NAME" NVARCHAR2(100), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CATEGORY" NVARCHAR2(20), 
	"MONTHLY_INCOME" NUMBER(18,5) DEFAULT 0, 
	"EMAIL_ADDRESS" NVARCHAR2(100), 
	"POSTAL_ADDRESS" NVARCHAR2(100), 
	"POSTAL_CODE" NVARCHAR2(100), 
	"MOBILE_NUMBER2" NVARCHAR2(20), 
	"TOWN" NVARCHAR2(100), 
	"COUNTRY" NVARCHAR2(100), 
	"DATE_OF_BIRTH" DATE, 
	"CREATED_BY" NVARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(100), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORK" CHAR(1 BYTE), 
	"REWORK_DATE" TIMESTAMP (6), 
	"REWORKBY" NVARCHAR2(100), 
	"DECEASED" CHAR(1 BYTE), 
	"ISKYCED" CHAR(1 BYTE), 
	"KYC_DATE" TIMESTAMP (6), 
	"KYC_BY" NVARCHAR2(100), 
	"GENDER" NVARCHAR2(10), 
	"NATIONALITY" NVARCHAR2(20), 
	"MODE_OF_IDENTIFICATION_ID" NVARCHAR2(20), 
	"IDENTIFICATION_ID" NVARCHAR2(20) DEFAULT NULL, 
	"KRA_PIN" NVARCHAR2(20), 
	"BUSINESS_PIN" NVARCHAR2(20), 
	"LOCAL_BRANCH_ID" NUMBER, 
	"DOMICILE_BRANCH_ID" NUMBER, 
	"SALES_CODE" NVARCHAR2(20), 
	"CLOSED" CHAR(1 BYTE), 
	"EMPLOYER" NVARCHAR2(200), 
	"OCCUPATION" NVARCHAR2(200), 
	"INCOME_AMOUNT" NUMBER(18,5), 
	"CHANNEL" NVARCHAR2(20), 
	"APPROVED" CHAR(1 BYTE), 
	"CLOSEDON" TIMESTAMP (6), 
	"PHYSICAL_LOCATION" NVARCHAR2(200), 
	"SESSION_ID" NVARCHAR2(200), 
	"DORMANT" CHAR(1 BYTE), 
	"DORMANCY_DATE" TIMESTAMP (6), 
	"MWALLET_ACCOUNT" NVARCHAR2(20), 
	"APPROVE_REMARK" NVARCHAR2(200), 
	"ID_BACK_PHOTO" CLOB, 
	"ID_FRONT_PHOTO" CLOB, 
	"REFERRAL_CODE" VARCHAR2(20 BYTE), 
	"NIRA_LOOKUP" CHAR(1 BYTE) DEFAULT 0, 
	"ID_CARD_NUMBER" NUMBER(10,0), 
	"LOYALITY_POINTS" NUMBER(18,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("ID_BACK_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ID_FRONT_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT))  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_ANSWERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_ANSWERS" 
   (	"ID" NUMBER, 
	"QUESTION" NUMBER, 
	"ANSWER" NVARCHAR2(500), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CUSTOMER_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" 
   (	"ID" NUMBER, 
	"FIRST_NAME" NVARCHAR2(100), 
	"SECOND_NAME" NVARCHAR2(100), 
	"LAST_NAME" NVARCHAR2(100), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"CATEGORY" NVARCHAR2(20), 
	"MONTHLY_INCOME" NUMBER(18,5), 
	"EMAIL_ADDRESS" NVARCHAR2(100), 
	"POSTAL_ADDRESS" NVARCHAR2(100), 
	"POSTAL_CODE" NVARCHAR2(100), 
	"MOBILE_NUMBER2" NVARCHAR2(20), 
	"TOWN" NVARCHAR2(100), 
	"COUNTRY" NVARCHAR2(100), 
	"DATE_OF_BIRTH" DATE, 
	"CREATED_BY" NVARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(100), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORK" CHAR(1 BYTE), 
	"REWORK_DATE" TIMESTAMP (6), 
	"REWORKBY" NVARCHAR2(100), 
	"DECEASED" CHAR(1 BYTE), 
	"ISKYCED" CHAR(1 BYTE), 
	"KYC_DATE" TIMESTAMP (6), 
	"KYC_BY" NVARCHAR2(100), 
	"GENDER" NVARCHAR2(10), 
	"NATIONALITY" NVARCHAR2(20), 
	"MODE_OF_IDENTIFICATION_ID" NVARCHAR2(20), 
	"IDENTIFICATION_ID" NVARCHAR2(20), 
	"KRA_PIN" NVARCHAR2(20), 
	"BUSINESS_PIN" NVARCHAR2(20), 
	"LOCAL_BRANCH_ID" NUMBER, 
	"DOMICILE_BRANCH_ID" NUMBER, 
	"SALES_CODE" NVARCHAR2(20), 
	"CLOSED" CHAR(1 BYTE), 
	"EMPLOYER" NVARCHAR2(200), 
	"OCCUPATION" NVARCHAR2(200), 
	"INCOME_AMOUNT" NUMBER(18,5), 
	"CHANNEL" NVARCHAR2(20), 
	"APPROVED" CHAR(1 BYTE), 
	"CLOSEDON" TIMESTAMP (6), 
	"PHYSICAL_LOCATION" NVARCHAR2(200), 
	"SESSION_ID" NVARCHAR2(200), 
	"DORMANT" CHAR(1 BYTE), 
	"DORMANCY_DATE" TIMESTAMP (6), 
	"MWALLET_ACCOUNT" NVARCHAR2(20), 
	"APPROVE_REMARKS" NVARCHAR2(200), 
	"ID_BACK_PHOTO" CLOB, 
	"ID_FRONT_PHOTO" CLOB, 
	"REFERRAL_CODE" VARCHAR2(20 BYTE), 
	"NIRA_LOOKUP" CHAR(1 BYTE), 
	"ID_CARD_NUMBER" NUMBER(10,0), 
	"LOYALITY_POINTS" NUMBER(18,0) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("ID_BACK_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("ID_FRONT_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_AUDIT_TRAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL" 
   (	"ID" NUMBER, 
	"CHANNEL" NVARCHAR2(20), 
	"REQUEST_TYPE" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"RESP_CODE" VARCHAR2(20 BYTE), 
	"RESP_DESCRIPTION" NVARCHAR2(300), 
	"PHONE_NUMBER" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_CARE_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_CARE_REQUESTS" 
   (	"ID" NUMBER, 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"REQUEST_SUBJECT" NVARCHAR2(50), 
	"REQUEST_STATUS" NVARCHAR2(10), 
	"DATE_REQUESTED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"IS_APPROVED" NUMBER(1,0) DEFAULT 1, 
	"PAYLOAD" NVARCHAR2(500), 
	"CHANNEL" NVARCHAR2(10), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"APPROVED_BY" NVARCHAR2(50), 
	"TRN_REF_NO" NVARCHAR2(50), 
	"THEIR_REF_NO" NVARCHAR2(50), 
	"REQUEST_DESCRIPTION" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_COMPLIANCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_COMPLIANCE" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NUMBER, 
	"NIN_VERIFICATION_REQUIRED" CHAR(1 BYTE) DEFAULT 1, 
	"NIN_VERIFICATION_INST_REQUIRED" CHAR(1 BYTE) DEFAULT 0, 
	"NIN_VERIFICATION_COMPLETED" CHAR(1 BYTE) DEFAULT 0, 
	"NIN_COMPLETED_DATE" TIMESTAMP (6), 
	"SS_REQUIRED" CHAR(1 BYTE) DEFAULT 0, 
	"SS_COMPLETED" CHAR(1 BYTE) DEFAULT 0, 
	"SS_COMPLETED_DATE" TIMESTAMP (6), 
	"IS_PEP" CHAR(1 BYTE) DEFAULT 0, 
	"PEP_UPDATED_ON" TIMESTAMP (6), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CRA_REQUIRED" CHAR(1 BYTE) DEFAULT 0, 
	"CRA_COMPLETED" CHAR(1 BYTE) DEFAULT 0, 
	"CRA_COMPLETED_DATE" TIMESTAMP (6), 
	"UPDATED_BY" VARCHAR2(20 BYTE), 
	"UPDATED_ON" TIMESTAMP (6), 
	"REJECTED" CHAR(1 BYTE) DEFAULT '0', 
	"REJECTED_BY" VARCHAR2(30 BYTE), 
	"REJECTED_REMARKS" VARCHAR2(200 BYTE), 
	"REJECTED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_DOCUMENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_DOCUMENT" 
   (	"ID" NUMBER, 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"IMAGE_TYPE" NVARCHAR2(20), 
	"IMAGE_URL" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_MIGRATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_MIGRATION" 
   (	"ID" NUMBER, 
	"FULL_NAME" NVARCHAR2(200), 
	"FIRST_NAME" NVARCHAR2(100), 
	"SECOND_NAME" NVARCHAR2(100), 
	"LAST_NAME" NVARCHAR2(100), 
	"GENDER" NVARCHAR2(10), 
	"DOB" DATE, 
	"ID_NUMBER" NVARCHAR2(20), 
	"TOWN" NVARCHAR2(20), 
	"PERSONAL_ADDRESS" NVARCHAR2(50), 
	"BRANCH_CODE" NVARCHAR2(20), 
	"TITTLE" NVARCHAR2(10), 
	"TYPEOF_IDENTIFICATION" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(10), 
	"CUSTOMER_ID" NVARCHAR2(10), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"DAILY_LIMIT_AMOUNT" NUMBER(18,5), 
	"PROCESSING_DATE" TIMESTAMP (6), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CUSTOMER_MIGRATED" NUMBER(1,0), 
	"ISWHITE_LISTED" NUMBER(1,0), 
	"REMARKS" NVARCHAR2(200), 
	"UPLOADED_FILE" NVARCHAR2(200), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"ACCOUNT_STATUS" NVARCHAR2(50), 
	"BLOCKED" NUMBER(1,0), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(50), 
	"BLOCK_REASON" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0), 
	"UNBLOCK_REMARK" NVARCHAR2(200), 
	"UNBLOCKED_BY" NVARCHAR2(50), 
	"UNBLOCKED_ON" TIMESTAMP (6), 
	"APPROVE_UNBLOCK_REMARK" NVARCHAR2(200), 
	"APPROVE_UNBLOCK_BY" NVARCHAR2(50), 
	"APPROVE_UNBLOCK_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_VALIDATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" 
   (	"ID" NUMBER, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"LANG" CHAR(2 BYTE), 
	"PIN" NVARCHAR2(200), 
	"FIRST_LOGIN" CHAR(1 BYTE), 
	"OTP_GENERATED_TIME" TIMESTAMP (6), 
	"ACTIVE" CHAR(1 BYTE), 
	"ALERT_ENABLED" CHAR(1 BYTE), 
	"REMARK" NVARCHAR2(50), 
	"TRIALS" NUMBER, 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"PIN_CHANGE" CHAR(1 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"RESET" CHAR(1 BYTE), 
	"RESET_BY" NVARCHAR2(50), 
	"RESET_ON" TIMESTAMP (6), 
	"PIN_RESET_REMARK" NVARCHAR2(500), 
	"RESET_APPROVEDBY" NVARCHAR2(50), 
	"RESET_APPROVEDON" TIMESTAMP (6), 
	"UNBLOCK_REMARK" NVARCHAR2(200), 
	"CLOSE_REMARK" NVARCHAR2(200), 
	"IMSI" NVARCHAR2(500), 
	"IMSI2" NVARCHAR2(500), 
	"IMSI_CHANGE_COUNT" CHAR(1 BYTE), 
	"CLOSED_BY" NVARCHAR2(50), 
	"BLOCKED_TIME" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(50), 
	"UNBLOCKED_BY" NVARCHAR2(50), 
	"BLOCKER_REMARK" NVARCHAR2(200), 
	"BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"BLOCK_APPROVER_REMARK" NVARCHAR2(200), 
	"UNBLOCKAPPROVEDBY" NVARCHAR2(50), 
	"UNBLOCK_APPROVER_REMARK" NVARCHAR2(200), 
	"REJECT_UNBLOCKBY" NVARCHAR2(50), 
	"REJECT_UNBLOCK_ON" TIMESTAMP (6), 
	"CLOSE_APPROVED_BY" NVARCHAR2(50), 
	"CLOSE_APPROVER_REMARK" NVARCHAR2(200), 
	"ACCOUNT_STATUS" CHAR(1 BYTE), 
	"REOPENED_BY" NVARCHAR2(50), 
	"REOPENED_ON" TIMESTAMP (6), 
	"REOPENCLOSED_ACCOUNT_REMARK" NVARCHAR2(200), 
	"REOPENED_APPROVED_BY" NVARCHAR2(50), 
	"REOPENED_APPROVED_ON" TIMESTAMP (6), 
	"REOPENACCOUNT_APPROVA_LREMARK" NVARCHAR2(200), 
	"IMEI" NVARCHAR2(500), 
	"IMEI2" NVARCHAR2(500), 
	"IMEI_CHANGE_COUNT" CHAR(1 BYTE), 
	"SESSION_ID" NVARCHAR2(50), 
	"REWORKED" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"PARTIAL_REGISTRATION" NUMBER(1,0) DEFAULT 1, 
	"UNBLOCKED_TIME" TIMESTAMP (6), 
	"IMEI_UPDATE_TIME" TIMESTAMP (6), 
	"IMSI_UPDATE_TIME" TIMESTAMP (6), 
	"IMSI_UPDATED_BY" NVARCHAR2(50), 
	"IMEI_UPDATED_BY" NVARCHAR2(50), 
	"IMEI_UPDATE_REMARKS" NVARCHAR2(500), 
	"IMSI_UPDATE_REMARKS" NVARCHAR2(500), 
	"DEVICE_CHANGE" CHAR(1 BYTE) DEFAULT '0', 
	"IMSI_CHANGE" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_VALIDATION_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_VALIDATION_ARCHIVE" 
   (	"ID" NUMBER, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"LANG" CHAR(2 BYTE), 
	"PIN" NVARCHAR2(200), 
	"FIRST_LOGIN" CHAR(1 BYTE), 
	"OTP_GENERATED_TIME" TIMESTAMP (6), 
	"ACTIVE" CHAR(1 BYTE), 
	"ALERT_ENABLED" CHAR(1 BYTE), 
	"REMARK" NVARCHAR2(50), 
	"TRIALS" NUMBER, 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"PIN_CHANGE" CHAR(1 BYTE), 
	"CREATED_ON" TIMESTAMP (6), 
	"RESET" CHAR(1 BYTE), 
	"RESET_BY" NVARCHAR2(50), 
	"RESET_ON" TIMESTAMP (6), 
	"PIN_RESET_REMARK" NVARCHAR2(500), 
	"RESET_APPROVEDBY" NVARCHAR2(50), 
	"RESET_APPROVEDON" TIMESTAMP (6), 
	"UNBLOCK_REMARK" NVARCHAR2(200), 
	"CLOSE_REMARK" NVARCHAR2(200), 
	"IMSI" NVARCHAR2(50), 
	"IMSI2" NVARCHAR2(50), 
	"IMSI_CHANGE_COUNT" CHAR(1 BYTE), 
	"CLOSED_BY" NVARCHAR2(50), 
	"BLOCKED_TIME" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(50), 
	"UNBLOCKED_BY" NVARCHAR2(50), 
	"BLOCKER_REMARK" NVARCHAR2(200), 
	"BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"BLOCK_APPROVER_REMARK" NVARCHAR2(200), 
	"UNBLOCKAPPROVEDBY" NVARCHAR2(50), 
	"UNBLOCK_APPROVER_REMARK" NVARCHAR2(200), 
	"REJECT_UNBLOCKBY" NVARCHAR2(50), 
	"REJECT_UNBLOCK_ON" TIMESTAMP (6), 
	"CLOSE_APPROVED_BY" NVARCHAR2(50), 
	"CLOSE_APPROVER_REMARK" NVARCHAR2(200), 
	"ACCOUNT_STATUS" CHAR(1 BYTE), 
	"REOPENED_BY" NVARCHAR2(50), 
	"REOPENED_ON" TIMESTAMP (6), 
	"REOPENCLOSED_ACCOUNT_REMARK" NVARCHAR2(200), 
	"REOPENED_APPROVED_BY" NVARCHAR2(50), 
	"REOPENED_APPROVED_ON" TIMESTAMP (6), 
	"REOPENACCOUNT_APPROVA_LREMARK" NVARCHAR2(200), 
	"IMEI" NVARCHAR2(50), 
	"IMEI2" NVARCHAR2(50), 
	"IMEI_CHANGE_COUNT" CHAR(1 BYTE), 
	"SESSION_ID" NVARCHAR2(50), 
	"REWORKED" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"PARTIAL_REGISTRATION" NUMBER(1,0), 
	"UNBLOCKED_TIME" TIMESTAMP (6), 
	"IMEI_UPDATE_TIME" TIMESTAMP (6), 
	"IMSI_UPDATE_TIME" TIMESTAMP (6), 
	"IMSI_UPDATED_BY" NVARCHAR2(50), 
	"IMEI_UPDATED_BY" NVARCHAR2(50), 
	"IMEI_UPDATE_REMARKS" NVARCHAR2(500), 
	"IMSI_UPDATE_REMARKS" NVARCHAR2(500), 
	"DEVICE_CHANGE" CHAR(1 BYTE) DEFAULT '0', 
	"IMSI_CHANGE" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_CUSTOMER_WHITELIST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_CUSTOMER_WHITELIST" 
   (	"ID" NUMBER(7,0), 
	"NAMES" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"IS_WHITELIST" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DAILY_INTEREST_ACCRUAL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DAILY_INTEREST_ACCRUAL" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(20), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"LOAN_ID" NVARCHAR2(20), 
	"PRINCIPAL_AMOUNT" NUMBER(18,5), 
	"INTEREST_ACCRUED" NUMBER(18,5), 
	"DAY_NUMBER" NUMBER, 
	"INTEREST_RATE" NUMBER(18,5), 
	"DISBURSEMENT_DATE" DATE, 
	"RECORD_DATE" TIMESTAMP (6), 
	"ACCRUAL_DATE" DATE, 
	"DAILY_INTEREST_RATE" NUMBER(18,5), 
	"DAILY_ACCRUAL_AMOUNT" NUMBER(18,5), 
	"ACCUMULATED_ACCRUAL_AMOUNT" NUMBER(18,5), 
	"POSTED2WALLET" NUMBER(1,0), 
	"POSTED2WALLETDATE" TIMESTAMP (6), 
	"POSTED2CORE" NUMBER(1,0), 
	"POSTED2COREDATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DATA_WORKFLOW
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DATA_WORKFLOW" 
   (	"ID" NUMBER, 
	"CATEGORY_ID" NUMBER, 
	"ADDRESS_NAME" NVARCHAR2(200), 
	"WORKFLOW_NAME" NVARCHAR2(200), 
	"DESCRIPTION" NVARCHAR2(2000), 
	"ACTIVE" NUMBER DEFAULT 0, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DATA_WORKFLOW_ACTION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DATA_WORKFLOW_ACTION" 
   (	"ID" NUMBER, 
	"DESCRIPTION" NVARCHAR2(20), 
	"WORKFLOW_ID" NUMBER, 
	"STATUS_CODE" NUMBER, 
	"ORDER_NUMBER" NUMBER, 
	"ENABLED" NUMBER DEFAULT 0, 
	"REQUIRE_ROLE" NVARCHAR2(100), 
	"REQUIRE_USERNAME" NVARCHAR2(20), 
	"ACTION_NAME" NVARCHAR2(20), 
	"IS_FINAL" NUMBER, 
	"CREATED_BY" NVARCHAR2(50), 
	"STATUS_TEXT" VARCHAR2(20 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DATA_WORKFLOW_CATEGORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DATA_WORKFLOW_CATEGORY" 
   (	"ID" NUMBER, 
	"CATEGORY_NAME" NVARCHAR2(200), 
	"DESCRIPTION" NVARCHAR2(200), 
	"ACTIVE" NUMBER DEFAULT 0, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DATE_SETTINGS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DATE_SETTINGS" 
   (	"ID" NUMBER, 
	"CENTRE" NVARCHAR2(50), 
	"BRANCH" NVARCHAR2(50), 
	"PREVIOUSWORKINGDATE" DATE, 
	"WORKINGDATE" DATE, 
	"NEXTWORKINGDATE" DATE, 
	"ENDOFMONTHDATE" DATE, 
	"PREVIOUSENDOFMONTH" DATE, 
	"NEXTENDOFMONTH" DATE, 
	"PREVIOUSENDOFYEAR" DATE, 
	"ENDOFYEAR" DATE, 
	"NEXTENDOFYEAR" DATE, 
	"FINANCIALYEAR" NVARCHAR2(20), 
	"FINANCIALPERIOD" NVARCHAR2(20), 
	"COB" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_DEFAULT_LIMIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DEFAULT_LIMIT" 
   (	"ID" NUMBER, 
	"CURRENCY" NVARCHAR2(50), 
	"OLDLIMIT_AMOUNT" NUMBER(18,5), 
	"LIMIT_AMOUNT" NUMBER(18,5), 
	"NEWLIMIT_AMOUNT" NUMBER(18,5), 
	"LIMIT_TYPE" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200), 
	"UPDATED" NUMBER(1,0), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATE_REMARK" NVARCHAR2(200), 
	"REJECTED" NUMBER(1,0), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"REJECT_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DELINKED_ACCOUNTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DELINKED_ACCOUNTS" 
   (	"ID" NUMBER, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"LINKED_ACCOUNT" NVARCHAR2(20), 
	"NATIONAL_ID" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"CBS_ACCOUNT_NAME" NVARCHAR2(200), 
	"CBS_ACCOUNT_NUMBER" NVARCHAR2(20), 
	"CBS_MOBILE_NUMBER" NVARCHAR2(20), 
	"CBS_NATIONAL_ID" NVARCHAR2(20), 
	"CBS_ACCOUNT_STATUS" NVARCHAR2(20), 
	"CBS_CUSTOMER_ID" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(10), 
	"ACCOUNT_TYPE" NVARCHAR2(20), 
	"STATUS" NUMBER, 
	"DATE_LINKED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"LEVEL1AUTHORISED" NUMBER(1,0), 
	"LEVEL1_AUTHORISED_ON" TIMESTAMP (6), 
	"LEVEL1_AUTHORISED_BY" NVARCHAR2(20), 
	"APPROVAL_REMARKS" NVARCHAR2(200), 
	"LINKED_BY" NVARCHAR2(50), 
	"LINKED_ON" TIMESTAMP (6), 
	"DAILY_TXN_LIMIT" NUMBER(18,5), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSION_ID" NVARCHAR2(50), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"REJECT_REMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DEPARTMENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DEPARTMENT" 
   (	"ID" NUMBER, 
	"DEPARTMENT" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DEVICE_TYPE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DEVICE_TYPE" 
   (	"ID" NUMBER, 
	"DEVICE_TYPE_CODE" NVARCHAR2(50), 
	"DEVICE_TYPE" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_DISTRICT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_DISTRICT" 
   (	"ID" NUMBER, 
	"REGION_CODE" NVARCHAR2(50), 
	"DISTRICT_NAME" NVARCHAR2(100), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0), 
	"DISTRICT_CODE" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ECITIZEN_PAYMENT_CONFIRMATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ECITIZEN_PAYMENT_CONFIRMATION" 
   (	"ID" NUMBER, 
	"REQUEST_ID" NVARCHAR2(50), 
	"REQUEST_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"HASH" NVARCHAR2(100), 
	"TRANSACTION_AMOUNT" NUMBER(18,5), 
	"FEE_AMOUNT" NUMBER(18,5), 
	"CURRENCY_CODE" NVARCHAR2(50), 
	"BILL_REF_NUMBER" NVARCHAR2(50), 
	"BILL_ID" NVARCHAR2(50), 
	"PAYMENT_ID" NVARCHAR2(50), 
	"DESTINATION_AMOUNT" NVARCHAR2(50), 
	"SOURCE_ACCOUNT_NUMBER" NVARCHAR2(50), 
	"SOURCE_CUSTOMER_FIRST_NAME" NVARCHAR2(200), 
	"SOURCE_MSISDN" NVARCHAR2(50), 
	"SOURCE_CURRENCY_ID" NVARCHAR2(50), 
	"ISO8583_ORIGINAL_ACQUIR_INSTITUTION_ID" NVARCHAR2(50), 
	"SOURCE_CURRENCY_CODE" NVARCHAR2(50), 
	"ISO8583_ACQUIR_INSTITUTION_ID" NVARCHAR2(50), 
	"MERCHANT_ID" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(20), 
	"STATUS" NVARCHAR2(20), 
	"STATUS_CODE" NVARCHAR2(20), 
	"STATUS_MESSAGE" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ECITIZEN_VALIATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ECITIZEN_VALIATION" 
   (	"ID" NUMBER, 
	"REQUEST_ID" NVARCHAR2(50), 
	"REQUEST_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"HASH" NVARCHAR2(50), 
	"TRANSACTION_AMOUNT" NUMBER(18,5), 
	"FEE_AMOUNT" NUMBER(18,5), 
	"SOURCE_AMOUNT" NUMBER(18,5), 
	"BILL_REF_NUMBER" NVARCHAR2(20), 
	"CURRENCY_CODE" NVARCHAR2(10), 
	"STATUS" NVARCHAR2(10), 
	"STATUS_CODE" NVARCHAR2(10), 
	"STATUS_MESSAGE" NVARCHAR2(50), 
	"SERVICE_NAME" NVARCHAR2(20), 
	"DESTINATION_AMOUNT" NUMBER(18,5), 
	"BILL_ID" NVARCHAR2(20), 
	"SOURCE_CURRENCY_ID" NVARCHAR2(10), 
	"ISO8583_ACQUIR_INSTITUTION_ID" NVARCHAR2(50), 
	"ISO8583_ORIGINAL_ACQUIR_INSTITUTION_ID" NVARCHAR2(50), 
	"SOURCE_CURRENCY_CODE" NVARCHAR2(10), 
	"MERCHANT_ID" NVARCHAR2(20), 
	"FIELD37" NVARCHAR2(20), 
	"ISO_RESPONSE_CODE" NVARCHAR2(10), 
	"PAYMENT_CONFIRMED" NUMBER(1,0), 
	"PAYMENT_CONFIRMED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_EMAIL_TEMPLATE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_EMAIL_TEMPLATE" 
   (	"ID" NUMBER(19,0), 
	"TEMPLATE_NAME" NVARCHAR2(50), 
	"EMAIL_DESCRIPTION" NVARCHAR2(50), 
	"EMAIL_TEMPLATE" NVARCHAR2(500), 
	"LANGUAGE_CODE" NVARCHAR2(10), 
	"MTI" NVARCHAR2(10), 
	"DEST" NVARCHAR2(10), 
	"FIELD3" NVARCHAR2(10), 
	"FIELD100" NVARCHAR2(20), 
	"FIELD39" NVARCHAR2(10), 
	"ENABLED" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_EOD_ACTIVITY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_EOD_ACTIVITY" 
   (	"ID" NUMBER, 
	"CODE" NVARCHAR2(20), 
	"ACTIVITY" NVARCHAR2(100), 
	"DESCRIPTION" NVARCHAR2(100), 
	"SP_NAME" NVARCHAR2(50), 
	"FREQUENCY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_EOD_ACTIVITY_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE" 
   (	"ID" NUMBER, 
	"CODE" NVARCHAR2(20), 
	"ACTIVITY" NVARCHAR2(100), 
	"DESCRIPTION" NVARCHAR2(100), 
	"SP_NAME" NVARCHAR2(50), 
	"FREQUENCY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_EOD_PROCESS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_EOD_PROCESS" 
   (	"ID" NUMBER, 
	"ACTIVITY_CODE" NVARCHAR2(50), 
	"EOD_DATE" DATE, 
	"PROCESS_COMPLETE" NUMBER(1,0), 
	"ERROR_DESC" NVARCHAR2(50), 
	"ACTIVITY_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"START_TIME" TIMESTAMP (6), 
	"END_TIME" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ERROR_CODE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ERROR_CODE" 
   (	"ID" NUMBER(10,0), 
	"ERROR_CODE" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(50), 
	"CUSTOMER_RESPONSE" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (3) DEFAULT SYSTIMESTAMP, 
	"LANG" NVARCHAR2(10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ESTATEMENT_REQUEST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ESTATEMENT_REQUEST" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"DATE_FROM" DATE, 
	"DATE_TO" DATE, 
	"STATEMENT_BODY" NVARCHAR2(500), 
	"STATUS" NVARCHAR2(20), 
	"RESPONSE" NVARCHAR2(50), 
	"RESPONSE_MESSAGE" NVARCHAR2(500), 
	"CUSTOMER_NO" NVARCHAR2(50), 
	"REQUEST_TYPE" NVARCHAR2(50), 
	"WORKING_DATE" DATE, 
	"DATE_CREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"DATE_UPDATED" TIMESTAMP (6), 
	"CBS_RESPONSE_STATUS" NVARCHAR2(20), 
	"CBS_REFNO" NVARCHAR2(50), 
	"CBS_TRN_LOGFILE_REF" NVARCHAR2(200), 
	"AMOUNT" NUMBER(18,5), 
	"DR_ACCOUNT" NVARCHAR2(50), 
	"CR_ACCOUNT" NVARCHAR2(50), 
	"TRANSACTION_REF_NO" NVARCHAR2(50), 
	"OFS_REQUEST_STRING" NVARCHAR2(500), 
	"ERROR_MSG" NVARCHAR2(500), 
	"TRN_STATUS" NVARCHAR2(50), 
	"TRANSACTION_TYPE" NVARCHAR2(50), 
	"TRANSACTION_DESCRIPTION" NVARCHAR2(50), 
	"ISEOD_ACTIVITY" NUMBER(1,0), 
	"CHARGES" NUMBER(18,5), 
	"EXCISE_DUTY" NUMBER(18,5)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_EXCISE_DUTY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_EXCISE_DUTY" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(20), 
	"OLD_FVR" NVARCHAR2(20), 
	"CHARGE_TYPE_FVR" NVARCHAR2(20), 
	"OLD_CHARGE_RATE" NUMBER(18,5), 
	"CHARGE_RATE" NUMBER(18,5), 
	"NEW_CHARGE_RATE" NUMBER(18,5), 
	"OLD_AMOUNT" NUMBER(18,5), 
	"CHARGE_AMOUNT" NUMBER(18,5), 
	"NEW_CHARGE_AMOUNT" NUMBER(18,5), 
	"CHARGE_COLLECTION_ACCOUNT" NVARCHAR2(20), 
	"STATUS" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARKS" NVARCHAR2(200), 
	"REJECTED" NUMBER(1,0), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"REJECT_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_FAILED_REGISTRATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_FAILED_REGISTRATION" 
   (	"ID" NUMBER, 
	"FIRST_NAME" NVARCHAR2(50), 
	"SECOND_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"DATE_OF_BIRTH" DATE, 
	"ID_NUMBER" NVARCHAR2(20), 
	"GENDER" NVARCHAR2(10), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"ACCOUNT_NUMBER" NVARCHAR2(50), 
	"PROCESSED" NUMBER(1,0), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CHANNEL" NVARCHAR2(10), 
	"RESPONSE_CODE" NVARCHAR2(10), 
	"RESPONSE" NVARCHAR2(50), 
	"CUSTOMER_NO" NVARCHAR2(10), 
	"COUNTRY" NVARCHAR2(10), 
	"IPRS_ID_NO" NVARCHAR2(50), 
	"IPRS_ID_SERIAL" NVARCHAR2(50), 
	"IPRS_FNAME" NVARCHAR2(50), 
	"IPRS_MNAME" NVARCHAR2(50), 
	"IPRS_SNAME" NVARCHAR2(50), 
	"IPRS_RESPONSE" NVARCHAR2(50), 
	"IPRS_DOB" NVARCHAR2(50), 
	"IPRS_GENDER" NVARCHAR2(10), 
	"HAS_CBS_ACCOUNT" NUMBER(1,0), 
	"FIELD39" NVARCHAR2(10), 
	"FIELD48" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_FOREX
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_FOREX" 
   (	"ID" NUMBER(19,0), 
	"CURENCY_CODE" NVARCHAR2(100), 
	"BUY" NUMBER(18,2), 
	"SELL" NUMBER(18,2), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(100), 
	"LAST_UPDATE_DATE" TIMESTAMP (6) DEFAULT NULL, 
	"CURRENCY_NAME" NVARCHAR2(100), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_FREQUENCY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_FREQUENCY" 
   (	"ID" NUMBER, 
	"FREQUENCY" NVARCHAR2(50), 
	"FREQUENCY_CODE" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GENERAL_PARAMS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GENERAL_PARAMS" 
   (	"ID" NUMBER, 
	"ITEMNAME" NVARCHAR2(200), 
	"ITEMVALUE" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL" 
   (	"ID" NUMBER, 
	"GL_PREFIX" NVARCHAR2(10), 
	"GL_PARENT" NVARCHAR2(20), 
	"GL_CODE" NVARCHAR2(20), 
	"GL_TYPE" NVARCHAR2(10), 
	"GL_DESCRIPTION" NVARCHAR2(150), 
	"BRANCH_CODE" NVARCHAR2(10), 
	"CURRENCY" NVARCHAR2(10), 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"BILLERID" NVARCHAR2(10), 
	"ALLOW_DR" NUMBER(1,0), 
	"ALLOW_CR" NUMBER(1,0), 
	"ALLOW_OVERDRAFT" NUMBER(1,0), 
	"LOAN_GL" NUMBER(1,0), 
	"SUSPENCE_GL" NUMBER(1,0), 
	"ACCRUAL_GL" NUMBER(1,0), 
	"PROFIT_ACCOUNT" NVARCHAR2(20), 
	"BLOCKED" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_DATE" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(20), 
	"REWORKED_DATE" TIMESTAMP (6), 
	"ALLOW_BACK_POSTING" NUMBER(1,0), 
	"ALLOCATED" NUMBER(1,0), 
	"DECLINED" NUMBER(1,0), 
	"DECLINED_BY" NVARCHAR2(20), 
	"DECLINED_ON" TIMESTAMP (6), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETE_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GL_BALANCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_BALANCE" 
   (	"ID" NUMBER, 
	"GL_CODE" NVARCHAR2(20), 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"DR_BAL_LCY" NUMBER(18,5), 
	"CR_BAL_LCY" NUMBER(18,5), 
	"GL_BALANCE" NUMBER(18,5), 
	"DR_CLOSE_BALANCE" NUMBER(18,5), 
	"CR_CLOSE_BALANCE" NUMBER(18,5), 
	"CR_OPEN_BALANCE" NUMBER(18,5), 
	"DR_OPEN_BALANCE" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CR_PERIOD_BALANCE" NUMBER(18,5), 
	"DR_PERIOD_BALANCE" NUMBER(18,5), 
	"OPENING_BAL" NUMBER(18,5), 
	"ZERO_GL" NVARCHAR2(50), 
	"WORKING_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_GL_BALANCE_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_BALANCE_ARCHIVE" 
   (	"ID" NUMBER, 
	"GL_CODE" NVARCHAR2(50), 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"DR_BAL_LCY" NUMBER(18,5), 
	"CR_BAL_LCY" NUMBER(18,5), 
	"GL_BALANCE" NUMBER(18,5), 
	"DR_CLOSE_BALANCE" NUMBER(18,5), 
	"CR_CLOSE_BALANCE" NUMBER(18,5), 
	"CR_OPEN_BALANCE" NUMBER(18,5), 
	"DR_OPEN_BALANCE" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"CR_PERIOD_BALANCE" NUMBER(18,5), 
	"DR_PERIOD_BALANCE" NUMBER(18,5), 
	"OPENING_BAL" NUMBER(18,5), 
	"ZERO_GL" NVARCHAR2(50), 
	"WORKING_DATE" DATE, 
	"CLOSING_BAL" NUMBER(18,0), 
	"DATE_ADDED" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_GL_CLASS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_CLASS" 
   (	"ID" NUMBER, 
	"CLASS_CODE" NVARCHAR2(10), 
	"CLASS_DESCRIPTION" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GL_DEFINITION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_DEFINITION" 
   (	"ID" NUMBER, 
	"PREFIX" NVARCHAR2(10), 
	"SERIES" NVARCHAR2(10) DEFAULT '00000000', 
	"SERIES_LENGTH" NUMBER DEFAULT 8, 
	"DESCRIPTION" NVARCHAR2(50), 
	"GL_TYPE" NVARCHAR2(10), 
	"GL_CLASS" NVARCHAR2(20) DEFAULT 'BS', 
	"CURRENCY_CODE" NVARCHAR2(10) DEFAULT 'KES', 
	"GL_PARENT" NVARCHAR2(20), 
	"REMARKS" NVARCHAR2(200), 
	"REWORKED_ON" TIMESTAMP (6), 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"REWORKED_BY" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER DEFAULT 1, 
	"APPROVED_BY" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETE_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GL_MAPPING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_MAPPING" 
   (	"ID" NUMBER(38,0), 
	"PROCODE" NVARCHAR2(200), 
	"TXNIDENTIFIER" NVARCHAR2(500), 
	"MWALLETCONTRA" NVARCHAR2(500), 
	"CBS_GL_DR" NVARCHAR2(200), 
	"CBS_GL_CR" NVARCHAR2(200), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" VARCHAR2(50 BYTE), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVEDON" TIMESTAMP (6), 
	"APPROVEDBY" NVARCHAR2(50), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKEDBY" NVARCHAR2(50) DEFAULT 1, 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" VARCHAR2(50 BYTE), 
	"DECLINED" NUMBER DEFAULT 0, 
	"SESSIONID" VARCHAR2(20 BYTE), 
	"REMARKS" VARCHAR2(2000 BYTE), 
	"CHECKERREMARKS" VARCHAR2(2000 BYTE), 
	"DECLINEDON" TIMESTAMP (6), 
	"DECLINEDBY" VARCHAR2(200 BYTE), 
	"DELETED_ON" TIMESTAMP (6), 
	"REWORKEDON" TIMESTAMP (6), 
	"DELETE_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GL_SEQUENCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GL_SEQUENCE" 
   (	"ID" NUMBER, 
	"PREFIX" NVARCHAR2(10), 
	"SERIES" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(10), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GROUPS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GROUPS" 
   (	"ID" NUMBER, 
	"GROUP_NAME" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"GROUP_ADMIN" NVARCHAR2(50), 
	"ACTIVE" NUMBER DEFAULT 1, 
	"MEMBER_COUNT" NUMBER, 
	"GROUP_ID" NVARCHAR2(10), 
	"PHYSICAL_ADDR" NVARCHAR2(50), 
	"POSTAL_ADDR" NVARCHAR2(50), 
	"MINIMUM_TO_VOTE" NUMBER, 
	"MANDATE" NVARCHAR2(20), 
	"VOTE_PERCENTAGE" NUMBER, 
	"MINIMUM_NUMBER_OF_MEMBERS" NUMBER, 
	"REWORKED_ON" TIMESTAMP (6), 
	"CREATED_BY" NVARCHAR2(50), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER, 
	"SESSIONID" NVARCHAR2(50), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DECLINED" NUMBER(1,0), 
	"CHEKER_REMARKS" NVARCHAR2(200), 
	"GROUP_ACCOUNT" NVARCHAR2(50), 
	"GROUP_NAME_BUFFER" NVARCHAR2(50), 
	"MAXIMUM_NUMBER_OF_MEMBERS" NUMBER, 
	"VOTE_EXPIRY" NUMBER, 
	"CHANGE_ADMIN" NUMBER(1,0), 
	"GRP_CLOSED" NUMBER(1,0), 
	"GRP_CLOSED_BY" NVARCHAR2(50), 
	"GRP_CLOSED_ON" TIMESTAMP (6), 
	"CHANGE_VOTE_PERC" NUMBER, 
	"CHANGE_MANDATE" NUMBER, 
	"PROPOSED_MANDATE" NVARCHAR2(20), 
	"PROPOSED_VOTE_PERC" NUMBER, 
	"REMOVE_MANDATE" NUMBER, 
	"ADD_MANDATE" NUMBER, 
	"PROPOSED_MANDATE_REMOVE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GROUP_LINKING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GROUP_LINKING" 
   (	"ID" NUMBER, 
	"MWALLET_AC" NVARCHAR2(20), 
	"GROUP_ID" NVARCHAR2(20), 
	"LINKED_ON" TIMESTAMP (6), 
	"ACCEPTED" NUMBER(1,0), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"EXPELLED" NUMBER(1,0), 
	"EXPIRED" NUMBER(1,0), 
	"TRANSACTION_SENT" NUMBER(1,0), 
	"EXPELLED_ADMIN" NUMBER(1,0), 
	"PROPOSED_NEW_ADMIN" NUMBER(1,0), 
	"GRP_CLOSED" NUMBER(1,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_GROUP_VOTING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_GROUP_VOTING" 
   (	"ID" NUMBER, 
	"VOTE_CATEGORY" NVARCHAR2(10), 
	"VOTES" NUMBER(1,0), 
	"VOTERS_PHONE" NVARCHAR2(20), 
	"EXPIRY" TIMESTAMP (6), 
	"ACTIVE" NUMBER(1,0), 
	"VOTE_TYPE" NVARCHAR2(20), 
	"GROUPACCOUNT" NVARCHAR2(20), 
	"GROUP_ID" NVARCHAR2(10), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_HOLIDAY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_HOLIDAY" 
   (	"ID" NUMBER, 
	"HOLIDAY_NAME" NVARCHAR2(100), 
	"HOLIDAY_DATE" DATE, 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"RECCURING" NUMBER(1,0), 
	"REWORK" NUMBER(1,0), 
	"REWORK_ON" TIMESTAMP (6), 
	"REWORK_BY" NVARCHAR2(50), 
	"APPROVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSTITUTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSTITUTIONS" 
   (	"ID" NUMBER(20,0), 
	"INSTITUTION_NAME" NVARCHAR2(50), 
	"INSTITUTION_CODE" NVARCHAR2(20), 
	"CONTACT_NAME" NVARCHAR2(50), 
	"INSTITUTION_ACCOUNT" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"EMAIL" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(20), 
	"DELETED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"REWORKED" CHAR(1 BYTE) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(20), 
	"REWORKED_ON" TIMESTAMP (6), 
	"INSTITUTION_TYPE" NUMBER(20,0), 
	"INSTITUTION_ADDRESS" NVARCHAR2(50), 
	"SERVICE_FEE_BEARER" NVARCHAR2(50), 
	"TRANSACTION_FEE" NUMBER(18,2) DEFAULT 0, 
	"CREDIT_LIMIT" NUMBER(18,2) DEFAULT 0, 
	"IMAGE_PATH" NVARCHAR2(100)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSTITUTION_BATCH_PAYOUT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT" 
   (	"ID" NUMBER(20,0), 
	"BATCH_NO" NVARCHAR2(50), 
	"ID_TYPE" NVARCHAR2(50), 
	"ID_NO" NVARCHAR2(50), 
	"FIRST_NAME" NVARCHAR2(50), 
	"MIDDLE_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"MNO" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"AMOUNT" NUMBER(18,2), 
	"EMAIL_ADDRESS" NVARCHAR2(30), 
	"VERIFIED" NUMBER(1,0) DEFAULT 0, 
	"DISBURSED" NUMBER(1,0) DEFAULT 0, 
	"CONFIRMED" NUMBER(1,0) DEFAULT 0, 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"HAS_WALLET_ACCOUNT" NUMBER(1,0) DEFAULT 0, 
	"VALIDATION_REASON" NVARCHAR2(500), 
	"REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSTITUTION_TYPES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSTITUTION_TYPES" 
   (	"ID" NUMBER(20,0), 
	"INSTITUTION_TYPES" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(50), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"CREATED_ON" TIMESTAMP (6), 
	"CREATED_BY" NVARCHAR2(20), 
	"REWORKED" CHAR(1 BYTE) DEFAULT 0, 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSTITUTION_UPLOADS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSTITUTION_UPLOADS" 
   (	"ID" NUMBER(20,0), 
	"INSTITUTION_CODE" NVARCHAR2(20), 
	"BATCH_NO" NVARCHAR2(50), 
	"NO_OF_RECORDS" NUMBER(20,0), 
	"FILE_NAME" NVARCHAR2(50), 
	"TOTAL_AMOUNT" NUMBER(18,2), 
	"UPLOAD_DATE" TIMESTAMP (6), 
	"PAYMENT_DETAILS" NVARCHAR2(500), 
	"PAYMENT_TYPE" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE) DEFAULT '0', 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"VERIFIED" NUMBER(1,0) DEFAULT 0, 
	"DISBURSED" NUMBER(1,0) DEFAULT 0, 
	"REMARKS" NVARCHAR2(50), 
	"COUNTRY" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(20), 
	"FILE_DESCRIPTION" NVARCHAR2(200), 
	"REJECTED" NUMBER(1,0) DEFAULT 0, 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"CONFIRMED" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSURANCE_CLAIM
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSURANCE_CLAIM" 
   (	"ID" NUMBER, 
	"DATE_OF_ACCIDENT" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"INJURED_PERSON_NAME" NVARCHAR2(200), 
	"IDNUMBER_NUMBERPLATE" NVARCHAR2(20), 
	"PLACE_OF_ACCIDENT" NVARCHAR2(50), 
	"NATURE_OF_ACCIDENT" NVARCHAR2(200), 
	"DESCRIPTION" NVARCHAR2(200), 
	"ACCIDENT_REPORTED" NUMBER(1,0), 
	"POLICE_STATION_LOCATION" NVARCHAR2(200), 
	"OB_NUMBER" NVARCHAR2(50), 
	"FIELD2" NVARCHAR2(20), 
	"FIELD37" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"CLAIM_TYPE" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSURANCE_COVER_TYPE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSURANCE_COVER_TYPE" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(50), 
	"COVER_TYPE" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ACTIVE" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(50), 
	"REWORK" NUMBER(1,0), 
	"REWORK_BY" NVARCHAR2(50), 
	"REWORK_ON" TIMESTAMP (6), 
	"REWORK_REMARK" NVARCHAR2(200), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATED_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INSURANCE_LEADS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INSURANCE_LEADS" 
   (	"ID" NUMBER(10,0), 
	"PHONE_NUMBER" NVARCHAR2(50), 
	"CUSTOMER_NAME" NVARCHAR2(50), 
	"TYPE_OF_COVER" NVARCHAR2(50), 
	"REQUEST_DATE" DATE, 
	"MESSAGE" NVARCHAR2(500), 
	"EMAIL_ADDRESS" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INTERIM_BATCH_REPORTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INTERIM_BATCH_REPORTS" 
   (	"ID" NUMBER, 
	"FILE_NAME" VARCHAR2(100 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"DIRECTION_TYPE" VARCHAR2(200 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"INCOMING_FILE_NAME" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INTERNAL_BLACKLIST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INTERNAL_BLACKLIST" 
   (	"ID" NUMBER, 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"FULL_NAME" NVARCHAR2(200), 
	"ID_NUMBER" NVARCHAR2(20), 
	"LOAN_ID" NVARCHAR2(20), 
	"REASON" NVARCHAR2(200), 
	"BLACKLISTED_BY" NVARCHAR2(50), 
	"BLACKLISTED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS_CODE" NUMBER, 
	"UNLIST_BY" NVARCHAR2(50), 
	"UNLIST_ON" TIMESTAMP (6), 
	"UNLIST_REMARK" NVARCHAR2(200), 
	"APPROVE_REMOVE" NUMBER(1,0), 
	"APPROVE_REMOVE_BY" NVARCHAR2(50), 
	"APPROVE_REMOVE_ON" TIMESTAMP (6), 
	"APPROVE_REMOVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INTERNAL_BLACKLIST_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INTERNAL_BLACKLIST_ARCHIVE" 
   (	"ARCHIVEID" NUMBER, 
	"ID" NUMBER, 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"FULL_NAME" NVARCHAR2(200), 
	"ID_NUMBER" NVARCHAR2(20), 
	"LOAN_ID" NVARCHAR2(20), 
	"REASON" NVARCHAR2(200), 
	"BLACKLISTED_BY" NVARCHAR2(50), 
	"BLACKLISTED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS_CODE" NUMBER, 
	"UNLIST_BY" NVARCHAR2(20), 
	"UNLIST_ON" TIMESTAMP (6), 
	"UNLIST_REMARK" NVARCHAR2(200), 
	"APPROVE_REMOVE" NUMBER, 
	"APPROVE_REMOVE_BY" NVARCHAR2(50), 
	"APPROVE_REMOVE_ON" TIMESTAMP (6), 
	"APPROVE_REMOVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_INVITED_FRIENDS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_INVITED_FRIENDS" 
   (	"MWALLET_ACCOUNT" VARCHAR2(20 BYTE), 
	"INVITED_PHONENUMBER" VARCHAR2(20 BYTE), 
	"STATUS" VARCHAR2(20 BYTE), 
	"DATE_INVITED" DATE, 
	"DATE_ACCEPTED" VARCHAR2(20 BYTE), 
	"CUSTOMER_NAME" VARCHAR2(20 BYTE), 
	"CHANNEL" VARCHAR2(20 BYTE), 
	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"REFFERAL_C0DE" VARCHAR2(20 BYTE), 
	"POST_MINI_RESPONSE" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ISSUES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ISSUES" 
   (	"ID" NUMBER(18,0), 
	"CATEGORY_CODE" NUMBER DEFAULT 1, 
	"STATUS_CODE" NUMBER, 
	"DESCRIPTION" NVARCHAR2(2000), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"CUSTOMER_PHONE_NUMBER" NVARCHAR2(20), 
	"ASSIGNED_TO" NVARCHAR2(20), 
	"MAKER_REMARKS" NVARCHAR2(200), 
	"SUPERVISOR_REMARKS" NVARCHAR2(200), 
	"RESOLVER_REMARKS" NVARCHAR2(200), 
	"ASSIGNED_ON" TIMESTAMP (6), 
	"RESOLVED_ON" TIMESTAMP (6), 
	"ASSIGNED" NUMBER(1,0) DEFAULT 0, 
	"RESOLVED" NUMBER(1,0) DEFAULT 0, 
	"ISSUE_ID" NVARCHAR2(20), 
	"CUSTOMER_CATEGORY" NVARCHAR2(20), 
	"ID_NUMBER" NVARCHAR2(20), 
	"BANK" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"AGENT_NUMBER" NVARCHAR2(20), 
	"ASSIGNED_BY" NVARCHAR2(50), 
	"RESOLVED_BY" NVARCHAR2(50), 
	"OTHER_CATEGORY" NVARCHAR2(50), 
	"RE_ASSIGNED" NUMBER(1,0) DEFAULT 0, 
	"CUSTOMER_NAME" NVARCHAR2(50), 
	"RE_ASSIGN_COMMENTS" NVARCHAR2(200), 
	"UPDATED" NUMBER(1,0) DEFAULT 0, 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATE_COMMENTS" NVARCHAR2(200), 
	"EMAIL" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"REQUEST_SUBJECT" NVARCHAR2(50), 
	"REQUEST_STATUS" NVARCHAR2(20), 
	"PAYLOAD" NVARCHAR2(1000), 
	"CHANNEL" NVARCHAR2(20), 
	"TRN_REF_NO" NVARCHAR2(50), 
	"REQUEST_DESCRIPTION" NVARCHAR2(1000), 
	"RE_ASSIGNED_BY" VARCHAR2(30 BYTE), 
	"RE_ASSIGNED_TO" VARCHAR2(30 BYTE), 
	"RE_ASSIGNED_ON" TIMESTAMP (6), 
	"CLOSED" CHAR(1 BYTE) DEFAULT 0, 
	"CLOSED_ON" TIMESTAMP (6), 
	"CLOSED_BY" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ISSUES_CATEGORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ISSUES_CATEGORY" 
   (	"ID" NUMBER(18,0), 
	"CATEGORY_CODE" NVARCHAR2(50), 
	"CATEGORY_DESCRIPTION" NVARCHAR2(100), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"DECLINED" NUMBER(1,0), 
	"BANK_CODE" NVARCHAR2(20), 
	"SLA_TIMELINE" NUMBER(1,0), 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"CHECKER_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ITAX
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ITAX" 
   (	"ID" NUMBER, 
	"FIELD37" NVARCHAR2(20), 
	"STAGE" NVARCHAR2(20), 
	"ESLIP_NUMBER" NVARCHAR2(20), 
	"TAXPAYER_PIN" NVARCHAR2(20), 
	"TAX_CODE" NVARCHAR2(20), 
	"TAXPAYER_FULL_NAME" NVARCHAR2(200), 
	"TOTAL_AMOUNT" NUMBER(18,5), 
	"STATUS_CODE" NVARCHAR2(20), 
	"MESSAGE" NVARCHAR2(200), 
	"REQUEST_HEADERS" NVARCHAR2(200), 
	"FIELD39" NVARCHAR2(20), 
	"FIELD48" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_JOINT_ACCOUNT_MANDATE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_JOINT_ACCOUNT_MANDATE" 
   (	"ID" NUMBER(7,0), 
	"FIRST_NAME" NVARCHAR2(50), 
	"SURNAME" NVARCHAR2(50), 
	"OTHER_NAMES" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"GENDER" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(50), 
	"DOB" DATE, 
	"ACCOUNT_NUMBER" NVARCHAR2(50), 
	"MANDATE_ROLE_CODE" NVARCHAR2(50), 
	"AMOUNT_LIMIT" NUMBER(18,5), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_JOINT_ACCOUNT_REGISTRATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_JOINT_ACCOUNT_REGISTRATION" 
   (	"ID" NUMBER(7,0), 
	"COMPANY_NAME" NVARCHAR2(50), 
	"REGISTRATION_NUMBER" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"ACCOUNT_NUMBER" NVARCHAR2(50), 
	"COMPANY_LIMIT" NUMBER(18,5), 
	"ACCOUNT_STATUS" NVARCHAR2(50), 
	"CURRENCY" NVARCHAR2(50), 
	"ACCOUNT_TYPE" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"CUSTOMER_ID" NUMBER(7,0), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_KEY_HISTORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_KEY_HISTORY" 
   (	"ID" NUMBER, 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"KEY_HASH" NVARCHAR2(500), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LANGUAGES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LANGUAGES" 
   (	"ID" NUMBER, 
	"LANGUAGE_CODE" NVARCHAR2(50), 
	"LANGUAGE_DESCRIPTION" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LIMIT_CHECK
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LIMIT_CHECK" 
   (	"ID" NUMBER, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"DEBIT_ACCOUNT" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(20), 
	"FIELD24" NVARCHAR2(10), 
	"FIELD100" NVARCHAR2(20), 
	"TXN_AMOUNT" NUMBER(18,5), 
	"PER_CUSTOMER_LIMIT" NUMBER(18,5), 
	"WORKING_DATE" DATE, 
	"DR_AMOUNT_PERACC" NUMBER(18,5), 
	"DR_AMOUNT_OTHER" NUMBER(18,5), 
	"DR_AMOUNT_WALLET" NUMBER(18,5), 
	"RESP_CODE" NVARCHAR2(20), 
	"NARRATION" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LINKED_ACCOUNTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LINKED_ACCOUNTS" 
   (	"ID" NUMBER, 
	"PHONENUMBER" NVARCHAR2(20), 
	"LINKEDACCOUNT" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"CBS_ACCOUNTNAME" NVARCHAR2(100), 
	"CBS_ACCOUNTNUMBER" NVARCHAR2(50), 
	"CBS_MOBILENUMBER" NVARCHAR2(20), 
	"CBS_NATIONAL_ID" NVARCHAR2(20), 
	"CBS_ACCOUNTSTATUS" NVARCHAR2(20), 
	"CBS_CUSTOMERID" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"DAILY_TXN_LIMIT" NUMBER(8,2), 
	"ACCOUNTTYPE" NVARCHAR2(20), 
	"ACCOUNTCLASS" NVARCHAR2(20), 
	"STATUS" NUMBER(1,0), 
	"DATE_LINKED" TIMESTAMP (6), 
	"LEVEL1AUTHORISED" CHAR(1 BYTE), 
	"LEVEL1AUTHORISEDON" TIMESTAMP (6), 
	"LEVEL1AUTHORISEDBY" NVARCHAR2(50), 
	"APPROVALREMARKS" NVARCHAR2(200), 
	"LINKEDBY" NVARCHAR2(50), 
	"LINKEDON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSIONID" NVARCHAR2(50), 
	"REJECTEDBY" NVARCHAR2(50), 
	"REJECTEDON" TIMESTAMP (6), 
	"REJECTREMARK" NVARCHAR2(200), 
	"BLOCKEDBY" NVARCHAR2(50), 
	"BLOCKEDON" TIMESTAMP (6), 
	"BLOCKREMARK" NVARCHAR2(200), 
	"UNBLOCKBY" NVARCHAR2(50), 
	"UNBLOCKEDON" TIMESTAMP (6), 
	"UNBLOCKREMARK" NVARCHAR2(200), 
	"APPROVEUNBLOCKBY" NVARCHAR2(50), 
	"APPROVEUNBLOCKON" TIMESTAMP (6), 
	"APPROVEUNBLOCKREMARK" NVARCHAR2(200), 
	"CLOSEREQUESTBY" NVARCHAR2(50), 
	"CLOSEREQUESTON" TIMESTAMP (6), 
	"CLOSEREQUESTREMARK" NVARCHAR2(200), 
	"REJECTCLOSEBY" NVARCHAR2(50), 
	"REJECTCLOSEON" TIMESTAMP (6), 
	"REJECTCLOSEREMARK" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_LINKED_ACCOUNTS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LINKED_ACCOUNTS_ARCHIVE" 
   (	"ID" NUMBER, 
	"PHONENUMBER" NVARCHAR2(20), 
	"LINKEDACCOUNT" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"CBS_ACCOUNTNAME" NVARCHAR2(100), 
	"CBS_ACCOUNTNUMBER" NVARCHAR2(50), 
	"CBS_MOBILENUMBER" NVARCHAR2(20), 
	"CBS_NATIONAL_ID" NVARCHAR2(20), 
	"CBS_ACCOUNTSTATUS" NVARCHAR2(20), 
	"CBS_CUSTOMERID" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"DAILY_TXN_LIMIT" NUMBER(8,2), 
	"ACCOUNTTYPE" NVARCHAR2(20), 
	"ACCOUNTCLASS" NVARCHAR2(20), 
	"STATUS" NUMBER(1,0), 
	"DATE_LINKED" TIMESTAMP (6), 
	"LEVEL1AUTHORISED" CHAR(1 BYTE), 
	"LEVEL1AUTHORISEDON" TIMESTAMP (6), 
	"LEVEL1AUTHORISEDBY" NVARCHAR2(50), 
	"APPROVALREMARKS" NVARCHAR2(200), 
	"LINKEDBY" NVARCHAR2(50), 
	"LINKEDON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSIONID" NVARCHAR2(50), 
	"REJECTEDBY" NVARCHAR2(50), 
	"REJECTEDON" TIMESTAMP (6), 
	"REJECTREMARK" NVARCHAR2(200), 
	"BLOCKEDBY" NVARCHAR2(50), 
	"BLOCKEDON" TIMESTAMP (6), 
	"BLOCKREMARK" NVARCHAR2(200), 
	"UNBLOCKBY" NVARCHAR2(50), 
	"UNBLOCKEDON" TIMESTAMP (6), 
	"UNBLOCKREMARK" NVARCHAR2(200), 
	"APPROVEUNBLOCKBY" NVARCHAR2(50), 
	"APPROVEUNBLOCKON" TIMESTAMP (6), 
	"APPROVEUNBLOCKREMARK" NVARCHAR2(200), 
	"CLOSEREQUESTBY" NVARCHAR2(50), 
	"CLOSEREQUESTON" TIMESTAMP (6), 
	"CLOSEREQUESTREMARK" NVARCHAR2(200), 
	"REJECTCLOSEBY" NVARCHAR2(50), 
	"REJECTCLOSEON" TIMESTAMP (6), 
	"REJECTCLOSEREMARK" NVARCHAR2(200), 
	"CUSTOMER_NO" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LINKED_ACCOUNT_STATUS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LINKED_ACCOUNT_STATUS" 
   (	"ID" NUMBER, 
	"STATUSCODE" NVARCHAR2(20), 
	"DESCRIPTION" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_BANK_EXPOSURE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_BANK_EXPOSURE" 
   (	"ID" NUMBER, 
	"MAX_AMOUNT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(18,5), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_CLASS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_CLASS" 
   (	"ID" NUMBER, 
	"MINDAYS" NUMBER, 
	"MAXDAYS" NUMBER, 
	"CLASS" NVARCHAR2(20), 
	"CBK_CLASS" NVARCHAR2(20), 
	"CBK_DESCRIPTION" NVARCHAR2(50), 
	"PROVISSIONRATE" NUMBER(18,5)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_COMPANY_MOU
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_COMPANY_MOU" 
   (	"ID" NUMBER, 
	"COMPANY_CODE" NVARCHAR2(20), 
	"COMPANY_NAME" NVARCHAR2(50), 
	"TELEPHONE_NUMBER" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"LOCATION" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_CRB_SCORE_RANGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_CRB_SCORE_RANGE" 
   (	"ID" NUMBER, 
	"CLASS" NVARCHAR2(50), 
	"RANGEFROM" NUMBER(8,2), 
	"RANGETO" NUMBER(8,2), 
	"WEIGHT" NUMBER(8,2), 
	"CREATEDBY" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVEDBY" NVARCHAR2(50), 
	"APPROVEDON" TIMESTAMP (6), 
	"APPROVEREMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_DECLINED
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_DECLINED" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(50), 
	"MOBILENUMBER" NVARCHAR2(20), 
	"CUSTOMERACCOUNT" NVARCHAR2(20), 
	"CBS_ACCOUNTNUMBER" NVARCHAR2(20), 
	"PRODUCTCODE" NVARCHAR2(20), 
	"AMOUNTBORROWED" NUMBER(18,5), 
	"DECLINEREASON" NVARCHAR2(200), 
	"CHANNEL" NVARCHAR2(20), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_DEFAULTER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_DEFAULTER" 
   (	"ID" NUMBER, 
	"LOANID" NVARCHAR2(20), 
	"PENALTY" NUMBER(18,5), 
	"WORKINGDATE" DATE, 
	"DATEADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CURRENTPRINCIPALBALANCE" NUMBER(18,5), 
	"CURRENTINTERESTBALANCE" NUMBER(18,5), 
	"CURRENTTOTALBALANCE" NUMBER(18,5), 
	"AMOUNTINARREARSPRINCIPAL" NUMBER(18,5), 
	"AMOUNTINARREARSINTEREST" NUMBER(18,5), 
	"AMOUNTINARREARSTOTAL" NUMBER(18,5), 
	"TOTALINSTALMENTS" NUMBER, 
	"INSTALLMENTSPAID" NUMBER, 
	"INSTALMENTSREMAINING" NUMBER, 
	"TOTALPRINCIPALPAID" NUMBER(18,5), 
	"TOTALINTPAID" NUMBER(18,5), 
	"LASTREPAYDATE" DATE, 
	"MATURITYDATE" DATE, 
	"DATEWHENARREARSSTART" DATE, 
	"DAYSINARREARS" NUMBER, 
	"CLASS" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_DETAILS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_DETAILS" 
   (	"ID" NUMBER, 
	"LOANID" NVARCHAR2(20), 
	"ACCOUNTNO" NVARCHAR2(20), 
	"CUSTACCOUNT" NVARCHAR2(20), 
	"MOBILENO" NVARCHAR2(20), 
	"CBS_ACCOUNT" NVARCHAR2(20), 
	"PRODUCTCODE" NVARCHAR2(20), 
	"INTERESTRATE" NUMBER(18,5), 
	"LOANLIMITAMOUNT" NUMBER(18,5), 
	"PRINCIPALAMOUNT" NUMBER(18,5), 
	"INTEREST" NUMBER(18,5), 
	"TOTALFACILITYAMOUNT" NUMBER(18,5), 
	"APPLICATIONFEERATE" NUMBER(18,5), 
	"APPLICATIONFEEAMOUNT" NUMBER(18,5), 
	"GRACEPERIOD" NUMBER, 
	"REPAYMENTPERIOD" NUMBER(18,5), 
	"REPAYMENTTOTALAMOUNT" NUMBER(18,5), 
	"REPAYMENTINTERESTCOMPONENT" NUMBER(18,5), 
	"REPAYMENTPRINCIPALCOMPONENT" NUMBER(18,5), 
	"REPAYMENTFREQUENCY" NVARCHAR2(20), 
	"PAYMENTFREQUENCY" NUMBER, 
	"CURRENTTOTALBALANCE" NUMBER(18,5), 
	"CURRENTPRINCIPALBALANCE" NUMBER(18,5), 
	"CURRENTINTERESTBALANCE" NUMBER(18,5), 
	"CBS_BALANCE" NUMBER(18,5), 
	"ROLLEDOVER" NUMBER(1,0), 
	"ROLLOVERDUEDATE" DATE, 
	"ROLLOVERFEEAMOUNT" NUMBER(18,5), 
	"PRINCIPLEREPAYMENTSTART" DATE, 
	"LOANSTATUS" NVARCHAR2(20), 
	"LOANCOUNT" NUMBER(1,0), 
	"FINALINSTALLMENTDATE" DATE, 
	"PREVREPAYMENTDATE" TIMESTAMP (6), 
	"FULLREPAYMENTDATE" TIMESTAMP (6), 
	"SECTORCODE" NVARCHAR2(20), 
	"SUBSECTORCODE" NVARCHAR2(20), 
	"LOANTYPE" NVARCHAR2(20), 
	"OVERDRAFTLOAN" NUMBER(1,0), 
	"BUSINESSLOAN" NUMBER(1,0), 
	"ISLAMICLOAN" NUMBER(1,0), 
	"SCHEDULETYPE" NVARCHAR2(20), 
	"ASSETCOST" NUMBER(18,5), 
	"MARKUPRATE" NUMBER(18,5), 
	"OTHERCOSTS" NUMBER(18,5), 
	"INSURANCECOMPANY" NVARCHAR2(20), 
	"INSURANCEAMOUNT" NUMBER(18,5), 
	"INSURANCEADMNFEE" NUMBER(18,5), 
	"COMPANYCODE" NVARCHAR2(20), 
	"LOANCLASS" NVARCHAR2(20), 
	"INARREARS" NUMBER(1,0), 
	"ARREARSCHECKED" NUMBER(1,0), 
	"DATEARREARED" DATE, 
	"DATEINARREARS" DATE, 
	"AMOUNTINARREARS" NUMBER(18,5), 
	"AMOUNTINARREARSPRINCIPAL" NUMBER(18,5), 
	"AMOUNTINARREARSINTEREST" NUMBER(18,5), 
	"DAYSINARREARS" NUMBER(1,0), 
	"PREPAYMENT" NUMBER(18,5), 
	"PENALTY" NUMBER(18,5), 
	"COMPLETEDSTATUS" NUMBER(1,0), 
	"CREATEDBY" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"COMMENTS" NVARCHAR2(50), 
	"APPLICATIONDATE" TIMESTAMP (6), 
	"EXTERNALREFID" NVARCHAR2(50), 
	"LEVEL1AUTHORIZED" NUMBER(1,0), 
	"LEVEL1AUTHORIZEDON" TIMESTAMP (6), 
	"LEVEL1AUTHORIZEDBY" NVARCHAR2(50), 
	"LEVEL1REJECTED" NUMBER(1,0), 
	"LEVEL1REJECTEDON" TIMESTAMP (6), 
	"LEVEL1REJECTEDBY" NVARCHAR2(50), 
	"LEVEL1REMARKS" NVARCHAR2(200), 
	"LEVEL2AUTHORIZED" NUMBER(1,0), 
	"LEVEL2AUTHORIZEDON" TIMESTAMP (6), 
	"LEVEL2AUTHORIZEDBY" NVARCHAR2(50), 
	"LEVEL2REJECTED" NUMBER(1,0), 
	"LEVEL2REJECTEDON" TIMESTAMP (6), 
	"LEVEL2REJECTEDBY" NVARCHAR2(50), 
	"LEVEL2REMARKS" NVARCHAR2(200), 
	"LEVEL3AUTHORIZED" NUMBER(1,0), 
	"LEVEL3AUTHORIZEDON" TIMESTAMP (6), 
	"LEVEL3AUTHORIZEDBY" NVARCHAR2(50), 
	"LEVEL3REJECTED" NUMBER(1,0), 
	"LEVEL3REJECTEDON" TIMESTAMP (6), 
	"LEVEL3REJECTEDBY" NVARCHAR2(50), 
	"LEVEL3REMARKS" NVARCHAR2(50), 
	"ANALYSISFEEPAID" NUMBER(1,0), 
	"ANALYSISFEETRXCODE" NVARCHAR2(50), 
	"OTHERFEES" NUMBER(18,5), 
	"LEVEL4AUTHORIZED" NUMBER(1,0), 
	"LEVEL4AUTHORIZEDON" TIMESTAMP (6), 
	"LEVEL4AUTHORIZEDBY" NVARCHAR2(50), 
	"LEVEL4REJECTED" NUMBER(1,0), 
	"LEVEL4REJECTEDON" TIMESTAMP (6), 
	"LEVEL4REJECTEDBY" NVARCHAR2(50), 
	"LEVEL4REMARKS" NVARCHAR2(200), 
	"LEVEL1DISBURSED" NUMBER(1,0), 
	"LEVEL1DISBURSEMENTDATE" TIMESTAMP (6), 
	"LEVEL1DISBURSEDBY" NVARCHAR2(50), 
	"LEVEL1DISBURSEREMARKS" NVARCHAR2(200), 
	"LEVEL2DISBURSEMENTDATE" TIMESTAMP (6), 
	"LEVEL2DISBURSEDBY" NVARCHAR2(50), 
	"LEVEL2DISBURSED" NUMBER(1,0), 
	"DISBURSEDCHEQUENO" NVARCHAR2(50), 
	"DISBURSEMENTMODE" NVARCHAR2(50), 
	"DISBURSEMENTCANCELLED" NUMBER(1,0), 
	"DISBURSEMENTCANCELLEDBY" NVARCHAR2(50), 
	"DISBURSEMENTCANCELLEDON" TIMESTAMP (6), 
	"DISBURSEMENTCANCELREMARKS" NVARCHAR2(200), 
	"CHEQUEDATE" TIMESTAMP (6), 
	"CHEQUEAMOUNT" NUMBER(18,5), 
	"CHEQUEACCOUNTNO" NVARCHAR2(50), 
	"BANKNAME" NVARCHAR2(50), 
	"LEVEL2DISBURSEREMARKS" NVARCHAR2(200), 
	"RECOMMENDEDFORWRITEOFF" NUMBER(1,0), 
	"RECOMMENDEDBY" NVARCHAR2(50), 
	"DATERECOMMENDED" TIMESTAMP (6), 
	"RECOMMENDATIONREMARKS" NVARCHAR2(200), 
	"LEVEL1WRITTSOFF" NUMBER(1,0), 
	"LEVEL1WRITTSOFFBY" NVARCHAR2(50), 
	"LEVEL1WRITTSOFFON" TIMESTAMP (6), 
	"LEVEL1WRITTSOFFREJECTED" NUMBER(1,0), 
	"LEVEL1WRITTSOFFREJECTEDBY" NVARCHAR2(50), 
	"LEVEL1WRITTSOFFREJECTEDON" TIMESTAMP (6), 
	"LEVEL1WRITTSOFFREMARKS" NVARCHAR2(200), 
	"LEVEL2WRITTSOFF" NUMBER(1,0), 
	"LEVEL2WRITTSOFFBY" NVARCHAR2(50), 
	"LEVEL2WRITTSOFFON" TIMESTAMP (6), 
	"LEVEL2WRITTSOFFREJECTED" NUMBER(1,0), 
	"LEVEL2WRITTSOFFREJECTEDBY" NVARCHAR2(50), 
	"LEVEL2WRITTSOFFREJECTEDON" TIMESTAMP (6), 
	"LEVEL2WRITTSOFFREMARKS" NVARCHAR2(200), 
	"WRITTENOFF" NUMBER(1,0), 
	"WRITTENOFFBY" NVARCHAR2(50), 
	"DATEWRITTENOFF" TIMESTAMP (6), 
	"WRITEOFFREJECTED" NUMBER(1,0), 
	"WRITEOFFREJECTEDBY" NVARCHAR2(50), 
	"WRITEOFFREJECTEDON" TIMESTAMP (6), 
	"WRITEOFFCOMMENTS" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_MOU_CUSTOMER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_MOU_CUSTOMER" 
   (	"ID" NUMBER, 
	"COMPANY_CODE" NVARCHAR2(50), 
	"CUSTOMER_ACCOUNT" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"ID_NUMBER" NVARCHAR2(20), 
	"FULL_NAME" NVARCHAR2(200), 
	"STATUS" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"UPLOADED_FILE" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_PRODUCTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_PRODUCTS" 
   (	"ID" NUMBER, 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"PRINCIPAL_ACCOUNT" NVARCHAR2(20), 
	"INTEREST_ACCOUNT" NVARCHAR2(20), 
	"ACCRUED_INTEREST_ACCOUNT" NVARCHAR2(20), 
	"INTEREST_RECEIVABLE_ACCOUNT" NVARCHAR2(20), 
	"COMMISSION_GL" NVARCHAR2(20), 
	"PENALTY_INCOMEGL" NVARCHAR2(20), 
	"PENALTY_RECEIVABLE_ACCOUNT" NVARCHAR2(20), 
	"WRITTENOFF_PROVISSION_ACCOUNT" NVARCHAR2(20), 
	"WRITTENBACK_PROVISSION_ACCOUNT" NVARCHAR2(20), 
	"WRITEOFF_INCOME_ACCOUNT" NVARCHAR2(20), 
	"INTEREST_DUE" NUMBER(18,5), 
	"PENALTY_DUE" NUMBER(18,5), 
	"OVERPAYMENT" NUMBER(18,5), 
	"NANO_PRODUCT" NUMBER(1,0), 
	"MAXIMUM_AMOUNT" NUMBER(18,5), 
	"MINIMUM_AMOUNT" NUMBER(18,5), 
	"REPAYMENT_FREQUENCY" NVARCHAR2(10), 
	"REPAYMENT_PERIOD" NUMBER(1,0), 
	"INTEREST_RATE" NUMBER(18,5), 
	"APPLICATION_FEE" NUMBER(1,0), 
	"APPLICATION_FEE_MIN" NUMBER(18,5), 
	"APPLICATION_FEE_MAX" NUMBER(18,5), 
	"APPLICATION_FEE_RATE" NUMBER(18,5), 
	"EXCISE_DUTY" NUMBER(1,0), 
	"DISBURSEMENT_COMMISSION" NUMBER(18,5), 
	"GRACE_PERIOD" NUMBER(18,0), 
	"DELAYED_ANALYSIS_FEE" NUMBER(1,0), 
	"OTHER_FEE_ACCOUNT" NVARCHAR2(20), 
	"PENALTY" NUMBER(1,0), 
	"PENALTY_RATE" NUMBER(18,5), 
	"SCHEDULE_TYPE" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(20), 
	"MAKER_REMARKS" NVARCHAR2(200), 
	"APPROVED_BY" NVARCHAR2(50), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"PRODUCT_STATUS" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"ISMPESAAGENTPRODUCT" NUMBER(1,0), 
	"INTEREST_UPFRONT" NUMBER(1,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_RECOVERIES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_RECOVERIES" 
   (	"ID" NUMBER(10,0), 
	"LOANID" NVARCHAR2(100), 
	"REFERENCENUMBER" NVARCHAR2(100), 
	"ACCOUNTNUMBER" NVARCHAR2(100), 
	"TRANSACTIONCODE" NVARCHAR2(100), 
	"TRANSACTIONNARRATION" NVARCHAR2(100), 
	"PAYMENTMODE" NVARCHAR2(100), 
	"EARLYSETTLEMENTFEE" NUMBER(18,2), 
	"PENALTY" NUMBER(18,2), 
	"AMOUNTPAID" NUMBER(18,2), 
	"TOTALAMOUNT" NUMBER(18,2), 
	"INTERESTAMOUNT" NUMBER(18,2), 
	"PRINCIPALAMOUNT" NUMBER(18,2), 
	"TRANSACTIONDATETIME" TIMESTAMP (3), 
	"TRANSACTIONDATE" DATE, 
	"EXTERNALREF" NVARCHAR2(100), 
	"REPAYMENTNUMBER" NUMBER(10,0), 
	"ROLLOVERFEE" NUMBER(18,0) DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCHEDULE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCHEDULE" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"LOAN_ID" NVARCHAR2(20), 
	"REPAYMENT_NUMBER" NUMBER, 
	"REPAYMENT_DUE_DATE" DATE, 
	"ROLLOVER_DUEDATE" DATE, 
	"REPAYMENT_TOTAL_AMOUNT" NUMBER(18,5), 
	"REPAYMENT_PRINCIPAL_AMOUNT" NUMBER(18,5), 
	"REPAYMENT_INTEREST_AMOUNT" NUMBER(18,5), 
	"RUNNING_BALANCE" NUMBER(18,5), 
	"PRINCIPAL_PAID" NUMBER(18,5), 
	"INTEREST_PAID" NUMBER(18,5), 
	"TOTAL_PAID" NUMBER(18,5), 
	"SCHEDULE_PAID" NUMBER(1,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AUTHORIZER_BY" NVARCHAR2(50), 
	"AUTHORIZER_ON" TIMESTAMP (6), 
	"LAST_MODIFIED" TIMESTAMP (6), 
	"CHECKSUM" NVARCHAR2(50), 
	"DEFAULTED" NUMBER(1,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCHEDULE_REPAYMENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCHEDULE_REPAYMENT" 
   (	"ID" NUMBER, 
	"LOAN_ID" NVARCHAR2(20), 
	"REPAYMENT_NUMBER" NUMBER(8,5), 
	"PRINCIPAL_AMOUNT_PAID" NUMBER(8,5), 
	"INTEREST_AMOUNT_PAID" NUMBER(8,5), 
	"TOTAL_AMOUNT_PAID" NUMBER(8,5), 
	"TRXREF_NO" NVARCHAR2(20), 
	"DATE_PAID" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCHEDULE_TYPE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCHEDULE_TYPE" 
   (	"ID" NUMBER, 
	"SCHEDULE_TYPE_CODE" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCORE_LIMIT_RANGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCORE_LIMIT_RANGE" 
   (	"ID" NUMBER, 
	"SCORE_RANGE_FROM" NUMBER(18,5), 
	"SCORERANGETO" NUMBER(18,5), 
	"LOAN_LIMIT_AMOUNT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NUMBER, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCORING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCORING" 
   (	"ID" NUMBER, 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"ACCOUNT_AGE" NUMBER, 
	"DR_COUNT" NUMBER, 
	"CR_COUNT" NUMBER, 
	"AVG_DR_COUNT" NUMBER, 
	"AVG_CR_COUNT" NUMBER, 
	"ALL_TXN_COUNT" NUMBER, 
	"AVG_TXN_COUNT" NUMBER, 
	"DR_AMOUNT" NUMBER(18,5), 
	"CR_AMOUNT" NUMBER(18,5), 
	"AVG_DR_AMOUNT" NUMBER(18,5), 
	"AVG_CR_AMOUNT" NUMBER(18,5), 
	"ACCOUNT_BALANCEM1" NUMBER(18,5), 
	"ACCOUNT_BALANCEM2" NUMBER(18,5), 
	"ACCOUNT_BALANCEM3" NUMBER(18,5), 
	"AVG_ACCOUNT_BALANCE" NUMBER(18,5), 
	"INTERNALLOANCOUNT" NUMBER, 
	"AVG_LOANAMOUNT" NUMBER(18,5), 
	"EXTERNALLOANCOUNT" NUMBER, 
	"ADDRESSSTABILITY" NVARCHAR2(20), 
	"DATEADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CRB_GRADE" NVARCHAR2(20), 
	"CRB_SCORE" NUMBER(18,5), 
	"TOTALSCORE" NUMBER(18,5), 
	"SCOREDAMOUNT" NUMBER(18,5)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCORING_PARAM
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCORING_PARAM" 
   (	"ID" NUMBER, 
	"SCORINGPARAM" NVARCHAR2(50), 
	"PARAMDESCRIPTION" NVARCHAR2(500), 
	"MAXIMUMWEIGHT" NUMBER, 
	"CREATEDBY" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NUMBER, 
	"APPROVED" NUMBER, 
	"APPROVEDBY" NVARCHAR2(50), 
	"APPROVEDON" TIMESTAMP (6), 
	"APPROVEREMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_SCORING_PARAM_RANGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_SCORING_PARAM_RANGE" 
   (	"ID" NUMBER, 
	"SCORINGPARAM" NVARCHAR2(50), 
	"SCORERANGEFROM" NUMBER(8,5), 
	"SCORERANGETO" NUMBER(8,5), 
	"PARAMETERWEIGHT" NUMBER, 
	"CREATEDBY" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"STATUS" NUMBER, 
	"APPROVED" NUMBER(1,0), 
	"APPROVEDBY" NVARCHAR2(50), 
	"APPROVEDON" TIMESTAMP (6), 
	"APPROVEREMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOAN_STATUS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOAN_STATUS" 
   (	"ID" NUMBER, 
	"LOAN_STATUS_CODE" NVARCHAR2(20), 
	"LOAN_STATUS_NAME" NVARCHAR2(50), 
	"CRB_DESC" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"LAST_MODIFIED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOCK_SAVING_ACCOUNT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOCK_SAVING_ACCOUNT" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(50), 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"CR_ACCOUNT" NVARCHAR2(50), 
	"FIELD24" NVARCHAR2(10), 
	"SAVING_TERM" NUMBER, 
	"INTEREST_RATE" NUMBER(18,5), 
	"MIN_SAVING_AMOUNT" NUMBER(18,5), 
	"TARGET_AMOUNT" NUMBER(18,5), 
	"START_DATE" DATE, 
	"MATURITY_DATE" DATE, 
	"INTEREST_EARNED" NUMBER(18,5), 
	"MATURED" NUMBER(1,0), 
	"TERMINATED" NUMBER(1,0), 
	"TERMINATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOCK_SAVING_ACCRUAL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOCK_SAVING_ACCRUAL" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"ACCOUNT_BALANCE" NUMBER(18,5), 
	"INTEREST_EARNED" NUMBER(18,5), 
	"WORKING_DATE" DATE, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOYALITY_POINTS_MAPPING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOYALITY_POINTS_MAPPING" 
   (	"ID" NUMBER(18,0), 
	"FIELD3" NVARCHAR2(50), 
	"FIELD100" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"REWORKED" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"STATUS" CHAR(1 BYTE) DEFAULT 1, 
	"AMOUNT_PER_POINT" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_LOYALTYPOINTS_MATRIX
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_LOYALTYPOINTS_MATRIX" 
   (	"ID" NUMBER, 
	"RANGE_FROM" VARCHAR2(20 BYTE), 
	"RANGE_TO" VARCHAR2(20 BYTE), 
	"TYPE" VARCHAR2(20 BYTE), 
	"ACTIVE" VARCHAR2(20 BYTE), 
	"START_AT" VARCHAR2(20 BYTE), 
	"END_AT" VARCHAR2(20 BYTE), 
	"POINTS" VARCHAR2(20 BYTE), 
	"PROCODE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANTS" 
   (	"ID" NUMBER(19,0), 
	"MERCHANT_ID" NVARCHAR2(100), 
	"CATEGORY_ID" NVARCHAR2(100) DEFAULT NULL, 
	"SERVICE_ID" NVARCHAR2(100) DEFAULT NULL, 
	"MERCHANT_NAME" NVARCHAR2(100) DEFAULT NULL, 
	"MOBILE_NUMBER" NVARCHAR2(100) DEFAULT NULL, 
	"WEBSITE" NVARCHAR2(100) DEFAULT NULL, 
	"BIO" NVARCHAR2(100), 
	"DESCRIPTION" NVARCHAR2(1000), 
	"STATUS" NUMBER(1,0) DEFAULT '1', 
	"CREATED_BY" NVARCHAR2(100) DEFAULT NULL, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CUST_NO" NVARCHAR2(100) DEFAULT NULL, 
	"INDIVIDUAL" NUMBER(1,0) DEFAULT '0', 
	"CONTACT_PERSON_NAME" NVARCHAR2(100), 
	"CONTACT_PERSON_MOBILE" NVARCHAR2(50), 
	"PHYSICAL_ADDRESS" NVARCHAR2(100), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARKS" VARCHAR2(200 BYTE), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(20), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETE_REMARKS" VARCHAR2(20 BYTE), 
	"EMAIL_ADDRESS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_CATEGORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_CATEGORY" 
   (	"ID" NUMBER(19,0), 
	"CATEGORY_CODE" NVARCHAR2(50), 
	"CATEGORY_NAME" NVARCHAR2(150), 
	"ACCOUNT_PREFIX" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(550), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (3), 
	"ACTIVE" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (3), 
	"APPROVE_REMARK" NVARCHAR2(2000), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (3), 
	"DELETE_REMARKS" NVARCHAR2(2000)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_CUSTOMERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_CUSTOMERS" 
   (	"ID" NUMBER, 
	"CUST_CODE" VARCHAR2(20 BYTE), 
	"MERCHANT_CODE" VARCHAR2(20 BYTE), 
	"CUST_NAME" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_DEALS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_DEALS" 
   (	"ID" NUMBER(19,0), 
	"MERCHANT_ID" NUMBER(10,0), 
	"ORIGINAL_PRICE" NUMBER(18,2), 
	"DURATION_DAYS" NUMBER(10,0), 
	"DISCOUNT_VALUE" NUMBER(18,2), 
	"DISCOUNT_TYPE" NVARCHAR2(50), 
	"AMOUNT_REQUIRED" NUMBER(1,0), 
	"MIN_AMOUNT" NUMBER(18,2), 
	"DEAL_TITLE" NVARCHAR2(1000), 
	"DEAL_DESCRIPTION" NVARCHAR2(200), 
	"DEAL_START_DATE" TIMESTAMP (6), 
	"START_DATE" TIMESTAMP (6), 
	"END_DATE" TIMESTAMP (6), 
	"ACTIVE" NUMBER(1,0) DEFAULT 0, 
	"UPLOAD_ID" NVARCHAR2(50), 
	"CATEGORY_NAME" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(200), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARKS" NVARCHAR2(200), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(200), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETE_REMARKS" NVARCHAR2(200), 
	"DEAL_CODE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_LOGIN
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_LOGIN" 
   (	"ID" NUMBER, 
	"USERNAME" NVARCHAR2(20), 
	"FULL_NAMES" NVARCHAR2(30), 
	"MERCHANT_ID" NUMBER, 
	"EMAIL" NVARCHAR2(40), 
	"LOGIN_TRIALS" NUMBER DEFAULT 0, 
	"CREATED_ON" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(30), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_BY" NVARCHAR2(30), 
	"BLOCKED" NUMBER DEFAULT 0, 
	"PASSWORD_HASH" NVARCHAR2(255), 
	"UPDATES" NVARCHAR2(1000), 
	"IS_UPDATED" NUMBER DEFAULT 0, 
	"IS_MERCHANT" NUMBER DEFAULT 0, 
	"DELETED" NUMBER DEFAULT 0, 
	"PHONE_NO" NVARCHAR2(20), 
	"DOB" DATE, 
	"ACTIVE" NUMBER DEFAULT 1, 
	"MERCHANT_UNIQUE_ID" NVARCHAR2(50), 
	"LOGGED_IN" NUMBER DEFAULT 0, 
	"PAN" NVARCHAR2(20), 
	"COMMENTS" NVARCHAR2(100), 
	"BRANCH" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_OUTLET
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_OUTLET" 
   (	"ID" NUMBER(10,0), 
	"MERCHANT_ID" NVARCHAR2(100), 
	"MERCHANT_CODE" NVARCHAR2(100), 
	"OUTLET_NAME" NVARCHAR2(150), 
	"LOCATION_NAME" NVARCHAR2(150), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"ALT_MOBILE_NUMBER" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(150), 
	"GEO_LAT" NVARCHAR2(100), 
	"GEO_LNG" NVARCHAR2(100), 
	"IS_MAIN" NUMBER(3,0) DEFAULT '0', 
	"STATUS" NUMBER(3,0) DEFAULT '1', 
	"CREATED_BY" NVARCHAR2(100) DEFAULT NULL, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"INTEREST_RATE_TYPE" NVARCHAR2(10), 
	"INTEREST_RATE" BINARY_DOUBLE, 
	"MERCHANT_PAN" NVARCHAR2(100), 
	"BLOCKED" NUMBER(1,0), 
	"PASSWORD_HASH" NVARCHAR2(255), 
	"LOGIN_TRIALS" NUMBER(10,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARKS" NVARCHAR2(200), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETE_REMARKS" NVARCHAR2(200), 
	"QR_CODE" NVARCHAR2(2000)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MERCHANT_OUTLET_X
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MERCHANT_OUTLET_X" 
   (	"ID" NUMBER, 
	"OUTLET_NAME" NVARCHAR2(100), 
	"POSTAL_ADDRESS" NVARCHAR2(30), 
	"CONTACT_PHONENO" NVARCHAR2(20), 
	"BANK_NAME" NVARCHAR2(50), 
	"BANK_BRANCH" NVARCHAR2(20), 
	"BANK_ACCO_NO" NVARCHAR2(50), 
	"BANK_ACCO_NAME" NVARCHAR2(150), 
	"VIRTUAL_PAN" NVARCHAR2(20), 
	"QR_CODE" NVARCHAR2(100), 
	"TILL_NO" NVARCHAR2(20), 
	"NOTIFICATION_MODE" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(30), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(*,0) DEFAULT 0, 
	"APPROVED_ON" DATE, 
	"UPDATES" NVARCHAR2(2000), 
	"IS_UPDATED" NUMBER(*,0) DEFAULT 0, 
	"APPROVED_BY" NVARCHAR2(30), 
	"PHYSICAL_ADDRESS" NVARCHAR2(30), 
	"CONTACT_PERSON" NVARCHAR2(30), 
	"MERCHANT_ID" NUMBER(*,0), 
	"BILLING_TERMS" NVARCHAR2(100), 
	"SALES_ESTIMATE_PERMONTH" NUMBER(*,0), 
	"AVERAGE_TICKET_SIZE" NUMBER(*,0), 
	"OPERATION_YEARS" NUMBER, 
	"LIMIT" NUMBER(*,0), 
	"STREET" NVARCHAR2(30), 
	"COUNTRY" NVARCHAR2(30), 
	"CITY" NVARCHAR2(30), 
	"TOWN" NVARCHAR2(30), 
	"MERCHANT_UNIQUE_ID" NVARCHAR2(30), 
	"DELETED" NUMBER DEFAULT 0, 
	"ACTIVE" NUMBER DEFAULT 0, 
	"COMMENTS" NVARCHAR2(500), 
	"REFNO" NVARCHAR2(50), 
	"SETTLEMENT_ACCOUNT" NVARCHAR2(50), 
	"DSO_CODE" NVARCHAR2(20), 
	"BRANCH" NVARCHAR2(50), 
	"REGION" NVARCHAR2(50), 
	"HQAPPROVAL" NUMBER DEFAULT 0, 
	"APPROVECOMMENTS" NVARCHAR2(300), 
	"UPDATECOMMENTS" NVARCHAR2(300), 
	"MVISAID" NVARCHAR2(100), 
	"SCANNED_DOC" NVARCHAR2(100), 
	"MIGRATED_UPDATED" NUMBER DEFAULT 0, 
	"USER_BRANCH_CODE" NVARCHAR2(200), 
	"SCANNED_DOC1" NVARCHAR2(200), 
	"SCANNED_DOC2" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MESSAGES_CBS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MESSAGES_CBS" 
   (	"ID" NUMBER, 
	"FIELD0" NVARCHAR2(10), 
	"FIELD1" NVARCHAR2(10), 
	"FIELD2" NVARCHAR2(20), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD4" NUMBER(18,5), 
	"FIELD5" NVARCHAR2(20), 
	"FIELD6" NVARCHAR2(20), 
	"FIELD7" NVARCHAR2(20), 
	"FIELD8" NVARCHAR2(20), 
	"FIELD9" NVARCHAR2(20), 
	"FIELD10" NVARCHAR2(20), 
	"FIELD11" NVARCHAR2(50), 
	"FIELD12" NVARCHAR2(50), 
	"FIELD13" NVARCHAR2(50), 
	"FIELD14" NVARCHAR2(50), 
	"FIELD15" NVARCHAR2(50), 
	"FIELD16" NVARCHAR2(50), 
	"FIELD17" NVARCHAR2(50), 
	"FIELD18" NVARCHAR2(50), 
	"FIELD19" NVARCHAR2(50), 
	"FIELD20" NVARCHAR2(50), 
	"FIELD21" NVARCHAR2(50), 
	"FIELD22" NVARCHAR2(50), 
	"FIELD23" NVARCHAR2(50), 
	"FIELD24" NVARCHAR2(20), 
	"FIELD25" NVARCHAR2(50), 
	"FIELD26" NVARCHAR2(50), 
	"FIELD27" NVARCHAR2(50), 
	"FIELD28" NVARCHAR2(50), 
	"FIELD29" NVARCHAR2(50), 
	"FIELD30" NVARCHAR2(50), 
	"FIELD31" NVARCHAR2(50), 
	"FIELD32" NVARCHAR2(20), 
	"FIELD33" NVARCHAR2(50), 
	"FIELD34" NVARCHAR2(50), 
	"FIELD35" NVARCHAR2(50), 
	"FIELD36" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(50), 
	"FIELD38" NVARCHAR2(50), 
	"FIELD39" NVARCHAR2(20), 
	"FIELD40" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"FIELD43" NVARCHAR2(50), 
	"FIELD44" NVARCHAR2(50), 
	"FIELD45" NVARCHAR2(50), 
	"FIELD46" NVARCHAR2(50), 
	"FIELD47" NVARCHAR2(50), 
	"FIELD48" NVARCHAR2(200), 
	"FIELD49" NVARCHAR2(20), 
	"FIELD50" NVARCHAR2(50), 
	"FIELD51" NVARCHAR2(50), 
	"FIELD52" NVARCHAR2(50), 
	"FIELD53" NVARCHAR2(50), 
	"FIELD54" NVARCHAR2(200), 
	"FIELD55" NVARCHAR2(50), 
	"FIELD56" NVARCHAR2(50), 
	"FIELD57" NVARCHAR2(50), 
	"FIELD58" NVARCHAR2(50), 
	"FIELD59" NVARCHAR2(50), 
	"FIELD60" NVARCHAR2(50), 
	"FIELD61" NVARCHAR2(50), 
	"FIELD62" NVARCHAR2(50), 
	"FIELD63" NVARCHAR2(50), 
	"FIELD64" NVARCHAR2(50), 
	"FIELD65" NVARCHAR2(50), 
	"FIELD66" NVARCHAR2(50), 
	"FIELD67" NVARCHAR2(50), 
	"FIELD68" NVARCHAR2(200), 
	"FIELD69" NVARCHAR2(50), 
	"FIELD70" NVARCHAR2(50), 
	"FIELD71" NVARCHAR2(50), 
	"FIELD72" NVARCHAR2(50), 
	"FIELD73" NVARCHAR2(50), 
	"FIELD74" NVARCHAR2(50), 
	"FIELD75" NVARCHAR2(50), 
	"FIELD76" NVARCHAR2(50), 
	"FIELD77" NVARCHAR2(50), 
	"FIELD78" NVARCHAR2(50), 
	"FIELD79" NVARCHAR2(50), 
	"FIELD80" NVARCHAR2(200), 
	"FIELD81" NVARCHAR2(50), 
	"FIELD82" NVARCHAR2(50), 
	"FIELD83" NVARCHAR2(50), 
	"FIELD84" NVARCHAR2(50), 
	"FIELD85" NVARCHAR2(50), 
	"FIELD86" NVARCHAR2(50), 
	"FIELD87" NVARCHAR2(50), 
	"FIELD88" NVARCHAR2(50), 
	"FIELD89" NVARCHAR2(50), 
	"FIELD90" NVARCHAR2(50), 
	"FIELD91" NVARCHAR2(50), 
	"FIELD92" NVARCHAR2(50), 
	"FIELD93" NVARCHAR2(50), 
	"FIELD94" NVARCHAR2(50), 
	"FIELD95" NVARCHAR2(50), 
	"FIELD96" NVARCHAR2(50), 
	"FIELD97" NVARCHAR2(50), 
	"FIELD98" NVARCHAR2(50), 
	"FIELD99" NVARCHAR2(50), 
	"FIELD100" NVARCHAR2(50), 
	"FIELD101" NVARCHAR2(50), 
	"FIELD102" NVARCHAR2(20), 
	"FIELD103" NVARCHAR2(20), 
	"FIELD104" NVARCHAR2(50), 
	"FIELD105" NVARCHAR2(50), 
	"FIELD106" NVARCHAR2(50), 
	"FIELD107" NVARCHAR2(50), 
	"FIELD108" NVARCHAR2(50), 
	"FIELD109" NVARCHAR2(50), 
	"FIELD110" NVARCHAR2(50), 
	"FIELD111" NVARCHAR2(50), 
	"FIELD112" NVARCHAR2(50), 
	"FIELD113" NVARCHAR2(50), 
	"FIELD114" NVARCHAR2(50), 
	"FIELD115" NVARCHAR2(50), 
	"FIELD116" NVARCHAR2(50), 
	"FIELD117" NVARCHAR2(50), 
	"FIELD118" NVARCHAR2(50), 
	"FIELD119" NVARCHAR2(50), 
	"FIELD120" NVARCHAR2(50), 
	"FIELD121" NVARCHAR2(50), 
	"FIELD122" NVARCHAR2(50), 
	"FIELD123" NVARCHAR2(50), 
	"FIELD124" NVARCHAR2(50), 
	"FIELD125" NVARCHAR2(50), 
	"FIELD126" NVARCHAR2(50), 
	"FIELD127" NVARCHAR2(50), 
	"FIELD128" NVARCHAR2(50), 
	"DATEX" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"WORKING_DATE" DATE DEFAULT SYSDATE, 
	"REVERSED" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MESSAGES_EXTERNAL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" 
   (	"ID" NUMBER, 
	"FIELD0" NVARCHAR2(10), 
	"FIELD1" NVARCHAR2(10), 
	"FIELD2" NVARCHAR2(20), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD4" NUMBER(18,5), 
	"FIELD5" NVARCHAR2(20), 
	"FIELD6" NVARCHAR2(20), 
	"FIELD7" NVARCHAR2(20), 
	"FIELD8" NVARCHAR2(20), 
	"FIELD9" NVARCHAR2(20), 
	"FIELD10" NVARCHAR2(20), 
	"FIELD11" NVARCHAR2(50), 
	"FIELD12" NVARCHAR2(50), 
	"FIELD13" NVARCHAR2(50), 
	"FIELD14" NVARCHAR2(50), 
	"FIELD15" NVARCHAR2(50), 
	"FIELD16" NVARCHAR2(50), 
	"FIELD17" NVARCHAR2(50), 
	"FIELD18" NVARCHAR2(50), 
	"FIELD19" NVARCHAR2(50), 
	"FIELD20" NVARCHAR2(50), 
	"FIELD21" NVARCHAR2(50), 
	"FIELD22" NVARCHAR2(50), 
	"FIELD23" NVARCHAR2(50), 
	"FIELD24" NVARCHAR2(20), 
	"FIELD25" NVARCHAR2(50), 
	"FIELD26" NVARCHAR2(50), 
	"FIELD27" NVARCHAR2(50), 
	"FIELD28" NVARCHAR2(50), 
	"FIELD29" NVARCHAR2(50), 
	"FIELD30" NVARCHAR2(50), 
	"FIELD31" NVARCHAR2(50), 
	"FIELD32" NVARCHAR2(20), 
	"FIELD33" NVARCHAR2(50), 
	"FIELD34" NVARCHAR2(50), 
	"FIELD35" NVARCHAR2(50), 
	"FIELD36" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(50), 
	"FIELD38" NVARCHAR2(50), 
	"FIELD39" NVARCHAR2(20), 
	"FIELD40" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"FIELD43" NVARCHAR2(50), 
	"FIELD44" NVARCHAR2(50), 
	"FIELD45" NVARCHAR2(50), 
	"FIELD46" NVARCHAR2(50), 
	"FIELD47" NVARCHAR2(50), 
	"FIELD48" NVARCHAR2(200), 
	"FIELD49" NVARCHAR2(20), 
	"FIELD50" NVARCHAR2(50), 
	"FIELD51" NVARCHAR2(50), 
	"FIELD52" NVARCHAR2(50), 
	"FIELD53" NVARCHAR2(50), 
	"FIELD54" NVARCHAR2(4000), 
	"FIELD55" NVARCHAR2(50), 
	"FIELD56" NVARCHAR2(50), 
	"FIELD57" NVARCHAR2(50), 
	"FIELD58" NVARCHAR2(50), 
	"FIELD59" NVARCHAR2(50), 
	"FIELD60" NVARCHAR2(50), 
	"FIELD61" NVARCHAR2(50), 
	"FIELD62" NVARCHAR2(50), 
	"FIELD63" NVARCHAR2(50), 
	"FIELD64" NVARCHAR2(50), 
	"FIELD65" NVARCHAR2(2000), 
	"FIELD66" NVARCHAR2(100), 
	"FIELD67" NVARCHAR2(50), 
	"FIELD68" NVARCHAR2(200), 
	"FIELD69" NVARCHAR2(50), 
	"FIELD70" NVARCHAR2(50), 
	"FIELD71" NVARCHAR2(50), 
	"FIELD72" NVARCHAR2(50), 
	"FIELD73" NVARCHAR2(50), 
	"FIELD74" NVARCHAR2(50), 
	"FIELD75" NVARCHAR2(50), 
	"FIELD76" NVARCHAR2(50), 
	"FIELD77" NVARCHAR2(50), 
	"FIELD78" NVARCHAR2(50), 
	"FIELD79" NVARCHAR2(50), 
	"FIELD80" NVARCHAR2(200), 
	"FIELD81" NVARCHAR2(50), 
	"FIELD82" NVARCHAR2(50), 
	"FIELD83" NVARCHAR2(50), 
	"FIELD84" NVARCHAR2(50), 
	"FIELD85" NVARCHAR2(50), 
	"FIELD86" NVARCHAR2(50), 
	"FIELD87" NVARCHAR2(50), 
	"FIELD88" NVARCHAR2(50), 
	"FIELD89" NVARCHAR2(50), 
	"FIELD90" NVARCHAR2(50), 
	"FIELD91" NVARCHAR2(50), 
	"FIELD92" NVARCHAR2(50), 
	"FIELD93" NVARCHAR2(50), 
	"FIELD94" NVARCHAR2(50), 
	"FIELD95" NVARCHAR2(50), 
	"FIELD96" NVARCHAR2(50), 
	"FIELD97" NVARCHAR2(50), 
	"FIELD98" NVARCHAR2(50), 
	"FIELD99" NVARCHAR2(50), 
	"FIELD100" NVARCHAR2(50), 
	"FIELD101" NVARCHAR2(50), 
	"FIELD102" NVARCHAR2(20), 
	"FIELD103" NVARCHAR2(20), 
	"FIELD104" NVARCHAR2(50), 
	"FIELD105" NVARCHAR2(50), 
	"FIELD106" NVARCHAR2(50), 
	"FIELD107" NVARCHAR2(50), 
	"FIELD108" NVARCHAR2(50), 
	"FIELD109" NVARCHAR2(50), 
	"FIELD110" NVARCHAR2(50), 
	"FIELD111" NVARCHAR2(50), 
	"FIELD112" NVARCHAR2(50), 
	"FIELD113" NVARCHAR2(50), 
	"FIELD114" NVARCHAR2(50), 
	"FIELD115" NVARCHAR2(50), 
	"FIELD116" NVARCHAR2(50), 
	"FIELD117" NVARCHAR2(50), 
	"FIELD118" NVARCHAR2(50), 
	"FIELD119" NVARCHAR2(50), 
	"FIELD120" NVARCHAR2(50), 
	"FIELD121" NVARCHAR2(50), 
	"FIELD122" NVARCHAR2(50), 
	"FIELD123" NVARCHAR2(50), 
	"FIELD124" NVARCHAR2(50), 
	"FIELD125" NVARCHAR2(50), 
	"FIELD126" NVARCHAR2(50), 
	"FIELD127" NVARCHAR2(50), 
	"FIELD128" NVARCHAR2(50), 
	"DATEX" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"WORKING_DATE" DATE DEFAULT SYSDATE, 
	"REVERSED" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MESSAGES_SMS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MESSAGES_SMS" 
   (	"ID" NUMBER, 
	"TRN_DATE_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"TRANSACTION_NO" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"MESSAGE" NVARCHAR2(500), 
	"PAGE_COUNT" NUMBER, 
	"CHANNEL" NVARCHAR2(20), 
	"TRIALS" NUMBER(1,0), 
	"PRIORITY" NUMBER(1,0), 
	"RESPONSE_CODE" NVARCHAR2(10), 
	"RESPONSE_MSG" NVARCHAR2(200), 
	"SENT" NUMBER(1,0), 
	"DELIVERED" NUMBER(1,0), 
	"TXN_TYPE" NVARCHAR2(20), 
	"EXCEPTION" NUMBER(1,0), 
	"DATE_CREATED" TIMESTAMP (6), 
	"DATE_SENT" TIMESTAMP (6), 
	"SMS_SERVICE_RESPONSE" NVARCHAR2(20), 
	"RESEND_COUNT" NUMBER(1,0), 
	"RESEND_BY" NVARCHAR2(50), 
	"RESEND_ON" TIMESTAMP (6), 
	"FIELD100" NVARCHAR2(50), 
	"SENDER_API" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MESSAGES_SMS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MESSAGES_SMS_ARCHIVE" 
   (	"ID" NUMBER, 
	"TRN_DATE_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"TRANSACTION_NO" NVARCHAR2(20), 
	"ACCOUNT_NUMBER" NVARCHAR2(20), 
	"MESSAGE" NVARCHAR2(500), 
	"PAGE_COUNT" NUMBER, 
	"CHANNEL" NVARCHAR2(20), 
	"TRIALS" NUMBER(1,0), 
	"PRIORITY" NUMBER(1,0), 
	"RESPONSE_CODE" NVARCHAR2(10), 
	"RESPONSE_MSG" NVARCHAR2(200), 
	"SENT" NUMBER(1,0), 
	"DELIVERED" NUMBER(1,0), 
	"TXN_TYPE" NVARCHAR2(20), 
	"EXCEPTION" NUMBER(1,0), 
	"DATE_CREATED" TIMESTAMP (6), 
	"DATE_SENT" TIMESTAMP (6), 
	"SMS_SERVICE_RESPONSE" NVARCHAR2(20), 
	"RESEND_COUNT" NUMBER(1,0), 
	"RESEND_BY" NVARCHAR2(50), 
	"RESEND_ON" TIMESTAMP (6), 
	"FIELD100" NVARCHAR2(50), 
	"SENDER_API" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MISMATCH
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MISMATCH" 
   (	"ID" NUMBER, 
	"TRXREF_NO" NVARCHAR2(50), 
	"TRX_SERIAL_NO" NVARCHAR2(50), 
	"CHANNEL" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"ACCOUNT_NO" NVARCHAR2(50), 
	"DR_CR" CHAR(2 BYTE), 
	"AMOUNT" NUMBER(18,5), 
	"NARRATION" NVARCHAR2(200), 
	"DATE_ADDED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_BASIC_BENEFIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_BASIC_BENEFIT" 
   (	"ID" NUMBER(7,0), 
	"COVER_TYPE_REFERENCE" NVARCHAR2(50), 
	"BENEFIT_DESCRIPTION" NVARCHAR2(50), 
	"BENEFIT_AMOUNT" NUMBER(11,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100), 
	"REWORK" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_REMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_BENEFICIARY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_BENEFICIARY" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"BENEFICIARY_NAME" NVARCHAR2(50), 
	"RELATIONSHIP" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_COVER_TYPE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_COVER_TYPE" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"COVER_TYPE" NVARCHAR2(50), 
	"FVR" CHAR(5 BYTE), 
	"RATE" NUMBER(18,5), 
	"MINIMUM_AMOUNT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_EXCESS_BENEFIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_EXCESS_BENEFIT" 
   (	"ID" NUMBER(7,0), 
	"COVER_TYPE_REFERENCE" NVARCHAR2(50), 
	"BENEFIT_DESCRIPTION" NVARCHAR2(50), 
	"FVR" NVARCHAR2(50), 
	"MINIMUM_AMOUNT" NUMBER(18,5), 
	"MAXIMUM_AMOUNT" NUMBER(18,5), 
	"BENEFIT_RATE" NUMBER(18,5), 
	"BENEFIT_AMOUNT" NUMBER(11,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100), 
	"REWORK" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_REMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_INSURANCE_REQUEST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_INSURANCE_REQUEST" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"FULL_NAME" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"INITIATOR_MOBILE_NUMBER" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(50), 
	"DOB" DATE, 
	"GENDER" NVARCHAR2(50), 
	"OCCUPATITION" NVARCHAR2(50), 
	"COVER_PERIOD" NVARCHAR2(50), 
	"COVER_TYPE" NVARCHAR2(50), 
	"COVER_START_DATE" DATE, 
	"COVER_END_DATE" DATE, 
	"INSURANCE_TYPE" NVARCHAR2(50), 
	"CAR_MAKE" NVARCHAR2(50), 
	"REGISTRATION_NUMBER" NVARCHAR2(50), 
	"CHASSIS_NUMBER" NVARCHAR2(50), 
	"ENGINE_CAPACITY" NVARCHAR2(50), 
	"ENGINE_NUMBER" NVARCHAR2(50), 
	"YEAR_OF_MANUFACTURE" DATE, 
	"IS_VALUED" NVARCHAR2(50), 
	"CURRENT_CAR_VALUE" NUMBER(18,5), 
	"PERIOD_MODE" NVARCHAR2(50), 
	"DEBIT_ACCOUNT" NVARCHAR2(50), 
	"TOTAL_PREMIUM_AMOUNT" NUMBER(18,5), 
	"PERSON_COVERED" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MOTORVEHICLE_OPTIONAL_BENEFIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MOTORVEHICLE_OPTIONAL_BENEFIT" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"COVER_TYPE_REFERENCE" NVARCHAR2(50), 
	"BENEFIT_DESCRIPTION" NVARCHAR2(50), 
	"FVR" NVARCHAR2(50), 
	"MINIMUM_AMOUNT" NUMBER(18,5), 
	"BENEFIT_RATE" NUMBER(18,5), 
	"BENEFIT_AMOUNT" NUMBER(11,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(100), 
	"REWORK" CHAR(1 BYTE), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_REMARK" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MVISA_MPASS_REGISTRATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MVISA_MPASS_REGISTRATION" 
   (	"ID" NUMBER, 
	"DATECREATED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"PRODUCTTYPE" VARCHAR2(50 BYTE), 
	"FIRSTNAME" VARCHAR2(50 BYTE), 
	"MIDDLENAME" VARCHAR2(50 BYTE), 
	"LASTNAME" VARCHAR2(50 BYTE), 
	"FULLNAME" VARCHAR2(150 BYTE), 
	"PHONENUMBER" VARCHAR2(20 BYTE), 
	"DOB" VARCHAR2(20 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE), 
	"POSTALCODE" VARCHAR2(20 BYTE), 
	"CITY" VARCHAR2(50 BYTE), 
	"COUNTRYCODE" VARCHAR2(20 BYTE), 
	"COUNTRY" VARCHAR2(50 BYTE), 
	"NATIONALITY" VARCHAR2(80 BYTE), 
	"STATECODE" VARCHAR2(20 BYTE), 
	"IDENTIFICATIONTYPE" VARCHAR2(50 BYTE), 
	"IDENTIFICATIONNUMBER" VARCHAR2(50 BYTE), 
	"REGISTRATIONDATE" DATE, 
	"CUSTOMERTYPE" VARCHAR2(50 BYTE), 
	"VIRTUALPAN" VARCHAR2(20 BYTE), 
	"ACCOUNTTYPE" VARCHAR2(30 BYTE), 
	"ACCOUNTNUMBER" VARCHAR2(20 BYTE), 
	"ALIAS" VARCHAR2(50 BYTE), 
	"ALIASTYPE" VARCHAR2(20 BYTE), 
	"MCC" VARCHAR2(100 BYTE) DEFAULT 7788, 
	"CIF" VARCHAR2(20 BYTE), 
	"ALIAS2" VARCHAR2(20 BYTE), 
	"INTERNAL" VARCHAR2(20 BYTE), 
	"ACQUIRING" VARCHAR2(20 BYTE), 
	"INTERNATIONAL" VARCHAR2(20 BYTE), 
	"GUID" VARCHAR2(100 BYTE), 
	"ACTIVE" NUMBER DEFAULT 1, 
	"UPPER_LIMIT" VARCHAR2(40 BYTE), 
	"LOWER_LIMIT" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_MVISA_PAN_LINKING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_MVISA_PAN_LINKING" 
   (	"ID" NUMBER, 
	"CUSTOMERTYPE" NVARCHAR2(20), 
	"CUSTOMERID" NVARCHAR2(20), 
	"CUSTOMERPAN" NVARCHAR2(20), 
	"ACCOUNTNO" NVARCHAR2(20), 
	"ACCOUNTTYPE" NVARCHAR2(20), 
	"CUSTOMERNAME" NVARCHAR2(200), 
	"MCC" NVARCHAR2(20), 
	"PHYSICALADDRESS" NVARCHAR2(200), 
	"TRNDATETIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ZIPCODE" NVARCHAR2(20), 
	"COUNTRY" NVARCHAR2(20), 
	"MVISAID" NVARCHAR2(20), 
	"BLOCKED" NUMBER DEFAULT 0, 
	"BLOCKREMARK" NVARCHAR2(500), 
	"BLOCKCHECKERREMARK" NVARCHAR2(500), 
	"GUID" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_NEXT_KIN
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_NEXT_KIN" 
   (	"ID" NUMBER, 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"KINNAME" NVARCHAR2(200), 
	"KINMOBILE" NVARCHAR2(20), 
	"KINEMAIL" NVARCHAR2(100), 
	"KINRELATIONSHIP" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_OFFLINE_BALANCES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_OFFLINE_BALANCES" 
   (	"ID" NUMBER, 
	"BRANCH_CODE" NVARCHAR2(20), 
	"CUSTOMER_NO" NVARCHAR2(20), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"DORMAT_STATUS" NVARCHAR2(20), 
	"STOPPED" NUMBER DEFAULT 0, 
	"BFUB_ACCOUNT_FLAG" NUMBER(2,0) DEFAULT 0, 
	"ISO_CURRENCY_CODE" NVARCHAR2(3), 
	"BOOK_BALANCE" NUMBER(24,6) DEFAULT 0, 
	"CLEARED_BALANCE" NUMBER(24,6) DEFAULT 0, 
	"PRODUCT_ID" NVARCHAR2(20), 
	"PRODUCT_CONTEXTCODE" NVARCHAR2(20), 
	"LIMIT_INDICATOR" NUMBER(*,0) DEFAULT 0, 
	"LIMIT_EXCESSACTION" NUMBER(*,0) DEFAULT 0, 
	"CREDIT_LIMIT" NUMBER(24,6) DEFAULT 0, 
	"DEBIT_LIMIT" NUMBER(24,6) DEFAULT 0, 
	"TEMP_ACCOUNT_LIMIT" NUMBER(24,6) DEFAULT 0, 
	"BALANCE_DATE" DATE, 
	"CARD_TYPE" NVARCHAR2(3) DEFAULT 0, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ONLINE_CHECKOUT_TRANSACTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ONLINE_CHECKOUT_TRANSACTIONS" 
   (	"ID" NUMBER, 
	"CUSTOMER_ID" NVARCHAR2(20), 
	"MSISDN" NVARCHAR2(20), 
	"SHORTCODE" NVARCHAR2(20), 
	"TRANSACTIONID" NVARCHAR2(20), 
	"TRXID" NVARCHAR2(20), 
	"THEIR_REF" NVARCHAR2(20), 
	"MPESA_REFERENCE" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,5), 
	"CHANNEL" NVARCHAR2(20), 
	"MPESA_DESCRIPTION" NVARCHAR2(100), 
	"MPESA_TRX_ID" NVARCHAR2(20), 
	"MPESA_TRX_DATE" NVARCHAR2(50), 
	"FINAL_RETURN_CODE" NVARCHAR2(20), 
	"REQUEST_DATA" NVARCHAR2(500), 
	"CONFIRMATION_DATA" NVARCHAR2(500), 
	"FINALDATA" NVARCHAR2(500), 
	"PROCESSING_STATUS" NVARCHAR2(20), 
	"FINALTRANSACTIONSTATUS" NVARCHAR2(20), 
	"CHECKOUT_AUTHORIZATION_PAYLOAD" NVARCHAR2(500), 
	"MERCHANT_TRANS_ID" NVARCHAR2(20), 
	"CHECKOUT_REQUEST_PAYLOAD" NVARCHAR2(500), 
	"REQUEST_CONFIRMATION_STATUS" NVARCHAR2(20), 
	"CHECKOUT_CONFIRMATION_PAYLOAD" NVARCHAR2(500), 
	"PROCESSED" NUMBER(1,0), 
	"DATE_CREATED" TIMESTAMP (6), 
	"DATEUPDATED" TIMESTAMP (6), 
	"CALLBACK_PAYLOAD" NVARCHAR2(500), 
	"CALLBACKSTATUS" NVARCHAR2(50), 
	"TRANSACTION_DATA" NVARCHAR2(500), 
	"TRX_STATUS" NVARCHAR2(50), 
	"TRX_ID" NVARCHAR2(10), 
	"ENC_PARAMS" NVARCHAR2(50), 
	"STATUS_CHECK_TRIALS" NUMBER(1,0), 
	"PAYMENT_TYPE" NVARCHAR2(50), 
	"FIELD103" NVARCHAR2(50), 
	"FIELD39" NVARCHAR2(20), 
	"FIELD48" NVARCHAR2(100)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_OPERATOR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_OPERATOR" 
   (	"ID" NUMBER, 
	"OUTLET_ID" NUMBER, 
	"NATIONAL_ID" NUMBER, 
	"OPERATOR_NAME" NVARCHAR2(100), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"PIN" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(20), 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0), 
	"SESSION_ID" NVARCHAR2(20), 
	"REWORKED_BY" NVARCHAR2(20), 
	"DEVICE_ID" NVARCHAR2(20), 
	"OUTLET_NAME" NVARCHAR2(100), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_REMARKS" NVARCHAR2(200), 
	"FIRST_NAME" NVARCHAR2(20), 
	"SECOND_NAME" NVARCHAR2(20), 
	"LAST_NAME" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_OPTIONAL_BENEFIT_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_OPTIONAL_BENEFIT_REQUESTS" 
   (	"ID" NUMBER(10,0), 
	"REQUEST_REF" NVARCHAR2(50), 
	"REFERENCE" NVARCHAR2(50), 
	"MINIMUM_AMOUNT" NUMBER(18,2), 
	"BENEFIT_RATE" NUMBER(18,2), 
	"BENEFIT_AMOUNT" NUMBER(18,2), 
	"CREATED_ON" TIMESTAMP (3)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_OUTGOING_EMAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_OUTGOING_EMAIL" 
   (	"ID" NUMBER, 
	"EMAIL_MESSAGE" NVARCHAR2(500), 
	"EMAIL_ADDRESS_TO" NVARCHAR2(50), 
	"EMAIL_SUBJECT" NVARCHAR2(50), 
	"EMAIL_SENT" NUMBER(1,0), 
	"PDF_NAME" NVARCHAR2(50), 
	"MSG_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_OUTLET
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_OUTLET" 
   (	"ID" NUMBER, 
	"AGENT_ID" NUMBER, 
	"DEVICE_ID" NUMBER, 
	"OUTLET_NAME" NVARCHAR2(200), 
	"LOCATION" NVARCHAR2(200), 
	"LONGITUDE" NVARCHAR2(200), 
	"LATITUDE" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0) DEFAULT 1, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0), 
	"SESSION_ID" NVARCHAR2(50), 
	"REWORKED_BY" NVARCHAR2(50), 
	"ID_NUMBER" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PARISH
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PARISH" 
   (	"ID" NUMBER, 
	"CODE" NVARCHAR2(50), 
	"PARISH_NAME" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER, 
	"SUB_COUNTY_ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PAYBILL_AGGREGATOR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PAYBILL_AGGREGATOR" 
   (	"ID" NUMBER(7,0), 
	"AGG_PAYBILL_NUMBER" NVARCHAR2(50), 
	"AGGREGATOR_NAME" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PA_PREMIUM_BENEFIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PA_PREMIUM_BENEFIT" 
   (	"ID" NUMBER, 
	"PA_CODE" NVARCHAR2(20), 
	"PREMIUM_CODE" NVARCHAR2(20), 
	"BENEFIT_NAME" NVARCHAR2(50), 
	"AMOUNT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ACTIVE" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200), 
	"REWORK" NUMBER(1,0), 
	"REWORK_BY" NVARCHAR2(50), 
	"REWORK_ON" TIMESTAMP (6), 
	"REWORK_REMARK" NVARCHAR2(200), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATED_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PA_PREMIUM_OPTION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PA_PREMIUM_OPTION" 
   (	"ID" NUMBER(10,0), 
	"PA_CODE" NVARCHAR2(50), 
	"PLAN_NAME" NVARCHAR2(500), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (3), 
	"ACTIVE" NUMBER(1,0), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (3), 
	"APPROVE_REMARK" NVARCHAR2(500), 
	"REWORK" NUMBER(1,0), 
	"REWORK_BY" NVARCHAR2(50), 
	"REWORK_ON" TIMESTAMP (3), 
	"REWORK_REMARK" NVARCHAR2(500), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATEDON" TIMESTAMP (3), 
	"UPDATED_REMARK" NVARCHAR2(500)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PERSONAL_ACCIDENT_BENEFICIARY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PERSONAL_ACCIDENT_BENEFICIARY" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"BENEFICIARY_NAME" NVARCHAR2(50), 
	"RELATIONSHIP" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PERSONAL_ACCIDENT_REQUEST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PERSONAL_ACCIDENT_REQUEST" 
   (	"ID" NUMBER(7,0), 
	"REFERENCE" NVARCHAR2(50), 
	"FULL_NAME" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"INITIATOR_MOBILE_NUMBER" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"NATIONAL_ID" NVARCHAR2(50), 
	"DOB" DATE, 
	"GENDER" NVARCHAR2(50), 
	"OCCUPATION" NVARCHAR2(50), 
	"PERSON_COVERED" NVARCHAR2(50), 
	"COVER_OPTION" NVARCHAR2(50), 
	"COVER_START_DATE" DATE, 
	"COVER_END_DATE" DATE, 
	"PREVIOUS_ACCIDENT" NVARCHAR2(50), 
	"PHYSICAL_DISABILITY" NVARCHAR2(50), 
	"CHRONIC_ILLNESS" NVARCHAR2(50), 
	"PAYMENT_MODE" NVARCHAR2(50), 
	"TOTAL_PREMIUM_AMOUNT" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_BANK_LIST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_BANK_LIST" 
   (	"ID" NUMBER, 
	"BANK_CODE" NVARCHAR2(20), 
	"BANK_ID" NVARCHAR2(20), 
	"BANK_NAME" NVARCHAR2(50), 
	"BANK_SORT_CODE" NVARCHAR2(20), 
	"BANK_CURRENT_VALUE" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50) DEFAULT 'admin'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_COMMISSION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_COMMISSION" 
   (	"ID" NUMBER, 
	"REFERENCE" NVARCHAR2(50), 
	"MINIMUM_AMOUNT" NUMBER(18,5), 
	"MAXIMUM_AMOUNT" NUMBER(18,5), 
	"COMMISSION_AMOUNT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_DIRECT_DEBIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_DIRECT_DEBIT" 
   (	"ID" NUMBER, 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"ACCOUNT_NAME" NVARCHAR2(100), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"ACCOUNT_STATUS" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"REMARKS" NVARCHAR2(200), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVAL_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_EXCEPTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_EXCEPTIONS" 
   (	"ID" NUMBER, 
	"FULL_NAME" NVARCHAR2(20), 
	"PRIMARY_ACCOUNT" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"LANGUAGE" NVARCHAR2(10), 
	"TYPE_OF_IDENTIFICATION" NVARCHAR2(20), 
	"ID_NUMBER" NVARCHAR2(20), 
	"SORT_CODE" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVAL_REMARK" NVARCHAR2(200), 
	"DELINKED_BY" NVARCHAR2(50), 
	"DELINKED_ON" TIMESTAMP (6), 
	"DELINK_REMARK" NVARCHAR2(200), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATE_REMARK" NVARCHAR2(200), 
	"PSL_STATUSCODE" NVARCHAR2(20), 
	"PSL_RESPONSE" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(20), 
	"REQUEST_TYPE" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_REGISTRATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_REGISTRATION" 
   (	"ID" NUMBER, 
	"FULL_NAME" NVARCHAR2(200), 
	"PRIMARY_ACCOUNT" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL_ADDRESS" NVARCHAR2(50), 
	"LANGUAGE" NVARCHAR2(10), 
	"TYPE_OF_IDENTIFICATION" NVARCHAR2(20), 
	"ID_NUMBER" NVARCHAR2(20), 
	"SORT_CODE" NVARCHAR2(10), 
	"CHANNEL" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVAL_REMARK" NVARCHAR2(200), 
	"DELINKED_BY" NVARCHAR2(50), 
	"DELINKED_ON" TIMESTAMP (6), 
	"DELINK_REMARK" NVARCHAR2(200), 
	"UPDATED_BY" NVARCHAR2(50), 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATE_REMARK" NVARCHAR2(200), 
	"UPDATE_DEFAULT_ACCOUNT_BY" NVARCHAR2(20), 
	"UPDATE_DEFAULT_ACCOUNT_ON" TIMESTAMP (6), 
	"UPDATE_DEFAULT_ACCOUNT_REMARK" NVARCHAR2(200), 
	"PSL_STATUS_CODE" NVARCHAR2(20), 
	"PSL_RESPONSE" NVARCHAR2(50), 
	"FIELD37" NVARCHAR2(20), 
	"REQUEST_TYPE" NVARCHAR2(50), 
	"STATUS" NUMBER, 
	"SESSION_ID" NVARCHAR2(50), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"APPROVE_DEFAULT_ACCOUNT_BY" NVARCHAR2(50), 
	"APPROVE_DEFAULT_ACCOUNT_ON" TIMESTAMP (6), 
	"APPROVE_DEFAULT_ACCOUNT_REMARK" NVARCHAR2(200), 
	"APPROVE_UPDATE_BY" NVARCHAR2(50), 
	"APPROVE_UPDATE_ON" TIMESTAMP (6), 
	"APPROVE_UPDATE_REMARK" NVARCHAR2(200), 
	"APPROVE_DELINK_BY" NVARCHAR2(50), 
	"APPROVE_DELINK_ON" TIMESTAMP (6), 
	"APPROVE_DELINK_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PESALINK_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PESALINK_REQUESTS" 
   (	"ID" NUMBER, 
	"FIELD37" NVARCHAR2(20), 
	"MESSAGE" NVARCHAR2(2000)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_POS_ZK
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_POS_ZK" 
   (	"ID" NUMBER, 
	"BANK_CODE" NVARCHAR2(50), 
	"ZCMK_COMPONENT1" NVARCHAR2(100), 
	"ZCMK_COMPONENT1_KCV" NVARCHAR2(100), 
	"ZCMK_COMPONENT2" NVARCHAR2(100), 
	"ZCMK_COMPONENT2_KCV" NVARCHAR2(100), 
	"ZCMK_COMPONENT3" NVARCHAR2(100), 
	"ZCMK_COMPONENT3_KCV" NVARCHAR2(100), 
	"ZPK_ZMK_AWK" NVARCHAR2(100), 
	"ZPK_ZMK_KCV_CLEAR" NVARCHAR2(100), 
	"ZPK_ZMK_KCV_ENCRYPTED" NVARCHAR2(100), 
	"IWK" NVARCHAR2(100), 
	"IWK_KCV" NVARCHAR2(100), 
	"IWK_CRYTOGRAM" NVARCHAR2(100), 
	"CRYPTOGRAM" NVARCHAR2(100), 
	"ZMK_LMK" NVARCHAR2(100), 
	"ZPK_LMK" NVARCHAR2(100), 
	"ZPK_LMK_KCV" NVARCHAR2(100), 
	"ZMK_LMK_KCV" NVARCHAR2(100), 
	"AWK_LMK" NVARCHAR2(100), 
	"AWK_LMK_KCV" NVARCHAR2(100), 
	"ADDED_BY" NVARCHAR2(100), 
	"ADDED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKER_REMARKS" NVARCHAR2(200), 
	"SESSIONID" NVARCHAR2(50), 
	"REJECTED" NUMBER(1,0), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PRESCORED_LOAN
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PRESCORED_LOAN" 
   (	"ID" NUMBER(10,0), 
	"BATCH_NUMBER" NVARCHAR2(50), 
	"REFERENCE" NVARCHAR2(50), 
	"FULL_NAME" NVARCHAR2(50), 
	"FIRST_NAME" NVARCHAR2(50), 
	"SECOND_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"GENDER" NVARCHAR2(10), 
	"DOB" DATE, 
	"ID_NUMBER" NVARCHAR2(50), 
	"BRANCH" NVARCHAR2(50), 
	"ACCOUNT_NUMBER" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"EMAIL_ADDRESS" NVARCHAR2(100), 
	"PREV_LIMIT_AMOUNT" NUMBER(18,2), 
	"LIMIT_AMOUNT" NUMBER(18,2), 
	"NEW_LIMIT_AMOUNT" NUMBER(18,2), 
	"PROCESSING_DATE" DATE, 
	"UPLOADED_FILE" NVARCHAR2(50), 
	"LEVEL1AUTHORISED" NUMBER(1,0), 
	"LEVEL1AUTHORISEDON" TIMESTAMP (3), 
	"LEVEL1AUTHORISEDBY" NVARCHAR2(50), 
	"LEVEL2AUTHORISED" NUMBER(1,0), 
	"LEVEL2AUTHORISEDON" TIMESTAMP (3), 
	"LEVEL2AUTHORISEDBY" NVARCHAR2(50), 
	"LEVEL2REJECTED" NUMBER(1,0), 
	"LEVEL2REJECTEDBY" NVARCHAR2(50), 
	"LEVEL2REJECTEDON" TIMESTAMP (3), 
	"LEVEL2REMARKS" NVARCHAR2(50), 
	"LEVEL3AUTHORISED" NUMBER(1,0), 
	"LEVEL3AUTHORISEDON" TIMESTAMP (3), 
	"LEVEL3AUTHORISEDBY" NVARCHAR2(50), 
	"LEVEL3REJECTED" NUMBER(1,0), 
	"LEVEL3REJECTEDBY" NVARCHAR2(50), 
	"LEVEL3REJECTEDON" TIMESTAMP (3), 
	"LEVEL3REMARKS" NVARCHAR2(50), 
	"ISACTIVE" NUMBER(1,0), 
	"REQUEST_DEACTIVATE" NUMBER(1,0), 
	"DEACTIVATED" NUMBER(1,0), 
	"DEACTIVATE_REMARKS" NVARCHAR2(50), 
	"DEACTIVATED_ON" TIMESTAMP (3), 
	"DEACTIVATED_BY" NVARCHAR2(50), 
	"REQUEST_BLACKLIST" NUMBER(1,0), 
	"BLACKLISTED" NUMBER(1,0), 
	"BLACKLISTED_REMARKS" NVARCHAR2(50), 
	"BLACKLISTED_ON" TIMESTAMP (3), 
	"BLACKLISTED_BY" NVARCHAR2(50), 
	"IPRS_CHECK_PASSED" NUMBER(1,0), 
	"IPRS_CHECK_REMARK" NVARCHAR2(50), 
	"CBS_CHECK_PASSED" NUMBER(1,0), 
	"CBS_CHECK_REMARK" NVARCHAR2(50), 
	"NEW_LIMIT_AUTHORISED" NUMBER(1,0), 
	"NEW_LIMIT_AUTHORISED_ON" TIMESTAMP (3), 
	"NEW_LIMIT_AUTHORISED_BY" NVARCHAR2(50), 
	"STATUS" NUMBER(10,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (3)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PROCODES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PROCODES" 
   (	"ID" NUMBER, 
	"PROCODE" NVARCHAR2(20), 
	"DESCRIPTION" NVARCHAR2(100), 
	"TXNTYPE" NVARCHAR2(100), 
	"ACTIVE" NUMBER(1,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"MAKER_REMARKS" NVARCHAR2(200), 
	"SERVICE_STATUS" CHAR(1 BYTE), 
	"PG_SERVICEID" NVARCHAR2(20), 
	"ENABLED_BY" NVARCHAR2(50), 
	"ENABLEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ENABLEREMARKS" NVARCHAR2(200), 
	"ENABLEDAPPROVEDBY" NVARCHAR2(50), 
	"ENABLEDAPPROVEDON" TIMESTAMP (6), 
	"ENABLEAPPROVEREMARKS" NVARCHAR2(200), 
	"DISABLEDBY" NVARCHAR2(50), 
	"DISABLEDON" TIMESTAMP (6), 
	"DISABLEREMARKS" NVARCHAR2(200), 
	"DISABLEDAPPROVEDBY" NVARCHAR2(50), 
	"DISABLEDAPPROVEDON" TIMESTAMP (6), 
	"DISABLEAPPROVEREMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PRODUCTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PRODUCTS" 
   (	"ID" NUMBER, 
	"PRODUCT_NAME" NVARCHAR2(50), 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"LEAF_GL" NVARCHAR2(20), 
	"MIN_BALANCE" NUMBER(18,5), 
	"MONTHLY_CHARGES" NUMBER(18,5), 
	"ALLOW_CR" NUMBER(1,0), 
	"ALLOW_DR" NUMBER(1,0), 
	"CHEQUE_BOOK_FACILITY" NUMBER(1,0), 
	"ALLOW_OVERDRAFT" NUMBER(1,0), 
	"EARNS_INTEREST" NUMBER(1,0), 
	"INTEREST_RATE" NUMBER(18,5), 
	"INTEREST_ACCOUNT" NVARCHAR2(20), 
	"ACCRUAL_ACCOUNT" NVARCHAR2(20), 
	"EXCESS_ACCOUNT" NVARCHAR2(20), 
	"MIN_OPENING_BAL" NUMBER(18,5), 
	"MIN_AMOUNT" NUMBER(18,5), 
	"MIN_SAVING_AMOUNT" NUMBER(18,5), 
	"MAX_SAVING_AMOUNT" NUMBER(18,5), 
	"DESCRIPTION" NVARCHAR2(50), 
	"PRODUCT_TYPE" NVARCHAR2(20), 
	"TODORMANCY_MONTHS" NUMBER(5,0), 
	"BELOW_MIN_CHARGE" NUMBER(18,5), 
	"MAX_MONTHLY_WITHDRAW" NUMBER, 
	"CLOSURE_CHARGES" NUMBER(18,5), 
	"LOAN_PRODUCT" NUMBER(1,0) DEFAULT 0, 
	"PENALTY_GL" NVARCHAR2(20), 
	"ACTIVE" NUMBER(1,0), 
	"REGISTERED_BY" NVARCHAR2(20), 
	"REGISTERED_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NVARCHAR2(20), 
	"APPROVED_BY" NVARCHAR2(20), 
	"APPROVED_DATE" TIMESTAMP (6), 
	"DAILY_TRX_LIMIT" NUMBER(18,0), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PRODUCT_TYPES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PRODUCT_TYPES" 
   (	"ID" NUMBER, 
	"PRODUCT_CODE" NVARCHAR2(20), 
	"PRODUCT_TYPE" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PROFILES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PROFILES" 
   (	"ID" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"PROFILE_NAME" NVARCHAR2(100), 
	"ENABLED" NUMBER DEFAULT 1, 
	"REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER DEFAULT 0, 
	"APPROVED" NUMBER DEFAULT 1, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(20), 
	"DELETED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_PSL_ERROR_CODE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_PSL_ERROR_CODE" 
   (	"ID" NUMBER, 
	"ERRORCODE" NVARCHAR2(10), 
	"SHORTDESCRIPTION" NVARCHAR2(50), 
	"FULLDESCRIPTION" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_RECRUITERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_RECRUITERS" 
   (	"ID" NUMBER, 
	"USERNAME" NVARCHAR2(50), 
	"PIN" NVARCHAR2(100), 
	"LAST_NAME" NVARCHAR2(100), 
	"FIRST_NAME" NVARCHAR2(100), 
	"OTHER_NAMES" NVARCHAR2(100), 
	"ID_NUMBER" NVARCHAR2(20), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"EMAIL" NVARCHAR2(50), 
	"DATE_OF_BIRTH" DATE, 
	"GENDER" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50), 
	"TRIALS" NUMBER(1,0), 
	"LOCKED" NUMBER(1,0), 
	"PIN_RESET" NUMBER(1,0), 
	"REMARKS" NVARCHAR2(50), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKER_REMARKS" NVARCHAR2(200), 
	"INSTITUTION_ID" NVARCHAR2(50), 
	"SESSIONID" NVARCHAR2(50), 
	"IMEI" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0), 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_REGION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_REGION" 
   (	"ID" NUMBER, 
	"REGION_NAME" NVARCHAR2(100), 
	"REGION_CODE" NVARCHAR2(20), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_REGISTRATIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_REGISTRATIONS" 
   (	"ID" NUMBER(18,0), 
	"FIRSTNAME" VARCHAR2(50 BYTE), 
	"SECONDNAME" VARCHAR2(50 BYTE), 
	"LASTNAME" VARCHAR2(50 BYTE), 
	"PHONENUMBER" VARCHAR2(50 BYTE), 
	"IDENTIFICATIONID" NVARCHAR2(50), 
	"EMAILADDRESS" NVARCHAR2(50), 
	"PIN" NVARCHAR2(300), 
	"LANG" NVARCHAR2(50), 
	"IMSI" NVARCHAR2(50), 
	"IMEI" NVARCHAR2(50), 
	"DATEOFBIRTH" NVARCHAR2(50), 
	"GENDER" NVARCHAR2(50), 
	"APPROVED" CHAR(1 BYTE) DEFAULT '1', 
	"PARTIAL_REGISTRATION" CHAR(1 BYTE) DEFAULT '1', 
	"CREATEDBY" NVARCHAR2(50), 
	"APPROVEDBY" VARCHAR2(50 BYTE) DEFAULT 'SELF', 
	"COUNTRY" VARCHAR2(50 BYTE) DEFAULT 'UGANDA', 
	"ACCOUNTNUMBER" NVARCHAR2(50), 
	"ACCOUNTTYPE" NVARCHAR2(50), 
	"ACCOUNTDESCRIPTION" NVARCHAR2(50), 
	"ACCOUNTSTATUS" NVARCHAR2(50) DEFAULT 'OK', 
	"CUSTOMERID" NVARCHAR2(50), 
	"CURRENCY" NVARCHAR2(50) DEFAULT 'UGX', 
	"TXNLIMITAMOUNT" NUMBER(18,0) DEFAULT 0, 
	"HASCOREACCOUNT" NUMBER(1,0) DEFAULT 0, 
	"CHANNEL" NVARCHAR2(50), 
	"BRANCHCODE" NUMBER(11,0) DEFAULT 1, 
	"TOWN" NVARCHAR2(50), 
	"POSTALADDRESS" NVARCHAR2(50), 
	"POSTALCODE" NVARCHAR2(50), 
	"REFERRAL_CODE" NVARCHAR2(50), 
	"REFEREE_CODE" NVARCHAR2(50), 
	"STATUS" CHAR(2 BYTE) DEFAULT '01', 
	"RESPONSE_DESC" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ID_FRONT_PHOTO" CLOB, 
	"ID_BACK_PHOTO" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("ID_FRONT_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("ID_BACK_PHOTO") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TB_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_REQUESTS" 
   (	"ID" NUMBER, 
	"ACCOUNT" NVARCHAR2(50), 
	"CURRENCY" NVARCHAR2(10), 
	"MOBILE_NUMBER" NVARCHAR2(20), 
	"CUSTOMER_NO" NVARCHAR2(50), 
	"REQUEST_TYPE" NVARCHAR2(50), 
	"REQUEST_CHARGE" NUMBER(18,5), 
	"REQUEST_STATUS" NVARCHAR2(10), 
	"DATE_REQUESTED" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"IS_APPROVED" NUMBER(1,0) DEFAULT 1, 
	"PAYLOAD" NVARCHAR2(500), 
	"CHANNEL" NVARCHAR2(10), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"APPROVED_BY" NVARCHAR2(50), 
	"TRN_REF_NO" NVARCHAR2(50), 
	"NO_OF_LEAVES" NVARCHAR2(100), 
	"THEIR_REF_NO" NVARCHAR2(50), 
	"RESP_CODE" NVARCHAR2(20), 
	"RESP_DESCRIPTION" NVARCHAR2(200), 
	"NO_OF_BOOKS" NUMBER(2,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_REVERSAL_REQUEST
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_REVERSAL_REQUEST" 
   (	"ID" NUMBER, 
	"REF_NO" NVARCHAR2(50), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"TRXDATE" NVARCHAR2(50) DEFAULT SYSTIMESTAMP, 
	"NARRATION" NVARCHAR2(200), 
	"APPROVED" NUMBER(1,0) DEFAULT 0, 
	"APPROVED_DATE" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVE_REMARKS" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"REJECTED" NUMBER(1,0) DEFAULT 0, 
	"REJECTED_ON" TIMESTAMP (6), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECT_REMARKS" NVARCHAR2(200), 
	"AMOUNT" NUMBER(18,2), 
	"STATUS" CHAR(1 BYTE) DEFAULT 0, 
	"TRX_TYPE" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ROLES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ROLES" 
   (	"ID" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"ROLE_NAME" NVARCHAR2(100), 
	"ENABLED" NUMBER DEFAULT 1, 
	"REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER DEFAULT 0, 
	"APPROVED" NUMBER DEFAULT 1, 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(100), 
	"DELETED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(500)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_ROLES_IN_PROFILE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_ROLES_IN_PROFILE" 
   (	"ID" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"PROFILE_ID" NUMBER, 
	"ROLE_ID" NUMBER, 
	"ENABLED" NUMBER DEFAULT 0, 
	"STATUS" NUMBER, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(50), 
	"REWORKED" NUMBER, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DELETED" NUMBER, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SACCOS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SACCOS" 
   (	"ID" NUMBER, 
	"SACCO_ID" VARCHAR2(200 BYTE), 
	"SACCO_NAMES" VARCHAR2(500 BYTE), 
	"SACCO_WALLET_ACCOUNT" NVARCHAR2(20), 
	"BRANCH_CODE" VARCHAR2(4000 BYTE), 
	"POSTAL_ADDRESS" VARCHAR2(50 BYTE), 
	"CONTACT_PERSON_MOBILE" NUMBER(*,0), 
	"CONTACT_PERSON_EMAIL" VARCHAR2(4000 BYTE), 
	"BUSINESS_MOBILE" VARCHAR2(4000 BYTE), 
	"PHYSICAL_ADDRESS" VARCHAR2(4000 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_ON" VARCHAR2(50 BYTE), 
	"APPROVED_BY" NVARCHAR2(20), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(20) DEFAULT 1, 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" VARCHAR2(20 BYTE), 
	"DECLINED" NUMBER DEFAULT 0, 
	"REMARKS" VARCHAR2(2000 BYTE), 
	"CHECKERREMARKS" VARCHAR2(2000 BYTE), 
	"DECLINED_ON" VARCHAR2(50 BYTE), 
	"DECLINED_BY" VARCHAR2(200 BYTE), 
	"DELETED_ON" TIMESTAMP (6), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SACCO_TYPE" VARCHAR2(200 BYTE) DEFAULT 'MFI', 
	"BRANCHES" VARCHAR2(20 BYTE), 
	"MEMBERS" VARCHAR2(20 BYTE), 
	"SACCO_LOGO" VARCHAR2(20 BYTE), 
	"CONTACT_PERSON_NAME" VARCHAR2(1000 BYTE), 
	"IS_FOSA" NUMBER, 
	"IS_BOSA" NUMBER, 
	"IS_SHARES" NUMBER, 
	"HUB_ID" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SACCO_LINKING
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SACCO_LINKING" 
   (	"ID" NUMBER(18,2), 
	"SACCO_ACCOUNT" VARCHAR2(20 BYTE), 
	"SACCO_ID" VARCHAR2(20 BYTE), 
	"CUSTOMER_ACCOUNT" VARCHAR2(200 BYTE), 
	"CUSTOMER_PHONENUMBER" VARCHAR2(200 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" VARCHAR2(50 BYTE), 
	"APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVED_BY" NVARCHAR2(20), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(20) DEFAULT 1, 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETEDBY" VARCHAR2(20 BYTE), 
	"DECLINED" NUMBER DEFAULT 0, 
	"SESSIONID" VARCHAR2(20 BYTE), 
	"REMARKS" VARCHAR2(2000 BYTE), 
	"CHECKER_REMARKS" VARCHAR2(2000 BYTE), 
	"DECLINEDON" TIMESTAMP (6), 
	"DECLINEDBY" VARCHAR2(200 BYTE), 
	"DELETEDON" TIMESTAMP (6), 
	"REWORKEDON" TIMESTAMP (6), 
	"JOINED_ON" TIMESTAMP (6), 
	"ACCEPTED" NUMBER DEFAULT 0, 
	"VOTE_ID" VARCHAR2(20 BYTE), 
	"VOTED" NUMBER DEFAULT 0, 
	"EXPIRED" NUMBER DEFAULT 0, 
	"MEMBER_NO" VARCHAR2(20 BYTE), 
	"BATCHNUMBER" NVARCHAR2(50), 
	"VALIDBATCH" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SALARY_ADVANCE_CHECKS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SALARY_ADVANCE_CHECKS" 
   (	"ID" NUMBER, 
	"ACCOUNT" NVARCHAR2(50), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"SCORING_DATE" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"TOTAL_SAL_AMOUNT" NUMBER(18,5), 
	"OPENING_DATE" DATE, 
	"AMOUNT_QUALIFIED" NUMBER(18,5), 
	"ISCORRECT_ACCOUNT_AGE" NUMBER(1,0), 
	"ISSALARY_ACCOUNT" NUMBER(1,0), 
	"CRB_SCORE" NVARCHAR2(20), 
	"CRB_PASSED" NUMBER(1,0), 
	"CHECK_STATUS" NVARCHAR2(20), 
	"HAS_OD_ARREARS" NUMBER(1,0), 
	"HAS_LOAN_ARREARS" NUMBER(1,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SCHOOL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SCHOOL" 
   (	"ID" NUMBER, 
	"SCHOOL_ACCOUNT" NVARCHAR2(50), 
	"BRANCH_CODE" NVARCHAR2(10), 
	"SCHOOL_NAME" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSION_ID" NVARCHAR2(50), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DECLINED" NUMBER(1,0), 
	"DECLINED_ON" TIMESTAMP (6), 
	"DECLINED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SECURITY_QUESTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SECURITY_QUESTIONS" 
   (	"ID" NUMBER, 
	"QUESTION" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"ACTIVE" CHAR(1 BYTE) DEFAULT 1, 
	"CREATED_BY" VARCHAR2(20 BYTE), 
	"APPROVED_BY" VARCHAR2(20 BYTE), 
	"APPROVED_ON" VARCHAR2(20 BYTE), 
	"APPROVED" CHAR(1 BYTE), 
	"DELETED_BY" VARCHAR2(20 BYTE), 
	"DELETED_ON" VARCHAR2(20 BYTE), 
	"REMARKS" VARCHAR2(20 BYTE), 
	"DELETED" CHAR(1 BYTE) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SEQUENCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SEQUENCE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"UNIQUEID" NVARCHAR2(50), 
	"SERIES" NVARCHAR2(50), 
	"SERIES_LENGTH" NUMBER, 
	"DESCRIPTION" NVARCHAR2(300)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SERVICES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SERVICES" 
   (	"ID" NUMBER, 
	"FIELD3" NVARCHAR2(20), 
	"TRANSACTION_LIMIT_MIN" NUMBER(18,5), 
	"TRANSACTION_LIMIT_MAX" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50), 
	"SESSIONID" NVARCHAR2(50), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKER_REMARKS" NVARCHAR2(200), 
	"FIELD100" NVARCHAR2(50), 
	"BANK_CODE" NVARCHAR2(50), 
	"SERVICE_DESCRIPTION" NVARCHAR2(50), 
	"FIELD100_ALIAS" NVARCHAR2(50), 
	"ENABLED_INIT" NUMBER(1,0), 
	"ENABLED_INIT_BY" NVARCHAR2(50), 
	"ENABLED_INIT_ON" TIMESTAMP (6), 
	"ENABLED" NUMBER(1,0), 
	"ENABLED_BY" NVARCHAR2(50), 
	"ENABLED_ON" TIMESTAMP (6), 
	"DISABLE_INIT" NUMBER(1,0), 
	"DISABLE_INIT_BY" NVARCHAR2(50), 
	"DISABLE_INIT_ON" TIMESTAMP (6), 
	"DISABLED_BY" NVARCHAR2(50), 
	"DISABLED_ON" TIMESTAMP (6), 
	"REJECTED" NUMBER(1,0), 
	"REJECTED_BY" NVARCHAR2(50), 
	"REJECTED_ON" TIMESTAMP (6), 
	"SERVICEID" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"POINTS_PER_TRANSACTION" NUMBER(18,0) DEFAULT 0, 
	"POINTS_TYPE" CHAR(1 BYTE) DEFAULT 'F'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SMS_TEMPLATE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SMS_TEMPLATE" 
   (	"SMS_ID" NUMBER, 
	"SMS_DESCRIPTION" NVARCHAR2(50), 
	"SMS_TEMPLATE" NVARCHAR2(500), 
	"LANGUAGE_CODE" NVARCHAR2(10), 
	"MTI" NVARCHAR2(10), 
	"DEST" NVARCHAR2(10), 
	"FIELD3" NVARCHAR2(10), 
	"FIELD100" NVARCHAR2(100), 
	"FIELD39" NVARCHAR2(10), 
	"ENABLED" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SMS_UNIT_BALANCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SMS_UNIT_BALANCE" 
   (	"ID" NUMBER(10,0), 
	"UNITBALANCE" NUMBER(18,2), 
	"LASTUPDATEDON" TIMESTAMP (3)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SP_ERROR_LOG
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SP_ERROR_LOG" 
   (	"ERROR_ID" NUMBER(10,0), 
	"USER_NAME" NVARCHAR2(18), 
	"ERROR_NUMBER" NUMBER(10,0), 
	"ERROR_STATE" NUMBER(10,0), 
	"ERROR_SEVERITY" NUMBER(10,0), 
	"ERROR_LINE" NUMBER(10,0), 
	"ERROR_PROCEDURE" NVARCHAR2(18), 
	"ERROR_MESSAGE" NVARCHAR2(100), 
	"CUSTOM_ERROR_MESSAGE" NVARCHAR2(100), 
	"TIME_STAMP" TIMESTAMP (3)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_STAGING_ACTION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_STAGING_ACTION" 
   (	"ID" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"DESTINATION_ADDRESS" NVARCHAR2(200), 
	"WORKFLOW_ID" NUMBER, 
	"DATA" VARCHAR2(2000 BYTE), 
	"RESPONSE_MESSAGE" NVARCHAR2(200), 
	"RESPONSE_CODE" NVARCHAR2(10), 
	"DISALLOW_RESUBMISSION" NUMBER, 
	"UPDATED_ON" TIMESTAMP (6), 
	"UPDATED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"IS_DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"IS_REJECTED" NUMBER DEFAULT 0, 
	"REJECTED_BY" NVARCHAR2(50), 
	"IS_APPROVED" NUMBER DEFAULT 0, 
	"APPROVED_BY" NVARCHAR2(50), 
	"CURRENT_ACTION_ID" NUMBER DEFAULT 0, 
	"ORIGINAL_ID" NVARCHAR2(200), 
	"UPLOAD_ID" NUMBER, 
	"REQ_TYPE" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_STAGING_COMMENTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_STAGING_COMMENTS" 
   (	"ID" NUMBER, 
	"STAGING_ID" NUMBER, 
	"CREATED_BY" NVARCHAR2(50), 
	"WORKFLOW_COMMENT" NVARCHAR2(200), 
	"ENABLED" NUMBER DEFAULT 0, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_STAGING_PROCESS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_STAGING_PROCESS" 
   (	"ID" NUMBER, 
	"STAGING_ACTION_ID" NUMBER, 
	"STAGING_ID" NUMBER, 
	"ACTION_NAME" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SUB_COUNTY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SUB_COUNTY" 
   (	"ID" NUMBER, 
	"SC_CODE" NVARCHAR2(50), 
	"SUBCOUNTY" NVARCHAR2(50), 
	"COUNTY_CODE" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSIONID" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_SUPER_AGENT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_SUPER_AGENT" 
   (	"ID" NUMBER, 
	"MASTER_AGENT_ID" NUMBER, 
	"NAMES" NVARCHAR2(200), 
	"PHYSICAL_ADDRESS" NVARCHAR2(200), 
	"BUSINESS_NAME" NVARCHAR2(200), 
	"CONTACT_MOBILE_NUMBER" NVARCHAR2(20), 
	"LOCATION" NVARCHAR2(200), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"SESSION_ID" NVARCHAR2(50), 
	"REWORKED_BY" NVARCHAR2(50), 
	"COMMISSIONS" NUMBER DEFAULT 0, 
	"NO_OF_AGENTS" NUMBER DEFAULT 0, 
	"NO_OF_REGIONS" NUMBER DEFAULT 0, 
	"CATEGORY_ID" NUMBER, 
	"FLOAT_THRESHOLD" NUMBER DEFAULT 0, 
	"REWORKED_ON" TIMESTAMP (6), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"DELETED_REMARKS" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TEMP_TRIAL_BAL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "APP_USER"."TB_TEMP_TRIAL_BAL" 
   (	"GLDESCRIPTION" NVARCHAR2(200), 
	"GLPARENT" NVARCHAR2(10), 
	"CURRENCY" NVARCHAR2(5), 
	"GLTYPE" CHAR(1 BYTE), 
	"GLCODE" NVARCHAR2(10), 
	"DRBALLCY" NUMBER(18,2), 
	"CRBALLCY" NUMBER(18,2), 
	"GLBALANCE" NUMBER(18,2), 
	"OPENINGBAL" NUMBER(18,2), 
	"CLOSINGBAL" NUMBER(18,2), 
	"WORKINGDATE" TIMESTAMP (3)
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table TB_TEMP_TRIAL_BALANCE
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "APP_USER"."TB_TEMP_TRIAL_BALANCE" 
   (	"GLDESCRIPTION" NVARCHAR2(200), 
	"GLPARENT" NVARCHAR2(10), 
	"CURRENCY" NVARCHAR2(5), 
	"GLTYPE" CHAR(1 BYTE), 
	"GLCODE" NVARCHAR2(10), 
	"DRBALLCY" NUMBER(18,2), 
	"CRBALLCY" NUMBER(18,2), 
	"GLBALANCE" NUMBER(18,2), 
	"OPENINGBAL" NUMBER(18,2), 
	"CLOSINGBAL" NUMBER(18,2), 
	"WORKINGDATE" TIMESTAMP (3)
   ) ON COMMIT DELETE ROWS ;
--------------------------------------------------------
--  DDL for Table TB_TEMP_TRIAL_BAL_DRILL
--------------------------------------------------------

  CREATE GLOBAL TEMPORARY TABLE "APP_USER"."TB_TEMP_TRIAL_BAL_DRILL" 
   (	"GLDESCRIPTION" NVARCHAR2(200), 
	"GLPARENT" NVARCHAR2(10), 
	"CURRENCY" NVARCHAR2(5), 
	"GLTYPE" CHAR(1 BYTE), 
	"GLCODE" NVARCHAR2(10), 
	"DRBALLCY" NUMBER(18,2), 
	"CRBALLCY" NUMBER(18,2), 
	"GLBALANCE" NUMBER(18,2), 
	"OPENINGBAL" NUMBER(18,2), 
	"CLOSINGBAL" NUMBER(18,2), 
	"WORKINGDATE" TIMESTAMP (3)
   ) ON COMMIT PRESERVE ROWS ;
--------------------------------------------------------
--  DDL for Table TB_TEMP_TRIAL_DATA
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TEMP_TRIAL_DATA" 
   (	"GLDESCRIPTION" NVARCHAR2(200), 
	"GLPARENT" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"GLTYPE" CHAR(1 BYTE), 
	"GLCODE" NVARCHAR2(20), 
	"DRBALLCY" NUMBER(18,2), 
	"CRBALLCY" NUMBER(18,2), 
	"GLBALANCE" NUMBER(18,2), 
	"OPENINGBAL" NUMBER(18,2), 
	"CLOSINGBAL" NUMBER(18,2), 
	"WORKINGDATE" TIMESTAMP (3)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TERMS_AND_CONDITIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TERMS_AND_CONDITIONS" 
   (	"ID" NUMBER, 
	"T_C_LINK" NVARCHAR2(100), 
	"TERMS" CLOB
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("TERMS") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table TB_TEST_JSON_DATA
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TEST_JSON_DATA" 
   (	"ID" NUMBER, 
	"DATA" VARCHAR2(2000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_THIRD_PARTY_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_THIRD_PARTY_REQUESTS" 
   (	"ID" NUMBER, 
	"ESB_REF" NVARCHAR2(50), 
	"EXTERNAL_REF" NVARCHAR2(100), 
	"TRIALS" NUMBER DEFAULT 0, 
	"STATUS" NVARCHAR2(20) DEFAULT 'PENDING', 
	"ORIGINAL_MSG" VARCHAR2(4000 BYTE), 
	"RESPONSE_MSG" VARCHAR2(4000 BYTE), 
	"FIELD100" NVARCHAR2(50), 
	"TXN_DATE" DATE DEFAULT SYSDATE, 
	"REQUEST_TIME" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"RESPONSE_TIME" TIMESTAMP (6), 
	"EXTERNAL_LINK" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TILLPAYBILL_STATUS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TILLPAYBILL_STATUS" 
   (	"ID" NUMBER(7,0), 
	"STATUS_CODE" NUMBER(11,0), 
	"DESCRIPTION" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TILL_AGGREGATOR
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TILL_AGGREGATOR" 
   (	"ID" NUMBER(7,0), 
	"AGG_TILL_NUMBER" NVARCHAR2(50), 
	"AGGREGATOR_NAME" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6), 
	"APPROVED" CHAR(1 BYTE), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"APPROVE_REMARK" NVARCHAR2(200)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TITLE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TITLE" 
   (	"ID" NUMBER(7,0), 
	"TITLE" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRADE_FINANCE_PRODUCTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRADE_FINANCE_PRODUCTS" 
   (	"ID" NUMBER(10,0), 
	"PRODUCT_CODE" NVARCHAR2(50), 
	"PRODUCT_NAME" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(500), 
	"COMMISSION" NUMBER(1,0), 
	"COMMISSION_RATE" NUMBER(18,2), 
	"MINCOMMISSION_AMOUNT" NUMBER(18,2), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (3), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (3), 
	"APPROVE_REMARK" NVARCHAR2(500)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRADE_FIN_PROCURING_ENTITY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRADE_FIN_PROCURING_ENTITY" 
   (	"ID" NUMBER(10,0), 
	"REFERENCE" NVARCHAR2(50), 
	"PROCURING_ENTITY_NAME" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(500), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (3), 
	"STATUS" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRADE_FIN_REQUESTS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRADE_FIN_REQUESTS" 
   (	"ID" NUMBER(10,0), 
	"REQ_REFERENCE" NVARCHAR2(50), 
	"DEAL_REFERENCE" NVARCHAR2(50), 
	"PRODUCT_CODE" NVARCHAR2(50), 
	"BUSINESS_NAME" NVARCHAR2(50), 
	"BUSINESS_ADDDRESS" NVARCHAR2(50), 
	"PROC_ENTITY_REF" NVARCHAR2(50), 
	"ENTITY_LISTED" NUMBER(1,0), 
	"ENTITY_NAME" NVARCHAR2(50), 
	"ENTITY_ADDRESS" NVARCHAR2(50), 
	"TENDER_NUMBER" NVARCHAR2(50), 
	"TENDER_NAME" NVARCHAR2(50), 
	"BID_AMOUNT" NUMBER(18,2), 
	"CURRENCY" NVARCHAR2(50), 
	"PERIODIN_DAYS" NUMBER(10,0), 
	"VALID_DATE_FROM" DATE, 
	"EXPIRY_DATE" DATE, 
	"COLLECTION_BRANCH_CODE" NVARCHAR2(50), 
	"COLLECTOR_NAME" NVARCHAR2(50), 
	"ID_NUMBER" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"FIELD102" NVARCHAR2(50), 
	"COMMISSION_RATE" NUMBER(18,2), 
	"COMMISSION_AMOUNT" NUMBER(18,2), 
	"EXCISE_DUTY_AMOUNT" NUMBER(18,2), 
	"REQUESTED_ON" TIMESTAMP (3)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTIONS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTIONS" 
   (	"ID" NUMBER(*,0), 
	"FIELD32" NVARCHAR2(20), 
	"FIELD37" NVARCHAR2(20), 
	"TRX_SERIAL_NO" NVARCHAR2(2), 
	"NARRATION" NVARCHAR2(200), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"DRCR" CHAR(1 BYTE), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD100" NVARCHAR2(50), 
	"STAN" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,5), 
	"VALUE_DATE" DATE, 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AUTHORIZED" NUMBER(1,0), 
	"AUTHORIZED_BY" NVARCHAR2(50), 
	"AUTHORIZED_ON" TIMESTAMP (6), 
	"ISCUSTOMERGL" CHAR(1 BYTE), 
	"CLEARED_BALANCE" NUMBER(18,5), 
	"AVAILABLE_BALANCE" NUMBER(18,5), 
	"FIELD90" NVARCHAR2(90), 
	"PAYMENT_NUMBER" NVARCHAR2(50), 
	"TRAN_CODE" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"EXTERNAL_REFNO" NVARCHAR2(50), 
	"FIELD24" NVARCHAR2(5), 
	"MSGTYPE" NVARCHAR2(10), 
	"TRX_REFNO" NVARCHAR2(50), 
	"REVERSED" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTIONS_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTIONS_ARCHIVE" 
   (	"ARCHIVE_ID" NUMBER, 
	"ID" NUMBER, 
	"FIELD32" NVARCHAR2(20), 
	"FIELD37" NVARCHAR2(20), 
	"TRX_SERIAL_NO" NVARCHAR2(2), 
	"NARRATION" NVARCHAR2(200), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"DRCR" CHAR(1 BYTE), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD100" NVARCHAR2(50), 
	"STAN" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,5), 
	"VALUE_DATE" DATE, 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AUTHORIZED" NUMBER(1,0), 
	"AUTHORIZED_BY" NVARCHAR2(50), 
	"AUTHORIZED_ON" TIMESTAMP (6), 
	"ISCUSTOMERGL" CHAR(1 BYTE), 
	"CLEARED_BALANCE" NUMBER(18,5), 
	"AVAILABLE_BALANCE" NUMBER(18,5), 
	"FIELD90" NVARCHAR2(90), 
	"PAYMENT_NUMBER" NVARCHAR2(50), 
	"TRAN_CODE" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"MSGTYPE" NVARCHAR2(20), 
	"FIELD24" NVARCHAR2(20), 
	"REVERSED" NUMBER DEFAULT 0, 
	"EXTERNAL_REFNO" NVARCHAR2(200)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE ROW MOVEMENT ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTIONS_COB
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTIONS_COB" 
   (	"ID" NUMBER(*,0), 
	"FIELD32" NVARCHAR2(20), 
	"FIELD37" NVARCHAR2(20), 
	"TRX_SERIAL_NO" NVARCHAR2(2), 
	"NARRATION" NVARCHAR2(200), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"CURRENCY" NVARCHAR2(5), 
	"DRCR" CHAR(1 BYTE), 
	"FIELD3" NVARCHAR2(20), 
	"FIELD100" NVARCHAR2(50), 
	"STAN" NVARCHAR2(20), 
	"AMOUNT" NUMBER(18,5), 
	"VALUE_DATE" DATE, 
	"FINANCIAL_CYCLE" NVARCHAR2(10), 
	"FINANCIAL_PERIOD" NVARCHAR2(10), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AUTHORIZED" NUMBER(1,0), 
	"AUTHORIZED_BY" NVARCHAR2(50), 
	"AUTHORIZED_ON" TIMESTAMP (6), 
	"ISCUSTOMERGL" CHAR(1 BYTE), 
	"CLEARED_BALANCE" NUMBER(18,5), 
	"AVAILABLE_BALANCE" NUMBER(18,5), 
	"FIELD90" NVARCHAR2(50), 
	"PAYMENT_NUMBER" NVARCHAR2(50), 
	"TRAN_CODE" NVARCHAR2(50), 
	"FIELD41" NVARCHAR2(50), 
	"FIELD42" NVARCHAR2(50), 
	"POSTED" NUMBER DEFAULT 0, 
	"EXTERNAL_REFNO" NVARCHAR2(50), 
	"FIELD24" NVARCHAR2(5), 
	"MSGTYPE" NVARCHAR2(10), 
	"TRX_REFNO" NVARCHAR2(50), 
	"REVERSED" NUMBER DEFAULT 0
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTIONS_GL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTIONS_GL" 
   (	"ID" NUMBER, 
	"GL_CODE" VARCHAR2(20 BYTE), 
	"FIELD37" VARCHAR2(50 BYTE), 
	"DRCR" VARCHAR2(5 BYTE), 
	"FIELD100" VARCHAR2(50 BYTE), 
	"FIELD3" VARCHAR2(20 BYTE), 
	"AMOUNT" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"VALUE_DATE" DATE, 
	"TRANS_CODE" VARCHAR2(20 BYTE), 
	"TRANS_SERIAL" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTIONS_GL_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE" 
   (	"ID" NUMBER, 
	"GL_CODE" VARCHAR2(20 BYTE), 
	"FIELD37" VARCHAR2(50 BYTE), 
	"DRCR" VARCHAR2(5 BYTE), 
	"FIELD100" VARCHAR2(50 BYTE), 
	"FIELD3" VARCHAR2(20 BYTE), 
	"AMOUNT" NUMBER, 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"VALUE_DATE" DATE, 
	"TRANS_CODE" VARCHAR2(20 BYTE), 
	"TRANS_SERIAL" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTION_AUDIT_TRAIL
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" 
   (	"ID" NUMBER(20,0), 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"AMOUNT" NUMBER(18,2), 
	"ACCOUNT_NO" NVARCHAR2(20), 
	"REFRENCE_NO" NVARCHAR2(20), 
	"ACTUAL_REQUEST" NVARCHAR2(1000)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTION_DEFINITION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTION_DEFINITION" 
   (	"ID" NUMBER, 
	"FIELD3" NVARCHAR2(20), 
	"DESCRIPTION" NVARCHAR2(200), 
	"FIELD32" NVARCHAR2(10), 
	"ENABLE" NUMBER(1,0), 
	"FIELD100" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTION_LIMIT
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTION_LIMIT" 
   (	"ID" NUMBER, 
	"PROCODE" NVARCHAR2(20), 
	"CHANNEL" NVARCHAR2(10), 
	"TXN_TYPE" NVARCHAR2(10), 
	"TXN_LIMIT" NUMBER(18,5), 
	"DAILY_LIMIT" NUMBER(18,5), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REJECTED" NUMBER(1,0), 
	"REJECTEDBY" NVARCHAR2(50), 
	"REJECTEDON" TIMESTAMP (6), 
	"REWORKED" NUMBER(1,0), 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"SESSION_ID" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTION_MATRIX
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTION_MATRIX" 
   (	"ID" NUMBER(10,0), 
	"PROCODE" NVARCHAR2(10), 
	"FIELD100" NVARCHAR2(50), 
	"DRCR" CHAR(1 BYTE), 
	"AMOUNT" NUMBER(18,5), 
	"MF" CHAR(1 BYTE), 
	"FVR" NVARCHAR2(10), 
	"G_C" CHAR(1 BYTE), 
	"DESCRIPTION" NVARCHAR2(50), 
	"CHANNEL" NVARCHAR2(10), 
	"ACCOUNTNO" NVARCHAR2(14), 
	"Additional_Narration" NVARCHAR2(20), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"FIELD24" NVARCHAR2(10)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANSACTION_TYPES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANSACTION_TYPES" 
   (	"ID" NUMBER, 
	"TXN_TYPE_CODE" NVARCHAR2(20), 
	"DESCRIPTION" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANS_COMMISSION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANS_COMMISSION" 
   (	"ID" NUMBER, 
	"TRXCODE" NVARCHAR2(200), 
	"PROCODE" NVARCHAR2(10), 
	"CHANNEL" NVARCHAR2(10), 
	"AMOUNT" NUMBER(18,5), 
	"FVR" NVARCHAR2(10), 
	"TRXNARRATION" NVARCHAR2(300), 
	"CUSTOMERACCOUNT" NVARCHAR2(100), 
	"APPLYEXCISEDUTY" NUMBER(18,5) DEFAULT 0, 
	"MINAMOUNT" NUMBER(18,5), 
	"MAXAMOUNT" NUMBER(18,5), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" NVARCHAR2(50), 
	"APPROVED" NUMBER DEFAULT 1, 
	"APPROVEDBY" NVARCHAR2(50), 
	"APPROVEDON" TIMESTAMP (6), 
	"REJECTED" NUMBER(1,0), 
	"REJECTEDBY" NVARCHAR2(50), 
	"REJECTEDON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"TRXACTIVE" NUMBER DEFAULT 1, 
	"APPROVALREMARKS" NVARCHAR2(200), 
	"ACCOUNT_CLASS" NVARCHAR2(20), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TRANS_COMMISSION_CHARGES
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" 
   (	"ID" NUMBER, 
	"TRXCODE" NVARCHAR2(200), 
	"PROCODE" NVARCHAR2(10), 
	"CHANNEL" NVARCHAR2(30), 
	"AMOUNT" NUMBER(18,5), 
	"FVR" NVARCHAR2(10), 
	"TRXNARRATION" NVARCHAR2(300), 
	"CUSTOMERACCOUNT" NVARCHAR2(100), 
	"APPLYEXCISEDUTY" NUMBER(18,5) DEFAULT 0, 
	"MINAMOUNT" NUMBER(18,5), 
	"MAXAMOUNT" NUMBER(18,5), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATEDBY" NVARCHAR2(50), 
	"APPROVED" NUMBER DEFAULT 1, 
	"APPROVEDBY" NVARCHAR2(50), 
	"APPROVEDON" TIMESTAMP (6), 
	"REJECTED" NUMBER(1,0), 
	"REJECTEDBY" NVARCHAR2(50), 
	"REJECTEDON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"TRXACTIVE" NUMBER DEFAULT 1, 
	"APPROVALREMARKS" NVARCHAR2(200), 
	"ACCOUNT_CLASS" NVARCHAR2(20), 
	"REWORKED_ON" TIMESTAMP (6), 
	"REWORKED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TXN_REF_SEQUENCE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TXN_REF_SEQUENCE" 
   (	"ID" NUMBER, 
	"CHANNEL" NVARCHAR2(20), 
	"WORKING_DATE" DATE, 
	"SEQUENCE_FORMAT" NVARCHAR2(20), 
	"START_SEQUENCE" NVARCHAR2(20), 
	"CHANNEL_NAME" NVARCHAR2(20)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_TYPE_OF_IDENTIFICATION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_TYPE_OF_IDENTIFICATION" 
   (	"ID" NUMBER(10,0), 
	"IDENTIFICATIONCODE" NVARCHAR2(10), 
	"TYPEOFIDENTIFICATION" NVARCHAR2(50), 
	"DESCRIPTION" NVARCHAR2(500), 
	"CREATEDBY" NVARCHAR2(50), 
	"CREATEDON" TIMESTAMP (3)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_UNREGISTERED_CUSTOMERS
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_UNREGISTERED_CUSTOMERS" 
   (	"ID" NUMBER, 
	"PHONE_NUMBER" NVARCHAR2(20), 
	"CHANNEL" VARCHAR2(20 BYTE), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_USER
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_USER" 
   (	"ID" NUMBER, 
	"USER_NAME" NVARCHAR2(50), 
	"AUTH_KEY" NVARCHAR2(50), 
	"PASSWORD_HASH" NVARCHAR2(100), 
	"PASSWORD_RESET_TOKEN" NVARCHAR2(100), 
	"EMAIL" NVARCHAR2(100), 
	"BRANCH_ID" NUMBER DEFAULT 1, 
	"FIRST_NAME" NVARCHAR2(50), 
	"MIDDLE_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"ID_NUMBER" NVARCHAR2(20), 
	"PROFESSION" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATE_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER, 
	"OFFICE_VOIP" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0) DEFAULT 1, 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"TRIALS" NUMBER(10,0) DEFAULT 0, 
	"LOCKED" NUMBER(10,0) DEFAULT 0, 
	"FIRST_LOGIN" NUMBER(1,0) DEFAULT 1, 
	"REMARKS" NVARCHAR2(50), 
	"SUPERADMIN" NUMBER(1,0), 
	"CONFIRMATION_TOKEN" NVARCHAR2(50), 
	"PROFILE_ID" NUMBER, 
	"BIND_TO_IP" NVARCHAR2(50), 
	"EMAIL_CONFIRMED" NVARCHAR2(50), 
	"REGISTRATION_IP" NVARCHAR2(50), 
	"LAST_PASSWORD_RESET" TIMESTAMP (6), 
	"LOGGED_IN" NUMBER(1,0) DEFAULT 0, 
	"SESSION_ID" NVARCHAR2(50), 
	"LOGGEDIN_IP" NVARCHAR2(50), 
	"PREVIOUS_LOGIN_DATE" TIMESTAMP (6), 
	"LAST_LOGIN_DATE" TIMESTAMP (6), 
	"LANGUAGE" NVARCHAR2(50), 
	"USER_PHOTO" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"OTP" NVARCHAR2(50), 
	"OTP_TIME" TIMESTAMP (6), 
	"OTP_EXPIRY_TIME" TIMESTAMP (6), 
	"OTP_VERIFIED" NUMBER(1,0), 
	"DEPARTMENT_ID" NUMBER(1,0), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DECLINED" NUMBER(1,0) DEFAULT 0, 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(200), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCKED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_ON" TIMESTAMP (6), 
	"PIN_RESET_BY" NVARCHAR2(50), 
	"PIN_RESET_ON" TIMESTAMP (6), 
	"PIN_RESET_APPROVED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_USER_ARCHIVE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_USER_ARCHIVE" 
   (	"ID" NUMBER, 
	"USER_NAME" NVARCHAR2(50), 
	"AUTH_KEY" NVARCHAR2(50), 
	"PASSWORD_HASH" NVARCHAR2(100), 
	"PASSWORD_RESET_TOKEN" NVARCHAR2(100), 
	"EMAIL" NVARCHAR2(100), 
	"BRANCH_ID" NUMBER DEFAULT 1, 
	"FIRST_NAME" NVARCHAR2(50), 
	"MIDDLE_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"ID_NUMBER" NVARCHAR2(20), 
	"PROFESSION" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATE_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER, 
	"OFFICE_VOIP" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0) DEFAULT 1, 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"TRIALS" NUMBER(10,0) DEFAULT 0, 
	"LOCKED" NUMBER(10,0) DEFAULT 0, 
	"FIRST_LOGIN" NUMBER(1,0) DEFAULT 1, 
	"REMARKS" NVARCHAR2(50), 
	"SUPERADMIN" NUMBER(1,0), 
	"CONFIRMATION_TOKEN" NVARCHAR2(50), 
	"PROFILE_ID" NUMBER, 
	"BIND_TO_IP" NVARCHAR2(50), 
	"EMAIL_CONFIRMED" NVARCHAR2(50), 
	"REGISTRATION_IP" NVARCHAR2(50), 
	"LAST_PASSWORD_RESET" TIMESTAMP (6), 
	"LOGGED_IN" NUMBER(1,0) DEFAULT 0, 
	"SESSION_ID" NVARCHAR2(50), 
	"LOGGEDIN_IP" NVARCHAR2(50), 
	"PREVIOUS_LOGIN_DATE" TIMESTAMP (6), 
	"LAST_LOGIN_DATE" TIMESTAMP (6), 
	"LANGUAGE" NVARCHAR2(50), 
	"USER_PHOTO" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"OTP" NVARCHAR2(50), 
	"OTP_TIME" TIMESTAMP (6), 
	"OTP_EXPIRY_TIME" TIMESTAMP (6), 
	"OTP_VERIFIED" NUMBER(1,0), 
	"DEPARTMENT_ID" NUMBER(1,0), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DECLINED" NUMBER(1,0) DEFAULT 0, 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(200), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCKED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_ON" TIMESTAMP (6), 
	"PIN_RESET_BY" NVARCHAR2(50), 
	"PIN_RESET_ON" TIMESTAMP (6), 
	"PIN_RESET_APPROVED_BY" NVARCHAR2(50)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_USER_INSTITUTION
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_USER_INSTITUTION" 
   (	"ID" NUMBER, 
	"USER_NAME" NVARCHAR2(50), 
	"AUTH_KEY" NVARCHAR2(50), 
	"PASSWORD_HASH" NVARCHAR2(100), 
	"PASSWORD_RESET_TOKEN" NVARCHAR2(100), 
	"EMAIL" NVARCHAR2(100), 
	"BRANCH_ID" NUMBER DEFAULT 1, 
	"FIRST_NAME" NVARCHAR2(50), 
	"MIDDLE_NAME" NVARCHAR2(50), 
	"LAST_NAME" NVARCHAR2(50), 
	"ID_NUMBER" NVARCHAR2(20), 
	"PROFESSION" NVARCHAR2(50), 
	"MOBILE_NUMBER" NVARCHAR2(50), 
	"CREATED_BY" NVARCHAR2(50), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATE_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER, 
	"INSTITUTION_TYPE" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0) DEFAULT 1, 
	"APPROVED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"APPROVED_BY" NVARCHAR2(50), 
	"TRIALS" NUMBER(1,0) DEFAULT 0, 
	"LOCKED" NUMBER(1,0) DEFAULT 0, 
	"FIRST_LOGIN" NUMBER(1,0) DEFAULT 1, 
	"REMARKS" NVARCHAR2(50), 
	"SUPERADMIN" NUMBER(1,0), 
	"CONFIRMATION_TOKEN" NVARCHAR2(50), 
	"PROFILE_ID" NVARCHAR2(100), 
	"BIND_TO_IP" NVARCHAR2(50), 
	"EMAIL_CONFIRMED" NVARCHAR2(50), 
	"REGISTRATION_IP" NVARCHAR2(50), 
	"LAST_PASSWORD_RESET" TIMESTAMP (6), 
	"LOGGED_IN" NUMBER(1,0) DEFAULT 0, 
	"SESSION_ID" NVARCHAR2(50), 
	"LOGGEDIN_IP" NVARCHAR2(50), 
	"PREVIOUS_LOGIN_DATE" TIMESTAMP (6), 
	"LAST_LOGIN_DATE" TIMESTAMP (6), 
	"LANGUAGE" NVARCHAR2(50), 
	"USER_PHOTO" NVARCHAR2(50), 
	"DELETED" NUMBER(1,0) DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50), 
	"DELETED_ON" TIMESTAMP (6), 
	"OTP" NVARCHAR2(50), 
	"OTP_TIME" TIMESTAMP (6), 
	"OTP_EXPIRY_TIME" TIMESTAMP (6), 
	"OTP_VERIFIED" NUMBER(1,0), 
	"DEPARTMENT_ID" NUMBER(1,0), 
	"REWORKED" NUMBER(1,0) DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(50), 
	"REWORKED_ON" TIMESTAMP (6), 
	"DECLINED" NUMBER(1,0) DEFAULT 0, 
	"DECLINED_BY" NVARCHAR2(50), 
	"DECLINED_ON" TIMESTAMP (6), 
	"BLOCKED_BY" NVARCHAR2(200), 
	"BLOCKED_ON" TIMESTAMP (6), 
	"BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCKED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_BY" NVARCHAR2(50), 
	"UN_BLOCK_APPROVED_ON" TIMESTAMP (6), 
	"PIN_RESET_BY" NVARCHAR2(50), 
	"PIN_RESET_ON" TIMESTAMP (6), 
	"PIN_RESET_APPROVED_BY" NVARCHAR2(50), 
	"INSTITUTION_CODE" VARCHAR2(20 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_USER_IN_PROFILE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_USER_IN_PROFILE" 
   (	"ID" NUMBER, 
	"CREATE_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"USER_ID" NUMBER, 
	"PROFILE_ID" NUMBER, 
	"ENABLED" NUMBER DEFAULT 1, 
	"APPROVED" NUMBER, 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"DELETED" NUMBER DEFAULT 0, 
	"DELETED_BY" NVARCHAR2(50) DEFAULT 0, 
	"DELETED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"REWORKED" NUMBER DEFAULT 0, 
	"REWORKED_BY" NVARCHAR2(20), 
	"REWORKED_ON" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_VILLAGE
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_VILLAGE" 
   (	"ID" NUMBER, 
	"CODE" NVARCHAR2(50), 
	"VILLAGE_NAME" NVARCHAR2(200), 
	"CREATED_ON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"CREATED_BY" NVARCHAR2(50), 
	"APPROVED" NUMBER(1,0), 
	"APPROVED_BY" NVARCHAR2(50), 
	"APPROVED_ON" TIMESTAMP (6), 
	"REMARKS" NVARCHAR2(200), 
	"CHECKER_REMARKS" NVARCHAR2(200), 
	"STATUS" NUMBER(1,0), 
	"PARISH_ID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TB_VOTE_CATEGORY
--------------------------------------------------------

  CREATE TABLE "APP_USER"."TB_VOTE_CATEGORY" 
   (	"ID" NUMBER, 
	"VOTE_CATEGORY" NVARCHAR2(10), 
	"GROUPID" NVARCHAR2(20), 
	"VOTETYPE" NVARCHAR2(50), 
	"CANDIDATE" NVARCHAR2(20), 
	"BORROWINGID" NVARCHAR2(10), 
	"VOTEREQUESTSENT" NVARCHAR2(10), 
	"CREATEDON" TIMESTAMP (6) DEFAULT SYSTIMESTAMP, 
	"VOTED" NUMBER(1,0), 
	"EXPIRED" NUMBER(1,0), 
	"ACCEPTED" NUMBER(1,0), 
	"MEMBER_COUNT" NUMBER, 
	"REQUESTOR_PHONE" NVARCHAR2(20)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Sequence AGENTCODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AGENTCODE_SEQ"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 1 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AGENTDEVICELINKING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AGENTDEVICELINKING_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 100 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_DATA_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_DATA_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_ENTRY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_ENTRY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_ERROR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_ERROR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_JAVASCRIPT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_JAVASCRIPT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_MAIL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_MAIL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUDIT_TRAIL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUDIT_TRAIL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 78843 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTH_ASSIGNMENT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUTH_ASSIGNMENT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTH_ITEM_CHILD_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUTH_ITEM_CHILD_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTH_ITEM_GROUP_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUTH_ITEM_GROUP_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence AUTH_ITEM_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."AUTH_ITEM_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence GROUPACCOUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."GROUPACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence INSTITUTE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."INSTITUTE_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence SACCO_ACCOUNT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."SACCO_ACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 25 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TBADVERTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TBADVERTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TBCOBERRORS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TBCOBERRORS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TBDSSTXN_PERSONAL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TBDSSTXN_PERSONAL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TBDSSTXN_REMIDIATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TBDSSTXN_REMIDIATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ACCOUNT_BALANCE_SNAPSHOT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ACCOUNT_BALANCE_SNAPSHOT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 496 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ACCOUNT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ACCOUNT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6006 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ACCOUNT_MANDATE_ROLE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ACCOUNT_MANDATE_ROLE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ACCOUNT_STATUS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ACCOUNT_STATUS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENTS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENTS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 163 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENTS_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENTS_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENTS_SEQ3
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENTS_SEQ3"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 661 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_CATEGORY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_CATEGORY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_CATEGORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_DEVICELINKING_ARCHIVE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_DEVICELINKING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_DEVICELINKING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 581 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_DEVICELINKING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_DEVICELINKING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_AGENT_DEVICES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_AGENT_DEVICES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BANK_BRANCH_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BANK_BRANCH_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1881 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BANK_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BANK_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BENEFICIARY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BENEFICIARY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BILLERS_MAPPINGS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BILLERS_MAPPINGS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 297 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BILLER_REQUESTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BILLER_REQUESTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1075 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BLOCK_ACCOUNT_AMOUNT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_BRANCH_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_BRANCH_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CARDLESS_TRANSACTIONS_ARCHIVE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CARDLESS_TRANSACTIONS_ARCHIVE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CARDLESS_TRANSACTIONS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CARDLESS_TRANSACTIONS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CARDLESS_TRANSACTIONS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CARDLESS_TRANSACTIONS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CARD_LINKING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CARD_LINKING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 241 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CARD_TRANSACTIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CARD_TRANSACTIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CHANNEL_REQUESTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CHANNEL_REQUESTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CHARGES_GL_MAPPING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CHARGES_GL_MAPPING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CHARGE_RANGE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CHARGE_RANGE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 341 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CITY_LOCATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CITY_LOCATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_ANSWERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_ANSWERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_AUDIT_TRAIL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_CARE_REQUESTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_CARE_REQUESTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_COMPLIANCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_COMPLIANCE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1941 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 910 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_SEQ1"  MINVALUE 1 MAXVALUE 99999999999999 INCREMENT BY 1 START WITH 4074 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_VALIDATION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_VALIDATION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5126 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_CUSTOMER_WHITELIST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_CUSTOMER_WHITELIST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_DATA_WORKFLOW_ACTION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_DATA_WORKFLOW_ACTION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 746 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_DATA_WORKFLOW_CATEGORY_ID_
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_DATA_WORKFLOW_CATEGORY_ID_"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_DATA_WORKFLOW_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_DATA_WORKFLOW_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 748 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_DEFAULT_LIMIT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_DEFAULT_LIMIT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EMAIL_TEMPLATE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EMAIL_TEMPLATE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 66 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EMAIL_TEMPLATE_ID_seq
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EMAIL_TEMPLATE_ID_seq"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EMAIL_TEMPLATE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EMAIL_TEMPLATE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EOD_ACTIVITY_ARCHIVE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EOD_ACTIVITY_ARCHIVE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EOD_ACTIVITY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EOD_ACTIVITY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EOD_ACTIVITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EOD_ACTIVITY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 661 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_EOD_ERRORS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_EOD_ERRORS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ERROR_CODE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ERROR_CODE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ERROR_CODE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ERROR_CODE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_FOREX_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_FOREX_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_FOREX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_FOREX_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 102 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GENERAL_PARAMS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GENERAL_PARAMS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GENERAL_PARAMS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GENERAL_PARAMS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GENERAL_PARAMS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GENERAL_PARAMS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_BALANCE_ARCHIVE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_BALANCE_ARCHIVE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1361 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_BALANCE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_BALANCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_DEFINITION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_DEFINITION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_MAPPING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_MAPPING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_MAPPING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 552 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 165 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GL_SEQUENCE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GL_SEQUENCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GROUPS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GROUPS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_GROUP_LINKING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_GROUP_LINKING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTIONS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTIONS_ID_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 250 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTION_BATCH_PAYOUT_I
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT_I"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTION_BATCH_PAYOUT_I1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT_I1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTION_BATCH_PAYOUT_I2
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT_I2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 421 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTION_TYPES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTION_TYPES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSTITUTION_UPLOADS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSTITUTION_UPLOADS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INSURANCE_LEADS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INSURANCE_LEADS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_INTERIM_BATCH_REPORTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_INTERIM_BATCH_REPORTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ISSUES_CATEGORY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ISSUES_CATEGORY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ISSUES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ISSUES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 23 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ISSUES_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ISSUES_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1441 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_KEY_HISTORY_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_KEY_HISTORY_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1401 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LINKED_ACCOUNTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LINKED_ACCOUNTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1621 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LOAN_PRODUCTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LOAN_PRODUCTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LOAN_RECOVERIES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LOAN_RECOVERIES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LOAN_SCORING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LOAN_SCORING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LOYALITY_POINTS_MAPPING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LOYALITY_POINTS_MAPPING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_LOYALTYPOINTS_MATRIX_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_LOYALTYPOINTS_MATRIX_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MERCHANTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MERCHANTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MERCHANT_CATEGORY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MERCHANT_CATEGORY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MERCHANT_CUSTOMERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MERCHANT_CUSTOMERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MERCHANT_DEALS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MERCHANT_DEALS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MERCHANT_OUTLET_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MERCHANT_OUTLET_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MESSAGES_CBS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MESSAGES_CBS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 7274 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MESSAGES_EXTERNAL_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MESSAGES_EXTERNAL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 65772 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MESSAGES_SMS_ARCHIVE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MESSAGES_SMS_ARCHIVE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MESSAGES_SMS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MESSAGES_SMS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22001 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_MVISA_MASTEPASS_REG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_MVISA_MASTEPASS_REG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OFFLINE_BALANCES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OFFLINE_BALANCES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OPERATOR_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OPERATOR_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OPERATOR_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OPERATOR_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OPERATOR_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OPERATOR_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OPTIONAL_BENEFIT_REQUESTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OPTIONAL_BENEFIT_REQUESTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_OUTLET_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_OUTLET_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_PA_PREMIUM_OPTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_PA_PREMIUM_OPTION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_PESALINK_BANK_LIST_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_PESALINK_BANK_LIST_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_PRESCORED_LOAN_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_PRESCORED_LOAN_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_PRODUCTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_PRODUCTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_PROFILES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_PROFILES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 441 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REGISTRATIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REGISTRATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REGISTRATIONS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REGISTRATIONS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REGISTRATIONS_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REGISTRATIONS_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REGISTRATIONS_SEQ3
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REGISTRATIONS_SEQ3"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3005 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REQUESTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REQUESTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1570 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_REVERSAL_REQUEST_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_REVERSAL_REQUEST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 161 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ROLES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ROLES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ROLES_IN_PROFILE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ROLES_IN_PROFILE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 261 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_ROLES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_ROLES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 403 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SACCOS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SACCOS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SACCO_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SACCO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SACCO_LINKING_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SACCO_LINKING_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SCHOOL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SCHOOL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SECURITY_QUESTIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SECURITY_QUESTIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SECURITY_QUESTIONS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SECURITY_QUESTIONS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SERVICES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SERVICES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 782 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SMS_TEMPLATE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SMS_TEMPLATE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 421 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SP_ERROR_LOG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SP_ERROR_LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SP_ERROR_LOG_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SP_ERROR_LOG_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_STAGING_ACTION_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_STAGING_ACTION_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4989 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_STAGING_COMMENTS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_STAGING_COMMENTS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_SUPER_AGENT_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_SUPER_AGENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 62 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TERMS_AND_CONDITIONS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TERMS_AND_CONDITIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_THIRD_PARTY_REQUESTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_THIRD_PARTY_REQUESTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_THIRD_PARTY_REQUESTS_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_THIRD_PARTY_REQUESTS_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 301 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRADE_FIN_PROCURING_ENTITY_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRADE_FIN_PROCURING_ENTITY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRADE_FIN_REQUESTS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRADE_FIN_REQUESTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_ARCHIVE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_ARCHIVE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_ARCHIVE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_ARCHIVE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 24221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_COB_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_COB_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_GL_ARCHIVE_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_GL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_GL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_GL_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_GL_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTIONS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTIONS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 85691 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTION_AUDIT_TRAIL_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTION_LIMIT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTION_LIMIT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANSACTION_MATRIX_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANSACTION_MATRIX_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 521 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANS_COMMISSION_CHARGES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANS_COMMISSION_CHARGES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANS_COMMISSION_CHARGES_SEQ1
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANS_COMMISSION_CHARGES_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 406 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANS_COMMISSION_CHARGES_SEQ2
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANS_COMMISSION_CHARGES_SEQ2"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 526 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANS_COMM_CHARGES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANS_COMM_CHARGES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 342 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TRANS_COMM_CHARGES_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TRANS_COMM_CHARGES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 342 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TXN_REF_SEQUENCE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TXN_REF_SEQUENCE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_TYPE_OF_IDENTIFICATION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_TYPE_OF_IDENTIFICATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_UNREGISTERED_CUSTOMERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_UNREGISTERED_CUSTOMERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3901 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_USER_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_USER_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 881 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_USER_INSTITUTION_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_USER_INSTITUTION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 221 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_USER_IN_PROFILE_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_USER_IN_PROFILE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 561 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TB_VOTE_CATEGORY_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TB_VOTE_CATEGORY_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence TRANS_AGENCY_REFERENCE_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "APP_USER"."TRANS_AGENCY_REFERENCE_SEQ"  MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 START WITH 100000007191 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Index TB_CHARGES_GL_MAPPING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CHARGES_GL_MAPPING_PK" ON "APP_USER"."TB_CHARGES_GL_MAPPING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_JAVASCRIPT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_JAVASCRIPT_PK" ON "APP_USER"."AUDIT_JAVASCRIPT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTH_ITEM_CHILD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUTH_ITEM_CHILD_PK" ON "APP_USER"."AUTH_ITEM_CHILD" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INSTITUTION_TYPES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INSTITUTION_TYPES_PK" ON "APP_USER"."TB_INSTITUTION_TYPES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTION_LIMIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTION_LIMIT_PK" ON "APP_USER"."TB_TRANSACTION_LIMIT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_USER_PRIVILEGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_USER_PRIVILEGES_PK" ON "APP_USER"."MD_USER_PRIVILEGES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LOAN_DECLINED_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LOAN_DECLINED_PK" ON "APP_USER"."TB_LOAN_DECLINED" ("REFERENCE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C0038898
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C0038898" ON "APP_USER"."TB_MERCHANT_DEALS" ("DEAL_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_ACTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_STAGING_ACTION_PK" ON "APP_USER"."TB_STAGING_ACTION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CHANNEL_REQUESTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CHANNEL_REQUESTS_PK" ON "APP_USER"."TB_CHANNEL_REQUESTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ACCOUNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ACCOUNT_PK" ON "APP_USER"."TB_ACCOUNT" ("ACCOUNT_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LOAN_SCORING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LOAN_SCORING_PK" ON "APP_USER"."TB_LOAN_SCORING" ("ACCOUNT_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICES_PK" ON "APP_USER"."TB_AGENT_DEVICES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICES_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICES_UK1" ON "APP_USER"."TB_AGENT_DEVICES" ("DEVICE_IMEI") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICES_UK2
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICES_UK2" ON "APP_USER"."TB_AGENT_DEVICES" ("DEVICE_MOBILE_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_DATA_WORKFLOW_PK" ON "APP_USER"."TB_DATA_WORKFLOW" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTION_AUDIT_TRAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL_PK" ON "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_PRODUCTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_PRODUCTS_PK" ON "APP_USER"."TB_PRODUCTS" ("PRODUCT_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C0034459
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C0034459" ON "APP_USER"."TB_SEQUENCE" ("UNIQUEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GL_MAPPING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GL_MAPPING_PK" ON "APP_USER"."TB_GL_MAPPING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MVISA_MASTEPASS_REGISTR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MVISA_MASTEPASS_REGISTR_PK" ON "APP_USER"."TB_MVISA_MPASS_REGISTRATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_EXTERNAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_EXTERNAL_PK" ON "APP_USER"."TB_MESSAGES_EXTERNAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_ACTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_DATA_WORKFLOW_ACTION_PK" ON "APP_USER"."TB_DATA_WORKFLOW_ACTION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTIONS_PK" ON "APP_USER"."TB_TRANSACTIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_DATA_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_DATA_PK" ON "APP_USER"."AUDIT_DATA" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LINKED_ACCOUNTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LINKED_ACCOUNTS_PK" ON "APP_USER"."TB_LINKED_ACCOUNTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LINKED_ACCOUNTS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LINKED_ACCOUNTS_UK1" ON "APP_USER"."TB_LINKED_ACCOUNTS" ("LINKEDACCOUNT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_REQUESTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_REQUESTS_PK" ON "APP_USER"."TB_REQUESTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_EOD_ACTIVITY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_EOD_ACTIVITY_PK" ON "APP_USER"."TB_EOD_ACTIVITY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SUPER_AGENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SUPER_AGENT_PK" ON "APP_USER"."TB_SUPER_AGENT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_USER_IN_PROFILE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_USER_IN_PROFILE_PK" ON "APP_USER"."TB_USER_IN_PROFILE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LOAN_PRODUCTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LOAN_PRODUCTS_PK" ON "APP_USER"."TB_LOAN_PRODUCTS" ("PRODUCT_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_CONNECTIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_CONNECTIONS_PK" ON "APP_USER"."MD_CONNECTIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_MAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_MAIL_PK" ON "APP_USER"."AUDIT_MAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_PK" ON "APP_USER"."TB_CUSTOMER" ("CUSTOMER_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_PESALINK_BANK_LIST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_PESALINK_BANK_LIST_PK" ON "APP_USER"."TB_PESALINK_BANK_LIST" ("BANK_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ISSUES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ISSUES_PK" ON "APP_USER"."TB_ISSUES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICELINKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICELINKING_PK" ON "APP_USER"."TB_AGENT_DEVICELINKING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICELINKING_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICELINKING_UK1" ON "APP_USER"."TB_AGENT_DEVICELINKING" ("POS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APPLICATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_APPLICATIONS_PK" ON "APP_USER"."MD_APPLICATIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_VALIDATION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_VALIDATION_PK" ON "APP_USER"."TB_CUSTOMER_VALIDATION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ROLES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ROLES_PK" ON "APP_USER"."TB_ROLES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ROLES_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ROLES_UK1" ON "APP_USER"."TB_ROLES" ("ROLE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BLOCK_ACCOUNT_AMOUNT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT_PK" ON "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BLOCK_ACCOUNT_UK_ACCNO
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BLOCK_ACCOUNT_UK_ACCNO" ON "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" ("ACCOUNT_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SERVICES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SERVICES_PK" ON "APP_USER"."TB_SERVICES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SERVICES_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SERVICES_UK1" ON "APP_USER"."TB_SERVICES" ("FIELD100") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_VOTE_CATEGORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_VOTE_CATEGORY_PK" ON "APP_USER"."TB_VOTE_CATEGORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_ERROR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_ERROR_PK" ON "APP_USER"."AUDIT_ERROR" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TXN_REF_SEQUENCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TXN_REF_SEQUENCE_PK" ON "APP_USER"."TB_TXN_REF_SEQUENCE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_PROJECTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_PROJECTS_PK" ON "APP_USER"."MD_PROJECTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GL_SEQUENCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GL_SEQUENCE_PK" ON "APP_USER"."TB_GL_SEQUENCE" ("PREFIX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_OFFLINE_BALANCES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_OFFLINE_BALANCES_PK" ON "APP_USER"."TB_OFFLINE_BALANCES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_TABLESPACES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_TABLESPACES_PK" ON "APP_USER"."MD_TABLESPACES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GL_PK" ON "APP_USER"."TB_GL" ("GL_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTION_MATRIX_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTION_MATRIX_PK" ON "APP_USER"."TB_TRANSACTION_MATRIX" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_CATALOGS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_CATALOGS_PK" ON "APP_USER"."MD_CATALOGS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C0037901
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C0037901" ON "APP_USER"."TB_FOREX" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_CARE_REQUESTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_CARE_REQUESTS_PK" ON "APP_USER"."TB_CUSTOMER_CARE_REQUESTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_SMS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_SMS_PK" ON "APP_USER"."TB_MESSAGES_SMS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_USER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_USER_PK" ON "APP_USER"."TB_USER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_USER_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_USER_UK1" ON "APP_USER"."TB_USER" ("USER_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENTS_PK" ON "APP_USER"."TB_AGENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENTS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENTS_UK1" ON "APP_USER"."TB_AGENTS" ("BUSINESS_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTH_ASSIGNMENT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUTH_ASSIGNMENT_PK" ON "APP_USER"."AUTH_ASSIGNMENT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_COLUMNS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_COLUMNS_PK" ON "APP_USER"."MD_COLUMNS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_GROUP_MEMBERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_GROUP_MEMBERS_PK" ON "APP_USER"."MD_GROUP_MEMBERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GROUP_LINKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GROUP_LINKING_PK" ON "APP_USER"."TB_GROUP_LINKING" ("MWALLET_AC", "GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ROLES_IN_PROFILE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ROLES_IN_PROFILE_PK" ON "APP_USER"."TB_ROLES_IN_PROFILE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ROLES_IN_PROFILE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ROLES_IN_PROFILE_UK1" ON "APP_USER"."TB_ROLES_IN_PROFILE" ("PROFILE_ID", "ROLE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BRANCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BRANCH_PK" ON "APP_USER"."TB_BRANCH" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BRANCH_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BRANCH_UK" ON "APP_USER"."TB_BRANCH" ("BRANCH_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GL_BALANCE_ARCHIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GL_BALANCE_ARCHIVE_PK" ON "APP_USER"."TB_GL_BALANCE_ARCHIVE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_ENTRY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_ENTRY_PK" ON "APP_USER"."AUDIT_ENTRY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_TB_LOAN_RECOVERIES
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."PK_TB_LOAN_RECOVERIES" ON "APP_USER"."TB_LOAN_RECOVERIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_SEQUENCES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_SEQUENCES_PK" ON "APP_USER"."MD_SEQUENCES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TRIAL_BAL_GLCODE_GLPARENT
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TRIAL_BAL_GLCODE_GLPARENT" ON "APP_USER"."TB_TEMP_TRIAL_BAL" ("GLCODE", "GLPARENT") ;
--------------------------------------------------------
--  DDL for Index MD_PARTITIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_PARTITIONS_PK" ON "APP_USER"."MD_PARTITIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_PROCESS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_STAGING_PROCESS_PK" ON "APP_USER"."TB_STAGING_PROCESS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_COMMENTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_STAGING_COMMENTS_PK" ON "APP_USER"."TB_STAGING_COMMENTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_CATEGORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_DATA_WORKFLOW_CATEGORY_PK" ON "APP_USER"."TB_DATA_WORKFLOW_CATEGORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ACCOUNT_STATUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ACCOUNT_STATUS_PK" ON "APP_USER"."TB_ACCOUNT_STATUS" ("STATUSCODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBADVERTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TBADVERTS_PK" ON "APP_USER"."TBADVERTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TRIAL_BAL_DRILL_GLCODE_GLPARENT
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TRIAL_BAL_DRILL_GLCODE_GLPARENT" ON "APP_USER"."TB_TEMP_TRIAL_BAL_DRILL" ("GLCODE", "GLPARENT") ;
--------------------------------------------------------
--  DDL for Index TB_BANK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BANK_PK" ON "APP_USER"."TB_BANK" ("BANK_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_USER_INSTITUTION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_USER_INSTITUTION_PK" ON "APP_USER"."TB_USER_INSTITUTION" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_USER_INSTITUTION_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_USER_INSTITUTION_UK1" ON "APP_USER"."TB_USER_INSTITUTION" ("USER_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ACCOUNT_MANDATE_ROLE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ACCOUNT_MANDATE_ROLE_PK" ON "APP_USER"."TB_ACCOUNT_MANDATE_ROLE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_CATEGORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_CATEGORY_PK" ON "APP_USER"."TB_AGENT_CATEGORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_CATEGORY_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_CATEGORY_UK1" ON "APP_USER"."TB_AGENT_CATEGORY" ("CATEGORY_DESCRIPTION") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BILLER_REQUESTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BILLER_REQUESTS_PK" ON "APP_USER"."TB_BILLER_REQUESTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INSTITUTION_BATCH_PAYOU_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INSTITUTION_BATCH_PAYOU_PK" ON "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BANK_BRANCH_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BANK_BRANCH_PK" ON "APP_USER"."TB_BANK_BRANCH" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index GL_CODE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."GL_CODE_PK" ON "APP_USER"."TB_GL_BALANCE" ("GL_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SACCO_LINKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SACCO_LINKING_PK" ON "APP_USER"."TB_SACCO_LINKING" ("SACCO_ACCOUNT", "CUSTOMER_ACCOUNT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_FILE_ARTIFACTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_FILE_ARTIFACTS_PK" ON "APP_USER"."MD_FILE_ARTIFACTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_USERS_PK" ON "APP_USER"."MD_USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_OUTLET_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_OUTLET_PK" ON "APP_USER"."TB_OUTLET" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_OUTLET_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_OUTLET_UK1" ON "APP_USER"."TB_OUTLET" ("OUTLET_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MIGR_PARAMETER_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MIGR_PARAMETER_PK" ON "APP_USER"."MD_MIGR_PARAMETER" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTH_ITEM_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUTH_ITEM_PK" ON "APP_USER"."AUTH_ITEM" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_BILLERS_MAPPINGS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_BILLERS_MAPPINGS_PK" ON "APP_USER"."TB_BILLERS_MAPPINGS" ("FIELD100") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APPLICATIONFILES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."MD_APPLICATIONFILES_PK" ON "APP_USER"."MD_APPLICATIONFILES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SMS_TEMPLATE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SMS_TEMPLATE_PK" ON "APP_USER"."TB_SMS_TEMPLATE" ("SMS_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INSTITUTION_UPLOADS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INSTITUTION_UPLOADS_PK" ON "APP_USER"."TB_INSTITUTION_UPLOADS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INSTITUTION_UPLOADS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INSTITUTION_UPLOADS_UK1" ON "APP_USER"."TB_INSTITUTION_UPLOADS" ("BATCH_NO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INSTITUTION_UPLOADS_UK2
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INSTITUTION_UPLOADS_UK2" ON "APP_USER"."TB_INSTITUTION_UPLOADS" ("FILE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SACCOS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SACCOS_PK" ON "APP_USER"."TB_SACCOS" ("SACCO_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SACCOS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SACCOS_UK1" ON "APP_USER"."TB_SACCOS" ("SACCO_NAMES", "SACCO_WALLET_ACCOUNT") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GL_DEFINITION_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GL_DEFINITION_PK" ON "APP_USER"."TB_GL_DEFINITION" ("PREFIX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GROUPS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GROUPS_PK" ON "APP_USER"."TB_GROUPS" ("GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GROUPS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GROUPS_UK1" ON "APP_USER"."TB_GROUPS" ("GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTIONS_COB_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTIONS_COB_PK" ON "APP_USER"."TB_TRANSACTIONS_COB" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTH_ITEM_GROUP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUTH_ITEM_GROUP_PK" ON "APP_USER"."AUTH_ITEM_GROUP" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DEFAULT_LIMIT_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_DEFAULT_LIMIT_PK" ON "APP_USER"."TB_DEFAULT_LIMIT" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_PROFILES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_PROFILES_PK" ON "APP_USER"."TB_PROFILES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_PROFILES_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_PROFILES_UK1" ON "APP_USER"."TB_PROFILES" ("PROFILE_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C0038819
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C0038819" ON "APP_USER"."TB_EMAIL_TEMPLATE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_OPERATOR_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_OPERATOR_PK" ON "APP_USER"."TB_OPERATOR" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_OPERATOR_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_OPERATOR_UK1" ON "APP_USER"."TB_OPERATOR" ("NATIONAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SCHOOL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SCHOOL_PK" ON "APP_USER"."TB_SCHOOL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CARDLESS_TRANSACTIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CARDLESS_TRANSACTIONS_PK" ON "APP_USER"."TB_CARDLESS_TRANSACTIONS" ("FIELD37") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_AGENT_DEVICELINKING_ARC_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_AGENT_DEVICELINKING_ARC_PK" ON "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUDIT_TRAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."AUDIT_TRAIL_PK" ON "APP_USER"."AUDIT_TRAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ISSUES_CATEGORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ISSUES_CATEGORY_PK" ON "APP_USER"."TB_ISSUES_CATEGORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBDSSTXN_PERSONAL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TBDSSTXN_PERSONAL_PK" ON "APP_USER"."TBDSSTXN_PERSONAL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBDSSTXN_REMIDIATION_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TBDSSTXN_REMIDIATION_UK1" ON "APP_USER"."TBDSSTXN_REMIDIATION" ("ACCOUNTNUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ACCOUNTNO_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."ACCOUNTNO_UK" ON "APP_USER"."TBREMIDIATION_ACCOUNTS" ("ACCOUNTNUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_LOYALITY_POINTS_MAPPING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_LOYALITY_POINTS_MAPPING_PK" ON "APP_USER"."TB_LOYALITY_POINTS_MAPPING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_REGISTRATIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_REGISTRATIONS_PK" ON "APP_USER"."TB_REGISTRATIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANS_COMMISSION_CHARGES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANS_COMMISSION_CHARGES_PK" ON "APP_USER"."TB_TRANS_COMMISSION_CHARGES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C0043871
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C0043871" ON "APP_USER"."TB_CHARGE_RANGE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C004387178343
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."SYS_C004387178343" ON "APP_USER"."TB_COMMISSION_RANGE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TERMS_AND_CONDITIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TERMS_AND_CONDITIONS_PK" ON "APP_USER"."TB_TERMS_AND_CONDITIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_CBS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_CBS_PK" ON "APP_USER"."TB_MESSAGES_CBS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_CBS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_CBS_UK1" ON "APP_USER"."TB_MESSAGES_CBS" ("FIELD37") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_SECURITY_QUESTIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_SECURITY_QUESTIONS_PK" ON "APP_USER"."TB_SECURITY_QUESTIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_ANSWERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_ANSWERS_PK" ON "APP_USER"."TB_CUSTOMER_ANSWERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBCOBERRORS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TBCOBERRORS_PK" ON "APP_USER"."TBCOBERRORS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TBCOBERRORS_ARCHIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TBCOBERRORS_ARCHIVE_PK" ON "APP_USER"."TBCOBERRORS_ARCHIVE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_THIRD_PARTY_REQUESTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_THIRD_PARTY_REQUESTS_PK" ON "APP_USER"."TB_THIRD_PARTY_REQUESTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_UNREGISTERED_CUSTOMERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_UNREGISTERED_CUSTOMERS_PK" ON "APP_USER"."TB_UNREGISTERED_CUSTOMERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_KEY_HISTORY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_KEY_HISTORY_PK" ON "APP_USER"."TB_KEY_HISTORY" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_AUDIT_TRAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL_PK" ON "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CARD_LINKING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CARD_LINKING_PK" ON "APP_USER"."TB_CARD_LINKING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CARD_LINKING_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CARD_LINKING_UK1" ON "APP_USER"."TB_CARD_LINKING" ("CARD_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_EOD_ACTIVITY_ARCHIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_PK" ON "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTIONS_ARCHIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTIONS_ARCHIVE_PK" ON "APP_USER"."TB_TRANSACTIONS_ARCHIVE" ("ARCHIVE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_SMS_ARCHIVE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_SMS_ARCHIVE_PK" ON "APP_USER"."TB_MESSAGES_SMS_ARCHIVE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANSACTIONS_GL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANSACTIONS_GL_PK" ON "APP_USER"."TB_TRANSACTIONS_GL" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CARD_TRANSACTIONS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CARD_TRANSACTIONS_PK" ON "APP_USER"."TB_CARD_TRANSACTIONS" ("FIELD37") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_REVERSAL_REQUEST_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_REVERSAL_REQUEST_PK" ON "APP_USER"."TB_REVERSAL_REQUEST" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MERCHANT_CUSTOMERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MERCHANT_CUSTOMERS_PK" ON "APP_USER"."TB_MERCHANT_CUSTOMERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MESSAGES_EXTERNAL_UK2
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MESSAGES_EXTERNAL_UK2" ON "APP_USER"."TB_MESSAGES_EXTERNAL" ("FIELD0", "FIELD37") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_MERCHANT_CUSTOMERS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_MERCHANT_CUSTOMERS_UK1" ON "APP_USER"."TB_MERCHANT_CUSTOMERS" ("CUST_CODE", "MERCHANT_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_COMPLIANCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_COMPLIANCE_PK" ON "APP_USER"."TB_CUSTOMER_COMPLIANCE" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_CUSTOMER_COMPLIANCE_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_CUSTOMER_COMPLIANCE_UK1" ON "APP_USER"."TB_CUSTOMER_COMPLIANCE" ("CUSTOMER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_INTERIM_BATCH_REPORTS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_INTERIM_BATCH_REPORTS_PK" ON "APP_USER"."TB_INTERIM_BATCH_REPORTS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_ACTION_INDEX1
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_DATA_WORKFLOW_ACTION_INDEX1" ON "APP_USER"."TB_DATA_WORKFLOW_ACTION" ("ACTION_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_APP_FILE_TYPE_IDX
--------------------------------------------------------

  CREATE INDEX "APP_USER"."MD_APP_FILE_TYPE_IDX" ON "APP_USER"."MD_APPLICATIONFILES" ("TYPE", "ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_ACTION_INDEX2
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_STAGING_ACTION_INDEX2" ON "APP_USER"."TB_STAGING_ACTION" ("CURRENT_ACTION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_ACTION_INDEX1
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_STAGING_ACTION_INDEX1" ON "APP_USER"."TB_STAGING_ACTION" ("WORKFLOW_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_GENERAL_PARAMS_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_GENERAL_PARAMS_PK1" ON "APP_USER"."TB_GENERAL_PARAMS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_PROCESS_INDEX1
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_STAGING_PROCESS_INDEX1" ON "APP_USER"."TB_STAGING_PROCESS" ("STAGING_ACTION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_ACTION_INDEX3
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_DATA_WORKFLOW_ACTION_INDEX3" ON "APP_USER"."TB_DATA_WORKFLOW_ACTION" ("WORKFLOW_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANS_COMMISSION_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANS_COMMISSION_PK1" ON "APP_USER"."TB_TRANS_COMMISSION" ("TRXCODE", "PROCODE", "CHANNEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_ERROR_CODE_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_ERROR_CODE_PK1" ON "APP_USER"."TB_ERROR_CODE" ("ERROR_CODE", "LANG") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_TRANS_COMMISSION_CHARGE_PK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "APP_USER"."TB_TRANS_COMMISSION_CHARGE_PK1" ON "APP_USER"."TB_TRANS_COMMISSION_CHARGES" ("TRXCODE", "PROCODE", "CHANNEL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_ACTION_INDEX3
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_STAGING_ACTION_INDEX3" ON "APP_USER"."TB_STAGING_ACTION" ("ORIGINAL_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_STAGING_COMMENTS_INDEX1
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_STAGING_COMMENTS_INDEX1" ON "APP_USER"."TB_STAGING_COMMENTS" ("STAGING_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_INDEX1
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_DATA_WORKFLOW_INDEX1" ON "APP_USER"."TB_DATA_WORKFLOW" ("CATEGORY_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MD_STATE_TYPE__ID
--------------------------------------------------------

  CREATE INDEX "APP_USER"."MD_STATE_TYPE__ID" ON "APP_USER"."MD_APPLICATIONFILES" ("STATE", "TYPE", "ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index TB_DATA_WORKFLOW_ACTION_INDEX2
--------------------------------------------------------

  CREATE INDEX "APP_USER"."TB_DATA_WORKFLOW_ACTION_INDEX2" ON "APP_USER"."TB_DATA_WORKFLOW_ACTION" ("REQUIRE_USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger AUDIT_DATA_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_DATA_ID_TRG" 
BEFORE INSERT ON AUDIT_DATA 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_DATA_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_DATA_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUDIT_ENTRY_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_ENTRY_ID_TRG" 
BEFORE INSERT ON AUDIT_ENTRY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_ENTRY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_ENTRY_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUDIT_ERROR_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_ERROR_ID_TRG" 
BEFORE INSERT ON AUDIT_ERROR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_ERROR_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_ERROR_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUDIT_JAVASCRIPT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_JAVASCRIPT_ID_TRG" 
BEFORE INSERT ON AUDIT_JAVASCRIPT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_JAVASCRIPT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_JAVASCRIPT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUDIT_MAIL_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_MAIL_ID_TRG" 
BEFORE INSERT ON AUDIT_MAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_MAIL_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_MAIL_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUDIT_TRAIL_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUDIT_TRAIL_ID_TRG" 
BEFORE INSERT ON AUDIT_TRAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUDIT_TRAIL_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUDIT_TRAIL_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTH_ASSIGNMENT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUTH_ASSIGNMENT_ID_TRG" 
BEFORE INSERT ON AUTH_ASSIGNMENT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUTH_ASSIGNMENT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUTH_ASSIGNMENT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTH_ITEM_CHILD_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUTH_ITEM_CHILD_ID_TRG" 
BEFORE INSERT ON AUTH_ITEM_CHILD 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUTH_ITEM_CHILD_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUTH_ITEM_CHILD_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTH_ITEM_GROUP_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUTH_ITEM_GROUP_ID_TRG" 
BEFORE INSERT ON AUTH_ITEM_GROUP 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUTH_ITEM_GROUP_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUTH_ITEM_GROUP_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTH_ITEM_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."AUTH_ITEM_ID_TRG" 
BEFORE INSERT ON AUTH_ITEM 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT AUTH_ITEM_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."AUTH_ITEM_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBADVERTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TBADVERTS_TRG" 
BEFORE INSERT ON TBADVERTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBADVERTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TBADVERTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBADVERTS_TRG1
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TBADVERTS_TRG1" 
BEFORE INSERT ON TBADVERTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TBADVERTS_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBCOBERRORS_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TBCOBERRORS_ARCHIVE_TRG" 
BEFORE INSERT ON TBCOBERRORS_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBCOBERRORS_ARCHIVE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TBCOBERRORS_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBCOBERRORS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TBCOBERRORS_TRG" 
BEFORE INSERT ON TBCOBERRORS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBCOBERRORS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TBCOBERRORS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBDSSTXN_PERSONAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TBDSSTXN_PERSONAL_TRG" 
BEFORE INSERT ON TBDSSTXN_PERSONAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBDSSTXN_PERSONAL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;




/
ALTER TRIGGER "APP_USER"."TBDSSTXN_PERSONAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBDSSTXN_REMIDIATION_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TBDSSTXN_REMIDIATION_TRG" 
BEFORE INSERT ON TBDSSTXN_REMIDIATION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBDSSTXN_REMIDIATION_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TBDSSTXN_REMIDIATION_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBREMIDIATION_ACCOUNTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TBREMIDIATION_ACCOUNTS_TRG" 
BEFORE INSERT ON TBREMIDIATION_ACCOUNTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TBREMIDIATION_ACCOUNTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

ALTER TRIGGER TBREMIDIATION_ACCOUNTS_TRG ENABLE;

/
ALTER TRIGGER "APP_USER"."TBREMIDIATION_ACCOUNTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ACCOUNT_BALANCE_SNAPSHOT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ACCOUNT_BALANCE_SNAPSHOT_ID_TRG" 
BEFORE INSERT ON TB_ACCOUNT_BALANCE_SNAPSHOT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ACCOUNT_ID IS NULL THEN
      SELECT TB_ACCOUNT_BALANCE_SNAPSHOT_ID_SEQ.NEXTVAL INTO :NEW.ACCOUNT_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ACCOUNT_BALANCE_SNAPSHOT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ACCOUNT_BAL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_ACCOUNT_BAL_TRG" BEFORE
  UPDATE OF ACTUAL_BAL ON TB_ACCOUNT FOR EACH row DECLARE v_transacted_amount NUMBER(18,5):=0;
  BEGIN
    v_transacted_amount   := :new."ACTUAL_BAL" ;
    IF v_transacted_amount < 0 THEN
      RAISE_APPLICATION_ERROR(-2000,'Balance cannot be less than zero');
    END IF;
  END;
/
ALTER TRIGGER "APP_USER"."TB_ACCOUNT_BAL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ACCOUNT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ACCOUNT_ID_TRG" 
BEFORE INSERT ON TB_ACCOUNT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ACCOUNT_ID IS NULL THEN
      SELECT TB_ACCOUNT_ID_SEQ.NEXTVAL INTO :NEW.ACCOUNT_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ACCOUNT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ACCOUNT_MANDATE_ROLE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ACCOUNT_MANDATE_ROLE_ID_TRG" 
BEFORE INSERT ON TB_ACCOUNT_MANDATE_ROLE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ACCOUNT_MANDATE_ROLE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ACCOUNT_MANDATE_ROLE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ACCOUNT_STATUS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ACCOUNT_STATUS_ID_TRG" 
BEFORE INSERT ON TB_ACCOUNT_STATUS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ACCOUNT_STATUS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ACCOUNT_STATUS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENTS_ID_TRG" 
BEFORE INSERT ON TB_AGENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENTS_TRG" 
BEFORE INSERT ON TB_AGENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENTS_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_AGENTS_TRG1" 
BEFORE INSERT ON TB_AGENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENTS_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENTS_TRG2
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_AGENTS_TRG2" 
BEFORE INSERT ON TB_AGENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_AGENTS_SEQ3.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENTS_TRG2" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_CATEGORY_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENT_CATEGORY_ID_TRG" 
BEFORE INSERT ON TB_AGENT_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENT_CATEGORY_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_CATEGORY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENT_CATEGORY_TRG" 
BEFORE INSERT ON TB_AGENT_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_AGENT_CATEGORY_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_AGENT_CATEGORY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_DEVICELINKING_ARCHIV
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIV" 
BEFORE INSERT ON TB_AGENT_DEVICELINKING_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIV" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_DEVICELINKING_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE_TRG" 
BEFORE INSERT ON TB_AGENT_DEVICELINKING_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_AGENT_DEVICELINKING_ARCHIVE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_DEVICELINKING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ID_TRG" 
BEFORE INSERT ON TB_AGENT_DEVICELINKING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_AGENT_DEVICELINKING_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_AGENT_DEVICELINKING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_AGENT_DEVICES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_AGENT_DEVICES_ID_TRG" 
BEFORE INSERT ON TB_AGENT_DEVICES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_AGENT_DEVICES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_AGENT_DEVICES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BANK_BRANCH_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BANK_BRANCH_ID_TRG" 
BEFORE INSERT ON TB_BANK_BRANCH 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BANK_BRANCH_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BANK_BRANCH_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BANK_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BANK_ID_TRG" 
BEFORE INSERT ON TB_BANK 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BANK_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BANK_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BENEFICIARY_SEQ_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BENEFICIARY_SEQ_ID_TRG" 
 BEFORE INSERT ON TB_BENEFICIARY FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_BENEFICIARY_ID_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_BENEFICIARY_SEQ_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BILLERS_MAPPINGS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BILLERS_MAPPINGS_ID_TRG" 
BEFORE INSERT ON TB_BILLERS_MAPPINGS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BILLERS_MAPPINGS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BILLERS_MAPPINGS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BILLER_REQUESTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BILLER_REQUESTS_ID_TRG" 
BEFORE INSERT ON TB_BILLER_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BILLER_REQUESTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BILLER_REQUESTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BLOCK_ACCOUNT_AMOUNT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT_ID_TRG" 
BEFORE INSERT ON TB_BLOCK_ACCOUNT_AMOUNT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BLOCK_ACCOUNT_AMOUNT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_BRANCH_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_BRANCH_ID_TRG" 
BEFORE INSERT ON TB_BRANCH 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_BRANCH_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_BRANCH_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CARDLESS_TRANSACTIONS_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CARDLESS_TRANSACTIONS_ARCHIVE_TRG" 
BEFORE INSERT ON TB_CARDLESS_TRANSACTIONS_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CARDLESS_TRANSACTIONS_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CARDLESS_TRANSACTIONS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CARDLESS_TRANSACTIONS_TRG" 
BEFORE INSERT ON TB_CARDLESS_TRANSACTIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CARDLESS_TRANSACTIONS_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CARDLESS_TRANSACTIONS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CARD_LINKING_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CARD_LINKING_TRG" 
BEFORE INSERT ON TB_CARD_LINKING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CARD_LINKING_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CARD_LINKING_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CARD_TRANSACTIONS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CARD_TRANSACTIONS_TRG" 
BEFORE INSERT ON TB_CARD_TRANSACTIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CARD_TRANSACTIONS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CARD_TRANSACTIONS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CHANNEL_REQUESTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CHANNEL_REQUESTS_ID_TRG" 
BEFORE INSERT ON TB_CHANNEL_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CHANNEL_REQUESTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CHANNEL_REQUESTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CHARGES_GL_MAPPING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CHARGES_GL_MAPPING_ID_TRG" 
BEFORE INSERT ON TB_CHARGES_GL_MAPPING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CHARGES_GL_MAPPING_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CHARGES_GL_MAPPING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CHARGE_RANGE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CHARGE_RANGE_TRG" 
BEFORE INSERT ON TB_CHARGE_RANGE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CHARGE_RANGE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CHARGE_RANGE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CITY_LOCATION_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CITY_LOCATION_TRG" 
BEFORE INSERT ON TB_CITY_LOCATION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CITY_LOCATION_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CITY_LOCATION_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_ANSWERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_ANSWERS_TRG" 
BEFORE INSERT ON TB_CUSTOMER_ANSWERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_ANSWERS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_ANSWERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_AUDIT_TRAIL_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL_TRG" 
BEFORE INSERT ON TB_CUSTOMER_AUDIT_TRAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_AUDIT_TRAIL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_CARE_REQUESTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_CARE_REQUESTS_ID_TRG" 
BEFORE INSERT ON TB_CUSTOMER_CARE_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_CARE_REQUESTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_CARE_REQUESTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_COMPLIANCE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_COMPLIANCE_TRG" 
BEFORE INSERT ON TB_CUSTOMER_COMPLIANCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_COMPLIANCE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_COMPLIANCE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_ID_TRG" 
BEFORE INSERT ON TB_CUSTOMER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_TRG" 
BEFORE INSERT ON TB_CUSTOMER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_VALIDATION_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_VALIDATION_ID_TRG" 
BEFORE INSERT ON TB_CUSTOMER_VALIDATION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_VALIDATION_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_VALIDATION_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_CUSTOMER_WHITELIST_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_CUSTOMER_WHITELIST_TRG" 
BEFORE INSERT ON TB_CUSTOMER_WHITELIST 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_CUSTOMER_WHITELIST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_CUSTOMER_WHITELIST_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_DATA_WORKFLOW_ACTION_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_DATA_WORKFLOW_ACTION_ID_TRG" 
BEFORE INSERT ON TB_DATA_WORKFLOW_ACTION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_DATA_WORKFLOW_ACTION_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_DATA_WORKFLOW_ACTION_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_DATA_WORKFLOW_CATEGORY_ID_
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_DATA_WORKFLOW_CATEGORY_ID_" 
BEFORE INSERT ON TB_DATA_WORKFLOW_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_DATA_WORKFLOW_CATEGORY_ID_.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_DATA_WORKFLOW_CATEGORY_ID_" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_DATA_WORKFLOW_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_DATA_WORKFLOW_ID_TRG" 
BEFORE INSERT ON TB_DATA_WORKFLOW 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_DATA_WORKFLOW_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_DATA_WORKFLOW_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_DEFAULT_LIMIT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_DEFAULT_LIMIT_ID_TRG" 
BEFORE INSERT ON TB_DEFAULT_LIMIT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_DEFAULT_LIMIT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_DEFAULT_LIMIT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EMAIL_TEMPLATE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_ID_TRG" 
BEFORE INSERT ON TB_EMAIL_TEMPLATE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_EMAIL_TEMPLATE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EMAIL_TEMPLATE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_TRG" 
BEFORE INSERT ON TB_EMAIL_TEMPLATE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.TEMPLATE_NAME IS NULL THEN
      SELECT TB_EMAIL_TEMPLATE_SEQ.NEXTVAL INTO :NEW.TEMPLATE_NAME FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EMAIL_TEMPLATE_seq_ID_trg
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_seq_ID_trg" 
   BEFORE INSERT ON "TB_EMAIL_TEMPLATE" FOR EACH ROW
      WHEN (NEW."ID" IS NULL) BEGIN
 SELECT "TB_EMAIL_TEMPLATE_ID_seq".NEXTVAL INTO :NEW."ID" FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_EMAIL_TEMPLATE_seq_ID_trg" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EOD_ACTIVITY_ARCHIVE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_ID_TRG" 
BEFORE INSERT ON TB_EOD_ACTIVITY_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EOD_ACTIVITY_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_TRG" 
BEFORE INSERT ON TB_EOD_ACTIVITY_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_EOD_ACTIVITY_ARCHIVE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EOD_ACTIVITY_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ID_TRG" 
BEFORE INSERT ON TB_EOD_ACTIVITY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EOD_ACTIVITY_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_EOD_ACTIVITY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_EOD_ACTIVITY_TRG" 
BEFORE INSERT ON TB_EOD_ACTIVITY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_EOD_ACTIVITY_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_EOD_ACTIVITY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ERROR_CODE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ERROR_CODE_ID_TRG" 
BEFORE INSERT ON TB_ERROR_CODE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ERROR_CODE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ERROR_CODE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ERROR_CODE_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ERROR_CODE_SEQ_TR" 
 BEFORE INSERT ON TB_ERROR_CODE FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_ERROR_CODE_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_ERROR_CODE_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_FOREX_SEQ_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_FOREX_SEQ_ID_TRG" 
 BEFORE INSERT ON TB_FOREX FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_FOREX_ID_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_FOREX_SEQ_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_FOREX_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_FOREX_TRG" 
BEFORE INSERT ON TB_FOREX 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_FOREX_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_FOREX_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GENERAL_PARAMS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GENERAL_PARAMS_ID_TRG" 
BEFORE INSERT ON TB_GENERAL_PARAMS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GENERAL_PARAMS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GENERAL_PARAMS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GENERAL_PARAMS_TRG" 
BEFORE INSERT ON TB_GENERAL_PARAMS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GENERAL_PARAMS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GENERAL_PARAMS_TRG1
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GENERAL_PARAMS_TRG1" 
BEFORE INSERT ON TB_GENERAL_PARAMS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GENERAL_PARAMS_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GENERAL_PARAMS_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_BALANCE_ARCHIVE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_BALANCE_ARCHIVE_ID_TRG" 
BEFORE INSERT ON TB_GL_BALANCE_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GL_BALANCE_ARCHIVE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GL_BALANCE_ARCHIVE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_BALANCE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_BALANCE_ID_TRG" 
BEFORE INSERT ON TB_GL_BALANCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GL_BALANCE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GL_BALANCE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_DEFINITION_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_DEFINITION_ID_TRG" 
BEFORE INSERT ON TB_GL_DEFINITION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GL_DEFINITION_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_ID_TRG" 
BEFORE INSERT ON TB_GL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GL_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_MAPPING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_MAPPING_ID_TRG" 
BEFORE INSERT ON TB_GL_MAPPING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GL_MAPPING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_MAPPING_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_MAPPING_TRG" 
BEFORE INSERT ON TB_GL_MAPPING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GL_MAPPING_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GL_MAPPING_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_SEQUENCE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GL_SEQUENCE_ID_TRG" 
BEFORE INSERT ON TB_GL_SEQUENCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.PREFIX IS NULL THEN
      SELECT TB_GL_SEQUENCE_ID_SEQ.NEXTVAL INTO :NEW.PREFIX FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GL_SEQUENCE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_GL_TRG" 
BEFORE INSERT ON TB_GL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_GL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GROUPS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GROUPS_ID_TRG" 
BEFORE INSERT ON TB_GROUPS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GROUPS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GROUPS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_GROUP_LINKING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_GROUP_LINKING_ID_TRG" 
BEFORE INSERT ON TB_GROUP_LINKING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_GROUP_LINKING_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_GROUP_LINKING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INSTITUTIONS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_INSTITUTIONS_ID_TRG" 
BEFORE INSERT ON TB_INSTITUTIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_INSTITUTIONS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_INSTITUTIONS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INSTITUTION_BATCH_PAYOUT_I
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT_I" 
BEFORE INSERT ON TB_INSTITUTION_BATCH_PAYOUT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_INSTITUTION_BATCH_PAYOUT_I2.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT_I" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INSTITUTION_TYPES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_INSTITUTION_TYPES_ID_TRG" 
BEFORE INSERT ON TB_INSTITUTION_TYPES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_INSTITUTION_TYPES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_INSTITUTION_TYPES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INSTITUTION_UPLOADS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_INSTITUTION_UPLOADS_ID_TRG" 
BEFORE INSERT ON TB_INSTITUTION_UPLOADS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_INSTITUTION_UPLOADS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_INSTITUTION_UPLOADS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INSURANCE_LEADS_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_INSURANCE_LEADS_SEQ_TR" 
 BEFORE INSERT ON TB_INSURANCE_LEADS FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_INSURANCE_LEADS_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_INSURANCE_LEADS_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_INTERIM_BATCH_REPORTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_INTERIM_BATCH_REPORTS_TRG" 
BEFORE INSERT ON TB_INTERIM_BATCH_REPORTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_INTERIM_BATCH_REPORTS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_INTERIM_BATCH_REPORTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ISSUES_CATEGORY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ISSUES_CATEGORY_TRG" 
BEFORE INSERT ON TB_ISSUES_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ISSUES_CATEGORY_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ISSUES_CATEGORY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ISSUES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ISSUES_TRG" 
BEFORE INSERT ON TB_ISSUES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_ISSUES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ISSUES_TRG1
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ISSUES_TRG1" 
BEFORE INSERT ON TB_ISSUES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ISSUES_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ISSUES_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_KEY_HISTORY_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_KEY_HISTORY_TRG" 
BEFORE INSERT ON TB_KEY_HISTORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_KEY_HISTORY_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_KEY_HISTORY_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LINKED_ACCOUNTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LINKED_ACCOUNTS_ID_TRG" 
BEFORE INSERT ON TB_LINKED_ACCOUNTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_LINKED_ACCOUNTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_LINKED_ACCOUNTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOAN_DECLINED_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOAN_DECLINED_ID_TRG" 
BEFORE INSERT ON TB_LOAN_DECLINED 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_LOAN_DECLINED_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_LOAN_DECLINED_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOAN_PRODUCTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOAN_PRODUCTS_ID_TRG" 
BEFORE INSERT ON TB_LOAN_PRODUCTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_LOAN_PRODUCTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOAN_RECOVERIES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOAN_RECOVERIES_ID_TRG" 
BEFORE INSERT ON TB_LOAN_RECOVERIES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_LOAN_RECOVERIES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOAN_SCORING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOAN_SCORING_ID_TRG" 
BEFORE INSERT ON TB_LOAN_SCORING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_LOAN_SCORING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOYALITY_POINTS_MAPPING_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOYALITY_POINTS_MAPPING_TR" 
BEFORE INSERT ON TB_LOYALITY_POINTS_MAPPING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_LOYALITY_POINTS_MAPPING_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_LOYALITY_POINTS_MAPPING_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOYALITY_POINTS_MAPPING_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOYALITY_POINTS_MAPPING_TRG" 
BEFORE INSERT ON TB_LOYALITY_POINTS_MAPPING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_LOYALITY_POINTS_MAPPING_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_LOYALTYPOINTS_MATRIX_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_LOYALTYPOINTS_MATRIX_ID_TRG" 
BEFORE INSERT ON TB_LOYALTYPOINTS_MATRIX 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_LOYALTYPOINTS_MATRIX_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_LOYALTYPOINTS_MATRIX_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MERCHANTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MERCHANTS_ID_TRG" 
BEFORE INSERT ON TB_MERCHANTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MERCHANTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MERCHANT_CATEGORY_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MERCHANT_CATEGORY_ID_TRG" 
BEFORE INSERT ON TB_MERCHANT_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MERCHANT_CATEGORY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MERCHANT_CATEGORY_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MERCHANT_CUSTOMERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_MERCHANT_CUSTOMERS_TRG" 
BEFORE INSERT ON TB_MERCHANT_CUSTOMERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MERCHANT_CUSTOMERS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_MERCHANT_CUSTOMERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MERCHANT_DEALS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MERCHANT_DEALS_ID_TRG" 
BEFORE INSERT ON TB_MERCHANT_DEALS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MERCHANT_DEALS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MERCHANT_DEALS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MERCHANT_OUTLET_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MERCHANT_OUTLET_ID_TRG" 
BEFORE INSERT ON TB_MERCHANT_OUTLET 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MERCHANT_OUTLET_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MERCHANT_OUTLET_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MESSAGES_CBS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MESSAGES_CBS_ID_TRG" 
BEFORE INSERT ON TB_MESSAGES_CBS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MESSAGES_CBS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MESSAGES_CBS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MESSAGES_EXTERNAL_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MESSAGES_EXTERNAL_ID_TRG" 
BEFORE INSERT ON TB_MESSAGES_EXTERNAL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MESSAGES_EXTERNAL_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MESSAGES_EXTERNAL_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MESSAGES_SMS_ARCHIVE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MESSAGES_SMS_ARCHIVE_ID_TRG" 
BEFORE INSERT ON TB_MESSAGES_SMS_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MESSAGES_SMS_ARCHIVE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_MESSAGES_SMS_ARCHIVE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MESSAGES_SMS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MESSAGES_SMS_ID_TRG" 
BEFORE INSERT ON TB_MESSAGES_SMS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MESSAGES_SMS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MESSAGES_SMS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_MVISA_MASTEPASS_REG_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_MVISA_MASTEPASS_REG_ID_TRG" 
BEFORE INSERT ON TB_MVISA_MPASS_REGISTRATION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_MVISA_MASTEPASS_REG_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_MVISA_MASTEPASS_REG_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OFFLINE_BALANCES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OFFLINE_BALANCES_ID_TRG" 
BEFORE INSERT ON TB_OFFLINE_BALANCES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_OFFLINE_BALANCES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_OFFLINE_BALANCES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OPERATOR_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OPERATOR_ID_TRG" 
BEFORE INSERT ON TB_OPERATOR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_OPERATOR_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OPERATOR_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OPERATOR_TRG" 
BEFORE INSERT ON TB_OPERATOR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_OPERATOR_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OPERATOR_TRG1
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OPERATOR_TRG1" 
BEFORE INSERT ON TB_OPERATOR 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_OPERATOR_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_OPERATOR_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OPTIONAL_BENEFIT_REQUESTS_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OPTIONAL_BENEFIT_REQUESTS_SEQ_TR" 
 BEFORE INSERT ON TB_OPTIONAL_BENEFIT_REQUESTS FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_OPTIONAL_BENEFIT_REQUESTS_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_OPTIONAL_BENEFIT_REQUESTS_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_OUTLET_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_OUTLET_ID_TRG" 
   before insert on "TB_OUTLET" 
   for each row 
begin  
   if inserting then 
      if :NEW."ID" is null then 
         select TB_OUTLET_ID_SEQ.nextval into :NEW."ID" from dual; 
      end if; 
   end if; 
end;

/
ALTER TRIGGER "APP_USER"."TB_OUTLET_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_PA_PREMIUM_OPTION_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_PA_PREMIUM_OPTION_SEQ_TR" 
 BEFORE INSERT ON TB_PA_PREMIUM_OPTION FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_PA_PREMIUM_OPTION_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_PA_PREMIUM_OPTION_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_PESALINK_BANK_LIST_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_PESALINK_BANK_LIST_ID_TRG" 
BEFORE INSERT ON TB_PESALINK_BANK_LIST 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_PESALINK_BANK_LIST_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_PESALINK_BANK_LIST_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_PRODUCTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_PRODUCTS_ID_TRG" 
BEFORE INSERT ON TB_PRODUCTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_PRODUCTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_PRODUCTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_PROFILES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_PROFILES_ID_TRG" 
BEFORE INSERT ON TB_PROFILES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_PROFILES_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_PROFILES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_REGISTRATIONS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_REGISTRATIONS_TRG" 
BEFORE INSERT ON TB_REGISTRATIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_REGISTRATIONS_SEQ3.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_REGISTRATIONS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_REQUESTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_REQUESTS_ID_TRG" 
BEFORE INSERT ON TB_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_REQUESTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_REQUESTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_REVERSAL_REQUEST_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_REVERSAL_REQUEST_TRG" 
BEFORE INSERT ON TB_REVERSAL_REQUEST 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_REVERSAL_REQUEST_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_REVERSAL_REQUEST_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ROLES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ROLES_ID_TRG" 
BEFORE INSERT ON TB_ROLES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ROLES_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ROLES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ROLES_IN_PROFILE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ROLES_IN_PROFILE_TRG" 
BEFORE INSERT ON TB_ROLES_IN_PROFILE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_ROLES_IN_PROFILE_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_ROLES_IN_PROFILE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_ROLES_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_ROLES_TRG" 
BEFORE INSERT ON TB_ROLES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_ROLES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SACCOS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SACCOS_ID_TRG" 
   before insert on "APP_USER"."TB_SACCOS" 
   for each row 
begin  
   if inserting then 
      if :NEW."ID" is null then 
         select TB_SACCOS_ID_SEQ.nextval into :NEW."ID" from dual; 
      end if; 
   end if; 
end;


/
ALTER TRIGGER "APP_USER"."TB_SACCOS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SACCO_LINKING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SACCO_LINKING_ID_TRG" 
BEFORE INSERT ON TB_SACCO_LINKING 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_SACCO_LINKING_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
    IF INSERTING AND :NEW.SACCO_ACCOUNT IS NULL THEN
      SELECT TB_SACCO_LINKING_ID_SEQ.NEXTVAL INTO :NEW.SACCO_ACCOUNT FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_SACCO_LINKING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SCHOOL_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SCHOOL_TRG" 
BEFORE INSERT ON TB_SCHOOL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_SCHOOL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_SCHOOL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SECURITY_QUESTIONS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_SECURITY_QUESTIONS_TRG" 
BEFORE INSERT ON TB_SECURITY_QUESTIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_SECURITY_QUESTIONS_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_SECURITY_QUESTIONS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SERVICES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SERVICES_ID_TRG" 
   before insert on "TB_SERVICES" 
   for each row 
begin  
   if inserting then 
      if :NEW."ID" is null then 
         select TB_SERVICES_ID_SEQ.nextval into :NEW."ID" from dual; 
      end if; 
   end if; 
end;

/
ALTER TRIGGER "APP_USER"."TB_SERVICES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SMS_TEMPLATE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SMS_TEMPLATE_ID_TRG" 
BEFORE INSERT ON TB_SMS_TEMPLATE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.SMS_ID IS NULL THEN
      SELECT TB_SMS_TEMPLATE_ID_SEQ.NEXTVAL INTO :NEW.SMS_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_SMS_TEMPLATE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SP_ERROR_LOG_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SP_ERROR_LOG_ID_TRG" 
BEFORE INSERT ON TB_SP_ERROR_LOG 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ERROR_ID IS NULL THEN
      SELECT TB_SP_ERROR_LOG_ID_SEQ.NEXTVAL INTO :NEW.ERROR_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_SP_ERROR_LOG_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SP_ERROR_LOG_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SP_ERROR_LOG_SEQ_TR" 
 BEFORE INSERT ON TB_SP_ERROR_LOG FOR EACH ROW
    WHEN (NEW.Error_ID IS NULL) BEGIN
 SELECT TB_SP_ERROR_LOG_seq.NEXTVAL INTO :NEW.Error_ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_SP_ERROR_LOG_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_STAGING_ACTION_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_STAGING_ACTION_ID_TRG" 
BEFORE INSERT ON TB_STAGING_ACTION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_STAGING_ACTION_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_STAGING_ACTION_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_STAGING_COMMENTS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_STAGING_COMMENTS_ID_TRG" 
BEFORE INSERT ON TB_STAGING_COMMENTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_STAGING_COMMENTS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_STAGING_COMMENTS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_SUPER_AGENT_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_SUPER_AGENT_TRG" 
BEFORE INSERT ON TB_SUPER_AGENT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_SUPER_AGENT_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_SUPER_AGENT_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TERMS_AND_CONDITIONS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TERMS_AND_CONDITIONS_TRG" 
BEFORE INSERT ON TB_TERMS_AND_CONDITIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TERMS_AND_CONDITIONS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TERMS_AND_CONDITIONS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_THIRD_PARTY_REQUESTS_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_THIRD_PARTY_REQUESTS_TRG" 
BEFORE INSERT ON TB_THIRD_PARTY_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_THIRD_PARTY_REQUESTS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_THIRD_PARTY_REQUESTS_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_THIRD_PARTY_REQUESTS_TRG1" 
BEFORE INSERT ON TB_THIRD_PARTY_REQUESTS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_THIRD_PARTY_REQUESTS_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_THIRD_PARTY_REQUESTS_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRADE_FIN_PROCURING_ENTITY_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRADE_FIN_PROCURING_ENTITY_SEQ_TR" 
 BEFORE INSERT ON TB_TRADE_FIN_PROCURING_ENTITY FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_TRADE_FIN_PROCURING_ENTITY_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRADE_FIN_PROCURING_ENTITY_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRADE_FIN_REQUESTS_SEQ_TR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRADE_FIN_REQUESTS_SEQ_TR" 
 BEFORE INSERT ON TB_TRADE_FIN_REQUESTS FOR EACH ROW
    WHEN (NEW.ID IS NULL) BEGIN
 SELECT TB_TRADE_FIN_REQUESTS_seq.NEXTVAL INTO :NEW.ID FROM DUAL;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRADE_FIN_REQUESTS_SEQ_TR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_ARCHIVE_TRG" 
BEFORE INSERT ON TB_TRANSACTIONS_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_ARCHIVE_TRG1
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_ARCHIVE_TRG1" 
BEFORE INSERT ON TB_TRANSACTIONS_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ARCHIVE_ID IS NULL THEN
      SELECT TB_TRANSACTIONS_ARCHIVE_SEQ1.NEXTVAL INTO :NEW.ARCHIVE_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_ARCHIVE_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_COB_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_COB_ID_TRG" 
BEFORE INSERT ON TB_TRANSACTIONS_COB 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTIONS_COB_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_COB_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_GL_ARCHIVE_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE_TRG" 
BEFORE INSERT ON TB_TRANSACTIONS_GL_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_GL_ARCHIVE_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE_TRG1" 
BEFORE INSERT ON TB_TRANSACTIONS_GL_ARCHIVE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTIONS_GL_ARCHIVE_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_GL_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_TRG" 
BEFORE INSERT ON TB_TRANSACTIONS_GL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_GL_TRG1
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_TRG1" 
BEFORE INSERT ON TB_TRANSACTIONS_GL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTIONS_GL_SEQ1.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_GL_TRG1" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTIONS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTIONS_ID_TRG" 
BEFORE INSERT ON TB_TRANSACTIONS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTIONS_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTIONS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTION_AUDIT_TRAIL_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL_TRG" 
BEFORE INSERT ON TB_TRANSACTION_AUDIT_TRAIL 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTION_AUDIT_TRAIL_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTION_LIMIT_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTION_LIMIT_ID_TRG" 
BEFORE INSERT ON TB_TRANSACTION_LIMIT 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTION_LIMIT_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTION_LIMIT_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANSACTION_MATRIX_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANSACTION_MATRIX_ID_TRG" 
BEFORE INSERT ON TB_TRANSACTION_MATRIX 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANSACTION_MATRIX_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANSACTION_MATRIX_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANS_COMMISSION_CHARGES_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "APP_USER"."TB_TRANS_COMMISSION_CHARGES_TRG" 
BEFORE INSERT ON TB_TRANS_COMMISSION_CHARGES 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANS_COMMISSION_CHARGES_SEQ2.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_TRANS_COMMISSION_CHARGES_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TRANS_COMM_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TRANS_COMM_ID_TRG" 
BEFORE INSERT ON TB_TRANS_COMMISSION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TRANS_COMM_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TRANS_COMM_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_TXN_REF_SEQUENCE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_TXN_REF_SEQUENCE_ID_TRG" 
BEFORE INSERT ON TB_TXN_REF_SEQUENCE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_TXN_REF_SEQUENCE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_TXN_REF_SEQUENCE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_UNREGISTERED_CUSTOMERS_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_UNREGISTERED_CUSTOMERS_TRG" 
BEFORE INSERT ON TB_UNREGISTERED_CUSTOMERS 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_UNREGISTERED_CUSTOMERS_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_UNREGISTERED_CUSTOMERS_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_USER_ID_INSTITUTION_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_USER_ID_INSTITUTION_TRG" 
BEFORE INSERT ON TB_USER_INSTITUTION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    NULL;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "APP_USER"."TB_USER_ID_INSTITUTION_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_USER_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_USER_ID_TRG" 
BEFORE INSERT ON TB_USER 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_USER_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_USER_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_USER_INSTITUTION_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_USER_INSTITUTION_TRG" 
BEFORE INSERT ON TB_USER_INSTITUTION 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_USER_INSTITUTION_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_USER_INSTITUTION_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_USER_IN_PROFILE_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_USER_IN_PROFILE_ID_TRG" 
BEFORE INSERT ON TB_USER_IN_PROFILE 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_USER_IN_PROFILE_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_USER_IN_PROFILE_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TB_VOTE_CATEGORY_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "APP_USER"."TB_VOTE_CATEGORY_ID_TRG" 
BEFORE INSERT ON TB_VOTE_CATEGORY 
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ID IS NULL THEN
      SELECT TB_VOTE_CATEGORY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;

/
ALTER TRIGGER "APP_USER"."TB_VOTE_CATEGORY_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure A_GET_3MONTHS_ACCOUNT_BALANCE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_GET_3MONTHS_ACCOUNT_BALANCE" (
p_accountNumber IN NVARCHAR2  ----Pass the wallet acc
)

AS

v_MONTH_ONE DATE;
v_MONTH_TWO DATE;
v_MONTH_THREE DATE;
v_AccountlBal1 numeric(18,2) := 0;
v_AccountlBal2 numeric(18,2) := 0;
v_AccountlBal3 numeric(18,2) := 0;
v_Avg_balance numeric(18,2) := 0;

BEGIN

SAVEPOINT V_SAFEPOINT;

---HERE WE GET THE CUSTOMERS ACC BALANCE FOR THE LAST 3MONTHS

select Last_Day(ADD_MONTHS(sysdate,-1)), Last_Day(ADD_MONTHS(sysdate,-2)), Last_Day(ADD_MONTHS(sysdate,-3)) INTO v_MONTH_ONE , v_MONTH_TWO, v_MONTH_THREE from dual;

SELECT ACTUAL_BAL INTO v_AccountlBal1 FROM TB_ACCOUNT_BALANCES_HISTORY WHERE ACCOUNT_NO = p_accountNumber and ARCHIVED_ON = v_MONTH_ONE;
SELECT ACTUAL_BAL INTO v_AccountlBal2 FROM TB_ACCOUNT_BALANCES_HISTORY WHERE ACCOUNT_NO = p_accountNumber and ARCHIVED_ON = v_MONTH_TWO;
SELECT ACTUAL_BAL INTO v_AccountlBal3 FROM TB_ACCOUNT_BALANCES_HISTORY WHERE ACCOUNT_NO = p_accountNumber and ARCHIVED_ON = v_MONTH_THREE;

----Now lets update the Scoring table
v_Avg_balance := (v_AccountlBal1 +  v_AccountlBal2 + v_AccountlBal3 ) / 3;

UPDATE TB_LOAN_SCORING
SET
ACCOUNT_BALANCEM1 = v_AccountlBal1,ACCOUNT_BALANCEM2 = v_AccountlBal2, ACCOUNT_BALANCEM3 = v_AccountlBal3 , AVG_ACCOUNT_BALANCE = v_Avg_balance
WHERE ACCOUNT_NUMBER = p_accountNumber;

END A_get_3months_Account_balance;


/
--------------------------------------------------------
--  DDL for Procedure A_GET_LOAN_SERIES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_GET_LOAN_SERIES" (
p_SeriesID IN NVARCHAR2,
p_Prefix IN number DEFAULT 0,
p_Sequence OUT NVARCHAR2
)
AS 

v_Series  NVARCHAR2(10);
v_Length  NUMBER;
BEGIN

SELECT NVL(Series_Length,5) INTO v_Length FROM tb_Sequence WHERE UniqueID=p_SeriesID;
		SELECT CAST(NVL(Series,0) AS NUMBER(10))+1 INTO v_Series FROM tb_Sequence WHERE UniqueID=p_SeriesID;
        v_Series:= SUBSTR(CONCAT('0000000000',v_Series),-v_Length,v_Length);
		UPDATE tb_Sequence SET Series=v_Series WHERE UniqueID=p_SeriesID;

		IF(p_Prefix=1) THEN
		 SELECT p_SeriesID||v_Series INTO p_Sequence FROM dual;
		ELSE
		  SELECT v_Series INTO p_Sequence FROM dual;
		END IF;

EXCEPTION
WHEN OTHERS THEN
  raise;
END A_Get_Loan_Series;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_ACCOUNT_LOOKUP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ACCOUNT_LOOKUP" (
    IV_LOOKUP_PARAM IN VARCHAR2,
    IV_LOOKUP_TYPE  IN VARCHAR2,
    C_1             IN OUT SYS_REFCURSOR)
AS
  V_ACCOUNT_NAME NVARCHAR2(200)  :='';
  V_ACCOUNT_NO NVARCHAR2(200)    :='';
  V_COUNT NUMBER                 :=0;
  V_ACCOUNT_CLASS NVARCHAR2(200) :='256';
  V_RESPONSE NVARCHAR2(2000)     :='';
BEGIN
  IF IV_LOOKUP_TYPE = 'C' THEN
    SELECT COUNT(ACCOUNT_ID)
    INTO V_COUNT
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO  = IV_LOOKUP_PARAM
    AND ACCOUNT_CLASS  = '256'
    AND ROWNUM         =1;
    V_ACCOUNT_CLASS   := '256';
  ELSIF IV_LOOKUP_TYPE = 'A' THEN
    V_COUNT           :=1;
    V_ACCOUNT_CLASS   := '204';
  ELSIF IV_LOOKUP_TYPE = 'M' THEN
    V_ACCOUNT_CLASS   := '202';
  ELSIF IV_LOOKUP_TYPE = 'G' THEN
    V_ACCOUNT_CLASS   := '203';
    SELECT COUNT(ID)
    INTO V_COUNT
    FROM TB_GROUPS
    WHERE GROUP_ID     = IV_LOOKUP_PARAM
    AND ROWNUM         =1;
  ELSIF IV_LOOKUP_TYPE = 'S' THEN
    V_ACCOUNT_CLASS   := '205';
    SELECT COUNT(ID)
    INTO V_COUNT
    FROM TB_SACCOS
    WHERE SACCO_ID = IV_LOOKUP_PARAM
    AND ROWNUM     =1;
    
  ELSIF IV_LOOKUP_TYPE = 'P' THEN
    V_ACCOUNT_CLASS := '207';
    
    SELECT COUNT(ACCOUNT_ID)
    INTO V_COUNT
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO  = IV_LOOKUP_PARAM
    AND ACCOUNT_CLASS  = '207'
    AND ROWNUM         =1;
  END IF;
  IF V_COUNT < 1 THEN
    OPEN C_1 FOR SELECT '01' "RESP_CODE",
    'Customer Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    INSERT INTO TB_UNREGISTERED_CUSTOMERS(PHONE_NUMBER , CHANNEL) VALUES (IV_LOOKUP_PARAM ,'APP' );
    
    RETURN;
  END IF;
  IF V_ACCOUNT_CLASS = '256' OR V_ACCOUNT_CLASS = '207' THEN -- check for points as well
    OPEN C_1 FOR SELECT '00'
  AS
    RESP_CODE,
    ACCOUNT_NAME
  AS
    ACCOUNT_NAME,
    ACCOUNT_NO
  AS
    ACCOUNT_NO FROM TB_ACCOUNT WHERE CUSTOMER_NO = IV_LOOKUP_PARAM AND ACCOUNT_CLASS = V_ACCOUNT_CLASS AND ROWNUM=1;
    RETURN;
  ELSIF V_ACCOUNT_CLASS = '205' THEN
    OPEN C_1 FOR SELECT '00'
  AS
    RESP_CODE,
    SACCO_NAMES
  AS
    ACCOUNT_NAME,
    SACCO_WALLET_ACCOUNT
  AS
    ACCOUNT_NO FROM TB_SACCOS WHERE SACCO_ID = IV_LOOKUP_PARAM AND ROWNUM=1;
 ELSIF V_ACCOUNT_CLASS = '203' THEN
  OPEN C_1 FOR SELECT '00'
  AS
    RESP_CODE,
    GROUP_NAME
  AS
    ACCOUNT_NAME,
    GROUP_ACCOUNT
  AS
    ACCOUNT_NO FROM TB_GROUPS WHERE GROUP_ID = IV_LOOKUP_PARAM AND ROWNUM=1;
  END IF;
END A_SP_ACCOUNT_LOOKUP;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_ADD_LOAN_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ADD_LOAN_ACCOUNT" 
(
  p_CustPhoneNo IN NVARCHAR2,---format 2547....
  p_ProductCode IN NVARCHAR2,
  p_Branch IN NVARCHAR2,
  p_Currency IN NVARCHAR2 DEFAULT 'KES',
  p_USERID IN NVARCHAR2, 
  c_1 IN OUT SYS_REFCURSOR
)
AS

v_Resp_Code NVARCHAR2(50) := '00';
v_Narration NVARCHAR2(150);
v_Loan_Acc_No NVARCHAR2(50);
v_AccountNo NVARCHAR2(15) ;
v_accountname NVARCHAR2(150); 
v_LoanCount NUMBER(10);
v_AccountDescription NVARCHAR2(100);
v_OpeningDate  DATE := SYSTIMESTAMP;
v_Count INT := 0;
BEGIN

SAVEPOINT V_SAFEPOINT;

	IF(p_CustPhoneNo != '') THEN
		SELECT FIRST_NAME||' '||LAST_NAME INTO v_accountname FROM TB_CUSTOMER WHERE CUSTOMER_NO = p_CustPhoneNo;

	END IF;

----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
	(SELECT * FROM tb_Products WHERE Product_Code = p_ProductCode AND Loan_Product = 1 AND rownum <= 1);

	IF(V_COUNT = 0) THEN	
		v_Resp_Code     :='01';
		v_Narration     := 'CREATE-ACC - Not a loan product, update product configuration';
		v_Loan_Acc_No := '';
		OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Loan_Acc_No as Loan_Acc_No FROM DUAL;
		RETURN;
	END IF;

----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
	(SELECT * FROM (SELECT * FROM tb_Loan_Details WHERE MobileNo = p_CustPhoneNo ORDER BY ID DESC) WHERE rownum <= 1);

	IF(V_COUNT = 0) THEN
		----Customer has never applied for a loan before
		v_AccountNo := CONCAT(p_ProductCode, SUBSTR(p_CustPhoneNo,4,8))|| '001';
	ELSE
		SELECT COUNT(ID) INTO v_LoanCount FROM tb_Loan_Details WHERE MobileNo = p_CustPhoneNo AND rownum <= 1 ORDER BY ID DESC  ;
		v_LoanCount := v_LoanCount + 1; ----TO MAKE SURE LOAN ACCOUNTS FOR EACH CUSTOMER ARE SERIAL
		v_AccountNo := CONCAT(p_ProductCode, SUBSTR(p_CustPhoneNo,4,8))|| LPAD( v_LoanCount, 3 ,0 ) ;
	END IF;

--SELECT @AccountDescription=Description FROM tb_Products WHERE ProductCode=@ProductCode;
BEGIN
    ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
  (SELECT * FROM tb_Account WHERE Account_No = v_AccountNo AND rownum <= 1);

	IF(V_COUNT = 0) THEN		
		INSERT
		  INTO TB_ACCOUNT
			(
				CUSTOMER_NO,ACCOUNT_NO,ACCOUNT_NAME,ACCOUNT_CLASS,BRANCH_ID,PHONE_NUMBER,CURRENCY,CREATED_BY,PARTIAL_REGISTRATION,ALLOW_CR,ALLOW_DR,Allow_Overdraft,
				DORMANT,OPENING_DATE,BLOCKED,STOPPED,IS_FROZEN,CHEQUE_BOOK_FACILITY,ATM_FACILITY,APPROVED_BY,APPROVED_ON,OPENING_BAL,Last_Transaction_Date
			)
			VALUES
			(   p_CustPhoneNo,v_AccountNo,v_accountname,p_ProductCode,p_Branch,p_CustPhoneNo,p_Currency,p_USERID,0,'Y',
				'Y',1,'N',v_OpeningDate,'N','N','N','N','N',p_USERID,v_OpeningDate,0,v_OpeningDate
			);		

		END IF;

	EXCEPTION
	  WHEN OTHERS THEN
	    RAISE;
		v_Resp_Code     :='01';
		v_Narration     := 'CREATE-ACC - Could not create customer loan account';
		v_Loan_Acc_No := '';
		OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Loan_Acc_No as Loan_Acc_No FROM DUAL;

		ROLLBACK TO SAVEPOINT V_SAFEPOINT;
		RETURN;
	  END;


	COMMIT;

	v_Resp_Code     :='00';
	v_Narration     := 'CREATE-ACC - Successful';
	v_Loan_Acc_No := v_AccountNo;
	OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Loan_Acc_No as Loan_Acc_No FROM DUAL;

EXCEPTION
  WHEN OTHERS THEN
   RAISE;
	v_Resp_Code     :='01';
	v_Narration     := 'FAIL - An error occured while creating customer loan account';
	v_Loan_Acc_No := '';
	OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Loan_Acc_No as Loan_Acc_No FROM DUAL;

	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_ADD_LOCKSAVING_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ADD_LOCKSAVING_ACCOUNT" 
(  
	iv_MobileNo IN NVARCHAR2, --IN THE FORMAT 254700123456
    iv_AccountNo IN NVARCHAR2, --Wallet/Core account to be credited on maturity
    iv_SavingTerm IN INT,
    iv_SavingTartgetAmount IN NUMERIC,
    iv_AmountSaved IN NUMERIC,
    iv_CREATEDBY IN NVARCHAR2,
    iv_Field24 IN NVARCHAR2,
    iv_Reference IN NVARCHAR2, --Field37
	c_1         IN OUT SYS_REFCURSOR
)  
AS  

 v_Resp_Code NVARCHAR2(50)      := '00';
 v_Narration NVARCHAR2(150);
 v_Customer_No NVARCHAR2(50);
 v_Savings_Acc_No NVARCHAR2(50);
 v_AccountClass  NVARCHAR2(4) := '201'; --Product class
 v_SavingsAccountNo NVARCHAR2(13);
 v_OpeningDate DATE := SYSTIMESTAMP;
 v_AccountDescription NVARCHAR2(50);
 v_MaturityDate DATE;
 v_InterestRate NUMERIC(18,2) := 0;
 v_MinSavingAmount NUMERIC(18,2) := 0;
 v_MaxSavingAmount NUMERIC(18,2) := 0;
 v_BranchCode  NVARCHAR2(8) := '001'; --default to HQ branch code
 v_Currency  NVARCHAR2(6) := 'KES'; --default to local cuurency
 V_COUNT   NUMBER(1)  := 0;
 V_COUNT_2   NUMBER(1)  := 0;

 BEGIN

 SAVEPOINT V_SAFEPOINT;

 SELECT  Description, Interest_Rate, Min_Saving_Amount, Max_Saving_Amount INTO 
 v_AccountDescription,v_InterestRate,v_MinSavingAmount, v_MaxSavingAmount FROM tb_Products where Product_Code = '201';

 ----Account number format as 201721580689
v_SavingsAccountNo:= v_AccountClass||SUBSTR(iv_MobileNo,4,9);

 ------do validations
 ---1. CHECK THE MINIMUM TARGET AMOUNT
 IF(iv_SavingTartgetAmount < v_MinSavingAmount)
 THEN
 ---TARGET IS TOO LOW

	v_Resp_Code     :='01';
    v_Narration     := 'Target savings amount too low. The minimum lock saving amount is Ksh.'||v_MinSavingAmount ;
    v_Customer_No   := iv_MobileNo;
    v_Savings_Acc_No   := v_SavingsAccountNo;   

    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_Customer_No,v_Savings_Acc_No FROM DUAL;

	RETURN;
 END IF;
 ----

  ---1. CHECK THE MINIMUM TARGET AMOUNT
 IF(iv_SavingTartgetAmount > v_MaxSavingAmount)
 THEN
 ---TARGET IS TOO HIGH

	v_Resp_Code     :='01';
    v_Narration     := 'Target savings amount too high.The maximum lock saving amount is Ksh.'||v_MaxSavingAmount;
    v_Customer_No   := iv_MobileNo;
    v_Savings_Acc_No   := v_SavingsAccountNo;   

    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_Customer_No,v_Savings_Acc_No FROM DUAL;

	RETURN;
 END IF;
 ----

 --get maturity date
 IF(iv_SavingTerm <> 0) THEN
  v_MaturityDate := ADD_MONTHS(v_OpeningDate,iv_SavingTerm);
 END IF;

--customer has an active savings plan
SELECT COUNT(1) INTO V_COUNT FROM DUAL
    WHERE EXISTS
      (SELECT * FROM tb_Account WHERE Account_No = v_SavingsAccountNo );

SELECT COUNT(1) INTO V_COUNT_2 FROM DUAL
    WHERE EXISTS
      (SELECT * FROM tb_Lock_Saving_Account WHERE Account_No = v_SavingsAccountNo AND (NVL(Terminated,0) = 0 AND NVL(Matured,0) = 0 ) AND ROWNUM=1);	  
	IF(V_COUNT >= 1 AND V_COUNT_2 >= 1)
		THEN
			--customer has an active savings plan. Requirement is that we allow only one term at a go

			v_Resp_Code     :='01';
			v_Narration     := 'You have an active lock saving plan';
			v_Customer_No   := iv_MobileNo;
			v_Savings_Acc_No   := v_SavingsAccountNo;   

			OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Savings_Acc_No AS Savings_Acc_No FROM DUAL;

	RETURN;
END IF;

----Reset counts	  
	V_COUNT := 0;
	V_COUNT_2 := 0;
	----savings account exists but no active plan
	SELECT COUNT(1) INTO V_COUNT FROM DUAL
		WHERE EXISTS
		  (SELECT * FROM tb_Account WHERE Account_No = v_SavingsAccountNo);

	SELECT COUNT(1) INTO V_COUNT_2 FROM DUAL
		WHERE EXISTS
		  (SELECT * FROM tb_Lock_Saving_Account WHERE Account_No = v_SavingsAccountNo AND (NVL(Terminated,0) = 0 AND NVL(Matured,0) = 0 ) AND ROWNUM=1 );

	IF(V_COUNT >= 1 AND V_COUNT_2 = 0)
		THEN
			--account exists and no active savings plan, we can create this new term		
			INSERT INTO tb_Lock_Saving_Account(Reference,Account_No,Saving_Term,Interest_Rate,Target_Amount,Min_Saving_Amount,Maturity_Date,Start_Date,Cr_Account,Field24)
				VALUES(iv_Reference,v_SavingsAccountNo,iv_SavingTerm,v_InterestRate,iv_SavingTartgetAmount,v_MinSavingAmount,v_MaturityDate,v_OpeningDate,iv_AccountNo,iv_Field24);


			v_Resp_Code     :='00';
			v_Narration     := 'Successful';
			v_Customer_No   := iv_MobileNo;
			v_Savings_Acc_No   := v_SavingsAccountNo;   

			OPEN c_1 FOR SELECT  V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Savings_Acc_No AS Savings_Acc_No FROM DUAL;

	RETURN;
END IF;

----Reset counts	  
	V_COUNT := 0;
	V_COUNT_2 := 0;
	----both records do not exist
	SELECT COUNT(1) INTO V_COUNT FROM DUAL
		WHERE EXISTS
		  (SELECT * FROM tb_Account WHERE Account_No = v_SavingsAccountNo AND ROWNUM=1);

	SELECT COUNT(1) INTO V_COUNT_2 FROM DUAL
		WHERE EXISTS
		  (SELECT * FROM tb_Lock_Saving_Account WHERE Account_No = v_SavingsAccountNo AND (NVL(Terminated,0) = 0 AND NVL(Matured,0) = 0 ) AND ROWNUM=1);

	IF(V_COUNT = 0 AND V_COUNT_2 = 0)
		THEN
			---customer does not have an existing locksaving account. Let us create the account and the new savings term
			INSERT INTO TB_ACCOUNT(CUSTOMER_NO,ACCOUNT_NO,ACCOUNT_CLASS,BRANCH_ID,PHONE_NUMBER,CURRENCY,CREATED_BY,PARTIAL_REGISTRATION,ALLOW_CR,ALLOW_DR,
					BLOCKED,STOPPED,DORMANT,IS_FROZEN,CHEQUE_BOOK_FACILITY,ATM_FACILITY,OPENING_DATE,CREATED_ON, APPROVED_BY, APPROVED_ON,OPENING_BAL)
					VALUES(iv_MobileNo,v_SavingsAccountNo,v_AccountClass,v_BranchCode,iv_MobileNo,v_Currency,iv_CREATEDBY,0,'Y', 'N','N','N','N','N','N','N',
					v_OpeningDate,v_OpeningDate,iv_CREATEDBY,v_OpeningDate,0);

			--Track this saving term	 
			 INSERT INTO tb_Lock_Saving_Account(Reference,Account_No,Saving_Term,Interest_Rate,Target_Amount,Min_Saving_Amount,Maturity_Date,Start_Date,Cr_Account,Field24)
					VALUES(iv_Reference,v_SavingsAccountNo,iv_SavingTerm,v_InterestRate,iv_SavingTartgetAmount,v_MinSavingAmount,v_MaturityDate,v_OpeningDate,iv_AccountNo,iv_Field24);

			v_Resp_Code     :='00';
			v_Narration     := 'Successful';
			v_Customer_No   := iv_MobileNo;
			v_Savings_Acc_No   := v_SavingsAccountNo;   

			OPEN c_1 FOR SELECT  V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Savings_Acc_No AS Savings_Acc_No FROM DUAL;

   RETURN;
END IF;

EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while creating customer lock-savings account';
    v_Customer_No   := '';
    v_Savings_Acc_No   := '';
    OPEN c_1 FOR SELECT  V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Savings_Acc_No AS Savings_Acc_No FROM DUAL;

     ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_ADD_WALLET_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ADD_WALLET_ACCOUNT" 
(
	iv_MobileNo NVARCHAR2, --IN THE FORMAT 254700123456/254100123456
	iv_CREATEDBY NVARCHAR2,
    c_1         IN OUT SYS_REFCURSOR
)  
AS  

 v_Resp_Code NVARCHAR2(50)       := '00';
 v_Narration NVARCHAR2(150);
 v_Customer_No NVARCHAR2(50);
 v_Wallet_Acc_No NVARCHAR2(50);
 v_AccountClass  NVARCHAR2(4) := '254'; --Account Product class
 v_AccountNo NVARCHAR2(13);
 v_OpeningDate DATE := SYSTIMESTAMP;
 v_AccountDescription NVARCHAR2(50);
 v_BranchCode  NVARCHAR2(8) := '001'; --default to HQ branch code
 v_Currency  NVARCHAR2(6) := 'KES'; --default to local cuurency
 V_COUNT   NUMBER(1)  := 0;

 BEGIN

  SAVEPOINT V_SAFEPOINT;

 SELECT Description INTO v_AccountDescription FROM tb_Products where Product_Code = v_AccountClass;

 IF(SUBSTR(iv_MobileNo, 1,4) <> '254')-----resrict foreigners from opening wallet accounts
 THEN
    v_Resp_Code     :='03';
    v_Narration     := 'Customer Mobile number is not a valid local telco number';
    v_Customer_No   := iv_MobileNo;
    v_Wallet_Acc_No   := '';   

    OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Wallet_Acc_No AS Wallet_Acc_No FROM DUAL;
 RETURN;
 END IF;
 ----Account number format as 254721580689001
v_AccountNo:= FN_GET_CUST_ACCOUNT(iv_MobileNo);

 ------do validations
 ---1. CHECK IF CUSTOMER IS REGISTERED

	SELECT COUNT(1) INTO V_COUNT FROM DUAL
    WHERE EXISTS
      (SELECT * FROM TB_CUSTOMER WHERE CUSTOMER_NO = iv_MobileNo AND ROWNUM = 1 );

	IF(V_COUNT = 0)
		THEN
	      --Customer does not exists/not registered
			v_Resp_Code     :='01';
			v_Narration     := 'Customer is not registered on the Mobile Banking platform';
			v_Customer_No   := iv_MobileNo;
			v_Wallet_Acc_No   := '';   

			OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Wallet_Acc_No AS Wallet_Acc_No FROM DUAL;
		 RETURN;
	END IF;

	----Reset count	  
	V_COUNT := 0;
	SELECT COUNT(1) INTO V_COUNT FROM DUAL
    WHERE EXISTS
      (SELECT * FROM tb_Account WHERE Account_No = v_AccountNo AND ROWNUM = 1);

	  IF(V_COUNT >= 1)
		THEN
		--Customer exists and has a wallet account
			v_Resp_Code     :='02';
			v_Narration     := 'Customer already has a wallet account';
			v_Customer_No   := iv_MobileNo;
			v_Wallet_Acc_No   := v_AccountNo;   

			OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Wallet_Acc_No AS Wallet_Acc_No FROM DUAL;
		 RETURN;

	ELSE
			--Wallet Account does not exist, create it
	       INSERT INTO TB_ACCOUNT(CUSTOMER_NO,ACCOUNT_NO,ACCOUNT_CLASS,BRANCH_ID,PHONE_NUMBER,CURRENCY,CREATED_BY,PARTIAL_REGISTRATION,ALLOW_CR,ALLOW_DR,
			BLOCKED,STOPPED,DORMANT,IS_FROZEN,CHEQUE_BOOK_FACILITY,ATM_FACILITY,OPENING_DATE,CREATED_ON, APPROVED_BY, APPROVED_ON,OPENING_BAL)
			VALUES(iv_MobileNo,v_AccountNo,v_AccountClass,v_BranchCode,iv_MobileNo,v_Currency,iv_CREATEDBY,0,'Y', 'Y','N','N','N','N','N','N',
			v_OpeningDate,v_OpeningDate,iv_CREATEDBY,v_OpeningDate,0);

	END IF;

		v_Resp_Code     :='00';
		v_Narration     := 'Successful. Wallet account has been created';
		v_Customer_No   := iv_MobileNo;
		v_Wallet_Acc_No   := v_AccountNo;   

		OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Wallet_Acc_No AS Wallet_Acc_No FROM DUAL;

  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while creating customer wallet account';
    v_Customer_No   := '';
    v_Wallet_Acc_No   := '';

    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    OPEN c_1 FOR SELECT V_Resp_Code AS Resp_Code,v_Narration AS Resp_Desc,v_Customer_No AS Customer_No,v_Wallet_Acc_No AS Wallet_Acc_No FROM DUAL;
    RETURN;
  END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_AGENT_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_AGENT_LOGIN" (
  V_DEVICE_ID IN NVARCHAR2,
  V_AGENT_CODE IN NVARCHAR2,
  V_CHANNEL IN NVARCHAR2, -- PORTAL , APP, POS
  V_PASS_KEY IN NVARCHAR2,
   C_1            IN OUT SYS_REFCURSOR
) AS 

V_COUNT NUMBER :=0;
V_STORED_PASSWORD NVARCHAR2(500) :='';
V_ACTIVE NUMBER :=0;
V_LOGIN_TRIALS NUMBER :=0;
V_ID NUMBER :=0;
V_FIRST_LOGIN NUMBER := 0;
V_STORED_AGENT_CODE NVARCHAR2(20) :='';

V_AGENT_NAMES NVARCHAR2(50) :='';
V_DOB NVARCHAR2(50) :='';
V_LOCATION NVARCHAR2(50) :='';
V_DETAILS NVARCHAR2(50) :='';
V_LIMIT NVARCHAR2(50) :='';
V_APPROVED NVARCHAR2(50) :='';
V_BUSINESS_NAME NVARCHAR2(50) :=''; 
V_BANK_CODE NVARCHAR2(50) :='';
V_EMAIL NVARCHAR2(50) :='';
V_ID_TYPE NVARCHAR2(50) :='';
V_ID_NUMBER NVARCHAR2(50) :='';
V_BUSINESSMOBILE NVARCHAR2(50) :='';
V_REJECTED NVARCHAR2(50) :='';
V_REMARKS NVARCHAR2(50) :='';
V_CHECKERREMARK NVARCHAR2(50) :='';
V_FIRST_NAME NVARCHAR2(50) :='';
V_SECOND_NAME NVARCHAR2(50) :='';
V_LAST_NAME NVARCHAR2(50) :='';
V_CREATED_ON NVARCHAR2(50) :='';
V_CREATED_BY NVARCHAR2(50) :='';
V_APPROVED_BY NVARCHAR2(50) :='';
V_APPROVED_ON NVARCHAR2(50) :='';
V_CUSTOMER_NO NVARCHAR2(50) :='';
V_SESSION_ID NVARCHAR2(50) :='';
V_SUPER_AGENT NVARCHAR2(50) :='';

V_POSTAL_ADDRESS NVARCHAR2(50) :='';
V_REFEREES_CONTACTS NVARCHAR2(50) :='';
V_BUSINESS_CATEGORY NVARCHAR2(50) :='';
V_CHECKER_REMARKS NVARCHAR2(50) :='';
V_ID_MODE NVARCHAR2(50) :='';
V_DEVICE_ATTACHED NVARCHAR2(50) :='';
V_USER_TYPE NVARCHAR2(50) :='';
V_RESET_BY NVARCHAR2(50) :='';
V_RESET_DATE NVARCHAR2(50) :='';
V_AGENT_TYPE NVARCHAR2(50) :='';
V_DEACTIVATE NVARCHAR2(50) :='';
V_COUNTY NVARCHAR2(50) :='';
V_SUB_COUNTY NVARCHAR2(50) :='';
V_STREET NVARCHAR2(50) :='';
V_WARD NVARCHAR2(50) :='';
V_AGENCY_EXPERIENCE NVARCHAR2(50) :='';
V_CITY NVARCHAR2(50) :='';
V_REGISTRATION_ID NVARCHAR2(50) :='';
V_BUSINESS_REG_NUMBER NVARCHAR2(50) :='';
V_CONTACT_MOBILE_NUMBER NVARCHAR2(50) :='';
V_PASSPORT NVARCHAR2(50) :='';
V_COMMISSION_ACCOUNT NVARCHAR2(50) :='';
V_COMMISSION_BANK NVARCHAR2(50) :='';
V_BRANCH NVARCHAR2(50) :='';
V_BUSINESS_ENTITY NVARCHAR2(50) :='';
V_KIOSK NVARCHAR2(50) :='';
V_CATEGORY_ID NVARCHAR2(50) :='';
V_GENDER NVARCHAR2(50) :='';
V_PAN NVARCHAR2(50) :='';
V_QR_CODE_IMG NVARCHAR2(5000) :='';
V_LINKED_ACCOUNT  NVARCHAR2(2000) :='';
V_WALLET_ACCOUNT NVARCHAR2(50) := '';

BEGIN

  IF V_CHANNEL = 'PORTAL' THEN --  we will authenticate the device from TB_AGENTS tables where the credentials are stored 
      SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ID FROM TB_AGENTS WHERE AGENT_CODE = V_AGENT_CODE AND ROWNUM = 1);
          
      IF V_COUNT < 1 THEN 
        OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Agent code not found' AS RESP_DESC FROM dual;
        RETURN;
      END IF;
      -- load user data
      SELECT ACTIVE , PASS_KEY, LOGIN_TRIALS ,ID
      INTO V_ACTIVE,V_STORED_PASSWORD, V_LOGIN_TRIALS,V_ID FROM TB_AGENTS WHERE AGENT_CODE = V_AGENT_CODE AND ROWNUM = 1;
      
      -- check if the account is active
      
      IF V_ACTIVE < 1 THEN 
        OPEN C_1 FOR SELECT '02' AS RESP_CODE,'Agent account not active' AS RESP_DESC FROM dual;
        RETURN;
      END IF;
      -- check if the passwords match, if match, check whether the login trials is more than one hence update
      
      IF V_STORED_PASSWORD <> V_PASS_KEY THEN
            -- update the number of trials
            V_LOGIN_TRIALS := V_LOGIN_TRIALS +1 ;
            IF V_LOGIN_TRIALS = 3 THEN -- BLOCK THE ACCOUNT
                UPDATE TB_AGENTS SET LOGIN_TRIALS = V_LOGIN_TRIALS , ACTIVE = 0 WHERE ID = V_ID;
                OPEN C_1 FOR SELECT '03' AS RESP_CODE,'Incorrect password. Active blocked' AS RESP_DESC FROM dual; 
                RETURN;
            ELSE 
                 UPDATE TB_AGENTS SET LOGIN_TRIALS = V_LOGIN_TRIALS WHERE ID = V_ID;
                 V_LOGIN_TRIALS := 3 - V_LOGIN_TRIALS;
                 OPEN C_1 FOR SELECT '04' AS RESP_CODE , 'Incorrect password. '||V_LOGIN_TRIALS ||' attempts remaining.' AS RESP_DESC FROM dual;
                 RETURN;
             END IF;
      ELSE   
            IF V_LOGIN_TRIALS > 0 THEN
                UPDATE TB_AGENTS SET LOGIN_TRIALS = 0 WHERE ID = V_ID;
            END IF;    
                     SELECT 
    ID ,AGENT_NAMES,DOB,LOCATION,DETAILS,LIMIT,APPROVED,BUSINESS_NAME, BANK_CODE,EMAIL,ID_TYPE,ID_NUMBER,BUSINESSMOBILE,
    REJECTED,REMARKS,CHECKERREMARK,FIRST_NAME,SECOND_NAME,LAST_NAME,CREATED_ON,CREATED_BY,APPROVED_BY,APPROVED_ON,CUSTOMER_NO,
    SESSION_ID,SUPER_AGENT,FIRST_LOGIN,POSTAL_ADDRESS,REFEREES_CONTACTS,BUSINESS_CATEGORY,
    CHECKER_REMARKS,ID_MODE,DEVICE_ATTACHED,USER_TYPE,ACTIVE,RESET_BY,RESET_DATE,AGENT_TYPE,DEACTIVATE,
    COUNTY,SUB_COUNTY,STREET,WARD,AGENCY_EXPERIENCE,CITY,
    REGISTRATION_ID,BUSINESS_REG_NUMBER,CONTACT_MOBILE_NUMBER,PASSPORT,COMMISSION_ACCOUNT,
    COMMISSION_BANK,BRANCH,BUSINESS_ENTITY,KIOSK,CATEGORY_ID,GENDER,
    PAN,QR_CODE_IMG INTO 
    V_ID ,V_AGENT_NAMES,V_DOB,V_LOCATION,V_DETAILS,V_LIMIT,V_APPROVED,V_BUSINESS_NAME, V_BANK_CODE,V_EMAIL,V_ID_TYPE,V_ID_NUMBER,V_BUSINESSMOBILE,
    V_REJECTED,V_REMARKS,V_CHECKERREMARK,V_FIRST_NAME,V_SECOND_NAME,V_LAST_NAME,V_CREATED_ON,V_CREATED_BY,V_APPROVED_BY,V_APPROVED_ON,V_CUSTOMER_NO,
    V_SESSION_ID,V_SUPER_AGENT,V_FIRST_LOGIN,V_POSTAL_ADDRESS,V_REFEREES_CONTACTS,V_BUSINESS_CATEGORY,V_CHECKER_REMARKS,V_ID_MODE,V_DEVICE_ATTACHED,
    V_USER_TYPE,V_ACTIVE,V_RESET_BY,V_RESET_DATE,V_AGENT_TYPE,V_DEACTIVATE,V_COUNTY,V_SUB_COUNTY,V_STREET,V_WARD,V_AGENCY_EXPERIENCE,V_CITY,
    V_REGISTRATION_ID,V_BUSINESS_REG_NUMBER,V_CONTACT_MOBILE_NUMBER,V_PASSPORT,V_COMMISSION_ACCOUNT,V_COMMISSION_BANK,V_BRANCH,V_BUSINESS_ENTITY,V_KIOSK,
    V_CATEGORY_ID,V_GENDER,V_PAN,V_QR_CODE_IMG FROM TB_AGENTS WHERE AGENT_CODE = V_AGENT_CODE AND ROWNUM = 1;


             SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ACCOUNT_ID FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_BUSINESSMOBILE AND ACCOUNT_CLASS = '204' AND ROWNUM = 1 );
        
        IF V_COUNT < 1 THEN
            V_WALLET_ACCOUNT := '';
        ELSE
           SELECT ACCOUNT_NO INTO V_WALLET_ACCOUNT FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_BUSINESSMOBILE 
           AND ACCOUNT_CLASS = '204'  AND ROWNUM = 1;
       END IF;
       
       
        
              OPEN C_1 FOR SELECT 
    V_ID  AS ID ,
    V_AGENT_NAMES AS AGENT_NAMES,V_DOB AS DOB,V_LOCATION AS LOCATION,
    V_DETAILS AS DETAILS,V_LIMIT AS LIMIT,V_APPROVED AS APPROVED,
    V_BUSINESS_NAME AS BUSINESS_NAME, V_BANK_CODE AS  BANK_CODE,
    V_EMAIL AS EMAIL,V_ID_TYPE AS ID_TYPE,
    V_ID_NUMBER AS ID_NUMBER,V_BUSINESSMOBILE AS BUSINESSMOBILE, 
    V_REJECTED AS     REJECTED,V_REMARKS AS REMARKS,
    V_CHECKERREMARK AS CHECKERREMARK,V_FIRST_NAME AS FIRST_NAME,
    V_SECOND_NAME AS SECOND_NAME,V_LAST_NAME AS LAST_NAME,
    V_CREATED_ON AS CREATED_ON,V_CREATED_BY AS CREATED_BY,
    V_APPROVED_BY AS APPROVED_BY,V_APPROVED_ON AS APPROVED_ON,
    V_CUSTOMER_NO AS CUSTOMER_NO,    V_SESSION_ID AS     SESSION_ID,
    V_SUPER_AGENT AS SUPER_AGENT,V_FIRST_LOGIN AS FIRST_LOGIN,
    V_POSTAL_ADDRESS AS POSTAL_ADDRESS,V_REFEREES_CONTACTS AS REFEREES_CONTACTS,
    V_BUSINESS_CATEGORY AS BUSINESS_CATEGORY,V_CHECKER_REMARKS AS     CHECKER_REMARKS,
    V_ID_MODE AS ID_MODE,V_DEVICE_ATTACHED AS DEVICE_ATTACHED,   
    V_USER_TYPE AS USER_TYPE,V_ACTIVE AS ACTIVE,V_RESET_BY AS RESET_BY,
    V_RESET_DATE AS RESET_DATE,V_AGENT_TYPE AS AGENT_TYPE,
    V_DEACTIVATE AS DEACTIVATE,V_COUNTY AS     COUNTY,
    V_SUB_COUNTY AS SUB_COUNTY,V_STREET AS STREET,
    V_WARD AS WARD,V_AGENCY_EXPERIENCE AS AGENCY_EXPERIENCE,
    V_CITY AS CITY,    V_REGISTRATION_ID AS     REGISTRATION_ID,
    V_BUSINESS_REG_NUMBER AS BUSINESS_REG_NUMBER,
    V_CONTACT_MOBILE_NUMBER AS CONTACT_MOBILE_NUMBER,
    V_PASSPORT AS PASSPORT,V_COMMISSION_ACCOUNT AS COMMISSION_ACCOUNT,
    V_COMMISSION_BANK AS     COMMISSION_BANK,V_BRANCH AS BRANCH,
    V_BUSINESS_ENTITY AS BUSINESS_ENTITY,V_KIOSK AS KIOSK,    
    V_CATEGORY_ID AS CATEGORY_ID,V_GENDER AS GENDER,
    V_APPROVED AS APPROVED,
    V_PAN AS     PAN,
    V_QR_CODE_IMG AS QR_CODE_IMG,
    V_WALLET_ACCOUNT AS WALLET_ACCOUNT,
    V_LINKED_ACCOUNT AS LINKED_ACCOUNT,
    '00' AS RESP_CODE,
    V_AGENT_CODE AS AGENT_CODE,
    'Agent found' AS RESP_DESC FROM DUAL;
    
      END IF;
      
      -- else return wrong password and update the login trials, if more than 3 attempts , block the current request
   ELSIF V_CHANNEL = 'APP' OR V_CHANNEL = 'POS' THEN
        -- this operation will be handled by the TB_DEVICE_LINKING table
        
        SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ID FROM VW_LINKED_AGENT_DEVICES WHERE DEVICE_IMEI = V_DEVICE_ID AND ROWNUM = 1);
        
        
         -- check if the device is found in the database
        IF V_COUNT < 1 THEN 
            OPEN C_1 FOR SELECT '07' AS RESP_CODE, 'Device not found' AS RESP_DESC FROM DUAL;
            RETURN; 
        END IF;

        -- load data using device_id 
        SELECT FIRSTLOGIN, AGENT_CODE, PASS_KEY, ACTIVE , LOGIN_TRIALS,ID INTO 
            V_FIRST_LOGIN, V_STORED_AGENT_CODE, V_STORED_PASSWORD, V_ACTIVE,
            V_LOGIN_TRIALS,V_ID

            FROM VW_LINKED_AGENT_DEVICES WHERE DEVICE_IMEI = V_DEVICE_ID AND ROWNUM = 1;

   
    -- check first login
        IF V_FIRST_LOGIN = 1 THEN 
            OPEN C_1 FOR SELECT '08' AS RESP_CODE, 'First login' AS RESP_DESC FROM DUAL;
            RETURN;
        END IF;

    -- check if the agent and device are linked together
        IF V_AGENT_CODE <> V_STORED_AGENT_CODE THEN
            OPEN C_1 FOR SELECT '09' AS RESP_CODE , 'Agent not linked to the device' AS RESP_DESC FROM DUAL;
            RETURN;
        END IF;

    -- check if the device is active 
        IF V_ACTIVE <> 1 THEN 
            OPEN C_1 FOR SELECT '10' AS RESP_CODE, 'Device not active ' AS RESP_DESC FROM DUAL;
            RETURN;
        END IF;    

    -- check if the passwords match 
        IF V_PASS_KEY <> V_STORED_PASSWORD THEN 
            V_LOGIN_TRIALS := V_LOGIN_TRIALS +1 ;
            
            IF V_LOGIN_TRIALS = 3 THEN -- block device 
                UPDATE TB_AGENT_DEVICELINKING SET ACTIVE = 0, LOGIN_TRIALS = V_LOGIN_TRIALS WHERE 
                ID = V_ID;

                OPEN C_1 FOR SELECT '11' AS RESP_CODE , 'Incorrect pin. Device blocked' AS RESP_DESC FROM DUAL;
                RETURN;
            ELSE 
                UPDATE TB_AGENT_DEVICELINKING SET LOGIN_TRIALS = V_LOGIN_TRIALS WHERE 
                ID = V_ID;

                V_LOGIN_TRIALS := 3- V_LOGIN_TRIALS;
                OPEN C_1 FOR SELECT '12' AS RESP_CODE, 'Incorrect pin. '||V_LOGIN_TRIALS || 'attempts left'
                 AS RESP_DESC FROM DUAL ;
                RETURN; 
            END IF;
        ELSE
              IF V_LOGIN_TRIALS > 0 THEN
                UPDATE TB_AGENT_DEVICELINKING SET LOGIN_TRIALS = 0 WHERE ID = V_ID;
            END IF;    
            
            
             SELECT 
    ID ,AGENT_NAMES,DOB,LOCATION,DETAILS,LIMIT,APPROVED,BUSINESS_NAME, BANK_CODE,EMAIL,ID_TYPE,ID_NUMBER,BUSINESSMOBILE,
    REJECTED,REMARKS,CHECKERREMARK,FIRST_NAME,SECOND_NAME,LAST_NAME,CREATED_ON,CREATED_BY,APPROVED_BY,APPROVED_ON,CUSTOMER_NO,
    SESSION_ID,SUPER_AGENT,FIRST_LOGIN,POSTAL_ADDRESS,REFEREES_CONTACTS,BUSINESS_CATEGORY,
    CHECKER_REMARKS,ID_MODE,DEVICE_ATTACHED,USER_TYPE,ACTIVE,RESET_BY,RESET_DATE,AGENT_TYPE,DEACTIVATE,
    COUNTY,SUB_COUNTY,STREET,WARD,AGENCY_EXPERIENCE,CITY,
    REGISTRATION_ID,BUSINESS_REG_NUMBER,CONTACT_MOBILE_NUMBER,PASSPORT,COMMISSION_ACCOUNT,
    COMMISSION_BANK,BRANCH,BUSINESS_ENTITY,KIOSK,CATEGORY_ID,GENDER,
    PAN,QR_CODE_IMG INTO 
    V_ID ,V_AGENT_NAMES,V_DOB,V_LOCATION,V_DETAILS,V_LIMIT,V_APPROVED,V_BUSINESS_NAME, V_BANK_CODE,V_EMAIL,V_ID_TYPE,V_ID_NUMBER,V_BUSINESSMOBILE,
    V_REJECTED,V_REMARKS,V_CHECKERREMARK,V_FIRST_NAME,V_SECOND_NAME,V_LAST_NAME,V_CREATED_ON,V_CREATED_BY,V_APPROVED_BY,V_APPROVED_ON,V_CUSTOMER_NO,
    V_SESSION_ID,V_SUPER_AGENT,V_FIRST_LOGIN,V_POSTAL_ADDRESS,V_REFEREES_CONTACTS,V_BUSINESS_CATEGORY,V_CHECKER_REMARKS,V_ID_MODE,V_DEVICE_ATTACHED,
    V_USER_TYPE,V_ACTIVE,V_RESET_BY,V_RESET_DATE,V_AGENT_TYPE,V_DEACTIVATE,V_COUNTY,V_SUB_COUNTY,V_STREET,V_WARD,V_AGENCY_EXPERIENCE,V_CITY,
    V_REGISTRATION_ID,V_BUSINESS_REG_NUMBER,V_CONTACT_MOBILE_NUMBER,V_PASSPORT,V_COMMISSION_ACCOUNT,V_COMMISSION_BANK,V_BRANCH,V_BUSINESS_ENTITY,V_KIOSK,
    V_CATEGORY_ID,V_GENDER,V_PAN,V_QR_CODE_IMG FROM TB_AGENTS WHERE AGENT_CODE = V_AGENT_CODE AND ROWNUM = 1;


             SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ACCOUNT_ID FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_BUSINESSMOBILE AND ACCOUNT_CLASS = '204' AND ROWNUM = 1 );
        
        IF V_COUNT < 1 THEN
            V_WALLET_ACCOUNT := '';
        ELSE
           SELECT ACCOUNT_NO INTO V_WALLET_ACCOUNT FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_BUSINESSMOBILE 
           AND ACCOUNT_CLASS = '204'  AND ROWNUM = 1;
       END IF;
       
       
        
              OPEN C_1 FOR SELECT 
    V_ID  AS ID ,
    V_AGENT_NAMES AS AGENT_NAMES,V_DOB AS DOB,V_LOCATION AS LOCATION,
    V_DETAILS AS DETAILS,V_LIMIT AS LIMIT,V_APPROVED AS APPROVED,
    V_BUSINESS_NAME AS BUSINESS_NAME, V_BANK_CODE AS  BANK_CODE,
    V_EMAIL AS EMAIL,V_ID_TYPE AS ID_TYPE,
    V_ID_NUMBER AS ID_NUMBER,V_BUSINESSMOBILE AS BUSINESSMOBILE, 
    V_REJECTED AS     REJECTED,V_REMARKS AS REMARKS,
    V_CHECKERREMARK AS CHECKERREMARK,V_FIRST_NAME AS FIRST_NAME,
    V_SECOND_NAME AS SECOND_NAME,V_LAST_NAME AS LAST_NAME,
    V_CREATED_ON AS CREATED_ON,V_CREATED_BY AS CREATED_BY,
    V_APPROVED_BY AS APPROVED_BY,V_APPROVED_ON AS APPROVED_ON,
    V_CUSTOMER_NO AS CUSTOMER_NO,    V_SESSION_ID AS     SESSION_ID,
    V_SUPER_AGENT AS SUPER_AGENT,V_FIRST_LOGIN AS FIRST_LOGIN,
    V_POSTAL_ADDRESS AS POSTAL_ADDRESS,V_REFEREES_CONTACTS AS REFEREES_CONTACTS,
    V_BUSINESS_CATEGORY AS BUSINESS_CATEGORY,V_CHECKER_REMARKS AS     CHECKER_REMARKS,
    V_ID_MODE AS ID_MODE,V_DEVICE_ATTACHED AS DEVICE_ATTACHED,   
    V_USER_TYPE AS USER_TYPE,V_ACTIVE AS ACTIVE,V_RESET_BY AS RESET_BY,
    V_RESET_DATE AS RESET_DATE,V_AGENT_TYPE AS AGENT_TYPE,
    V_DEACTIVATE AS DEACTIVATE,V_COUNTY AS     COUNTY,
    V_SUB_COUNTY AS SUB_COUNTY,V_STREET AS STREET,
    V_WARD AS WARD,V_AGENCY_EXPERIENCE AS AGENCY_EXPERIENCE,
    V_CITY AS CITY,    V_REGISTRATION_ID AS     REGISTRATION_ID,
    V_BUSINESS_REG_NUMBER AS BUSINESS_REG_NUMBER,
    V_CONTACT_MOBILE_NUMBER AS CONTACT_MOBILE_NUMBER,
    V_PASSPORT AS PASSPORT,V_COMMISSION_ACCOUNT AS COMMISSION_ACCOUNT,
    V_COMMISSION_BANK AS     COMMISSION_BANK,V_BRANCH AS BRANCH,
    V_BUSINESS_ENTITY AS BUSINESS_ENTITY,V_KIOSK AS KIOSK,    
    V_CATEGORY_ID AS CATEGORY_ID,V_GENDER AS GENDER,
    V_APPROVED AS APPROVED,
    V_PAN AS     PAN,
    V_QR_CODE_IMG AS QR_CODE_IMG,
    V_WALLET_ACCOUNT AS WALLET_ACCOUNT,
    V_LINKED_ACCOUNT AS LINKED_ACCOUNT,
    V_AGENT_CODE AS AGENT_CODE,
    '00' AS RESP_CODE,
    'login successful' AS RESP_DESC FROM DUAL;
    
        END IF;
        
   ELSE  
         OPEN C_1 FOR SELECT '06' AS RESP_CODE,'Wrong channel input' AS RESP_DESC FROM dual;
  END IF;
 
END A_SP_AGENT_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_AGENT_MINI_STATEMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_AGENT_MINI_STATEMENT" (
  IV_AGENT_CODE_ALIAS IN NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR
) AS 
BEGIN

/**
 SELECT FIELD100 ,FIELD37 , FIELD4, FIELD39 FROM TB_MESSAGES_EXTERNAL WHERE  FIELD39 = '00' AND '20400013' in (FIELD35 , FIELD65)
 ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;
*/

     OPEN C_1 FOR SELECT FIELD100 ,FIELD37 , FIELD4, FIELD39, FIELD3, FIELD48,REVERSED FROM TB_MESSAGES_EXTERNAL WHERE  
     FIELD39 = '00' AND (IV_AGENT_CODE_ALIAS in (FIELD25,FIELD35 , FIELD65) or ((SELECT AGENT_CODE_ALIAS FROM TB_AGENTS WHERE AGENT_CODE=IV_AGENT_CODE_ALIAS) IN  (FIELD25,FIELD35 , FIELD65))) 
     AND FIELD3 NOT IN ('150000','320000','380000','910000') AND TRUNC(DATEX)=TRUNC(SYSDATE)
     ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 50 ROWS ONLY;

END A_SP_AGENT_MINI_STATEMENT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_ARCHIVE_CLOSED_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ARCHIVE_CLOSED_ACCOUNT" (
    p_CUSTOMERNO        IN NVARCHAR2, ---Here pass the mobile number
    p_CLOSE_APPROVED_BY IN NVARCHAR2,
    IV_staging_id       IN NVARCHAR2 )
AS
  v_returnvalue      NUMBER(10)   := 1;
  v_TOTAL_WALLET_BAL NUMBER(18,2) := 0;
  v_LOCKSAVINGS_BAL  NUMBER(18,2) := 0;
  v_PostAmount       NUMBER(18,2) := 0;
  v_ACCOUNTCLASS NVARCHAR2(50);
  v_ACCOUNTDESCRIPTION NVARCHAR2(50);
  v_WalletAccount NVARCHAR2(50);
  v_LockSavingsAccount NVARCHAR2(50);
  v_AdditionalText NVARCHAR2(1000);
  v_Channel NVARCHAR2(50) := 'ESB';
  V_COUNT NUMBER(10)      := 0;
  v_Currency NVARCHAR2(5) := 'KES';
  V_COB NUMBER            :=0;
  v_TRXNO NVARCHAR2(18);
  v_USERID NVARCHAR2(50) := p_CLOSE_APPROVED_BY;
  V_DATAX NVARCHAR2(500);
  V_RESPONSE_CODE NVARCHAR2(20);
  V_available_actual NVARCHAR2(20);
  V_CHARGES_AMT     NUMBER(18,2) := 0;
  V_EXCISE_DUTY_AMT NUMBER(18,2) := 0;
  V_Resp_Narrartionon NVARCHAR2(500);
  V_CREATED_BY NVARCHAR2(150);
  V_DATA NVARCHAR2(1000);
  ---post-mini
  V_MSGTYPE NVARCHAR2(50) ;
  V_FIELD2 NVARCHAR2(50) ;
  V_FIELD3 NVARCHAR2(50);
  V_FIELD4 NUMBER(18,2) := 0;--AMOUNT
  V_FIELD7 NVARCHAR2(50);
  V_FIELD11 NVARCHAR2(50) ;--STAN
  V_FIELD24 NVARCHAR2(50);
  V_FIELD32 NVARCHAR2(50) ;
  V_FIELD35 NVARCHAR2(50);
  V_FIELD37 NVARCHAR2(50);
  V_FIELD65 NVARCHAR2(50) ;
  V_FIELD68 NVARCHAR2(50);
  V_FIELD90 NVARCHAR2(50);
  V_FIELD100 NVARCHAR2(50);
  V_FIELD101 NVARCHAR2(50);
  V_FIELD102 NVARCHAR2(50);
  V_FIELD103 NVARCHAR2(50);
  V_COMMISSION NUMBER(18,2)   := 0;
  V_CUSTCURRENCY NVARCHAR2(50):= 'KES' ;
  V_TERMINALID NVARCHAR2(50);
  V_TRNCODE NVARCHAR2(50) ;
  V_EXTERNALREFNO NVARCHAR2(50);
  CV_1 SYS_REFCURSOR;
BEGIN
  SAVEPOINT V_SAFEPOINT;
  ----Validate WALLET account
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT *
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO = p_CUSTOMERNO
    AND ACCOUNT_CLASS ='254'
    );
  IF(V_COUNT > 0) THEN
    SELECT ACCOUNT_NO,
      CURRENCY
    INTO v_WalletAccount,
      v_Currency
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO = p_CUSTOMERNO
    AND ACCOUNT_CLASS ='254';
    --GET WALLET BALANCE AND POST AMOUNTS IF  BAL > 0
    v_TOTAL_WALLET_BAL   :=FN_GETBALANCE('C',V_COB,v_WalletAccount);
    IF(v_TOTAL_WALLET_BAL > 0) THEN
      v_PostAmount       := v_TOTAL_WALLET_BAL;
      -----GETERATE THE REF NUMBER FOR OUR TXNs
      v_TRXNO := FN_GET_REFERENCE(v_Channel);
      ----POST AMOUNTS
      v_AdditionalText := 'CLOSE WALLET ACCOUNT '|| v_WalletAccount || 'WITH ACCOUNT BALANCE :: '||v_PostAmount;
      --Now let us repay the loan via post-mini
      V_TERMINALID    := '';
      V_FIELD2        := p_CUSTOMERNO;
      V_FIELD3        := '501000';
      V_FIELD4        := v_PostAmount;
      V_FIELD7        := TO_CHAR(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;
      V_FIELD11       := TO_CHAR(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;
      V_FIELD24       := 'MM' ;
      V_FIELD32       := v_Channel ;
      V_FIELD35       := '' ;
      V_FIELD37       := v_TRXNO;
      V_FIELD65       := '' ; ---pass product code, helps to get extra configs in post-mini
      V_FIELD68       := v_AdditionalText ;
      V_FIELD90       := '' ;
      V_FIELD100      := 'CLOSE_WALLET' ;
      V_FIELD101      := '' ;
      V_FIELD102      := v_WalletAccount ;
      V_FIELD103      := '' ;
      V_COMMISSION    := 0 ;
      V_CUSTCURRENCY  := v_Currency ;
      V_TERMINALID    := '' ;
      V_USERID        := v_USERID ;
      V_TRNCODE       := '' ;
      V_EXTERNALREFNO := v_WalletAccount;
      BEGIN
        ---call post-mini
        A_SP_POST_MINI_TRANSACTIONS( V_MSGTYPE, V_FIELD2, V_FIELD3, V_FIELD4, V_FIELD7, V_FIELD11, V_FIELD24, V_FIELD32, V_FIELD35, V_FIELD37, V_FIELD65, V_FIELD68, V_FIELD90, V_FIELD100, V_FIELD101, V_FIELD102, V_FIELD103, V_COMMISSION, V_CUSTCURRENCY, V_TERMINALID, V_USERID , V_TRNCODE , V_EXTERNALREFNO, CV_1 );
        LOOP
          FETCH CV_1 INTO V_DATAX ;
          EXIT
        WHEN CV_1%NOTFOUND;
          ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
          ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
          ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
          SELECT regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 5)
          INTO V_RESPONSE_CODE,
            V_available_actual,
            V_CHARGES_AMT,
            V_EXCISE_DUTY_AMT,
            V_Resp_Narrartionon
          FROM DUAL;
          IF V_RESPONSE_CODE IN ('00') THEN
            v_returnvalue := 1;
          ELSE
            RETURN ;
          END IF;
        END LOOP;
        CLOSE CV_1;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        RETURN;
      END;
    END IF;
  ELSE
    RETURN ;
  END IF;
  ----Validate LOCK-SAVING account
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT *
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO = p_CUSTOMERNO
    AND ACCOUNT_CLASS ='201'
    );
  IF(V_COUNT > 0) THEN
    SELECT ACCOUNT_NO
    INTO v_LockSavingsAccount
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO = p_CUSTOMERNO
    AND ACCOUNT_CLASS ='201';
    SELECT ACCOUNT_NO,
      CURRENCY
    INTO v_LockSavingsAccount,
      v_Currency
    FROM TB_ACCOUNT
    WHERE CUSTOMER_NO = p_CUSTOMERNO
    AND ACCOUNT_CLASS ='254';
    --GET WALLET BALANCE AND POST AMOUNTS IF  BAL > 0
    v_LOCKSAVINGS_BAL   := FN_GETBALANCE('C',V_COB,v_LockSavingsAccount);
    IF(v_LOCKSAVINGS_BAL > 0) THEN
      v_PostAmount      := v_LOCKSAVINGS_BAL;
      IF(v_TRXNO         = '') THEN
        -----GETERATE THE REF NUMBER FOR OUR TXNs
        v_TRXNO := FN_GET_REFERENCE(v_Channel);
      END IF;
      ----POST AMOUNTS
      v_AdditionalText := 'CLOSE WALLET ACCOUNT '|| v_LockSavingsAccount || 'WITH ACCOUNT BALANCE :: '||v_PostAmount;
      --Now let us repay the loan via post-mini
      V_TERMINALID    := '';
      V_FIELD2        := p_CUSTOMERNO;
      V_FIELD3        := '502000';
      V_FIELD4        := v_PostAmount;
      V_FIELD7        := TO_CHAR(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;
      V_FIELD11       := TO_CHAR(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;
      V_FIELD24       := 'MM' ;
      V_FIELD32       := v_Channel ;
      V_FIELD35       := '' ;
      V_FIELD37       := v_TRXNO;
      V_FIELD65       := '' ; ---pass product code, helps to get extra configs in post-mini
      V_FIELD68       := v_AdditionalText ;
      V_FIELD90       := '' ;
      V_FIELD100      := 'CLOSE_LOCKSAVINGS' ;
      V_FIELD101      := '' ;
      V_FIELD102      := v_LockSavingsAccount ;
      V_FIELD103      := '' ;
      V_COMMISSION    := 0 ;
      V_CUSTCURRENCY  := v_Currency ;
      V_TERMINALID    := '' ;
      V_USERID        := v_USERID ;
      V_TRNCODE       := '' ;
      V_EXTERNALREFNO := v_LockSavingsAccount ;
      BEGIN
        ---call post-mini
        A_SP_POST_MINI_TRANSACTIONS( V_MSGTYPE, V_FIELD2, V_FIELD3, V_FIELD4, V_FIELD7, V_FIELD11, V_FIELD24, V_FIELD32, V_FIELD35, V_FIELD37, V_FIELD65, V_FIELD68, V_FIELD90, V_FIELD100, V_FIELD101, V_FIELD102, V_FIELD103, V_COMMISSION, V_CUSTCURRENCY, V_TERMINALID, V_USERID , V_TRNCODE , V_EXTERNALREFNO, CV_1 );
        LOOP
          FETCH CV_1 INTO V_DATAX ;
          EXIT
        WHEN CV_1%NOTFOUND;
          ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
          ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
          ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
          SELECT regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
            regexp_substr(V_DATAX, '[^|]+', 1, 5)
          INTO V_RESPONSE_CODE,
            V_available_actual,
            V_CHARGES_AMT,
            V_EXCISE_DUTY_AMT,
            V_Resp_Narrartionon
          FROM DUAL;
          IF V_RESPONSE_CODE IN ('00') THEN
            v_returnvalue := 1;
          ELSE
            RETURN ;
          END IF;
        END LOOP;
        CLOSE CV_1;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        RETURN;
      END;
    END IF;
  ELSE
    RETURN ;
  END IF;
  ---
  SELECT DATA,
    CREATED_BY
  INTO V_DATA,
    V_CREATED_BY
  FROM TB_STAGING_ACTION
  WHERE ID        = IV_staging_id
  AND IS_APPROVED = 0
  AND ROWNUM      =1;
  UPDATE TB_ACCOUNT
  SET ISCLOSED             = 1,
    CLOSED_BY              = V_CREATED_BY,
    CLOSED_MAKER_REMARKS   = '',
    CLOSED_APPROVED_BY     = p_CLOSE_APPROVED_BY,
    CLOSED_CHECKER_REMARKS = '',
    CLOSEDBY_DATE          = SYSTIMESTAMP
  WHERE CUSTOMER_NO        = p_CUSTOMERNO;
  -----ARCHIVE THE RECORDS AND DELETE FROM MAIN TABLES
  ---TB_CUSTOMER_VALIDATION
  INSERT
  INTO TB_CUSTOMER_VALIDATION_ARCHIVE
  SELECT * FROM TB_CUSTOMER_VALIDATION WHERE CUSTOMER_NO = p_CUSTOMERNO;
  DELETE FROM TB_CUSTOMER_VALIDATION WHERE CUSTOMER_NO = p_CUSTOMERNO;
  ---TB_CUSTOMERS
  INSERT INTO TB_CUSTOMER_ARCHIVE
  SELECT * FROM TB_CUSTOMER WHERE CUSTOMER_NO = p_CUSTOMERNO;
  DELETE FROM TB_CUSTOMER WHERE CUSTOMER_NO = p_CUSTOMERNO;
  ---TB_ACCOUNT
  INSERT INTO TB_ACCOUNT_ARCHIVE
  SELECT * FROM TB_ACCOUNT WHERE CUSTOMER_NO = p_CUSTOMERNO;
  DELETE FROM TB_ACCOUNT WHERE CUSTOMER_NO = p_CUSTOMERNO;
  ---TB_LINKED_ACCOUNTS
  INSERT INTO TB_LINKED_ACCOUNTS_ARCHIVE
  SELECT * FROM TB_LINKED_ACCOUNTS WHERE PHONENUMBER = p_CUSTOMERNO;
  DELETE FROM TB_LINKED_ACCOUNTS WHERE PHONENUMBER = p_CUSTOMERNO;
END A_SP_ARCHIVE_CLOSED_ACCOUNT ;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_ARCHIVE_EOD_ACTIVITY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_ARCHIVE_EOD_ACTIVITY" AS 
BEGIN
  -- push all data from eod table to the other end
  INSERT INTO TB_EOD_ACTIVITY_ARCHIVE SELECT * FROM TB_EOD_ACTIVITY;
  
  -- delete the tables to start with fresh set of logs
  DELETE FROM TB_EOD_ACTIVITY;
  DELETE TBCOBERRORS;
  EXCEPTION WHEN OTHERS THEN
   ROLLBACK;
    INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error Archiving GL balance in in A_SP_ARCHIVE_EOD_ACTIVITY'
      );
    COMMIT;
    
    RAISE;
  RETURN;
  
  
END A_SP_ARCHIVE_EOD_ACTIVITY;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_ARCHIVE_LINKED_DEVICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_ARCHIVE_LINKED_DEVICE" (
  IV_ID NUMBER 
) AS 
BEGIN

  INSERT INTO TB_AGENT_DEVICELINKING_ARCHIVE SELECT * FROM TB_AGENT_DEVICELINKING WHERE ID = IV_ID AND ROWNUM = 1;
  
  DELETE FROM TB_AGENT_DEVICELINKING WHERE ID = IV_ID;
END A_SP_ARCHIVE_LINKED_DEVICE;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_ARCHIVE_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_ARCHIVE_USER" (
  iv_user_name IN NVARCHAR2
) AS 

V_ID NUMBER(20) :=0;
BEGIN
   -- get id 
  SELECT ID INTO V_ID FROM TB_USER WHERE UPPER( USER_NAME ) = UPPER(iv_user_name) and ROWNUM = 1;
  -- delete tb_user_in_profile
  
  DBMS_OUTPUT.put_line('username '||iv_user_name);
  DBMS_OUTPUT.put_line('v_id '||V_ID);
  
  DELETE FROM TB_USER_IN_PROFILE WHERE USER_ID = V_ID;
  
  -- archive record 
  INSERT INTO TB_USER_ARCHIVE ( 	USER_NAME , 	AUTH_KEY , 	PASSWORD_HASH , 	PASSWORD_RESET_TOKEN , 	
  EMAIL , 	BRANCH_ID  , 	FIRST_NAME , 
	MIDDLE_NAME , 	LAST_NAME , 	ID_NUMBER, 	PROFESSION , 	MOBILE_NUMBER , 	CREATED_BY , 	CREATED_ON  , 	CREATE_REMARKS , 
	STATUS , 	OFFICE_VOIP , 	APPROVED  , 	APPROVED_ON  , 	APPROVED_BY , 	TRIALS , 	LOCKED , 	FIRST_LOGIN  , 
	REMARKS , 	SUPERADMIN , 	CONFIRMATION_TOKEN , 	PROFILE_ID , 	BIND_TO_IP , 	EMAIL_CONFIRMED , 	REGISTRATION_IP , 
	LAST_PASSWORD_RESET , 	LOGGED_IN , 	SESSION_ID , 	LOGGEDIN_IP , 	PREVIOUS_LOGIN_DATE , 	LAST_LOGIN_DATE , 
	LANGUAGE , 	USER_PHOTO , 	DELETED ,	DELETED_BY , 	DELETED_ON , 	OTP , 	OTP_TIME , 	OTP_EXPIRY_TIME , 
	OTP_VERIFIED , 	DEPARTMENT_ID , 	REWORKED , 	REWORKED_BY ,	REWORKED_ON , 	DECLINED , 	DECLINED_BY , 	DECLINED_ON , 
	BLOCKED_BY , 	BLOCKED_ON , 	BLOCK_APPROVED_BY , 	UN_BLOCKED_BY , 	UN_BLOCK_APPROVED_BY , 	UN_BLOCK_APPROVED_ON , 
	PIN_RESET_BY , 	PIN_RESET_ON , 	PIN_RESET_APPROVED_BY 
   )
   
   SELECT   	USER_NAME , 	AUTH_KEY , 	PASSWORD_HASH , 	PASSWORD_RESET_TOKEN , 	EMAIL , 	BRANCH_ID  , 	FIRST_NAME , 
	MIDDLE_NAME , 	LAST_NAME , 	ID_NUMBER, 	PROFESSION , 	MOBILE_NUMBER , 	CREATED_BY , 	CREATED_ON  , 	CREATE_REMARKS , 
	STATUS , 	OFFICE_VOIP , 	ID_NUMBER  , 	APPROVED_ON  , 	APPROVED_BY , 	TRIALS , 	LOCKED , 	FIRST_LOGIN  , 
	REMARKS , 	SUPERADMIN , 	CONFIRMATION_TOKEN , 	PROFILE_ID , 	BIND_TO_IP , 	EMAIL_CONFIRMED , 	REGISTRATION_IP , 
	LAST_PASSWORD_RESET , 	LOGGED_IN , 	SESSION_ID , 	LOGGEDIN_IP , 	PREVIOUS_LOGIN_DATE , 	LAST_LOGIN_DATE , 
	LANGUAGE , 	USER_PHOTO , 	DELETED ,	DELETED_BY , 	DELETED_ON , 	OTP , 	OTP_TIME , 	OTP_EXPIRY_TIME , 
	OTP_VERIFIED , 	DEPARTMENT_ID , 	REWORKED , 	REWORKED_BY ,	REWORKED_ON , 	DECLINED , 	DECLINED_BY , 	DECLINED_ON , 
	BLOCKED_BY , 	BLOCKED_ON , 	BLOCK_APPROVED_BY , 	UN_BLOCKED_BY , 	UN_BLOCK_APPROVED_BY , 	UN_BLOCK_APPROVED_ON , 
	PIN_RESET_BY , 	PIN_RESET_ON , 	PIN_RESET_APPROVED_BY 
    FROM TB_USER WHERE ID = V_ID AND ROWNUM = 1;
  DELETE FROM TB_USER WHERE ID = V_ID;
END A_SP_ARCHIVE_USER;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_BEGIN_EOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_BEGIN_EOD" (
    IV_COB_AUTO_MODE IN NUMBER DEFAULT 1 )
AS
  V_WorkingDate DATE;
  V_FinancialPeriod NVARCHAR2(3);
  V_FinancialYear NVARCHAR2(6);
  V_EndOfMonthDate DATE;
  V_EndOfYear      DATE;
  V_COB_AUTO_MODE  NUMBER(2,0);
BEGIN
BEGIN
  INSERT
  INTO TB_EOD_ACTIVITY
    (
      CODE,
      ACTIVITY,
      DESCRIPTION,
      SP_NAME
    )
    VALUES
    (
      '001',
      'Start of COB .',
      'Start of COB .',
      'SP_BEGIN_EOD'
    );
  COMMIT;
  END;
  BEGIN
    SELECT ITEMVALUE
    INTO V_COB_AUTO_MODE
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME        = 'COB_AUTO_MODE';
    IF IV_COB_AUTO_MODE   = 1 THEN
      IF V_COB_AUTO_MODE != IV_COB_AUTO_MODE THEN
        INSERT
        INTO TB_EOD_ACTIVITY
          (
            CODE,
            ACTIVITY,
            DESCRIPTION,
            SP_NAME
          )
          VALUES
          (
            '001',
            'Checking COB Mode',
            'COB Manual Mode has been enagaged... Auto COB Process Aborted .',
            'SP_BEGIN_EOD'
          );
        COMMIT;
        ROLLBACK;
        RETURN;
      END IF;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '001',
        'Checking COB Mode',
        'Error Reading COB Run Mode in SP_BEGIN_EOD .',
        'SP_BEGIN_EOD'
      );
    COMMIT;
    ROLLBACK;
    RETURN;
  END;
  BEGIN
    SELECT workingdate ,
      ENDOFMONTHDATE,
      ENDOFYEAR,
      FINANCIALPERIOD,
      FINANCIALYEAR
    INTO V_WorkingDate,
      V_EndOfMonthDate,
      V_EndOfYear,
      V_FinancialPeriod,
      V_FinancialYear
    FROM TB_DATE_SETTINGS;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '002',
        'Checking Date',
        'Error Reading the date in SP_BEGIN_EOD .',
        'SP_BEGIN_EOD'
      );
    COMMIT;
    ROLLBACK;
    RETURN;
  END;
  BEGIN
    UPDATE TB_DATE_SETTINGS SET COB = 1;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '002',
        'Setting Standin Mode',
        'Setting COB Flag on TBdatesettings .',
        'SP_BEGIN_EOD'
      );
    ROLLBACK;
    RETURN;
  END;
  BEGIN
    A_SP_EOD_MISMATCH;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '003',
        'Executing EOD_MISMATCH',
        'Error Executing SP_EOD_MISMATCH.',
        'SP_EOD_MISMATCH'
      );
    ROLLBACK;
    RETURN;
  END;
  BEGIN
    A_SP_EOD_ARCHIVE;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '004',
        'Executing SP_EOD_ARCHIVE',
        'Error Executing SP_EOD_ARCHIVE.',
        'SP_EOD_ARCHIVE'
      );
    ROLLBACK;
    RETURN;
  END;

  BEGIN
    A_SP_EOD_GL_ARCHIVE;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  
    raise;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '004',
        'Executing SP_EOD_GL_ARCHIVE',
        'Error Executing SP_EOD_GL_ARCHIVE.',
        'SP_EOD_GL_ARCHIVE'
      );
    ROLLBACK;
    RETURN;
  END;

    BEGIN
    A_SP_RESET_DATES;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '005',
        'Executing SP_EOD_RESET_DEFAULTS',
        'Error Executing SP_EOD_RESET_DEFAULTS.',
        'SP_EOD_RESET_DEFAULTS'
      );
    ROLLBACK;
    RETURN;
  END;
  BEGIN
  UPDATE TB_DATE_SETTINGS
  SET COB = 0;
  END;
   BEGIN
    A_SP_POST_AFTER_EOD;
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  
   raise;
       INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '006',
        'Executing SP_POST_AFTER_EOD',
        'Error Executing SP_POST_AFTER_EOD.',
        'SP_POST_AFTER_EOD'
      );
    ROLLBACK;
    RETURN;
  END;
  BEGIN
  INSERT
  INTO TB_EOD_ACTIVITY
    (
      CODE,
      ACTIVITY,
      DESCRIPTION,
      SP_NAME
    )
    VALUES
    (
      '999',
      'End of EOD .',
      'End of EOD .',
      'SP_BEGIN_EOD'
    );
  COMMIT;
  END;
  EXCEPTION
WHEN OTHERS THEN

 raise;
INSERT
  INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '999',
        'General Error  in SP_BEGIN_EOD.',
        'General Error  in SP_BEGIN_EOD.',
        'SP_BEGIN_EOD'
      );
  ROLLBACK;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_BLOCK_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_BLOCK_ACCOUNT" (
  V_CUSTOMER_NO IN NVARCHAR2,
  V_TRIALS IN NUMBER,
  C_1 IN OUT SYS_REFCURSOR
) AS 

BEGIN

   UPDATE TB_CUSTOMER_VALIDATION
          SET ACTIVE        = 0,TRIALS =  1
          WHERE phone_number = V_CUSTOMER_NO;
       --   AND ROWNUM        =1;
          
    OPEN C_1 FOR SELECT '00' AS  RESP_CODE, 'Account blocked successfully' AS RESP_DESC FROM DUAL;      
END A_SP_BLOCK_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CARDLESS_FULFILLMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_CARDLESS_FULFILLMENT" (
   IV_MSGTYPE       IN NVARCHAR2 ,
    IV_FIELD2        IN NVARCHAR2 ,
    IV_FIELD3        IN NVARCHAR2,
    IV_FIELD4        IN NUMBER DEFAULT 0,--AMOUNT
    IV_FIELD7        IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD11       IN NVARCHAR2 ,--STAN
    IV_FIELD24       IN NVARCHAR2,
    IV_FIELD32       IN NVARCHAR2 ,
    IV_FIELD35       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD37       IN NVARCHAR2,
    IV_FIELD65       IN NVARCHAR2 DEFAULT NULL ,
    IV_FIELD68       IN NVARCHAR2,
    IV_FIELD90       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD100      IN NVARCHAR2,---SERVICE TN/TA
    IV_FIELD101      IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD102      IN NVARCHAR2,
    IV_FIELD103      IN NVARCHAR2 DEFAULT '' ,
    IV_COMMISSION    IN NUMBER DEFAULT 0,
    IV_CUSTCURRENCY  IN NVARCHAR2 DEFAULT 'UGX' ,
    IV_TERMINALID    IN NVARCHAR2 DEFAULT '' ,
    IV_USERID        IN NVARCHAR2 DEFAULT NULL ,
    IV_TRNCODE       IN NVARCHAR2 DEFAULT NULL ,
    IV_EXTERNALREFNO IN NVARCHAR2 DEFAULT NULL, --E.G MPESA OR CBS
    C_1              IN OUT SYS_REFCURSOR
) AS 

V_REF_NO NVARCHAR2(100) := ''; -- this will replace the current field 37
v_COUNT NUMBER :=0;
C_2 SYS_REFCURSOR;
TOKEN_FULFILLMENT_RESPONSE NVARCHAR2(50) :='';
V_TOKEN_CODE NVARCHAR2(5) :='';
V_BLOCKED_AMOUNT NUMBER(18) :='';
V_STORED_ACCOUNT_NO NVARCHAR2(20) :='';
V_POST_MINI_RESPONSE SYS_REFCURSOR ;
V_TRX_CHARGE NUMBER(18) :=0;
V_PRINCIPLE_CHARGE NUMBER(18):=0;
v_amount nvarchar2(50) :='';

V_FIELD_102 NVARCHAR2(50) :='';
BEGIN
SAVEPOINT V_SAFEPOINT;
  -- fulfill the provided token
  BEGIN 
    A_SP_TOKEN_FULLFILLMENT(IV_EXTERNALREFNO , IV_FIELD2 , IV_FIELD4, C_2);
    
    -- 00 was successful 61 token not found 62 expired token 
         FETCH C_2 INTO TOKEN_FULFILLMENT_RESPONSE;    
           V_TOKEN_CODE := SUBSTR(TOKEN_FULFILLMENT_RESPONSE, 0, 2);
           DBMS_OUTPUT.PUT_LINE('FULLMENT RESPONSE | ' || TOKEN_FULFILLMENT_RESPONSE);
         CLOSE C_2;  
         
  /*
    00 and 62 responses can unblock the funds for present to the client
    because 62 is an expired token , we validate the funds as well to check whether the funds set are correct 
    before unblocking
  
  */
    V_FIELD_102 := IV_FIELD2||'001';
    V_BLOCKED_AMOUNT := IV_FIELD4;
    IF V_TOKEN_CODE = '62' THEN
        v_amount := SUBSTR(TOKEN_FULFILLMENT_RESPONSE, Instr(TOKEN_FULFILLMENT_RESPONSE, '|',-1,1 ) +1);
        V_PRINCIPLE_CHARGE := SUBSTR(v_amount,1,Instr(v_amount, '_',1,1)-1);
        V_TRX_CHARGE := SUBSTR(v_amount,Instr(v_amount, '_',1,1)+1);
        
        DBMS_OUTPUT.PUT_LINE('principle amount | ' || V_PRINCIPLE_CHARGE||' | charge | '||V_TRX_CHARGE); 
        
        IF V_PRINCIPLE_CHARGE <> IV_FIELD4 THEN
           OPEN C_1 FOR SELECT ('65' ||'|' || 0 || 
            '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Expired token with invalid amount.')DATAX FROM DUAL;
           RETURN ;
           
        ELSE 
          V_BLOCKED_AMOUNT := V_PRINCIPLE_CHARGE + V_TRX_CHARGE;
        END IF; 
    ELSIF V_TOKEN_CODE = '00' THEN
       v_amount := SUBSTR(TOKEN_FULFILLMENT_RESPONSE, Instr(TOKEN_FULFILLMENT_RESPONSE, '|',-1,1 ) +1);
       V_PRINCIPLE_CHARGE := SUBSTR(v_amount,1,Instr(v_amount, '_',1,1)-1);
       V_TRX_CHARGE := SUBSTR(v_amount,Instr(v_amount, '_',1,1)+1);
       
       V_BLOCKED_AMOUNT := V_PRINCIPLE_CHARGE + V_TRX_CHARGE;
       DBMS_OUTPUT.PUT_LINE('principle amount | ' || V_PRINCIPLE_CHARGE||' | charge | '||V_TRX_CHARGE); 
       
    END IF;
    
  
    -- now that the check for the amount is complete we proceed to unblocking the amount 
    IF V_TOKEN_CODE = '62' OR V_TOKEN_CODE = '00' THEN
         DBMS_OUTPUT.PUT_LINE('blocked amount | ' || V_BLOCKED_AMOUNT); 
         
         update tb_account set
         AVAILABLE_BAL = NVL(AVAILABLE_BAL , 0) + V_BLOCKED_AMOUNT , 
         BLOCKED_AMOUNT = NVL(BLOCKED_AMOUNT , 0) -  V_BLOCKED_AMOUNT
         WHERE ACCOUNT_NO = V_FIELD_102;
         
         DBMS_OUTPUT.PUT_LINE('affected rows | ' || SQL%ROWCOUNT); 
         IF SQL%ROWCOUNT < 1 THEN 
         
          
            dbms_output.put_line('nigga got here');
            ROLLBACK TO V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' 
            || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT-PHONENUMBER VALIDATION')DATAX FROM DUAL;
            
            RETURN;
            
            
         END IF;
         
         IF V_TOKEN_CODE = '62' THEN 
          TOKEN_FULFILLMENT_RESPONSE:= '63|0|0|0|0|Expired token';
         END IF;
    END IF ;
    
    -- we return the responses for the invalid token request then later proceed with the valid request
    
    IF V_TOKEN_CODE <> '00' THEN 
      OPEN C_1 FOR SELECT TOKEN_FULFILLMENT_RESPONSE AS DATAX FROM DUAL;
      RETURN;
    END IF;
    
    EXCEPTION WHEN OTHERS THEN 
      RAISE;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' 
            || 0 || '|' || 0 || '|' || 0 || '|' || 'Failed to validate token')DATAX FROM DUAL;
            
      return;
    END;
    -- we proceed to process the request through post mini as a valid transaction now
--    BEGIN
--    UPDATE TB_CARDLESS_TRANSACTIONS SET CASHED_OUT = 0 WHERE CASHED_OUT = 1;
--      COMMIT;
--    END;
    
   BEGIN 
    
    A_SP_POST_MINI_TRANSACTIONS(IV_MSGTYPE, IV_FIELD2 ,IV_FIELD3, IV_FIELD4, IV_FIELD7, 
    IV_FIELD11, IV_FIELD24 , IV_FIELD32, IV_FIELD35  ,
    IV_FIELD37 , IV_FIELD65  , IV_FIELD68 , IV_FIELD90  , IV_FIELD100, IV_FIELD101 , V_FIELD_102, IV_FIELD103 ,
    IV_COMMISSION, IV_CUSTCURRENCY  , IV_TERMINALID , IV_USERID   , IV_TRNCODE  , IV_EXTERNALREFNO ,  C_1 );
    
    
    EXCEPTION WHEN OTHERS THEN
      RAISE;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' 
            || 0 || '|' || 0 || '|' || 0 || '|' || 'Failed to process transaction')DATAX FROM DUAL;
      RETURN;         
    
  END;
  
  
END A_SP_CARDLESS_FULFILLMENT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CARDLESS_INITIATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_CARDLESS_INITIATION" (
  IV_PHONE_NUMBER IN NVARCHAR2,
  IV_AMOUNT IN NUMBER ,
  IV_TOKEN_HASH IN NVARCHAR2,
  IV_FIELD37 IN NVARCHAR2,
  IV_CHANNEL IN NVARCHAR2,
  C_1 OUT SYS_REFCURSOR
) AS 

V_COUNT NUMBER :=0;
V_ACCOUNT_NO NVARCHAR2(20) :='';
V_LIMIT_CHECK NUMBER :=0;
V_CURRENT_TIME TIMESTAMP := SYSTIMESTAMP;
V_VALIDITY_TIME NUMBER :=0;
V_EXPIRING_TIME NVARCHAR2(50) :='';
V_GET_CHARGES NUMBER(18) :=0;
V_GET_EXCISE_DUTY NUMBER(18) :=0;
V_EXCISE_DUTY_VARIANCE NUMBER(18) :=0;
V_CUMILATIVE_AMOUNT NUMBER(18) :=0;
V_TOTAL_CHARGE number(18) := 0;
V_ACTUAL_BAL VARCHAR2(18) :='';
V_AVAIL_BAL VARCHAR2(18) :='';
V_BALANCES VARCHAR2(50) :='';
BEGIN

  V_VALIDITY_TIME :=  FN_GETGENERAL_PARAMS('TOKEN_EXPIRATION_TIME');
  
  V_EXPIRING_TIME := TO_CHAR (V_CURRENT_TIME + (1/1440*V_VALIDITY_TIME), 'MM/DD/YYYY HH:MI:SS AM' );
  
  

  -- check if a transaction with the transaction id exists;
  SELECT COUNT(FIELD37) INTO V_COUNT FROM TB_CARDLESS_TRANSACTIONS WHERE FIELD37 = IV_FIELD37 AND ROWNUM =1;
  
  IF V_COUNT < 1 THEN
    OPEN c_1 FOR SELECT '01' as Resp_Code,'Transaction with a similar Reference found' as Resp_Desc FROM DUAL;
  END IF;
  
  -- insert the transaction 
   -- validate the amount if within limits
    V_LIMIT_CHECK := FN_CHECK_TRX_LIMITS(IV_AMOUNT , 'CARDLESS_WITHDRAWAL_INITIATION');
      
    IF V_LIMIT_CHECK = -1 THEN
       OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Transaction amount below the set limit.' FROM DUAL;
       return;
    END IF;
    
    IF V_LIMIT_CHECK = 1 THEN
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Transaction amount below the set limit.' FROM DUAL;
      return;
    END IF ;
    
        --get charges for the transaction
    V_GET_CHARGES := FN_GET_CHARGES('410000',IV_AMOUNT,IV_CHANNEL,'CARDLESS_WITHDRAWAL_INITIATION','','');
    V_EXCISE_DUTY_VARIANCE := FN_GETGENERAL_PARAMS('EXCISE_DUTY');
    
    V_GET_EXCISE_DUTY := ROUND(V_GET_CHARGES*V_EXCISE_DUTY_VARIANCE/100);
    V_CUMILATIVE_AMOUNT := V_GET_CHARGES + V_GET_EXCISE_DUTY + IV_AMOUNT;
    
    V_TOTAL_CHARGE := V_GET_CHARGES + V_GET_EXCISE_DUTY;
  
  INSERT INTO TB_CARDLESS_TRANSACTIONS (PHONE_NUMBER , AMOUNT , TOKEN_HASH , FIELD37, TRANSACTION_TIME, EXPIRY_DATE, TRX_CHARGE)
  VALUES (IV_PHONE_NUMBER, IV_AMOUNT, IV_TOKEN_HASH, IV_FIELD37,V_CURRENT_TIME , V_EXPIRING_TIME, V_TOTAL_CHARGE);
  
 
  -- proceed to block the amount that the customer initiated 
  
  SELECT ACCOUNT_NO,ACTUAL_BAL,AVAILABLE_BAL  INTO V_ACCOUNT_NO,V_ACTUAL_BAL,V_AVAIL_BAL FROM TB_ACCOUNT 
    WHERE CUSTOMER_NO = IV_PHONE_NUMBER AND ACCOUNT_CLASS = '256' OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
    

  
  UPDATE TB_ACCOUNT SET 
    AVAILABLE_BAL = NVL(AVAILABLE_BAL , 0 ) - (V_CUMILATIVE_AMOUNT),
    BLOCKED_AMOUNT = NVL(BLOCKED_AMOUNT , 0) + (V_CUMILATIVE_AMOUNT)
    WHERE ACCOUNT_NO = V_ACCOUNT_NO;
    
  -- proceed to validate if the blocked amount goes below the account set limit
  
  V_AVAIL_BAL := V_AVAIL_BAL - V_CUMILATIVE_AMOUNT;
  
  V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_ACCOUNT_NO , 'D');
  
    dbms_output.put_line('validity check | '||V_LIMIT_CHECK);
  
    IF V_LIMIT_CHECK < 0 THEN
       ROLLBACK ;
       
       
       OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Transaction exceeds the minimum account balance set. Try a smaller 
       amount.' FROM DUAL;
       RETURN;
    END IF;
    
    V_BALANCES := '00|'
      ||V_AVAIL_BAL ||'|'||V_ACTUAL_BAL||'|0|0|Successful';
   OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Cardless Initiation was successful' AS RESP_DESC,V_BALANCES AS BALANCES  FROM DUAL;
  
END A_SP_CARDLESS_INITIATION;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CHANGE_AGENT_PIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_CHANGE_AGENT_PIN" (
    iv_AGENT_CODE NVARCHAR2,
    iv_PIN NVARCHAR2,
    iv_OldPIN NVARCHAR2,
    V_CHANNEL NVARCHAR2,
    V_DIVICE_ID NVARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  V_COUNT NUMBER(1) := 0;

  V_ACTIVE NUMBER :=0;
  V_PASS_KEY NVARCHAR2(250) :='';
  V_STORED_AGENT_CODE NVARCHAR2(50) := '';
  V_ID NUMBER :=0;
BEGIN
--INSERT INTO TB_SP_ERROR_LOG (ERROR_MESSAGE,CUSTOM_ERROR_MESSAGE) VALUES (iv_PHONE_NUMBER,iv_PIN);
  ---CHECK IF CUSTOMER EXISTS


  IF V_CHANNEL = 'PORTAL' THEN

     SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ID FROM TB_AGENTS WHERE AGENT_CODE = iv_AGENT_CODE AND ROWNUM = 1);
          
      IF V_COUNT < 1 THEN 
        OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Agent code not found' AS RESP_DESC FROM dual;
        RETURN;
      END IF;


      SELECT ACTIVE , PASS_KEY, V_ID INTO V_ACTIVE , V_PASS_KEY,V_ID FROM TB_AGENTS WHERE AGENT_CODE = iv_AGENT_CODE
       AND ROWNUM = 1;

       IF V_ACTIVE < 1 THEN 
            OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Agent account not active' AS RESP_DESC FROM dual;
            RETURN;
       END IF;

       IF V_PASS_KEY <> iv_OldPIN THEN
            OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Old pass key is wrong' AS RESP_DESC FROM dual;
            RETURN;

        ELSE 
             UPDATE TB_AGENTS SET PASS_KEY = iv_PIN,FIRST_LOGIN = 0 WHERE ID = V_ID;     
             OPEN C_1 FOR SELECT '00' AS RESP_CODE,'Success' AS RESP_DESC FROM dual;
             RETURN;
       END IF;
        

  ELSIF V_CHANNEL = 'POS' OR V_CHANNEL = 'APP' THEN
        SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ID FROM VW_LINKED_AGENT_DEVICES WHERE DEVICE_IMEI = V_DIVICE_ID AND ROWNUM = 1);

        IF V_COUNT < 1 THEN
            OPEN c_1 FOR SELECT '01' AS Resp_Code , 'Device ID not found' AS Resp_Desc FROM DUAL;
            RETURN;
        END IF;


        SELECT AGENT_CODE, PASS_KEY, ACTIVE,ID INTO V_STORED_AGENT_CODE , V_PASS_KEY, V_ACTIVE,V_ID 
        FROM VW_LINKED_AGENT_DEVICES WHERE DEVICE_IMEI = V_DIVICE_ID AND ROWNUM = 1;
        
        

        IF V_STORED_AGENT_CODE <> iv_AGENT_CODE THEN
            OPEN c_1 FOR SELECT '01' AS Resp_Code , 'Agent code not linked to the device' 
            AS Resp_Desc FROM DUAL;
            RETURN;
        END IF;

        IF V_ACTIVE < 1 THEN    
            OPEN c_1 FOR SELECT '01' AS Resp_Code , 'Device not active' 
            AS Resp_Desc FROM DUAL;
            RETURN;
        END IF;

        IF V_PASS_KEY <> iv_OldPIN THEN
            OPEN c_1 FOR SELECT '01' AS Resp_Code , 'Incorrect old pin' 
            AS Resp_Desc FROM DUAL;
            RETURN;
        ELSE 
            DBMS_OUTPUT.PUT_LINE(V_ID);
             UPDATE TB_AGENT_DEVICELINKING SET PIN = iv_PIN , PASS_KEY = iv_PIN, FIRSTLOGIN = 0 WHERE 
                ID = V_ID;
            OPEN c_1 FOR SELECT '00' AS Resp_Code , 'Success' 
            AS Resp_Desc FROM DUAL;
            RETURN;
        END IF;
  ELSE
    OPEN c_1 FOR SELECT '01' AS Resp_Code , 'Channel not found' AS Resp_Desc FROM DUAL;
    RETURN;
  END IF; 

EXCEPTION
WHEN OTHERS THEN  
    RAISE;
  ROLLBACK;
      OPEN c_1 FOR SELECT '57' as Resp_Code,'Error occured PIN Change Failed' as Resp_Desc FROM DUAL;
     RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CHANGE_USER_PASSWORD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CHANGE_USER_PASSWORD" 
(
  IV_USERNAME IN VARCHAR2 
, IV_OLD_PASSWORD IN VARCHAR2 
, IV_NEW_PASSWORD IN VARCHAR2 
, C_1 IN OUT SYS_REFCURSOR 
) AS 

V_COUNT NUMBER :=0;
V_OLD_PASSWORD NVARCHAR2(100) :='';

BEGIN

  SELECT COUNT(ID) INTO V_COUNT FROM TB_USER WHERE USER_NAME = IV_USERNAME;

  IF V_COUNT < 1 THEN 
    OPEN C_1 FOR SELECT '01' "RESP_CODE",'User Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;

  SELECT PASSWORD_HASH INTO V_OLD_PASSWORD FROM TB_USER WHERE USER_NAME = IV_USERNAME;

  IF V_OLD_PASSWORD <> IV_OLD_PASSWORD THEN
     OPEN C_1 FOR SELECT '02' "RESP_CODE",'wrong old password provided' "RESP_DESC" FROM "SYS"."DUAL" "A1";
     RETURN;
  END IF;

  UPDATE TB_USER SET PASSWORD_HASH = IV_NEW_PASSWORD, FIRST_LOGIN= 0 WHERE USER_NAME = IV_USERNAME;
   OPEN C_1 FOR SELECT '00' "RESP_CODE",'password changed successfully' "RESP_DESC" FROM "SYS"."DUAL" "A1";   
  RETURN;
END A_SP_CHANGE_USER_PASSWORD;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_CHECK_TOKEN_EXPIRY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_CHECK_TOKEN_EXPIRY" AS 


v_tokens_array json_array_t;
v_token_object json_object_t;

v_total_blocked_amount number(18) :=0;
v_account_no varchar(20) :='';
v_field_37 varchar2(20) :='';
BEGIN

  v_tokens_array := json_array_t(FN_GET_UNEXPIRED_TOKENS);
  
  
  IF v_tokens_array.get_size > 0 then
    
    for indx in 0 .. v_tokens_array.get_size - 1 
    
    loop 
        v_token_object := TREAT(v_tokens_array.get(indx) AS json_object_t);
        
        dbms_output.put_line(v_token_object.to_string);
        
        v_total_blocked_amount := v_token_object.get_string('BLOCKED_AMOUNT');
        v_account_no := v_token_object.get_string('PHONE_NUMBER')||'001';
        v_field_37 := v_token_object.get_string('FIELD37');
        
        dbms_output.put_line('account number |'||v_account_no);
        
        update tb_account set available_bal = (available_bal + v_total_blocked_amount) , 
        blocked_amount = (blocked_amount - v_total_blocked_amount) where account_no = v_account_no and rownum = 1 ;
        
        update tb_cardless_transactions set 
        EXPIRED = '1' WHERE FIELD37 = v_field_37 AND ROWNUM = 1 ;
        
    end loop;
  
  end if;
  
  
  -- we use this stored procedure 
  exception when others then 
   raise;
  ROLLBACK;
END A_SP_CHECK_TOKEN_EXPIRY;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CHECK_TXN_LIMIT_GLOBAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CHECK_TXN_LIMIT_GLOBAL" (
    IV_FIELD2   IN VARCHAR2,
    IV_FIELD4   IN NUMBER DEFAULT 0,
    IV_FIELD24  IN VARCHAR2,
    IV_FIELD32  IN VARCHAR2,
    IV_FIELD100 IN VARCHAR2,
    IV_FIELD102 IN VARCHAR2,
    IV_CURRENCY IN VARCHAR2 DEFAULT 'UGX',
    c_1         IN OUT SYS_REFCURSOR)
AS
  V_RESP_CODE NVARCHAR2(50)       := '00';
  V_RESP_NARRATION NVARCHAR2(300) := 'Still within the limits';
  V_DR_AMOUNT              NUMBER(18,5)        := 0;
  V_TXN_AMOUNT             NUMBER(18,5)        := IV_FIELD4;
  V_DEFAULT_LIMIT_WALLET   NUMBER(18,5)        := 0;
  V_DEFAULT_LIMIT_CBS      NUMBER(18,5)        := 0;
  V_TXN_LIMIT              NUMBER(18,5)        := 0;
  V_DAILY_LIMIT            NUMBER(18,5)        := 0;
  V_COUNT                  NUMBER(1)           := 0;
  V_DR_Amount_perAcc       NUMBER(18,5)        := 0;
  V_WORKING_DATE           DATE := SYSDATE;
  V_PerCustTxnLimit        NUMBER(18,5) := 0;
  V_DR_Amount_Wal          NUMBER(18,5) := 0;
  V_DR_Amount_Core         NUMBER(18,5) := 0;
  V_TotalTransacted_PerAcc NUMBER(18,5) := 0;
  V_DR_Amount_FCY_perAcc   NUMBER(18,5) := 0;
  V_TotalTransacted        NUMBER(18,5) := 0;
  V_DR_Amount_FCY          NUMBER(18,5) := 0;
  V_LimitBalance           NUMBER(18,5) := 0;
  V_DefaultLimit_Global    NUMBER(18,5) := 0;

  -- limit variables from tb_services
  V_minimum_trx_limit NUMBER(18,5) :=0;
  V_maximum_trx_limit NUMBER(18,5) :=0;

--  this is to be used for checking the total transactions performed by the number
  V_total_0200_value NUMBER(18,5) :=0;
  v_total_0400_value NUMBER(18,5) :=0;
  V_total_transactions_value NUMBER(18,5) :=0;
  
  V_daily_transaction_limit number(18) := 15000000 ; -- this is the default transaction amount 
--  V_count number(2) := 0 ; -- this is to check if the provided account number is a valid account number
  


BEGIN

--  FETCH WORKING DATE;
    SELECT WORKINGDATE  INTO V_WORKING_DATE FROM TB_DATE_SETTINGS WHERE ROWNUM = 1;
    
    

  
  IF IV_FIELD100 = 'BI' OR IV_FIELD100 = 'MINISTATE' OR IV_FIELD100 = 'LOYALITY_COLLECTION' THEN
  
    V_RESP_CODE     :='00';
      V_RESP_NARRATION:= 'okay';
      OPEN c_1 FOR SELECT V_RESP_CODE,
      V_RESP_NARRATION FROM DUAL;
     RETURN;
  END IF;
  
  BEGIN   
  SELECT TRANSACTION_LIMIT_MIN , TRANSACTION_LIMIT_MAX INTO V_minimum_trx_limit,V_maximum_trx_limit 
   FROM TB_SERVICES WHERE FIELD100 = IV_FIELD100 AND ROWNUM = 1;
   dbms_output.put_line(V_minimum_trx_limit);    

    IF IV_FIELD4 < V_minimum_trx_limit THEN -- check minimum limit of the transaction
      V_RESP_CODE     :='17';
      V_RESP_NARRATION:= 'Amount below set limit';
      OPEN c_1 FOR SELECT V_RESP_CODE,
      V_RESP_NARRATION FROM DUAL;
     RETURN;
    END IF;
    
    dbms_output.put_line('maximum limit |'||v_maximum_trx_limit); 

    IF IV_FIELD4 > v_maximum_trx_limit THEN -- check maximum limit of the transaction
      V_RESP_CODE     :='16';
      V_RESP_NARRATION:= 'Amount exceeds set limit';
      OPEN c_1 FOR SELECT V_RESP_CODE,
      V_RESP_NARRATION FROM DUAL;
     RETURN;
    END IF;
    -- get working date
--    BEGIN
--         SELECT SYSDATE INTO V_WORKING_DATE FROM DUAL;
--         
--         dbms_output.put_line(V_WORKING_DATE); 
--         EXCEPTION
--         WHEN OTHERS THEN
--          V_RESP_CODE     :='01';
--          V_RESP_NARRATION:= 'Error fetching Working Date';
--          OPEN c_1 FOR SELECT V_RESP_CODE,
--          V_RESP_NARRATION FROM DUAL;
--    RETURN;
--    END;

    dbms_output.put_line(V_WORKING_DATE); 


    -- check for the daily maximum limit of transaction by getting the total 0200 - total 0400 transactions

    SELECT SUM(NVL(FIELD4 , 0)) INTO V_total_0200_value FROM TB_MESSAGES_EXTERNAL WHERE 
        FIELD0 = '0200' AND
        FIELD2 = IV_FIELD2 AND  
        FIELD3 NOT IN ('150000','210000') AND 
        DATEX >=V_WORKING_DATE AND 
        REVERSED = 0 and field39 in ('00')
        ORDER BY ID DESC;

        dbms_output.put_line('SUCCESSFUL -- '||V_total_0200_value); 
    
     -- check for the total transactions that have been reversed as well
      SELECT nvl(SUM(NVL(FIELD4 , 0)),0) INTO v_total_0400_value FROM TB_MESSAGES_EXTERNAL WHERE 
        FIELD0 = '0200' AND
        FIELD102       = IV_FIELD102 AND  
        FIELD3 NOT IN ('150000','210000') AND 
        DATEX >=V_WORKING_DATE AND 
        REVERSED = 1 and field39 in ('00')
        ORDER BY ID DESC;
        
        dbms_output.put_line('TOTAL REVERSAL-- '||v_total_0400_value);

        -- fetch the total maximum limit of the day from general params as well

        V_total_transactions_value := V_total_0200_value + IV_FIELD4 - v_total_0400_value ;
        
        dbms_output.put_line('TOTAL TRX_VALUE -- '||V_total_transactions_value);

        if V_total_transactions_value > 15000000 THEN --- PICK THIS VALUE FROM GENERAL_PARAMS 
              -- check total amount debited from the account 
             V_RESP_CODE     :='19';
             V_RESP_NARRATION:= 'You have exceeded the system daily limit. try a smaller limit';
            OPEN c_1 FOR SELECT V_RESP_CODE, V_RESP_NARRATION FROM DUAL;
            RETURN;
        END IF;

        -- remember to configure 18 and 19 on tb_error_codes for to define the above errors to check limits
        dbms_output.put_line(V_total_transactions_value);        

    -- check total amount debited from the account 
    V_RESP_CODE     :='00';
    V_RESP_NARRATION:= 'Continue';
   OPEN c_1 FOR SELECT V_RESP_CODE, V_RESP_NARRATION FROM DUAL;
   RETURN;

  EXCEPTION WHEN OTHERS THEN    
    raise;
    V_RESP_CODE     :='18'; -- configure this later 
    V_RESP_NARRATION:= 'Error fetching minimum and maximum transactions for the service';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;



  END;

  -- CHECK FOR MAXIMUM BALANCE OF THE ACCOUNT TO BE CREDITED 
  -- CHECK MAXIMUM DAILY TRANSACTION FOR THE ACCOUNT 

  OPEN c_1 FOR SELECT V_RESP_CODE, V_RESP_NARRATION FROM DUAL;
  RETURN;--ESB can continue while i punch my stuff
  BEGIN
    SELECT WORKINGDATE INTO V_WORKING_DATE FROM TB_DATE_SETTINGS;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error fetching Working Date';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  BEGIN
    SELECT LIMIT_AMOUNT
    INTO V_DEFAULT_LIMIT_WALLET
    FROM TB_DEFAULT_LIMIT
    WHERE LIMIT_TYPE='WALLET'
    AND APPROVED    = 1
    AND ROWNUM      =1;
    
    SELECT LIMIT_AMOUNT
    INTO V_DEFAULT_LIMIT_CBS
    FROM TB_DEFAULT_LIMIT
    WHERE LIMIT_TYPE='CBS'
    AND APPROVED    = 1
    AND ROWNUM      =1;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error fetching default Limits';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    ROLLBACK;
    RETURN;
  END;
  BEGIN
  
    -- get per transaction limit and daily Txn limits
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM TB_TRANSACTION_LIMIT
      WHERE TXN_TYPE = IV_FIELD100
      AND APPROVED   = 1
      );
    IF V_COUNT > 1 THEN
      SELECT TXN_LIMIT,
        DAILY_LIMIT
      INTO V_TXN_LIMIT,
        V_DAILY_LIMIT
      FROM TB_TRANSACTION_LIMIT
      WHERE TXN_TYPE = IV_FIELD100
      AND APPROVED   = 1 ;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error fetching Transaction Limit';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  BEGIN
    --check customer initiated txn (Total) & Omit reversals
    --PerCustTxnLimit
    IF(IV_field24 NOT IN('MM','MB')) THEN --skip wallet originated txns
      SELECT NVL(Daily_txn_limit,0)
      INTO V_PerCustTxnLimit
      FROM TB_LINKED_ACCOUNTS
      WHERE LinkedAccount = IV_FIELD102;
    ELSE--what happens to Wallet originated Trans?
      SELECT 0 INTO V_PerCustTxnLimit FROM DUAL;
    END IF;
    IF IV_field24 IN('BB','BM') AND V_PerCustTxnLimit > 0 THEN --GET CORE TXNS WITH SPECIAL LIMITS
      SELECT NVL(SUM(FIELD4),0)
      INTO V_DR_Amount_perAcc
      FROM TB_MESSAGES_EXTERNAL
      WHERE WORKING_DATE                                    =V_WORKING_DATE
      AND FIELD102                                          = IV_FIELD102
      AND REVERSED                                          = 0
      AND FIELD3 NOT                                       IN('150000');--->OMIT CHARGES LOOK-UP
    ELSIF IV_field24    IN('BB','BM') AND V_PerCustTxnLimit = 0 THEN     --GET CORE TXNS WITHOUT SPECIAL LIMITS
      SELECT NVL(SUM(FIELD4),0)
      INTO V_DR_Amount_Core
      FROM TB_MESSAGES_EXTERNAL
      WHERE WORKING_DATE = V_WORKING_DATE
      AND Field24       IN('BB','BM')
      AND FIELD102       = IV_FIELD102
      AND REVERSED       = 0
      AND FIELD3 NOT    IN('150000');     --->OMIT CHARGES LOOK-UP
    ELSIF IV_field24    IN('MM','MB') THEN --GET WALLET TXNS
      SELECT NVL(SUM(FIELD4),0)
      INTO V_DR_Amount_Wal
      FROM TB_MESSAGES_EXTERNAL
      WHERE WORKING_DATE = V_WORKING_DATE
      AND Field24       IN('MM','MB')
      AND FIELD102       = IV_FIELD102
      AND REVERSED       = 0
      AND FIELD3 NOT    IN('150000');--->OMIT CHARGES LOOK-UP
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error Checking Total Debited Amount per Customer Per day(Today)';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  BEGIN
    --Check Transaction Limit
    IF (V_TXN_AMOUNT   > V_TXN_LIMIT) THEN
      V_RESP_CODE     :='02';
      V_RESP_NARRATION:= 'You have surpassed this transaction limit amount of Ksh. '|| V_TXN_LIMIT || 'please try a smaller amount.';
      OPEN c_1 FOR SELECT V_RESP_CODE,
      V_RESP_NARRATION FROM DUAL;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error Comparing Transaction limit and TxnAmount';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  BEGIN
    --Check Transaction Limit
    IF (V_TXN_AMOUNT   > V_DAILY_LIMIT) THEN
      V_RESP_CODE     :='03';
      V_RESP_NARRATION:= 'You have exceeded the system daily limit of Ksh. '|| V_DAILY_LIMIT || 'please try a smaller amount.';
      OPEN c_1 FOR SELECT V_RESP_CODE,
      V_RESP_NARRATION FROM DUAL;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error Comparing Daily limit and TxnAmount)';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  BEGIN
    --get total transacted  today plus this txn amount, see if it exceeds the per account limits
    V_TotalTransacted_PerAcc := V_DR_Amount_perAcc + V_DR_Amount_FCY_perAcc + V_Txn_Amount; --add the txn amount
    --handle customers with no speciallimits, they are governed by the system default limit
    V_TotalTransacted   := V_DR_Amount_Core + V_DR_Amount_Wal + V_DR_Amount_FCY + V_Txn_Amount; --add the txn amount
    IF(V_PerCustTxnLimit > 0 AND (V_Txn_Amount > V_PerCustTxnLimit OR V_TotalTransacted_PerAcc > V_PerCustTxnLimit)) THEN
      V_LimitBalance    := GREATEST((V_PerCustTxnLimit - V_DR_Amount_perAcc),0); --Avoid negatives, put 0
      IF V_LimitBalance  = 0 THEN
        V_RESP_CODE     :='04';
        V_RESP_NARRATION:= 'This transaction amount exceeds your daily set core account limit of Ksh. '||V_PerCustTxnLimit||',                                 
your limit balance for today is Ksh.'||V_LimitBalance;
      END IF;
    ELSIF V_TotalTransacted > V_DefaultLimit_Global AND V_PerCustTxnLimit = 0 THEN
      V_LimitBalance       := GREATEST((V_DefaultLimit_Global - V_DR_Amount_Core - V_DR_Amount_Wal),0);
      IF V_LimitBalance     = 0 THEN
        V_RESP_CODE        :='05';
        V_RESP_NARRATION   := 'This transaction amount exceeds the daily global limit amount of Ksh. '||V_DefaultLimit_Global||',       
your limit balance for today is Ksh.'||V_LimitBalance;
      END IF;
    ELSIF IV_field24                                                                                       IN('MM','MB') AND (V_DR_Amount_Wal + V_TXN_AMOUNT) >= V_DEFAULT_LIMIT_WALLET THEN
      V_LimitBalance                                                    := GREATEST((V_DEFAULT_LIMIT_WALLET - V_DR_Amount_Wal),0);
      IF V_LimitBalance                                                  = 0 THEN
        V_RESP_CODE                                                     :='06';
        V_RESP_NARRATION                                                := 'This transaction amount exceeds the daily wallet limit amount of Ksh. '||V_DEFAULT_LIMIT_WALLET||',       
your limit balance for today is Ksh.'||V_LimitBalance;
      END IF;
    END IF;
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  EXCEPTION
  WHEN OTHERS THEN
    V_RESP_CODE     :='01';
    V_RESP_NARRATION:= 'Error)';
    OPEN c_1 FOR SELECT V_RESP_CODE,
    V_RESP_NARRATION FROM DUAL;
    RETURN;
  END;
  -- If it reaches here its a Success
  OPEN c_1 FOR SELECT V_RESP_CODE,V_RESP_NARRATION FROM DUAL;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_COMPLETE_USSD_REG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_COMPLETE_USSD_REG" (
  IV_CUSTOMER_NO NVARCHAR2,
  IV_REFEREE_CODE NVARCHAR2,
  IV_GENDER NVARCHAR2,
  IV_OCCUPATION NVARCHAR2,
  IV_EMAIL NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR
) AS 

v_loyality_point_processing nvarchar2(50) :='';

BEGIN

  update tb_customer set occupation = IV_OCCUPATION , gender = IV_GENDER , email_address = IV_EMAIL 
  WHERE CUSTOMER_NO = IV_CUSTOMER_NO;
  
   v_loyality_point_processing := FN_PROCESS_REFERRAL(IV_CUSTOMER_NO, IV_REFEREE_CODE);
    if SUBSTR(v_loyality_point_processing, 1, Instr(v_loyality_point_processing, '|', 1, 1) -1) <> '0' then
        UPDATE TB_INVITED_FRIENDS SET STATUS = 'ACCEPTED' WHERE invited_phonenumber = IV_CUSTOMER_NO ;
    end if; 
  
  OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Registration completed successfully' , v_loyality_point_processing as GEMIFICATION
   FROM DUAL;
   
   EXCEPTION WHEN OTHERS THEN
    rollback;
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Failed to complete USSD registration' , '0|0' as GEMIFICATION
   FROM DUAL;
    
  
END A_SP_COMPLETE_USSD_REG;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_AGENT_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_AGENT_ACCOUNT" (
    V_AGENT_CODE        IN NVARCHAR2,
    IV_CREATED_BY      IN NVARCHAR2,
    IV_APPROVED_BY     IN NVARCHAR2,
    IV_ACCOUNT_CLASS  IN NVARCHAR2,
    IV_MWALLET_ACCOUNT IN NVARCHAR2)
AS
  V_COUNTRY NVARCHAR2(10)             :='UG';
  V_ACCOUNTCLASS NVARCHAR2(5)         :=IV_ACCOUNT_CLASS;
  V_CUSTOMERNO NVARCHAR2(20)          :=V_AGENT_CODE;
  V_Currency NVARCHAR2(5)             :='UGX';
  V_FIRST_NAME NVARCHAR2(50)          :='';
  V_SECOND_NAME NVARCHAR2(50)         :='';
  V_LAST_NAME NVARCHAR2(50)           :='';
  V_IDENTIFICATION_ID NVARCHAR2(50)   :='';
  V_IDENTIFICATION_TYPE NVARCHAR2(50) :='';
  V_EMAIL_ADDRESS NVARCHAR2(50)       :='';
  V_DATE_OF_BIRTH DATE;
  V_GENDER NVARCHAR2(5)           :='';
  V_LOCAL_BRANCH_ID NVARCHAR2(10) :='';
  V_BUSINESS_NUMBER NVARCHAR2(20) :='';
BEGIN
  BEGIN
    SELECT FIRST_NAME,
      SECOND_NAME,
      LAST_NAME,
      ID_NUMBER,
      ID_TYPE,
      EMAIL,
      DOB,
      GENDER,
      BRANCH,
      BUSINESSMOBILE
    INTO V_FIRST_NAME,
      V_SECOND_NAME,
      V_LAST_NAME,
      V_IDENTIFICATION_ID,
      V_IDENTIFICATION_TYPE,
      V_EMAIL_ADDRESS,
      V_DATE_OF_BIRTH,
      V_GENDER,
      V_LOCAL_BRANCH_ID,
      V_BUSINESS_NUMBER
    FROM TB_AGENTS
    WHERE AGENT_CODE  = V_AGENT_CODE
    ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
     DBMS_OUTPUT.PUT_LINE(V_FIRST_NAME);

  EXCEPTION
  WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('exeption 3');
    RAISE;
    ROLLBACK;
  END;
  BEGIN
    INSERT
    INTO TB_ACCOUNT
      (
        CUSTOMER_NO,
        ACCOUNT_NO,
        ACCOUNT_NAME,
        ACCOUNT_CLASS,
        BRANCH_ID,
        PHONE_NUMBER,
        CURRENCY,
        CREATED_BY,
        PARTIAL_REGISTRATION,
        ALLOW_CR,
        ALLOW_DR,
        Allow_Overdraft,
        DORMANT,
        OPENING_DATE,
        BLOCKED,
        STOPPED,
        IS_FROZEN,
        CHEQUE_BOOK_FACILITY,
        ATM_FACILITY,
        APPROVED_BY,
        APPROVED_ON,
        OPENING_BAL,
        last_transaction_date
      )
      VALUES
      (
        V_CUSTOMERNO,
        IV_MWALLET_ACCOUNT,
        V_FIRST_NAME
        || V_LAST_NAME,
        v_ACCOUNTCLASS,
        V_LOCAL_BRANCH_ID,
        V_BUSINESS_NUMBER,
        V_Currency,
        IV_CREATED_BY,
        0,
        'Y',
        'Y',
        0,
        'N',
        systimestamp,
        'N',
        'N',
        'N',
        'N',
        'N',
        IV_CREATED_BY,
        systimestamp,
        0,
        systimestamp
      );
        DBMS_OUTPUT.PUT_LINE('insert agent details is successful');
  EXCEPTION
  WHEN OTHERS THEN
   DBMS_OUTPUT.PUT_LINE('exeption while creating account');
    RAISE;
    ROLLBACK;
  END;
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('exception 2');
  RAISE;
  ROLLBACK;
END A_SP_CREATE_AGENT_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_GL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_GL" 
(
    iv_Prefix IN NVARCHAR2,
    iv_GL_Description IN NVARCHAR2,
	iv_CreatedBy IN NVARCHAR2, 
	iv_LoanGL IN NVARCHAR2 DEFAULT '0', ----Y/N
  c_1         IN OUT SYS_REFCURSOR
 )
AS 

v_Resp_Code NVARCHAR2(50)   := '00';
v_Narration NVARCHAR2(150);
v_GL_Code NVARCHAR2(50);
v_Series NVARCHAR2(10);
v_GLParent NVARCHAR2(10);
v_GLType CHAR(1);
v_Currency VARCHAR(3) :='UGX';
v_Length INT;
v_WorkingDate DATE;
v_FINANCIALYR NVARCHAR2(6);
v_FINANCIALPRD NVARCHAR2(3);
v_ParentGLDescription NVARCHAR2(300);
v_GLDescription NVARCHAR2(300);
v_ApprovedBy NVARCHAR2(100) := NULL;
v_BranchCode NVARCHAR2(4) := '001' ;
V_COUNT   NUMBER(1)  := 0;

BEGIN

 SAVEPOINT V_SAFEPOINT;
 BEGIN
    --CHECK IF ITS A VALID REQUEST
    SELECT COUNT(1) INTO V_COUNT FROM DUAL
        WHERE EXISTS
          (SELECT * FROM tb_GL_Definition WHERE Prefix=iv_Prefix );

        IF(V_COUNT = 0)
            THEN

                v_Resp_Code     :='01';
                v_Narration     := 'Invalid GL prefix';
                v_GL_Code   := '';

                OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_GL_Code FROM DUAL;

                RETURN;
        END IF;

    ----Reset count	  
        V_COUNT := 0;
    SELECT COUNT(1) INTO V_COUNT FROM DUAL
        WHERE EXISTS
          (SELECT * FROM tb_GL_Sequence WHERE  Prefix=iv_Prefix);

        IF(V_COUNT = 0)
        THEN	 
            INSERT INTO tb_GL_Sequence(Series,Prefix,Created_By,Created_On)
            SELECT DISTINCT Series,Prefix,iv_CreatedBy,SYSTIMESTAMP FROM tb_GL_Definition WHERE Prefix=iv_Prefix;	
        END IF;	

    EXCEPTION
      WHEN OTHERS THEN
            v_Resp_Code     :='01';
			v_Narration     := 'Could not insert new GL prefix';
			v_GL_Code   := '';
            OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_GL_Code FROM DUAL;
            RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        RETURN;
      END;

BEGIN
	v_GLDescription := UPPER(iv_GL_Description);
	SELECT WORKINGDATE,FinancialYear,FinancialPeriod INTO v_WORKINGDATE, v_FINANCIALYR, v_FINANCIALPRD FROM tb_Date_Settings ; 
	SELECT NVL(Series_Length,8),GL_Type,GL_PARENT  INTO v_Length, v_GLType, v_GLParent FROM tb_GL_Definition WHERE Prefix=iv_Prefix;
	SELECT CAST(NVL(Series,0) AS NUMBER(10))+1 INTO v_Series  FROM tb_GL_Sequence WHERE Prefix=iv_Prefix ;

	UPDATE tb_GL_Sequence SET Series = NVL(Series,0)+1 WHERE Prefix=iv_Prefix ;

	---v_GLParent := SUBSTR( (iv_Prefix||'00000000'), 1,v_Length);
	v_Series := SUBSTR( (iv_Prefix||'00000000'), 1,(v_Length- LENGTH(v_Series))) || v_Series ;

	v_GL_Code := v_Series;

	INSERT INTO tb_GL(
	GL_Code,GL_Description,GL_Prefix,GL_Parent,GL_TYPE,BRANCH_CODE,Financial_Cycle,Financial_Period,Profit_Account,Blocked,
	Created_By,Created_On,Approved,Approved_By,Approved_Date,Reworked,Allow_Back_Posting,Currency,Allocated, Allow_CR, Allow_DR,Loan_GL,ALLOW_OVERDRAFT,DECLINED)
	VALUES(v_Series,v_GLDescription,iv_Prefix,v_GLParent,v_GLType,v_BranchCode,v_FINANCIALYR,v_FINANCIALPRD,'N',0,iv_CreatedBy,SYSTIMESTAMP,0,
	v_ApprovedBy,SYSTIMESTAMP,0,1,v_Currency,0,1,1, iv_LoanGL,1,0);

	INSERT INTO tb_GL_Balance(GL_Code,Financial_Cycle,Financial_Period,DR_Bal_LCY,CR_Bal_LCY,GL_Balance,
	DR_Close_Balance,CR_Close_Balance,CR_Open_Balance,DR_Open_Balance,Created_By,Created_On,CR_Period_Balance,	DR_Period_Balance,Opening_Bal,Zero_Gl)
	VALUES(v_Series,v_FINANCIALYR,v_FINANCIALPRD,0,0,0,0,0,0,0,iv_CreatedBy,SYSTIMESTAMP,0,0,0,0);

EXCEPTION
      WHEN OTHERS THEN
            v_Resp_Code     :='01';
			v_Narration     := 'Could not create new GL Account';
			v_GL_Code   := '';
            OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_GL_Code FROM DUAL;
            RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        RETURN;
      END;

BEGIN
----Reset counts	  
V_COUNT := 0;

SELECT COUNT(1) INTO V_COUNT FROM DUAL
    WHERE EXISTS
      (SELECT * FROM tb_GL_Balance WHERE GL_Code=v_GLParent);

	IF(V_COUNT = 0)
	THEN

        ---create the GL parent
		SELECT  UPPER(DESCRIPTION) INTO v_ParentGLDescription FROM tb_GL_Definition  WHERE Prefix=iv_Prefix;

		INSERT INTO tb_GL(
		GL_Code,GL_Description,GL_Prefix,GL_Parent,GL_TYPE,BRANCH_CODE,Financial_Cycle,Financial_Period,Profit_Account,Blocked,
		Created_By,Created_On,Approved,Approved_By,Approved_Date,Reworked,Allow_Back_Posting,Currency,Allocated,Loan_GL, Allow_CR, Allow_DR,ALLOW_OVERDRAFT,DECLINED)
		VALUES(v_GLParent,v_GLDescription,iv_Prefix,v_GLParent,v_GLType,v_BranchCode,v_FINANCIALYR,v_FINANCIALPRD,'',0,iv_CreatedBy,SYSTIMESTAMP,0,
		v_ApprovedBy,SYSTIMESTAMP,0,0,v_Currency,0,iv_LoanGL,0,0,0,0);

		INSERT INTO tb_GL_Balance(GL_Code,Financial_Cycle,Financial_Period,DR_Bal_LCY,CR_Bal_LCY,GL_Balance,
		DR_Close_Balance,CR_Close_Balance,CR_Open_Balance,DR_Open_Balance,Created_By,Created_On,CR_Period_Balance,
		DR_Period_Balance,Opening_Bal,Zero_Gl)
		VALUES(v_GLParent,v_FINANCIALYR,v_FINANCIALPRD,0,0,0,0,0,0,0,iv_CreatedBy,SYSTIMESTAMP,0,0,0,0);

END IF;

EXCEPTION
  WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while creating Parent GL account';
    v_GL_Code   := '';
    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_GL_Code FROM DUAL;
    RETURN;
  END;



	v_Resp_Code     :='00';
    v_Narration     := 'Successful';
    v_GL_Code   := '';

    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration,v_GL_Code FROM DUAL;

COMMIT;
RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_GROUP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_GROUP" (
    IV_GROUP_NAME  IN VARCHAR2,
    IV_PHONENUMBER IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
    V_GROUP_ACCOUNT NVARCHAR2(20) :='';
    V_ID NUMBER                   :=NULL;
    V_GROUP_ID NVARCHAR2(20)      :='';
    V_MINIMUM_TO_VOTE           NUMBER      :=0;
    V_MAXIMUM_NUMBER_OF_MEMBERS NUMBER      :=0;
    V_GROUP_VOTE_PERCENTAGE     NUMBER      :=0;
    V_MINIMUM_NUMBER_OF_MEMBERS NUMBER      :=0;
    V_VOTE_EXPIRY               NUMBER      :=0;
    iv_Currency NVARCHAR2(20)               :='UGX';
BEGIN
SAVEPOINT V_SAFEPOINT;
  V_GROUP_ACCOUNT:= GROUPACCOUNT_SEQ.nextval;
  SELECT '203' ||LPAD(V_GROUP_ACCOUNT,12,0) INTO V_GROUP_ACCOUNT FROM dual;
  SELECT TB_GROUPS_ID_SEQ.nextval INTO V_ID FROM dual;
  SELECT 'GRP'||LPAD(V_ID,5,0) INTO V_GROUP_ID FROM dual;
  BEGIN
    SELECT ITEMVALUE
    INTO V_MINIMUM_TO_VOTE
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME='MINIMUM_TO_VOTE';
    ------========================
    SELECT ITEMVALUE
    INTO V_GROUP_VOTE_PERCENTAGE
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME='GROUP_VOTE_PERCENTAGE';
    ------========================
    SELECT ITEMVALUE
    INTO V_MINIMUM_NUMBER_OF_MEMBERS
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME='MINIMUM_NUMBER_OF_MEMBERS';
    SELECT ITEMVALUE
    INTO V_VOTE_EXPIRY
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME='VOTE_EXPIRY';
    --=================
    SELECT ITEMVALUE
    INTO V_MAXIMUM_NUMBER_OF_MEMBERS
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME='MAXIMUM_NUMBER_OF_MEMBERS';
  EXCEPTION
  WHEN OTHERS THEN
    -- RAISE;
    OPEN c_1 FOR SELECT '57' AS Resp_Code, 'Error Fetching Initial Group Params' AS Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
  INSERT
  INTO TB_GROUPS
    (
      GROUP_NAME,
      MEMBER_COUNT,
      GROUP_ID,
      MINIMUM_TO_VOTE,
      MANDATE,
      VOTE_PERCENTAGE,
      MINIMUM_NUMBER_OF_MEMBERS,
      GROUP_ADMIN,
      GROUP_ACCOUNT
    )
    VALUES
    (
      IV_GROUP_NAME,
      1,
      V_GROUP_ID,
      V_MINIMUM_TO_VOTE,
      IV_PHONENUMBER,
      V_GROUP_VOTE_PERCENTAGE,
      V_MINIMUM_NUMBER_OF_MEMBERS,
      IV_PHONENUMBER,
      V_GROUP_ACCOUNT
    );
  INSERT
  INTO TB_ACCOUNT
    (
      CUSTOMER_NO,
      ACCOUNT_NO,
      ACCOUNT_NAME,
      ACCOUNT_CLASS,
      BRANCH_ID,
      PHONE_NUMBER,
      CURRENCY,
      CREATED_BY,
      PARTIAL_REGISTRATION,
      ALLOW_CR,
      ALLOW_DR,
      Allow_Overdraft,
      DORMANT,
      OPENING_DATE,
      BLOCKED,
      STOPPED,
      IS_FROZEN,
      CHEQUE_BOOK_FACILITY,
      ATM_FACILITY,
      APPROVED_BY,
      APPROVED_ON,
      OPENING_BAL,
      last_transaction_date
    )
    VALUES
    (
      iv_PHONENUMBER,
      V_GROUP_ACCOUNT,
      IV_GROUP_NAME,
      '203',
      '001',
      iv_PHONENUMBER,
      iv_Currency,
      iv_PHONENUMBER,
      0,
      'Y',
      'Y',
      0,
      'N',
      SYSTIMESTAMP,
      'N',
      'N',
      'N',
      'N',
      'N',
      iv_PHONENUMBER,
      SYSTIMESTAMP,
      0,
      SYSTIMESTAMP
    );
     EXCEPTION
  WHEN OTHERS THEN
    RAISE;

    OPEN c_1 FOR SELECT '57' AS Resp_Code, 'Error Inserting into tb_Account' AS Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
    END;
    OPEN c_1 FOR SELECT '00' AS Resp_Code, 'Success' AS Resp_Desc_Acc FROM DUAL;

END A_SP_CREATE_GROUP;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_INSTITUTION_ACC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_INSTITUTION_ACC" (
    V_INST_ID            IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  V_WALLET_ACCOUNT NVARCHAR2(20) :='';
  V_ID NUMBER                    :=NULL;
  iv_Currency NVARCHAR2(20)       :='UGX';
  IV_INST_NAME NVARCHAR2(200)       :='';
  IV_BUSINESS_MOBILE NVARCHAR2(20)       :='';
  IV_CREATED_BY NVARCHAR2(20)       :='';

BEGIN
  SAVEPOINT V_SAFEPOINT;
  SELECT INSTITUTION_NAME,PHONE_NUMBER,APPROVED_BY INTO IV_INST_NAME,IV_BUSINESS_MOBILE,IV_CREATED_BY 
  FROM TB_INSTITUTIONS WHERE INSTITUTION_CODE = V_INST_ID
  AND ROWNUM=1;

  V_WALLET_ACCOUNT:= SACCO_ACCOUNT_SEQ.nextval;
  SELECT '205' ||LPAD(V_WALLET_ACCOUNT,12,0) INTO V_WALLET_ACCOUNT FROM dual;

  BEGIN

    INSERT
    INTO TB_ACCOUNT
      (
        CUSTOMER_NO,
        ACCOUNT_NO,
        ACCOUNT_NAME,
        ACCOUNT_CLASS,
        BRANCH_ID,
        PHONE_NUMBER,
        CURRENCY,
        CREATED_BY,
        PARTIAL_REGISTRATION,
        ALLOW_CR,
        ALLOW_DR,
        Allow_Overdraft,
        DORMANT,
        OPENING_DATE,
        BLOCKED,
        STOPPED,
        IS_FROZEN,
        CHEQUE_BOOK_FACILITY,
        ATM_FACILITY,
        APPROVED_BY,
        APPROVED_ON,
        OPENING_BAL,
        last_transaction_date
      )
      VALUES
      (
        V_INST_ID,
        V_WALLET_ACCOUNT,
        IV_INST_NAME,
        '205',
        '001',
        IV_BUSINESS_MOBILE,
        iv_Currency,
        IV_BUSINESS_MOBILE,
        0,
        'Y',
        'Y',
        0,
        'N',
        SYSTIMESTAMP,
        'N',
        'N',
        'N',
        'N',
        'N',
        IV_BUSINESS_MOBILE,
        SYSTIMESTAMP,
        0,
        SYSTIMESTAMP
      );

      UPDATE TB_INSTITUTIONS
      SET INSTITUTION_ACCOUNT = V_WALLET_ACCOUNT
      WHERE INSTITUTION_CODE  = V_INST_ID
      AND ROWNUM              =1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN c_1 FOR SELECT '57' AS   Resp_Code, 'Error Inserting into tb_Account' AS  Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  OPEN c_1 FOR SELECT '00' AS Resp_Code, 'Success' AS Resp_Desc_Acc FROM DUAL;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_SACCO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_SACCO" (
    IV_SACCO_NAME            IN VARCHAR2,
    IV_BUSINESS_MOBILE       IN VARCHAR2,
    IV_CONTACT_PERSON_MOBILE IN VARCHAR2,
    IV_CONTACT_PERSON_EMAIL  IN VARCHAR2,
    IV_PHYSICAL_ADDRESS      IN VARCHAR2,
    IV_POSTAL_ADDRESS        IN VARCHAR2,
    IV_CREATED_BY            IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  V_WALLET_ACCOUNT NVARCHAR2(20) :='';
  V_ID NUMBER                    :=NULL;
  V_SACCO_ID NVARCHAR2(20)       :='';
  iv_Currency NVARCHAR2(20)       :='UGX';
BEGIN
  SAVEPOINT V_SAFEPOINT;
  V_WALLET_ACCOUNT:= SACCO_ACCOUNT_SEQ.nextval;
  SELECT '205' ||LPAD(V_WALLET_ACCOUNT,12,0) INTO V_WALLET_ACCOUNT FROM dual;
  SELECT TB_SACCOS_ID_SEQ.nextval INTO V_ID FROM dual;
  SELECT 'SAC'||LPAD(V_ID,5,0) INTO V_SACCO_ID FROM dual;
  BEGIN

    INSERT
    INTO TB_ACCOUNT
      (
        CUSTOMER_NO,
        ACCOUNT_NO,
        ACCOUNT_NAME,
        ACCOUNT_CLASS,
        BRANCH_ID,
        PHONE_NUMBER,
        CURRENCY,
        CREATED_BY,
        PARTIAL_REGISTRATION,
        ALLOW_CR,
        ALLOW_DR,
        Allow_Overdraft,
        DORMANT,
        OPENING_DATE,
        BLOCKED,
        STOPPED,
        IS_FROZEN,
        CHEQUE_BOOK_FACILITY,
        ATM_FACILITY,
        APPROVED_BY,
        APPROVED_ON,
        OPENING_BAL,
        last_transaction_date
      )
      VALUES
      (
        IV_BUSINESS_MOBILE,
        V_WALLET_ACCOUNT,
        IV_SACCO_NAME,
        '205',
        '001',
        IV_BUSINESS_MOBILE,
        iv_Currency,
        IV_BUSINESS_MOBILE,
        0,
        'Y',
        'Y',
        0,
        'N',
        SYSTIMESTAMP,
        'N',
        'N',
        'N',
        'N',
        'N',
        IV_BUSINESS_MOBILE,
        SYSTIMESTAMP,
        0,
        SYSTIMESTAMP
      );

         INSERT
    INTO TB_SACCOS
      (
        ID,
        SACCO_ID,
        SACCO_NAMES,
        SACCO_WALLET_ACCOUNT,
        BRANCH_CODE,
        POSTAL_ADDRESS,
        CONTACT_PERSON_MOBILE,
        CONTACT_PERSON_EMAIL,
        BUSINESS_MOBILE,
        PHYSICAL_ADDRESS,
        CREATED_BY
      )
      VALUES
      (
        V_ID,
        V_SACCO_ID,
        IV_SACCO_NAME,
        V_WALLET_ACCOUNT,
        '1',
        IV_POSTAL_ADDRESS,
        IV_CONTACT_PERSON_MOBILE,
        IV_CONTACT_PERSON_EMAIL,
        IV_BUSINESS_MOBILE,
        IV_PHYSICAL_ADDRESS,
        IV_CREATED_BY
      );
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN c_1 FOR SELECT '57' AS   Resp_Code, 'Error Inserting into tb_Account' AS  Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  OPEN c_1 FOR SELECT '00' AS Resp_Code, 'Success' AS Resp_Desc_Acc FROM DUAL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_CREATE_SACCO_ACC
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CREATE_SACCO_ACC" (
    V_INST_ID            IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  V_WALLET_ACCOUNT NVARCHAR2(20) :='';
  V_ID NUMBER                    :=NULL;
  iv_Currency NVARCHAR2(20)       :='UGX';
  IV_INST_NAME NVARCHAR2(200)       :='';
  IV_BUSINESS_MOBILE NVARCHAR2(20)       :='';
  IV_CREATED_BY NVARCHAR2(20)       :='';

BEGIN
  SAVEPOINT V_SAFEPOINT;
  SELECT SACCO_NAMES,BUSINESS_MOBILE,APPROVED_BY INTO IV_INST_NAME,IV_BUSINESS_MOBILE,IV_CREATED_BY  FROM TB_SACCOS WHERE SACCO_ID = V_INST_ID
  AND ROWNUM=1;

V_WALLET_ACCOUNT:= SACCO_ACCOUNT_SEQ.nextval;
  SELECT '205' ||LPAD(V_WALLET_ACCOUNT,12,0) INTO V_WALLET_ACCOUNT FROM dual;

  BEGIN

    INSERT
    INTO TB_ACCOUNT
      (
        CUSTOMER_NO,
        ACCOUNT_NO,
        ACCOUNT_NAME,
        ACCOUNT_CLASS,
        BRANCH_ID,
        PHONE_NUMBER,
        CURRENCY,
        CREATED_BY,
        PARTIAL_REGISTRATION,
        ALLOW_CR,
        ALLOW_DR,
        Allow_Overdraft,
        DORMANT,
        OPENING_DATE,
        BLOCKED,
        STOPPED,
        IS_FROZEN,
        CHEQUE_BOOK_FACILITY,
        ATM_FACILITY,
        APPROVED_BY,
        APPROVED_ON,
        OPENING_BAL,
        last_transaction_date
      )
      VALUES
      (
        IV_BUSINESS_MOBILE,
        V_WALLET_ACCOUNT,
        IV_INST_NAME,
        '205',
        '001',
        IV_BUSINESS_MOBILE,
        iv_Currency,
        IV_BUSINESS_MOBILE,
        0,
        'Y',
        'Y',
        0,
        'N',
        SYSTIMESTAMP,
        'N',
        'N',
        'N',
        'N',
        'N',
        IV_BUSINESS_MOBILE,
        SYSTIMESTAMP,
        0,
        SYSTIMESTAMP
      );

      UPDATE TB_SACCOS
      SET SACCO_WALLET_ACCOUNT = V_WALLET_ACCOUNT
      WHERE SACCO_ID  = V_INST_ID
      AND ROWNUM              =1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN c_1 FOR SELECT '57' AS   Resp_Code, 'Error Inserting into tb_Account' AS  Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  OPEN c_1 FOR SELECT '00' AS Resp_Code, 'Success' AS Resp_Desc_Acc FROM DUAL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_CUSTOMER_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CUSTOMER_LOGIN" (
    IV_PHONENUMBER IN VARCHAR2,
    IV_IMEI_IMSI   IN VARCHAR2,
    IV_PIN         IN VARCHAR,
    IV_CHANNEL     IN VARCHAR,
    C_1            IN OUT SYS_REFCURSOR)
AS
  V_COUNT NUMBER                      :=0;
  V_COUNT_WHITELISTED NUMBER          :=0; -- TO BE REMOVED WHEN IN PROD
  V_ACTIVE NVARCHAR2(50)              :='';
  V_PIN NVARCHAR2(200)                 :='';
  V_IMEI_IMSI NVARCHAR2(50)           :='';
  V_IMSI NVARCHAR2(50)                :='';
  V_TRIALS NUMBER                     :=0;
  V_IDENTIFICATION_ID NVARCHAR2(50)   :='';
  V_DATE_OF_BIRTH NVARCHAR2(50)       :='';
  V_FIRST_NAME NVARCHAR2(50)          :='';
  V_SECOND_NAME NVARCHAR2(50)         :='';
  V_LAST_NAME NVARCHAR2(50)           :='';
  V_PARTIAL_REGISTRATION NVARCHAR2(50):='';
  V_PHONE_NUMBER NVARCHAR2(50)        :='';
  V_FIRST_LOGIN NVARCHAR2(50)         :='';
  V_EMAIL_ADDRESS NVARCHAR2(50)       :='';
  V_GENDER NVARCHAR2(50)              :='';
  V_LANG NVARCHAR2(5)                 :='';
  V_REFERRAL_CODE NVARCHAR2(20)       := '';
    V_MWALLET_ACCOUNT NVARCHAR2(50)              :='';
        V_LINKED_ACCOUNTS NVARCHAR2(2000)              :='';
        
 V_ACTUAL_BAL NVARCHAR2(50) := '' ;   
V_LOYALITY_ACTUAL_BAL NVARCHAR2(50) := '' ; 
V_REMANAING_ATTEMPTS NUMBER :=0;
V_DEVICE_CHANGE NVARCHAR2(2) := '';
V_AUDIT_MESSAGE NVARCHAR2(100) :='';

V_VALIDATION_ID NUMBER(18) :=0;
V_LINKED_CARDS NVARCHAR2(2000) :='';
V_LOYALITY_ACCOUNT VARCHAR2(20) :='';
v_channel nvarchar2(20) :='';
BEGIN

 -- BEGIN--first check if customer is whitelisted [ To remove this on production]
 --   SELECT COUNT(1)
 --   INTO V_COUNT_WHITELISTED
 --   FROM DUAL
  --  WHERE EXISTS
  --    (SELECT ID
 --     FROM TB_CUSTOMER_WHITELIST
  --    WHERE MOBILE_NUMBER =IV_PHONENUMBER
--	  AND IS_WHITELIST  =1
  --    AND ROWNUM         =1
  --    );
  --  IF V_COUNT_WHITELISTED < 1 THEN
  --    OPEN C_1 FOR SELECT '21' AS RESP_CODE,'You are not allowed to access this service' AS RESP_DESC FROM dual;
   --   RETURN;
 --   END IF;
 -- END;

  BEGIN--first check if customer exists
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM VW_ALLCUSTOMERS
      WHERE PHONE_NUMBER =IV_PHONENUMBER
      AND ROWNUM         =1
      );
    IF V_COUNT < 1 THEN
      OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Customer Not found' AS RESP_DESC FROM dual;
      INSERT INTO TB_UNREGISTERED_CUSTOMERS(PHONE_NUMBER , CHANNEL) VALUES (IV_PHONENUMBER ,IV_CHANNEL );
      RETURN;
    END IF;
  END;
BEGIN
  IF V_COUNT > 0 THEN
    SELECT ACTIVE,
      NVL(PIN,0) AS PIN,
      CASE
        WHEN TRIM(IV_IMEI_IMSI) = 'USSD'
        THEN NVL(IMSI,0)
        ELSE NVL(IMEI,0) 
      END V_IMEI_IMSI,
      NVL(TRIALS,0) AS TRIALS,
      IDENTIFICATION_ID,
      DATE_OF_BIRTH,
      FIRST_NAME,
      SECOND_NAME,
      LAST_NAME,
      PARTIAL_REGISTRATION,
      PHONE_NUMBER,
      FIRST_LOGIN,
      EMAIL_ADDRESS,
      GENDER,
      LANG,MWALLET_ACCOUNT,REFERRAL_CODE, DEVICE_CHANGE, VALIDATION_ID, LOYALITY_POINTS, CHANNEL
    INTO V_ACTIVE,
      V_PIN,
      V_IMEI_IMSI,
      V_TRIALS,
      V_IDENTIFICATION_ID,
      V_DATE_OF_BIRTH,
      V_FIRST_NAME,
      V_SECOND_NAME,
      V_LAST_NAME,
      V_PARTIAL_REGISTRATION,
      V_PHONE_NUMBER,
      V_FIRST_LOGIN,
      V_EMAIL_ADDRESS,
      V_GENDER,
      
      V_LANG,V_MWALLET_ACCOUNT,V_REFERRAL_CODE, V_DEVICE_CHANGE ,V_VALIDATION_ID,V_LOYALITY_ACTUAL_BAL, v_channel
    FROM VW_ALLCUSTOMERS
    WHERE PHONE_NUMBER =IV_PHONENUMBER
    AND ROWNUM         =1;
  END IF;
END;
BEGIN --Validations

  IF IV_CHANNEL = 'USSD' THEN -- CHECK IF THE CHANNEL IS A USSD CHANNEL
       IF V_IMEI_IMSI != IV_IMEI_IMSI THEN
       
        INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES ('USSD','LOGIN_REQUEST','02','You have changed your Sim card',IV_PHONENUMBER);
          
          OPEN C_1 FOR SELECT '02' AS RESP_CODE,'You have changed your Sim card' AS RESP_DESC FROM dual;
        RETURN;
      END IF;
      
      -- CHECK IF THE ACCOUNT IS BLOCKED
      
      IF V_ACTIVE = 0 THEN
      
       INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES ('USSD','LOGIN_REQUEST','03','Account is blocked',IV_PHONENUMBER);
          
          OPEN C_1 FOR SELECT '03' AS RESP_CODE,'Dear customer your account is blocked. Contact customer care on 
          0800251251' AS RESP_DESC FROM dual;
          RETURN;
      END IF;    
      
      
  ELSE -- CHECK ANY OTHER CHANNEL 
  
  DBMS_OUTPUT.PUT_LINE('incoming |'||IV_IMEI_IMSI||'|');
  DBMS_OUTPUT.PUT_LINE('stored | '||V_IMEI_IMSI); --V_IMSI
  
      IF V_IMEI_IMSI   <> TRIM(IV_IMEI_IMSI) OR  TRIM(IV_IMEI_IMSI) != '' THEN
      
        IF V_DEVICE_CHANGE <> '1' THEN 
        
           INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES (IV_CHANNEL,'LOGIN_REQUEST','02','You have changed your Device',IV_PHONENUMBER);
          
           OPEN C_1 FOR SELECT '02' AS RESP_CODE,'You have changed your Device' AS RESP_DESC FROM dual;
           RETURN;
        ELSE 
            update tb_customer_validation set IMEI = IV_IMEI_IMSI, IMSI = IV_IMEI_IMSI ,
            DEVICE_CHANGE = '0' where ID = V_VALIDATION_ID ;
            
             INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
              (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
              VALUES (IV_CHANNEL,'DEVICE_CHANGE','10','Your device has been updated successfully.
                Login to complete the request',IV_PHONENUMBER);
              
             OPEN C_1 FOR SELECT '10' AS RESP_CODE,'Your device has been updated successfully.
                Login to complete the request' AS RESP_DESC FROM dual;
             RETURN;
        END IF;
      
       
        
        ELSIF V_ACTIVE =0 THEN -- 
        OPEN C_1 FOR SELECT '05' AS  RESP_CODE, 'Dear customer your account is blocked. Contact customer care on 
          0800251251' AS RESP_DESC FROM dual;
        
         INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES (IV_CHANNEL,'LOGIN_REQUEST','05','Account Blocked',IV_PHONENUMBER);
          
        RETURN;
        
--        ELSIF V_TRIALS >= 3 THEN
--          UPDATE TB_CUSTOMER_VALIDATION
--          SET ACTIVE        = 0,TRIALS        = V_TRIALS+1
--          WHERE CUSTOMER_NO = IV_PHONENUMBER
--          AND ROWNUM        =1;
--          OPEN C_1 FOR SELECT '04' AS RESP_CODE, '3 Wrong Attempts PIN Blocked' AS RESP_DESC FROM dual;
--          RETURN;
--        
      ELSIF V_PIN != IV_PIN THEN
        UPDATE TB_CUSTOMER_VALIDATION
        SET TRIALS        = V_TRIALS+1
        WHERE CUSTOMER_NO = IV_PHONENUMBER
        AND ROWNUM        =1;
        
        
        V_TRIALS :=V_TRIALS+1;
        
        IF V_TRIALS = 3 THEN 
              UPDATE TB_CUSTOMER_VALIDATION
                SET ACTIVE        = 0,TRIALS        = V_TRIALS+1,
                BLOCKED_TIME = SYSTIMESTAMP,
                BLOCKED_BY = 'SYSTEM',
                BLOCKER_REMARK = '3 Wrong Attempts PIN Blocked'
                 WHERE CUSTOMER_NO = IV_PHONENUMBER
             AND ROWNUM        =1;
             
              INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES (IV_CHANNEL,'LOGIN_REQUEST','04','3 Wrong Attempts PIN Blocked',IV_PHONENUMBER);
          
          
          
          OPEN C_1 FOR SELECT '04' AS RESP_CODE, '3 Wrong Attempts PIN Blocked' AS RESP_DESC FROM dual;
          RETURN;
        ELSE 
             V_REMANAING_ATTEMPTS := 3 - V_TRIALS;
            OPEN C_1 FOR SELECT '03' AS RESP_CODE, 'Invalid PIN. '||V_REMANAING_ATTEMPTS || 'attempts left.' AS  RESP_DESC FROM dual;
            
            V_AUDIT_MESSAGE := 'Invalid PIN.';
             INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES (IV_CHANNEL,'LOGIN_REQUEST','03',V_AUDIT_MESSAGE,IV_PHONENUMBER);
          
           RETURN;
    
        END IF;
        
      
      END IF;
  
  END IF;
END;
IF V_COUNT > 0 THEN

dbms_output.put_line('no of trials '||V_TRIALS);
IF V_TRIALS > 0 THEN

    
    SELECT ID INTO V_VALIDATION_ID FROM tb_customer_validation WHERE phone_number = v_phone_number and ROWNUM = 1;
    UPDATE tb_customer_validation SET TRIALS = 0 WHERE ID = V_VALIDATION_ID ;
END IF;
V_LINKED_ACCOUNTS:= '[]';
V_LINKED_CARDS := FN_GET_CUSTOMER_CARDS(V_PHONE_NUMBER);
--V_LINKED_ACCOUNTS:= FN_GET_LINKED_ACCOUNTS(V_PHONE_NUMBER);
  -- FETCH ACTUAL BALANCE 
  SELECT AVAILABLE_BAL INTO V_ACTUAL_BAL FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_PHONE_NUMBER AND ACCOUNT_CLASS = '256' AND ROWNUM = 1;
  SELECT ACCOUNT_NO INTO V_LOYALITY_ACCOUNT FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_PHONE_NUMBER AND ACCOUNT_CLASS = '207' AND ROWNUM = 1;
 
  INSERT INTO TB_CUSTOMER_AUDIT_TRAIL
          (CHANNEL, REQUEST_TYPE, RESP_CODE, RESP_DESCRIPTION,PHONE_NUMBER)
          VALUES (IV_CHANNEL,'LOGIN_REQUEST','00','Success',IV_PHONENUMBER);

  OPEN C_1 FOR SELECT '00' AS  RESP_CODE, 'Success' AS RESP_DESC, V_ACTIVE AS ACTIVE,
  V_PIN AS PIN,
  V_TRIALS AS TRIALS,
  V_IDENTIFICATION_ID AS IDENTIFICATION_ID,
  V_DATE_OF_BIRTH AS DATE_OF_BIRTH,
  V_FIRST_NAME AS FIRST_NAME,
  V_SECOND_NAME AS SECOND_NAME,
  V_LAST_NAME AS LAST_NAME,
  V_PARTIAL_REGISTRATION AS PARTIAL_REGISTRATION,
  V_PHONE_NUMBER AS PHONE_NUMBER,
  V_FIRST_LOGIN AS FIRST_LOGIN,
  V_EMAIL_ADDRESS AS EMAIL_ADDRESS,
  V_GENDER AS GENDER,
  V_LANG AS LANG,V_MWALLET_ACCOUNT AS MWALLET_ACCOUNT,
  V_REFERRAL_CODE AS REFERRAL_CODE,
  V_LINKED_ACCOUNTS AS LINKED_ACCOUNTS,
  V_ACTUAL_BAL AS ACTUAL_BALANCE,  
  V_LOYALITY_ACTUAL_BAL AS LOYALITY_POINT_BALANCE,
  V_LOYALITY_ACCOUNT AS LOYALITY_ACCOUNT,
  v_channel as channel,
  V_LINKED_CARDS AS LINKED_CARDS FROM DUAL;
  
  RETURN;
END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_CUSTOMER_OPERATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_CUSTOMER_OPERATIONS" (
    IV_OP_TYPE     IN VARCHAR2,
    IV_PHONENUMBER IN VARCHAR,
    C_1            IN OUT SYS_REFCURSOR)
AS
  v_test NUMBER;
BEGIN
  CASE
  WHEN IV_OP_TYPE = 'unblock_customer' THEN
    SELECT 1 INTO v_test FROM dual;
  WHEN IV_OP_TYPE = 'block_amount' THEN
    SELECT 1 INTO v_test FROM dual;
  WHEN IV_OP_TYPE = 'unblock_amount' THEN
    SELECT 1 INTO v_test FROM dual;
  WHEN IV_OP_TYPE = 'block_customer' THEN
    SELECT 1 INTO v_test FROM dual;
  ELSE  --unknown operation or invalid request
    SELECT 1 INTO v_test FROM dual;   
  END CASE;
  OPEN C_1 FOR SELECT '00' AS  RESP_CODE, IV_OP_TYPE||' Successful' AS RESP_DESC FROM dual;
END A_SP_CUSTOMER_OPERATIONS;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_DELETE_ACCOUNT_TESTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_DELETE_ACCOUNT_TESTS" (
    IV_PHONE VARCHAR2)
AS
BEGIN

  DELETE FROM TB_CARD_LINKING WHERE CUSTOMER_NO = IV_PHONE;
  DELETE FROM TB_ACCOUNT WHERE PHONE_NUMBER= IV_PHONE;
  DELETE FROM TB_CUSTOMER_VALIDATION WHERE CUSTOMER_NO = IV_PHONE;
  DELETE FROM TB_CUSTOMER WHERE CUSTOMER_NO = IV_PHONE;
  DELETE FROM TB_LINKED_ACCOUNTS WHERE PHONENUMBER = IV_PHONE;
  
  commit;
  
END A_SP_DELETE_ACCOUNT_TESTS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_EOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_EOD" (IV_COB_AUTO_MODE IN NUMBER DEFAULT 1 ) AS 
  V_WorkingDate DATE;
  V_FinancialPeriod NVARCHAR2(3);
  V_FinancialYear NVARCHAR2(6);
  V_EndOfMonthDate DATE;
  V_EndOfYear      DATE;
  V_COB_AUTO_MODE  NUMBER(2,0);
BEGIN

  -- delete the previous eod logs before proceeding to 


  BEGIN
    INSERT INTO TB_EOD_ACTIVITY (CODE , ACTIVITY, DESCRIPTION, SP_NAME, STATUS)
    VALUES ('001','Archiving previous EOD log','started archiving','SP_BEGIN_EOD', 'PENDING');
    A_SP_ARCHIVE_EOD_ACTIVITY;
    
     INSERT INTO TB_EOD_ACTIVITY (CODE , ACTIVITY, DESCRIPTION, SP_NAME, STATUS)
    VALUES ('001','Archiving previous EOD log','started archiving','SP_BEGIN_EOD', 'DONE');

    EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('A_SP_ARCHIVE_EOD_ACTIVITY FAILURE');
      ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '001',
        'Archiving previous EOD log',
        'Error archiving previous EOD.',
        'SP_BEGIN_EOD',
        'FAILED'
      );
   --   raise;
      RETURN;
  END;


  --1 LOG START OF EOD
  BEGIN
    INSERT
  INTO TB_EOD_ACTIVITY
    (
      CODE,
      ACTIVITY,
      DESCRIPTION,
      SP_NAME,
      STATUS
    )
    VALUES
    (
      '001',
      'Start of COB .',
      'Start of COB .',
      'SP_BEGIN_EOD',
      'PENDING'
    );
  COMMIT;
  END;
  -- check if the cob autom mode has been set and is the same as what we have provided
    BEGIN
    SELECT ITEMVALUE
    INTO V_COB_AUTO_MODE
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME        = 'COB_AUTO_MODE';
    IF IV_COB_AUTO_MODE   = 1 THEN
      IF V_COB_AUTO_MODE != IV_COB_AUTO_MODE THEN
        INSERT
        INTO TB_EOD_ACTIVITY
          (
            CODE,
            ACTIVITY,
            DESCRIPTION,
            SP_NAME,
            STATUS
          )
          VALUES
          (
            '001',
            'Checking COB Mode',
            'COB Manual Mode has been enagaged... Auto COB Process Aborted .',
            'SP_BEGIN_EOD',
            'FAILED'
          );
        COMMIT;
        ROLLBACK;
          
        RETURN;
      END IF;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '001',
        'Checking COB Mode',
        'Error Reading COB Run Mode in SP_BEGIN_EOD .',
        'SP_BEGIN_EOD',
        'FAILED'
      );
    COMMIT;
       raise;
    RETURN;
  END;

  --2 select working dates from tb_date_settings

    BEGIN
    SELECT workingdate ,
      ENDOFMONTHDATE,
      ENDOFYEAR,
      FINANCIALPERIOD,
      FINANCIALYEAR
    INTO V_WorkingDate,
      V_EndOfMonthDate,
      V_EndOfYear,
      V_FinancialPeriod,
      V_FinancialYear
    FROM TB_DATE_SETTINGS;
  EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '002',
        'Checking Date',
        'Error Reading the date in SP_BEGIN_EOD .',
        'SP_BEGIN_EOD',
        'FAILED'
      );
    COMMIT;
    RETURN;
  END;

    BEGIN
    UPDATE TB_DATE_SETTINGS SET COB = 1; -- close all transactions coming to post mini at this time until the end of day process is over
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '002',
        'Setting Standin Mode',
        'Setting COB Flag on TBdatesettings .',
        'SP_BEGIN_EOD',
        'FAILED'
      );
    COMMIT;
    RETURN;
  END;


  --3 CHECK ON ACCOUNT MISMATCH 
  BEGIN 
  
       INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '003',
        'Account Mismatch',
        'Checking accounting mismatch for working_date transactions',
        'A_SP_EOD_MISMATCH',
        'STARTED'
      );
    commit;
    A_SP_EOD_MISMATCH;

    EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '003',
        'Account Mismatch',
        'Checking accounting mismatch for working_date transactions',
        'A_SP_EOD_MISMATCH',
        'FAILED'
      );
    commit;
    RETURN;
  END;


  --4 snap shot balances for the customers that transacted in that day
  BEGIN 
       INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '004',
        'Account balance backup and resets',
        'Snapshot customer balances and reset balances for working date transactions',
        'A_SP_EOD_MISMATCH',
        'STARTED'
      );
   COMMIT;
  
  A_SP_EOD_AC_BAL_SNAPSHOT;

     EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '004',
        'Account balance backup and resets',
        'Snapshot customer balances and reset balances for working date transactions',
        'A_SP_EOD_MISMATCH',
        'FAILED'
      );
   COMMIT;
    RETURN;
  END;

  -- 5. snapshot balances gl balances of the balances today
  BEGIN
       INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '005',
        'GL balance backup and resets',
        'Snapshot gl balances and reset balances for working date transactions',
        'A_SP_EOD_GL_ARCHIVE',
        'STARTED'
      );
    COMMIT;
    A_SP_EOD_GL_ARCHIVE;

      EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '005',
        'GL balance backup and resets',
        'Snapshot gl balances and reset balances for working date transactions',
        'A_SP_EOD_GL_ARCHIVE',
        'FAILED'
      );
    COMMIT;
    RETURN;
  END;

  -- 6 archive tb_transactions and later on tb_messages_external, tb_messages_cbs as transactional tables
  BEGIN
    INSERT INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '006',
        'Archive tables',
        'Archiving transactional tables',
        'A_SP_EOD_GL_ARCHIVE',
        'STARTED'
      );
      
      commit;
    A_SP_EOD_ARCHIVE;

     EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '006',
        'Archive tables',
        'Archiving transactional tables',
        'A_SP_EOD_GL_ARCHIVE',
        'FAILED'
      );
    COMMIT;
    RETURN;
  END;


  --RESET DATES ------------------LAST PROCESS IN THE EOD
  BEGIN
  
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '007',
        'reseting dates',
        'resetting dates for the next working date',
        'A_SP_RESET_DATES',
        'STARTED'
      );
      commit;
      
    A_SP_RESET_DATES;

         EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
     INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '007',
        'reseting dates',
        'error resetting dates',
        'A_SP_RESET_DATES',
        'FAILED'
      );
    COMMIT;
    RETURN;
  END;

  ------- UNLOCK POST MINI _ TRANSACTIONS TO START PROCESSING OTHER TRANSACTIONS
      BEGIN
    UPDATE TB_DATE_SETTINGS SET COB = 0; -- close all transactions coming to post mini at this time until the end of day process is over
    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME,
        STATUS
      )
      VALUES
      (
        '007',
        'Setting Standin Mode',
        'Setting COB Flag on TBdatesettings .',
        'SP_BEGIN_EOD',
        'FAILED'
      );
    ROLLBACK;
    RETURN;
  END;
END A_SP_EOD;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_EOD_AC_BAL_SNAPSHOT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_EOD_AC_BAL_SNAPSHOT" AS -- take account balance snapshot for the working date and save. 

 V_workingdate DATE;
BEGIN
dbms_output.put_line('snapshot balances | fetching working date');
  --1 fetch working date
  BEGIN
    SELECT WORKINGDATE INTO V_workingdate FROM TB_DATE_SETTINGS ;
      EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error getting workingdate in A_SP_EOD_AC_BAL_SNAPSHOT'
      );
    COMMIT;
    RETURN;
  END;
  
 BEGIN
 dbms_output.put_line('snapshot balances | archiving balances start ');
 
  --  insert into TB_ACCOUNT_BALANCE_SNAPSHOT SELECT * FROM TB_ACCOUNT WHERE LAST_TRANSACTION_DATE = V_workingdate;     
    INSERT INTO TB_ACCOUNT_BALANCE_SNAPSHOT
     	(BRANCH_ID, 	ACCOUNT_NO , 	ACCOUNT_NAME , 	CUSTOMER_NO , 	CURRENCY   , 	ACCOUNT_CLASS ,	ALLOW_DR  , 	ALLOW_CR , 
	BLOCKED    , 	STOPPED    , 	DORMANT    , 	OPENING_DATE   , 	CHEQUE_BOOK_FACILITY  , 	ATM_FACILITY    , 	IS_FROZEN    , 
	CREATED_BY , 	CREATED_ON   , 	APPROVED_BY , 	APPROVED_ON , 	OPENING_BAL , 	TODAY_DR   , 	TODAY_CR   , 	ACTUAL_BAL   , 
	AVAILABLE_BAL   , 	BLOCKED_AMOUNT   , 	DR_DATE , 	CR_DATE , 	DORMANCY_DATE , 	MIN_BALANCE , 	MATURITY_DATE , 	INTEREST_RATE , 
	EOD_PROCESSED  , 	NEXT_PROCESSING_DATE , 	LAST_TRANSACTION_DATE , 	PHONE_NUMBER , 	PARTIAL_REGISTRATION    , 	PARTIAL_DORMANT    , 
	PARTIAL_DORMANT_DATE , 	ALLOW_OVERDRAFT    , 	WITHDRAWAL_COUNT , 	ISCLOSED    , 	CLOSED_BY  , 	CLOSED_MAKER_REMARKS , 	CLOSED_APPROVED_BY , 
	CLOSED_CHECKER_REMARKS , 	CLOSEDBY_DATE)
    
    SELECT 
   	BRANCH_ID, 	ACCOUNT_NO , 	ACCOUNT_NAME , 	CUSTOMER_NO , 	CURRENCY   , 	ACCOUNT_CLASS ,	ALLOW_DR  , 	ALLOW_CR , 
	BLOCKED    , 	STOPPED    , 	DORMANT    , 	OPENING_DATE   , 	CHEQUE_BOOK_FACILITY  , 	ATM_FACILITY    , 	IS_FROZEN    , 
	CREATED_BY , 	CREATED_ON   , 	APPROVED_BY , 	APPROVED_ON , 	OPENING_BAL , 	TODAY_DR   , 	TODAY_CR   , 	ACTUAL_BAL   , 
	AVAILABLE_BAL   , 	BLOCKED_AMOUNT   , 	DR_DATE , 	CR_DATE , 	DORMANCY_DATE , 	MIN_BALANCE , 	MATURITY_DATE , 	INTEREST_RATE , 
	EOD_PROCESSED  , 	NEXT_PROCESSING_DATE , 	LAST_TRANSACTION_DATE , 	PHONE_NUMBER , 	PARTIAL_REGISTRATION    , 	PARTIAL_DORMANT    , 
	PARTIAL_DORMANT_DATE , 	ALLOW_OVERDRAFT    , 	WITHDRAWAL_COUNT , 	ISCLOSED    , 	CLOSED_BY  , 	CLOSED_MAKER_REMARKS , 	CLOSED_APPROVED_BY , 
	CLOSED_CHECKER_REMARKS , 	CLOSEDBY_DATE FROM TB_ACCOUNT WHERE LAST_TRANSACTION_DATE = V_workingdate;
  
   dbms_output.put_line('snapshot balances | archiving balances end');
  EXCEPTION WHEN OTHERS THEN
  RAISE;
     ROLLBACK;
       
       INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error snapshotting account balances history in A_SP_EOD_AC_BAL_SNAPSHOT'
      );
    COMMIT;
    RETURN;
  END;
  
-- update all today cr and today dr 
BEGIN 

 dbms_output.put_line('snapshot balances | updating todays cr and dr');
  UPDATE TB_ACCOUNT SET TODAY_CR = 0 , TODAY_DR = 0 WHERE LAST_TRANSACTION_DATE = V_workingdate;
  EXCEPTION WHEN OTHERS THEN
    RAISE;
  ROLLBACK;
 -- RAISE;
     INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error snapshotting account balances history in A_SP_EOD_AC_BAL_SNAPSHOT'
      );
    COMMIT;
  RETURN;
END;

END A_SP_EOD_AC_BAL_SNAPSHOT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_EOD_ARCHIVE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_EOD_ARCHIVE" AS 
V_WorkingDate     DATE;
V_next_WorkingDate     DATE;
BEGIN

  -- archive tb_transactions
  BEGIN 
    --  V_WorkingDate := TO_DATE('5/24/2020','MM/dd/yyyy');
     SELECT WorkingDate,nextworkingdate INTO V_WorkingDate,V_next_WorkingDate FROM TB_DATE_SETTINGS;
      
        EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error fetching working date A_SP_EOD_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
  
  BEGIN
  
    DBMS_OUTPUT.PUT_LINE('date | '||V_WorkingDate);
    INSERT INTO TB_TRANSACTIONS_ARCHIVE(
    ACCOUNT_NO,AMOUNT,AUTHORIZED,AUTHORIZED_BY,AUTHORIZED_ON,AVAILABLE_BALANCE,CLEARED_BALANCE,CREATED_BY,CREATED_ON,CURRENCY,
    DRCR,EXTERNAL_REFNO,FIELD100,FIELD24,FIELD3,FIELD32,FIELD37,FIELD41,FIELD42,FIELD90,FINANCIAL_CYCLE,FINANCIAL_PERIOD,ID,ISCUSTOMERGL,
    MSGTYPE,NARRATION,PAYMENT_NUMBER,REVERSED,STAN,TRAN_CODE,TRX_SERIAL_NO,VALUE_DATE)
    
     SELECT ACCOUNT_NO,AMOUNT,AUTHORIZED,AUTHORIZED_BY,AUTHORIZED_ON,AVAILABLE_BALANCE,CLEARED_BALANCE,CREATED_BY,CREATED_ON,
    CURRENCY,DRCR,EXTERNAL_REFNO,FIELD100,FIELD24,FIELD3,FIELD32,FIELD37,FIELD41,FIELD42,FIELD90,FINANCIAL_CYCLE,FINANCIAL_PERIOD,
    ID,ISCUSTOMERGL,MSGTYPE,NARRATION,PAYMENT_NUMBER,REVERSED,STAN,TRAN_CODE,TRX_SERIAL_NO,VALUE_DATE
    FROM TB_TRANSACTIONS WHERE VALUE_DATE =V_WorkingDate;

    EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error archiving transactions data A_SP_EOD_ARCHIVE.'
      );
      
      RAISE;
    COMMIT;
  RETURN;

  END;

  BEGIN
    DELETE TB_TRANSACTIONS WHERE VALUE_DATE = V_WorkingDate;
     EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error deleting transactions data A_SP_EOD_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
  
  -- all messages sent to the users to archive table
  BEGIN
    INSERT INTO tb_messages_sms_archive SELECT * FROM TB_MESSAGES_SMS WHERE DATE_CREATED < V_next_WorkingDate;
    
    EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
        INSERT INTO TBCOBERRORS
          (COBERROR
          )VALUES
          ('Error archiving messages A_SP_EOD_ARCHIVE.'
          );
    COMMIT;
  RETURN;
  END;
  
    BEGIN
    DELETE tb_messages_sms WHERE DATE_CREATED < V_next_WorkingDate;
     EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error deleting transactions data A_SP_EOD_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
  
  -- archive all cardless transactions that took place during the day
  
    -- all messages sent to the users to archive table
  BEGIN
  
  
    INSERT INTO tb_cardless_transactions_archive
    SELECT * FROM tb_cardless_transactions WHERE tb_cardless_transactions.transaction_time < V_next_WorkingDate;
--     
--        insert into tb_cardless_transactions_archive(
--          AMOUNT, 
--          CASHED_OUT, 
--          CASHOUT_DATED,
--          CASHOUT_REF,
--          EXPIRED,
--          EXPIRY_DATE,
--          FIELD37,
--          PHONE_NUMBER,
--          REVERSED,
--          TOKEN_HASH,
--          TRANSACTION_TIME
--          )
--        select 
--        AMOUNT,
--        CASHED_OUT,
--        CASHOUT_DATED,
--        CASHOUT_REF,
--        EXPIRED,
--        EXPIRY_DATE,
--        FIELD37,
--        PHONE_NUMBER
--        REVERSED,
--        TOKEN_HASH,
--        TRANSACTION_TIME
--        from tb_cardless_transactions
--        where transaction_time < V_next_WorkingDate;

    EXCEPTION WHEN OTHERS THEN
    --   ROLLBACK;
       RAISE;
        INSERT INTO TBCOBERRORS
          (COBERROR
          )VALUES
          ('Error archiving cardless_transactions A_SP_EOD_ARCHIVE.'
          );
    COMMIT;
  RETURN;
  END;
  
    BEGIN
   DELETE tb_cardless_transactions WHERE transaction_time < V_next_WorkingDate;

     EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error deleting transactions data A_SP_EOD_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
  
  
  BEGIN  --archiving the tb_transactions_gl
  
    INSERT INTO TB_TRANSACTIONS_GL_ARCHIVE
    SELECT * FROM TB_TRANSACTIONS_GL WHERE TB_TRANSACTIONS_GL.VALUE_DATE < V_next_WorkingDate;
    
    exception when others then 
      rollback;
        INSERT INTO TBCOBERRORS
        (COBERROR
        )VALUES
        ('Error inserting transactions_gl data A_SP_EOD_ARCHIVE.'
        );
    COMMIT;
  END;  
  
  BEGIN
   DELETE TB_TRANSACTIONS_GL WHERE VALUE_DATE < V_next_WorkingDate;

     EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error deleting transactions_gl data A_SP_EOD_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_EOD_GL_ARCHIVE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_EOD_GL_ARCHIVE" AS 

  V_WorkingDate     DATE;
  V_NextWorkingDate DATE;
  V_CrGLAmt         NUMBER(18,5) := 0;
  V_DrGLAmt         NUMBER(18,5) :=0;
  V_CrAmt           NUMBER(18,5) := 0;
  V_DrAmt           NUMBER(18,5) :=0;
  V_GLCodes NVARCHAR2(50)        :='';
  V_LeafGL NVARCHAR2(50)         :='';
  V_ProductCode NVARCHAR2(50)    :='';
  V_totSum NUMBER(18,5)          :=0;
BEGIN

  BEGIN 
    
  SELECT WorkingDate ,
    Nextworkingdate
  INTO V_WorkingDate,
    V_NextWorkingDate
  FROM TB_DATE_SETTINGS;
  
  EXCEPTION WHEN OTHERS THEN
       ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error fetching working date A_SP_EOD_GL_ARCHIVE.'
      );
    COMMIT;
  RETURN;
  END;
  
--    DECLARE
--    CURSOR CUR_GL
--    IS
--      SELECT GL_CODE
--      FROM TB_GL_BALANCE
--      WHERE GL_CODE IN
--        (
--          SELECT GL_CODE FROM TB_GL 
--        )
--    AND GL_CODE NOT IN
--      (SELECT TB_PRODUCTS.LEAF_GL
--      FROM TB_PRODUCTS
--      WHERE TB_PRODUCTS.LEAF_GL IS NOT NULL
--      );
--    -- WHERE BACHNUMBER          = V_BATCHNO;
--    v_GLData CUR_GL%ROWTYPE;
--  BEGIN
--    OPEN CUR_GL; -- Open the cursor and initialize the active set
--    FETCH CUR_GL INTO v_GLData;  -- Retrieve the first row, to set up for the WHILE loop
--    
--    -- Continue looping while there are more rows to fetch
--    WHILE CUR_GL%FOUND
--      LOOP
--        V_GLCodes := trim(v_GLData.GL_CODE);
--        
--        -- get all credits for the day
----      SELECT NVL(SUM(AMOUNT),0) INTO V_CrGLAmt FROM TB_TRANSACTIONS WHERE ACCOUNT_NO=V_GLCodes  AND DRCR       ='C'
----      AND VALUE_DATE    =V_WorkingDate;
--      
--      -- get all debits for the day for the GL
----      SELECT NVL(SUM(AMOUNT),0) INTO V_DrGLAmt FROM TB_TRANSACTIONS  WHERE ACCOUNT_NO=V_GLCodes  AND DRCR       ='D'
----      AND VALUE_DATE    =V_WorkingDate;
--      
--      -- update the balance for gl_code in tb_gl_balance
--   --   UPDATE  TB_GL_BALANCE SET CR_BAL_LCY = V_CrGLAmt , DR_BAL_LCY = V_DrGLAmt WHERE GL_CODE =  V_GLCodes;
--      
--      -- fetch the next data to the cursor
--       FETCH CUR_GL INTO v_GLData;
--       
--       END LOOP;
--       
--       CLOSE CUR_GL;
--       
--       EXCEPTION WHEN OTHERS THEN
--       
--          ROLLBACK;
--    INSERT
--    INTO TBCOBERRORS
--      (
--        COBERROR
--      )
--      VALUES
--      (
--        'Error checking GL Balances in SP_ARCHIVE'
--      );
--    COMMIT;
--    RETURN;
--  END;
  
  -- we proceed to archive the gl balances to the archive table 
  BEGIN
        insert into TB_GL_BALANCE_ARCHIVE(
          GL_CODE,FINANCIAL_CYCLE,FINANCIAL_PERIOD,DR_BAL_LCY,CR_BAL_LCY,GL_BALANCE,DR_CLOSE_BALANCE,CR_CLOSE_BALANCE,
          CR_OPEN_BALANCE,DR_OPEN_BALANCE,CREATED_BY,CREATED_ON,CR_PERIOD_BALANCE,DR_PERIOD_BALANCE,OPENING_BAL,
          WORKING_DATE) 
          select GL_CODE,FINANCIAL_CYCLE,FINANCIAL_PERIOD,DR_BAL_LCY,CR_BAL_LCY,GL_BALANCE,DR_CLOSE_BALANCE,
          CR_CLOSE_BALANCE,CR_OPEN_BALANCE,DR_OPEN_BALANCE,CREATED_BY,CREATED_ON,CR_PERIOD_BALANCE,DR_PERIOD_BALANCE,
          OPENING_BAL,V_WorkingDate from TB_GL_BALANCE;

  EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
  --   RAISE;
    INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error Archiving GL balance in in SP_EOD_GL_ARCHIVE'
      );
    COMMIT;
    
  --  RAISE;
  RETURN;
  END;

--update opening balance
DECLARE CURSOR CUR_GL_BAL
  IS SELECT GL_CODE , GL_BALANCE FROM TB_GL_BALANCE_ARCHIVE WHERE WORKING_DATE = V_workingDate;
  v_GLBalData CUR_GL_BAL%ROWTYPE;
  BEGIN
  
    OPEN CUR_GL_BAL;
    FETCH CUR_GL_BAL INTO v_GLBalData;
    
    WHILE CUR_GL_BAL%FOUND
    
      LOOP
      UPDATE TB_GL_BALANCE SET OPENING_BAL = trim(v_GLBalData.GL_BALANCE),
      WORKING_DATE = V_NextWorkingDate,
      DR_BAL_LCY = 0,
      CR_BAL_LCY = 0
      WHERE GL_CODE = trim(v_GLBalData.GL_CODE);
      
      FETCH CUR_GL_BAL INTO v_GLBalData;
      END LOOP;
      CLOSE CUR_GL_BAL;    
  END;    
  
END ;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_EOD_MISMATCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_EOD_MISMATCH" AS 
  V_suspensegl NVARCHAR2(50) ;
  V_drcr NVARCHAR2(2);
  V_clearbal  NUMERIC(18,5);
  V_ledgerbal NUMERIC(18,5);
  V_amount    NUMERIC(18,5);
  V_trxrefno NVARCHAR2(50);
  V_workingdate DATE;
  V_financialyr NVARCHAR2(6);
  V_financialprd NVARCHAR2(3);
  iv_MsgType NVARCHAR2(8):='0200';
  iv_Field32 NVARCHAR2(50) :='';
  iv_Field37 NVARCHAR2(100) :='';
  iv_Field68 NVARCHAR2(200) :='';
  iv_Field3 NVARCHAR2(10) :='';
  iv_Field24 NVARCHAR2(3) :='';
  iv_Field11 NVARCHAR2(8) :='';
  V_parentref NVARCHAR2(100) :='';
  
  -- this eod for mismatch process the workdate transactions because all the other transactions will have been move to the archive table
  v_counter number(18) := 0;
  failing_trx_no nvarchar2(20) := 0;
 
BEGIN

  DBMS_OUTPUT.ENABLE (buffer_size => NULL);

  --1) RESET MISMATCH TABLES FOR 
  BEGIN
    DELETE TBCOBMISMATCHCR;
    DELETE TBCOBMISMATCHDR;
    
    COMMIT;
    EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error Resetting table values.'
      );
    COMMIT;
    RETURN;
  END;
  --END;
  
  BEGIN
  --2) GET THE SUSPENSE GL FOR EOD PROCESSING 
  V_suspensegl := FN_GET_EOD_AC;
  IF V_suspensegl = '0' THEN  -- EOD gl was not found -- log error 
     ROLLBACK;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error gettting GL suspense account.'
      );
    COMMIT;
    RETURN;
  END IF;
  END;

  
  -- 4) fetching working dates 
    BEGIN
    SELECT WORKINGDATE ,
      FinancialYear ,
      FinancialPeriod
    INTO V_workingdate,
      V_financialyr,
      v_financialprd
    FROM TB_DATE_SETTINGS ;
    
    DBMS_OUTPUT.PUT_LINE('working date '||V_workingdate);
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error getting workingdate in SP_COBMISMATCH'
      );
    COMMIT;
    RETURN;
  END;
  
  -- 5. fetch all the data from the tb_transactions to respective tables
  
  --5a. take all the dr data from tb_transactions and push to the cob_dr table while grouping the transactions
  BEGIN
      INSERT INTO TBCOBMISMATCHDR (AMOUNT , TRXREFNO, DRCR) 
      SELECT SUM(AMOUNT) , FIELD37 , DRCR FROM TB_TRANSACTIONS WHERE 
      DRCR = 'D' AND CURRENCY = 'UGX' AND VALUE_DATE = V_workingdate GROUP BY FIELD37 , DRCR ;
      
      SELECT COUNT(DRCR) INTO v_counter FROM TBCOBMISMATCHDR;
      DBMS_OUTPUT.PUT_LINE('total debit : '|| v_counter);
      
      EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error fetching Debits from tb_transactions'
      );
    COMMIT;
    RETURN;     
  END;
  
    --5B. take all the cr data from tb_transactions and push to the cob_cr table while grouping the transactions
  BEGIN
      INSERT INTO TBCOBMISMATCHCR (AMOUNT , TRXREFNO, DRCR) 
      SELECT SUM(AMOUNT) , FIELD37 , DRCR FROM TB_TRANSACTIONS WHERE 
      DRCR = 'C' AND CURRENCY = 'UGX' AND VALUE_DATE = V_workingdate GROUP BY FIELD37 , DRCR ;
      
      SELECT COUNT(DRCR) INTO v_counter FROM TBCOBMISMATCHCR;
      DBMS_OUTPUT.PUT_LINE('total credits : '|| v_counter);
      
      EXCEPTION WHEN OTHERS THEN
      ROLLBACK;
      INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error fetching credits from tb_transactions'
      );
    COMMIT;
    RETURN;     
  END;
  
  --6 we update transactions that match in both cr and dr tables 
  BEGIN
    UPDATE TBCOBMISMATCHCR SET DRCRMATCH = 1 WHERE
    TRXREFNO IN (SELECT TRXREFNO FROM TBCOBMISMATCHDR);
    
     UPDATE TBCOBMISMATCHDR SET DRCRMATCH = 1 WHERE
    TRXREFNO IN (SELECT TRXREFNO FROM TBCOBMISMATCHCR);
    
      SELECT COUNT(DRCR) INTO v_counter FROM TBCOBMISMATCHCR WHERE DRCRMATCH = 1 ; 
      DBMS_OUTPUT.PUT_LINE('total updates CR : '|| v_counter);
      
      SELECT COUNT(DRCR) INTO v_counter FROM TBCOBMISMATCHDR WHERE DRCRMATCH = 1 ; 
      DBMS_OUTPUT.PUT_LINE('total updates DR: '|| v_counter);
    EXCEPTION WHEN OTHERS THEN
     ROLLBACK;
      INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error matching DR AND CR COB tables'
      );
    COMMIT;
    RETURN; 
  END;
  
  --7 we fetch all the data the never matched from the the initial transaction
  
  
--   DECLARE CURSOR CUR_MISMATCH IS SELECT AMOUNT , TRXREFNO, DRCR FROM VW_COBMISSINGDRCR;
--  
--    V_MISMATCHDATA CUR_MISMATCH%ROWTYPE;

-- all this transactions are logged into the eob suspense gl account so as to help with the balancing of the 
-- accounts. this are logged into tb_transactions 
    
    DECLARE
    CURSOR CUR_MISMATCHDRCR
    IS
      SELECT AMOUNT, TRXREFNO,DRCR FROM VW_COBMISSINGDRCR;
    -- WHERE BACHNUMBER          = V_BATCHNO;
    v_MISMATCHData CUR_MISMATCHDRCR%ROWTYPE;
  BEGIN
    -- Open the cursor and initialize the active set
    OPEN CUR_MISMATCHDRCR;
    -- Retrieve the first row, to set up for the WHILE loop
    FETCH CUR_MISMATCHDRCR
    INTO v_MISMATCHData;
    -- Continue looping while there are more rows to fetch
    WHILE CUR_MISMATCHDRCR%FOUND
    LOOP
      V_amount   := v_MISMATCHData.AMOUNT;
      V_drcr     := v_MISMATCHData.DRCR;
      V_trxrefno := v_MISMATCHData.TRXREFNO;
      IF V_amount >0 THEN
        BEGIN
          IF v_MISMATCHData.DRCR = 'D'THEN
            V_drcr :='C';
          END IF;
          IF v_MISMATCHData.DRCR = 'C' THEN
            V_drcr :='D';
          END IF;
          --NOW LETS DO THE ACTUAL POSTING\
          IF V_drcr = 'C' THEN
            BEGIN
              UPDATE TB_GL_BALANCE
              SET GL_BALANCE = NVL(GL_BALANCE,0) + (V_amount ),
                CR_BAL_LCY    = NVL(CR_BAL_LCY, 0) + (V_amount )
              WHERE GL_CODE  = V_suspensegl;
            EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              INSERT
              INTO TBCOBERRORS
                (
                  COBERROR
                )
                VALUES
                (
                  'Error in Posting mismatch to suspense GL'
                );
              COMMIT;
              RETURN;
            END;
          END IF;
          IF V_drcr = 'D' THEN
            BEGIN
              UPDATE TB_GL_BALANCE
              SET GL_BALANCE = NVL(GL_BALANCE,0) - (V_amount ),
                DR_BAL_LCY    = NVL(DR_BAL_LCY, 0) + (V_amount )
              WHERE GL_CODE  = V_suspensegl;
            EXCEPTION
            WHEN OTHERS THEN
              ROLLBACK;
              INSERT
              INTO TBCOBERRORS
                (
                  COBERROR
                )
                VALUES
                (
                  'Error in Posting mismatch to suspense GL.'
                );
              COMMIT;
              RETURN;
            END;
          END IF;
          --  SELECT @CLEARBAL=GlBalance FROM TBGLBALANCE where GLCode=@SuspenceAccount
     --     DBMS_OUTPUT.PUT_LINE('fetching list '||V_trxrefno);
          failing_trx_no := V_trxrefno;
          SELECT 
            MsgType,
            field32,
            Narration ,
            field3,
            field37,
            field24,
            Field90
          INTO iv_MsgType,
            iv_Field32,
            iv_Field68,
            iv_Field3,
            iv_field37,
            iv_Field24,
            V_parentref
          FROM tb_transactions
          WHERE FIELD37 = V_trxrefno
          AND rownum     = 1;
 --         DBMS_OUTPUT.PUT_LINE('msgType '||iv_MsgType);
--          DBMS_OUTPUT.PUT_LINE('field32 '||iv_Field32);
--          DBMS_OUTPUT.PUT_LINE('iv_Field68 '||iv_Field68);
--          DBMS_OUTPUT.PUT_LINE('iv_Field3 '||iv_Field3);
--          DBMS_OUTPUT.PUT_LINE('iv_field37 '||iv_field37);
--          DBMS_OUTPUT.PUT_LINE('iv_Field24 '||iv_Field24);
--          DBMS_OUTPUT.PUT_LINE('V_parentref '||V_parentref);
          
--            iv_Field68 := 'narrate';
--            iv_Field3 :='450000';
--            iv_field37 :='tuhd94f' ;
--            iv_Field24 :='MM';
--            V_parentref := 'vncjokojrf';
--          
          SELECT gl_balance INTO V_clearbal FROM tb_gl_balance WHERE gl_code = V_suspensegl;
          INSERT
          INTO tb_Transactions
            (
              --  ID,
              MsgType,
              field32,
              Trx_RefNo,
              Trx_Serial_No,
              Account_No,
              Currency,
              DRCR,
              Amount,
              Value_Date,
              Financial_Cycle,
              Financial_Period,
              Created_By,
              Created_On,
              Authorized_By,
              Authorized_On,
              IsCustomerGL,
              Narration,
              Cleared_Balance,
              Available_Balance,
              field3,
              field37,
              Stan,
              Field90
		--	  Field98   -- for a later review
            )
            VALUES
            (
              --TBTRANSACTIONS_ID.NEXTVAL,
              iv_MsgType,
              iv_Field32,
              V_trxrefno,
              0,
              V_suspensegl,
              'UGX',
              V_drcr,
              V_amount,
              V_workingdate,
              V_financialyr,
              V_financialprd,
              'EOD',
              SYSDATE,
              'EOD',
              SYSDATE,
              'G',
              iv_Field68
              ||'--SUSPENSES',
              V_clearbal,
              V_clearbal,
              iv_Field3,
              V_trxrefno,
              iv_Field11,
              V_parentref
		--	  'COB' -- for a later review
            );
        EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
      --    DBMS_OUTPUT.PUT_LINE('failed trx No - '|| v_counter ||'  --'|| failing_trx_no||'--');
          
          RAISE;
          INSERT
          INTO TBCOBERRORS
            (
              COBERROR
            )
            VALUES
            (
              'Error logging the mismatch post.'
            );
          COMMIT;
          RETURN;
        END;
      END IF;
      v_counter := v_counter+1;
      FETCH CUR_MISMATCHDRCR INTO v_MISMATCHData;
    END LOOP;
    -- Free resources used by the cursor
    CLOSE CUR_MISMATCHDRCR;
    -- Commit our work
    COMMIT;
    
      EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
    INSERT
    INTO TBCOBERRORS
      (
        COBERROR
      )
      VALUES
      (
        'Error commiting to a mismatch post correction.'
      );
    COMMIT;
    RETURN;
    END;
   --NOW WE RESET OUR TABLES FOR THE NEXT OPERATION
  BEGIN
  
    DELETE TBCOBMISMATCHDR;
    DELETE TBCOBMISMATCHCR;
  dbms_output.put_line('finished okay...');
 --   COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
       RAISE;
    INSERT INTO TBCOBERRORS
      (COBERROR
      )VALUES
      ('Error Resetting table values.'
      );
    COMMIT;
    RETURN;
  END;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_FULLSTATEMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_FULLSTATEMENT" (
    iv_trn_account_number NVARCHAR2,
    iv_trn_date_from VARCHAR2,
    iv_trn_date_to   VARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  v_trn_date_from DATE:= TO_DATE(iv_trn_date_from,'yyyy-MM-dd');
  v_trn_date_to   DATE:= TO_DATE(iv_trn_date_to,'yyyy-MM-dd');
BEGIN
  --DBMS_OUTPUT.PUT_LINE('a.firstName' || ' '||iv_trn_date_from|| ' '|| iv_trn_date_to);
  OPEN c_1 FOR SELECT * FROM
  (SELECT 
    Created_On,
    Field37,
    NVL(narration,'') narration,
    TRUNC(value_date) AS value_date,
    CASE DRCR
      WHEN 'D'
      THEN CAST(NVL(Amount,0) AS NUMBER(18,2))
      ELSE 0
    END DR,
    CASE DRCR
      WHEN 'C'
      THEN CAST(NVL(Amount,0) AS NUMBER(18,2))
      ELSE 0
    END CR,
    CAST(Available_Balance AS NUMBER(18,2)) AS bookbalance
  FROM VW_TRANSACTIONS
  WHERE Account_No = iv_trn_account_number
  AND Created_On BETWEEN v_trn_date_from AND v_trn_date_to
  ORDER BY ID DESC
  ) WHERE ROWNUM<=1000;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_FUND_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_FUND_ACCOUNT" (
IV_MOBILE_NO IN NVARCHAR2 ,
IV_ACC_NO IN NVARCHAR2,
IV_AMOUNT IN NUMBER,
C_1 IN OUT SYS_REFCURSOR
) AS
BEGIN

 A_SP_POST_MINI_TRANSACTIONS('0200',IV_MOBILE_NO, '450000',IV_AMOUNT,'', '163818','CM','POS','',
'8895YY79791100','','TEST','','MPESAC2B','','',IV_ACC_NO,0,'UGX','','','','',C_1);
END A_SP_FUND_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GENERATE_SUNDAY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GENERATE_SUNDAY" (
 l_year IN  NUMBER 
)

AS
  l_created_by NVARCHAR2(15) := 'ADMIN';
  V_COUNT INT := 0;
  l_day DATE;
BEGIN
  l_day := to_date('01-JAN-'||to_char(l_year), 'DD-MON-YYYY');
  while l_day < to_date('31-DEC-'||to_char(l_year), 'DD-MON-YYYY') loop
    if to_char(l_day, 'D') IN (1,7) then
      dbms_output.put_line(to_char(l_day));

      V_COUNT := 0;
        SELECT COUNT(1) INTO V_COUNT FROM DUAL
        WHERE EXISTS
          (SELECT * FROM TB_HOLIDAY WHERE TO_DATE(HOLIDAY_DATE) = l_day);
          IF(V_COUNT = 0)
          THEN      
                INSERT INTO TB_HOLIDAY(HOLIDAY_NAME,HOLIDAY_DATE,CREATED_BY)VALUES('SUNDAY',l_day,'l_created_by');

          END IF;

    end if;
    l_day := l_day + 1;
  end loop;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_AGENT_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_AGENT_ACCOUNT" (
    IV_ACCOUNT_CLASS IN NVARCHAR2 , -- this is to help us create both the float account and agent account
    IV_AGENT_CODE IN NVARCHAR2,
    OUTRESULTS OUT VARCHAR2)
AS
  V_INCREMENT_ID           NUMBER := 0;
  MEANINGFUL_ERROR_MESSAGE VARCHAR(1000);
  V_CURRENT_OPERATIONS_NO  VARCHAR(1000)  :=NULL;
  V_NEW_OPERATIONS_NO      VARCHAR2(1000) :='';
  V_TBNAME                 VARCHAR(1000);
  V_INITIAL                VARCHAR(2)     :='';
  V_SQL                    VARCHAR2(3000) :='';
  V_SPLITVALUE             VARCHAR2(1000) :='';
  V_OLDVALUE               NUMBER         :=0;
  V_NEWVALUE               NUMBER         :=0;
  V_NEWVALUESTRING         VARCHAR2(1000) :='';
  XYEAR                    VARCHAR(1000);
  XMONTH                   VARCHAR(1000);
  XDAY                     VARCHAR(1000);
  XVALUE                   VARCHAR(1000);
BEGIN
--  BEGIN
  
--    V_CURRENT_OPERATIONS_NO := IV_ACCOUNT_CLASS||IV_AGENT_CODE;
--    SELECT ACCOUNT_NO
--    INTO V_CURRENT_OPERATIONS_NO
--    FROM
--      (SELECT ACCOUNT_NO
--      FROM TB_ACCOUNT
--      WHERE  TB_ACCOUNT.ACCOUNT_CLASS      = IV_ACCOUNT_CLASS
--      ORDER BY TB_ACCOUNT.ACCOUNT_ID DESC
--      )
--    WHERE ROWNUM = 1;
    
   --  DBMS_OUTPUT.PUT_LINE ('CURRENT AC NO '||V_CURRENT_OPERATIONS_NO);
--    
--  EXCEPTION
--  WHEN NO_DATA_FOUND THEN
--    MEANINGFUL_ERROR_MESSAGE := 'Number does not exist';
--  WHEN OTHERS THEN
--    DBMS_OUTPUT.PUT_LINE(V_SQL);
--    DBMS_OUTPUT.PUT_LINE ('Error while processing ');
--    RAISE;
--    NULL;
  --END;
  IF V_CURRENT_OPERATIONS_NO IS NULL THEN
    V_NEW_OPERATIONS_NO      := IV_ACCOUNT_CLASS||IV_AGENT_CODE||'001';
  ELSE
    V_SPLITVALUE        :=SUBSTR(V_CURRENT_OPERATIONS_NO, 9);
    V_OLDVALUE          :=TO_NUMBER(V_SPLITVALUE, '9999');
    V_NEWVALUE          :=V_OLDVALUE +1;
    V_NEWVALUESTRING    :=LPAD(V_NEWVALUE,12, '0');
    V_NEW_OPERATIONS_NO := IV_ACCOUNT_CLASS || V_NEWVALUESTRING;
  END IF;
  DBMS_OUTPUT.PUT_LINE(V_NEW_OPERATIONS_NO);
  OUTRESULTS := V_NEW_OPERATIONS_NO;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  MEANINGFUL_ERROR_MESSAGE := 'ERROR';
  OUTRESULTS               :='Error';
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE(V_SQL);
  OUTRESULTS :='Error';
  DBMS_OUTPUT.PUT_LINE ('Error while processing ');
  NULL;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_AGENT_CODE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_AGENT_CODE" (
    incode IN VARCHAR2,
    outresults OUT VARCHAR2)
AS
  --declarations
  v_increment_id           NUMBER := 0;
  meaningful_error_message VARCHAR(1000);
  v_Current_Operations_No  VARCHAR(1000)  :=NULL;
  v_New_Operations_No      VARCHAR2(1000) :='';
  v_tbname                 VARCHAR(1000);
  v_initial                VARCHAR(2)     :='';
  v_sql                    VARCHAR2(3000) :='';
  v_splitValue             VARCHAR2(1000) :='';
  v_oldvalue               NUMBER         :=0;
  v_newvalue               NUMBER         :=0;
  v_newvalueString         VARCHAR2(1000) :='';
  XYear                    VARCHAR(1000);
  XMonth                   VARCHAR(1000);
  XDay                     VARCHAR(1000);
  Xvalue                   VARCHAR(1000);
BEGIN
  CASE incode
  WHEN 'AGENT' THEN
    BEGIN
      --SELECT   AGENTID  INTO v_Current_Operations_No  FROM (SELECT AGENTID FROM TBAGENTS WHERE AGENTID IS NOT NULL ORDER BY ID DESC) WHERE rownum = 1;
      SELECT AGENTCODE_SEQ.NEXTVAL
      INTO v_Current_Operations_No
      FROM DUAL;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      meaningful_error_message := 'Number does not exist';
    WHEN OTHERS THEN
      dbms_output.put_line(v_sql);
      -- dbms_output.put_line ('Error while processing ');
      RAISE;
      NULL;
    END;
  WHEN 'POS' THEN
    BEGIN
      --SELECT   AGENTID  INTO v_Current_Operations_No  FROM (SELECT AGENTID FROM TBAGENTDEVICELINKING WHERE AGENTID IS NOT NULL ORDER BY ID DESC) WHERE rownum = 1;
      SELECT AGENTDEVICELINKING_SEQ.NEXTVAL
      INTO v_Current_Operations_No
      FROM DUAL;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      meaningful_error_message := 'Number does not exist';
    WHEN OTHERS THEN
      dbms_output.put_line(v_sql);
      -- dbms_output.put_line ('Error while processing ');
      RAISE;
      NULL;
    END;
  WHEN 'INST' THEN
    BEGIN
      --SELECT   AGENTID  INTO v_Current_Operations_No  FROM (SELECT AGENTID FROM TBAGENTDEVICELINKING WHERE AGENTID IS NOT NULL ORDER BY ID DESC) WHERE rownum = 1;
      SELECT INSTITUTE_SEQ.NEXTVAL
      INTO v_Current_Operations_No
      FROM DUAL;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      meaningful_error_message := 'Number does not exist';
    WHEN OTHERS THEN
      dbms_output.put_line(v_sql);
      -- dbms_output.put_line ('Error while processing ');
      RAISE;
      NULL;
    END;
  END CASE;
  IF v_Current_Operations_No IS NULL THEN
    CASE incode
    WHEN 'AGENT' THEN
      v_New_Operations_No := 'AGT'||'000001';
    WHEN 'POS' THEN
      v_New_Operations_No := 'POS'||'100001';
    WHEN 'INST' THEN
      v_New_Operations_No := 'INST'||'000001';
    ELSE
      dbms_output.put_line('No such code');
    END CASE;
  ELSE
    -- INSTR('Now is the time for all good men',' ',1,3)
    --v_splitValue :=SUBSTR(v_Current_Operations_No, 4);
    v_oldvalue :=TO_NUMBER(v_Current_Operations_No, '999999');
    --  v_newvalue :=v_oldvalue +1; --LPAD('tech', 8, '0');
    v_newvalueString :=LPAD(v_oldvalue,6, '0');
    -- v_New_Operations_No := 'POS' || v_newvalueString;
    CASE incode
    WHEN 'AGENT' THEN
      v_New_Operations_No := 'AGT' || v_newvalueString;
    WHEN 'POS' THEN
      v_New_Operations_No := 'POS' || v_newvalueString;
    WHEN 'INST' THEN
      v_New_Operations_No := 'INST' || v_newvalueString;
    ELSE
      dbms_output.put_line('No such code');
    END CASE;
  END IF;
  dbms_output.put_line(v_New_Operations_No);
  outresults := v_New_Operations_No;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  meaningful_error_message := 'ERROR';
  outresults               :='Error';
WHEN OTHERS THEN
  dbms_output.put_line(v_sql);
  outresults :='Error';
  dbms_output.put_line ('Error while processing ');
  NULL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_AGENT_DETAILS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_AGENT_DETAILS" (
V_AGENT_CODE IN NVARCHAR2,
C_1 IN OUT SYS_REFCURSOR
) AS 

V_ID NUMBER := 0;
V_AGENT_NAMES NVARCHAR2(50) :='';
V_DOB NVARCHAR2(50) :='';
V_LOCATION NVARCHAR2(50) :='';
V_DETAILS NVARCHAR2(50) :='';
V_LIMIT NVARCHAR2(50) :='';
V_APPROVED NVARCHAR2(50) :='';
V_BUSINESS_NAME NVARCHAR2(50) :=''; 
V_BANK_CODE NVARCHAR2(50) :='';
V_EMAIL NVARCHAR2(50) :='';
V_ID_TYPE NVARCHAR2(50) :='';
V_ID_NUMBER NVARCHAR2(50) :='';
V_BUSINESSMOBILE NVARCHAR2(50) :='';
V_REJECTED NVARCHAR2(50) :='';
V_REMARKS NVARCHAR2(50) :='';
V_CHECKERREMARK NVARCHAR2(50) :='';
V_FIRST_NAME NVARCHAR2(50) :='';
V_SECOND_NAME NVARCHAR2(50) :='';
V_LAST_NAME NVARCHAR2(50) :='';
V_CREATED_ON NVARCHAR2(50) :='';
V_CREATED_BY NVARCHAR2(50) :='';
V_APPROVED_BY NVARCHAR2(50) :='';
V_APPROVED_ON NVARCHAR2(50) :='';
V_CUSTOMER_NO NVARCHAR2(50) :='';
V_SESSION_ID NVARCHAR2(50) :='';
V_SUPER_AGENT NVARCHAR2(50) :='';
V_FIRST_LOGIN NVARCHAR2(50) :='';
V_POSTAL_ADDRESS NVARCHAR2(50) :='';
V_REFEREES_CONTACTS NVARCHAR2(50) :='';
V_BUSINESS_CATEGORY NVARCHAR2(50) :='';
V_CHECKER_REMARKS NVARCHAR2(50) :='';
V_ID_MODE NVARCHAR2(50) :='';
V_DEVICE_ATTACHED NVARCHAR2(50) :='';
V_USER_TYPE NVARCHAR2(50) :='';
V_ACTIVE NVARCHAR2(50) :='';
V_RESET_BY NVARCHAR2(50) :='';
V_RESET_DATE NVARCHAR2(50) :='';
V_AGENT_TYPE NVARCHAR2(50) :='';
V_AGENT_REF_TYPE NVARCHAR2(50) :='';
V_DEACTIVATE NVARCHAR2(50) :='';
V_COUNTY NVARCHAR2(50) :='';
V_SUB_COUNTY NVARCHAR2(50) :='';
V_STREET NVARCHAR2(50) :='';
V_WARD NVARCHAR2(50) :='';
V_AGENCY_EXPERIENCE NVARCHAR2(50) :='';
V_CITY NVARCHAR2(50) :='';
V_REGISTRATION_ID NVARCHAR2(50) :='';
V_BUSINESS_REG_NUMBER NVARCHAR2(50) :='';
V_CONTACT_MOBILE_NUMBER NVARCHAR2(50) :='';
V_PASSPORT NVARCHAR2(50) :='';
V_COMMISSION_ACCOUNT NVARCHAR2(50) :='';
V_COMMISSION_BANK NVARCHAR2(50) :='';
V_BRANCH NVARCHAR2(50) :='';
V_BUSINESS_ENTITY NVARCHAR2(50) :='';
V_KIOSK NVARCHAR2(50) :='';
V_CATEGORY_ID NVARCHAR2(50) :='';
V_GENDER NVARCHAR2(50) :='';
V_PAN NVARCHAR2(50) :='';
V_QR_CODE_IMG NVARCHAR2(5000) :='';

V_COUNT NUMBER :=0;
V_LINKED_ACCOUNT  NVARCHAR2(2000) :='';
V_WALLET_ACCOUNT NVARCHAR2(50) := '';
V_WALLET_BALANCE NVARCHAR2(50) :='';
AAGENT_CODE NVARCHAR2(50) :='';

V_LIQUIDATION_TYPE  NVARCHAR2(50) :='';

BEGIN


  BEGIN

  DBMS_OUTPUT.PUT_LINE(V_AGENT_CODE);
    SELECT COUNT (1) INTO V_COUNT FROM DUAL WHERE EXISTS (SELECT ID FROM TB_AGENTS WHERE (AGENT_CODE = V_AGENT_CODE OR AGENT_CODE_ALIAS = V_AGENT_CODE OR PAN = V_AGENT_CODE) AND ROWNUM = 1);

    IF V_COUNT < 1 THEN 
       OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Agent Not found' AS RESP_DESC FROM dual;
       RETURN;
    END IF;   
  END;

  BEGIN 
    SELECT 
    ID ,AGENT_NAMES,DOB,LOCATION,DETAILS,LIMIT,APPROVED,BUSINESS_NAME, BANK_CODE,EMAIL,ID_TYPE,ID_NUMBER,BUSINESSMOBILE,
    REJECTED,REMARKS,CHECKERREMARK,FIRST_NAME,SECOND_NAME,LAST_NAME,CREATED_ON,CREATED_BY,APPROVED_BY,APPROVED_ON,CUSTOMER_NO,
    SESSION_ID,SUPER_AGENT,FIRST_LOGIN,POSTAL_ADDRESS,REFEREES_CONTACTS,BUSINESS_CATEGORY,
    CHECKER_REMARKS,ID_MODE,DEVICE_ATTACHED,USER_TYPE,ACTIVE,RESET_BY,RESET_DATE,AGENT_TYPE,DEACTIVATE,
    COUNTY,SUB_COUNTY,STREET,WARD,AGENCY_EXPERIENCE,CITY,
    REGISTRATION_ID,BUSINESS_REG_NUMBER,CONTACT_MOBILE_NUMBER,PASSPORT,COMMISSION_ACCOUNT,
    COMMISSION_BANK,BRANCH,BUSINESS_ENTITY,KIOSK,CATEGORY_ID,GENDER,
    PAN,'', AGENT_REF_TYPE, AGENT_CODE, LIQUIDATION_TYPE INTO 
    V_ID ,V_AGENT_NAMES,V_DOB,V_LOCATION,V_DETAILS,V_LIMIT,V_APPROVED,V_BUSINESS_NAME, V_BANK_CODE,V_EMAIL,V_ID_TYPE,V_ID_NUMBER,V_BUSINESSMOBILE,
    V_REJECTED,V_REMARKS,V_CHECKERREMARK,V_FIRST_NAME,V_SECOND_NAME,V_LAST_NAME,V_CREATED_ON,V_CREATED_BY,V_APPROVED_BY,V_APPROVED_ON,V_CUSTOMER_NO,
    V_SESSION_ID,V_SUPER_AGENT,V_FIRST_LOGIN,V_POSTAL_ADDRESS,V_REFEREES_CONTACTS,V_BUSINESS_CATEGORY,V_CHECKER_REMARKS,V_ID_MODE,V_DEVICE_ATTACHED,
    V_USER_TYPE,V_ACTIVE,V_RESET_BY,V_RESET_DATE,V_AGENT_TYPE,V_DEACTIVATE,V_COUNTY,V_SUB_COUNTY,V_STREET,V_WARD,V_AGENCY_EXPERIENCE,V_CITY,
    V_REGISTRATION_ID,V_BUSINESS_REG_NUMBER,V_CONTACT_MOBILE_NUMBER,V_PASSPORT,V_COMMISSION_ACCOUNT,V_COMMISSION_BANK,V_BRANCH,V_BUSINESS_ENTITY,V_KIOSK,
    V_CATEGORY_ID,V_GENDER,V_PAN,V_QR_CODE_IMG, V_AGENT_REF_TYPE, AAGENT_CODE, V_LIQUIDATION_TYPE FROM TB_AGENTS WHERE (AGENT_CODE = V_AGENT_CODE OR AGENT_CODE_ALIAS=V_AGENT_CODE OR PAN = V_AGENT_CODE) AND ROWNUM = 1;



--    EXCEPTION WHEN OTHERS THEN
--      RAISE;
--       OPEN C_1 FOR SELECT '03' AS RESP_CODE,'ERROR ' AS RESP_DESC FROM dual;
--      RETURN;

  END;

  BEGIN 
    DBMS_OUTPUT.PUT_LINE(V_CUSTOMER_NO);

     SELECT COUNT (1) INTO V_COUNT FROM DUAL WHERE EXISTS 
     (SELECT ACCOUNT_NO FROM TB_ACCOUNT WHERE (CUSTOMER_NO = V_AGENT_CODE OR CUSTOMER_NO IN (SELECT C.AGENT_CODE FROM TB_AGENTS C WHERE C.AGENT_CODE_ALIAS=V_AGENT_CODE OR  C.PAN = V_AGENT_CODE)) AND ACCOUNT_CLASS = '204'  AND ROWNUM = 1);

     IF V_COUNT < 1 THEN
        OPEN C_1 FOR SELECT '02' AS RESP_CODE,'Wallet account not found' AS RESP_DESC FROM dual;
        RETURN;
     END IF;


    SELECT ACCOUNT_NO,ACTUAL_BAL INTO V_WALLET_ACCOUNT,V_WALLET_BALANCE
    FROM TB_ACCOUNT WHERE (CUSTOMER_NO = V_AGENT_CODE OR CUSTOMER_NO IN (SELECT C.AGENT_CODE FROM TB_AGENTS C WHERE C.AGENT_CODE_ALIAS=V_AGENT_CODE OR  C.PAN = V_AGENT_CODE)) AND ACCOUNT_CLASS = '204'  AND ROWNUM = 1;

    EXCEPTION WHEN OTHERS THEN
      RAISE;
      OPEN C_1 FOR SELECT '02' AS RESP_CODE,'Wallet account not found' AS RESP_DESC FROM dual;
      RETURN;
  END;

   -- V_LINKED_ACCOUNT := FN_GET_LINKED_ACCOUNTS(V_CUSTOMER_NO);


  OPEN C_1 FOR SELECT 
    V_ID  AS ID ,
    V_AGENT_NAMES AS AGENT_NAMES,V_DOB AS DOB,V_LOCATION AS LOCATION,
    V_DETAILS AS DETAILS,V_LIMIT AS LIMIT,V_APPROVED AS APPROVED,
    V_BUSINESS_NAME AS BUSINESS_NAME, V_BANK_CODE AS  BANK_CODE,
    V_EMAIL AS EMAIL,V_ID_TYPE AS ID_TYPE,
    V_ID_NUMBER AS ID_NUMBER,V_BUSINESSMOBILE AS BUSINESSMOBILE, 
    V_REJECTED AS     REJECTED,V_REMARKS AS REMARKS,
    V_CHECKERREMARK AS CHECKERREMARK,V_FIRST_NAME AS FIRST_NAME,
    V_SECOND_NAME AS SECOND_NAME,V_LAST_NAME AS LAST_NAME,
    V_CREATED_ON AS CREATED_ON,V_CREATED_BY AS CREATED_BY,
    V_APPROVED_BY AS APPROVED_BY,V_APPROVED_ON AS APPROVED_ON,
    V_CUSTOMER_NO AS CUSTOMER_NO,    V_SESSION_ID AS     SESSION_ID,
    V_SUPER_AGENT AS SUPER_AGENT,V_FIRST_LOGIN AS FIRST_LOGIN,
    V_POSTAL_ADDRESS AS POSTAL_ADDRESS,V_REFEREES_CONTACTS AS REFEREES_CONTACTS,
    V_BUSINESS_CATEGORY AS BUSINESS_CATEGORY,V_CHECKER_REMARKS AS     CHECKER_REMARKS,
    V_ID_MODE AS ID_MODE,V_DEVICE_ATTACHED AS DEVICE_ATTACHED,   
    V_USER_TYPE AS USER_TYPE,V_ACTIVE AS ACTIVE,V_RESET_BY AS RESET_BY,
    V_RESET_DATE AS RESET_DATE,V_AGENT_TYPE AS AGENT_TYPE,
    V_DEACTIVATE AS DEACTIVATE,V_COUNTY AS     COUNTY,
    V_SUB_COUNTY AS SUB_COUNTY,V_STREET AS STREET,
    V_WARD AS WARD,V_AGENCY_EXPERIENCE AS AGENCY_EXPERIENCE,
    V_CITY AS CITY,    V_REGISTRATION_ID AS     REGISTRATION_ID,
    V_BUSINESS_REG_NUMBER AS BUSINESS_REG_NUMBER,
    V_CONTACT_MOBILE_NUMBER AS CONTACT_MOBILE_NUMBER,
    V_PASSPORT AS PASSPORT,V_COMMISSION_ACCOUNT AS COMMISSION_ACCOUNT,
    V_COMMISSION_BANK AS     COMMISSION_BANK,V_BRANCH AS BRANCH,
    V_BUSINESS_ENTITY AS BUSINESS_ENTITY,V_KIOSK AS KIOSK,    
    V_CATEGORY_ID AS CATEGORY_ID,V_GENDER AS GENDER,
    V_APPROVED AS APPROVED,
    V_PAN AS     PAN,
    V_AGENT_REF_TYPE AS     AGENT_REF_TYPE,
    V_QR_CODE_IMG AS QR_CODE_IMG,
    V_WALLET_ACCOUNT AS WALLET_ACCOUNT,
    V_LINKED_ACCOUNT AS LINKED_ACCOUNT,
    V_WALLET_BALANCE AS FLOAT_BALANCE,
    '00' AS RESP_CODE,
    'Agent found' AS RESP_DESC,
    AAGENT_CODE AS AGENT_CODE,
    V_LIQUIDATION_TYPE AS LIQUIDATION_TYPE FROM DUAL;

    RETURN;

END A_SP_GET_AGENT_DETAILS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_APPROVAL_DATA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_APPROVAL_DATA" (
  IV_created_by IN VARCHAR2,
    C_1           IN OUT SYS_REFCURSOR)
AS
BEGIN
  OPEN c_1 FOR SELECT * FROM
  (SELECT '00' AS RESP_CODE,
    'Success'  AS RESP_DESC,
    A.ID,
    A.CREATED_ON,
    A.DATA,
    A.CREATED_BY,A.DESTINATION_ADDRESS
  FROM TB_STAGING_ACTION A
  WHERE A.CREATED_BY <> IV_created_by ----Maker checker -- The one who created should not see it on Approvals
  AND NVL(A.IS_APPROVED,0) = 0 AND NVL(A.IS_REJECTED,0) =0 
    --AND A.WORKFLOW_ID   = IV_workflow_id
  ORDER BY ID DESC
  )WHERE ROWNUM<=100;
END A_SP_GET_APPROVAL_DATA;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_BANK_CHARGES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_BANK_CHARGES" 
                    (
                      IV_AMOUNT IN NUMBER ,
                       C_1 IN OUT SYS_REFCURSOR
                    ) AS 
                    
                    V_EXCISE_DUTY_RATE NUMBER(10) :=0;
                    V_ECLE_COMM_RATE NUMBER (10) :=0;
                    V_EXCISE_DUTY_AMNT NUMBER(18,5) :=0;
                    V_ECLE_AMNT NUMBER(18,5) :=0;
                    V_BANK_AMNT NUMBER(18,5) :=0;
                    BEGIN
                    
                    
                      V_EXCISE_DUTY_RATE := FN_GETGENERAL_PARAMS('EXCISE_DUTY');  
                      V_ECLE_COMM_RATE := FN_GETGENERAL_PARAMS('ECLECTICS_COMMISSION');  
                    
                      V_EXCISE_DUTY_AMNT := IV_AMOUNT * V_EXCISE_DUTY_RATE/100;
                    
                      V_ECLE_AMNT := IV_AMOUNT * V_ECLE_COMM_RATE / 100 ;
                    
                      V_BANK_AMNT := IV_AMOUNT - V_ECLE_AMNT;
                    
                      DBMS_OUTPUT.PUT_LINE('AMOUNT '||IV_AMOUNT);
                      DBMS_OUTPUT.PUT_LINE('DUTY '||V_EXCISE_DUTY_AMNT);
                      DBMS_OUTPUT.PUT_LINE('ECL '||V_ECLE_AMNT);
                      DBMS_OUTPUT.PUT_LINE('BANK '||V_BANK_AMNT);
                    
                      OPEN C_1 FOR SELECT ROUND( V_EXCISE_DUTY_AMNT) AS EXCISE_DUTY ,
                      ROUND( V_ECLE_AMNT) AS ECLECTICS_COMMISSION ,ROUND( V_BANK_AMNT ) AS BANK_COMMISSION FROM DUAL; 
                    
                    END A_SP_GET_BANK_CHARGES;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_CBS_MINI_STATEMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_CBS_MINI_STATEMENT" (
    iv_ACCOUNT NVARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
BEGIN
  OPEN c_1 FOR SELECT * FROM
  (SELECT JSON_ARRAYAGG(MINI_DATA) AS MINI_DATA
  /*
  Value_Date,
    Field37,
    REPLACE(narration,'COMMISSION','CHARGE') Narration,
    CASE DRCR
      WHEN 'D'
      THEN 'DR'
      ELSE 'CR'
    END AS DRCR,
    Amount,
    ROUND(VW_TRANSACTIONS.AVAILABLE_BALANCE,2) AS AvailableBalance ,
    ROUND(VW_TRANSACTIONS.ACTUAL_BALANCE,2)    AS ActualBalance
    */
  FROM VW_TRANS_CBS_MINI
  WHERE (FIELD102=iv_ACCOUNT OR FIELD103= iv_ACCOUNT) AND ROWNUM <=10
  ) WHERE ROWNUM <=10;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_CHARGES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_CHARGES" (
    V_FIELD3   IN NVARCHAR2,
    V_FIELD4   IN NVARCHAR2,
    V_CHANNEL  IN NVARCHAR2,
    V_FIELD100 IN NVARCHAR2,
    V_FIELD102 IN NVARCHAR2,
    V_FIELD103 IN NVARCHAR2,
    C_1       IN OUT SYS_REFCURSOR )
AS
  V_CHARGE     NUMBER(18,5):=0;
  V_CHARGE103  NUMBER(18,5):=0;
  V_MAX_CHARGE NUMBER(18,5);
  V_MIN_CHARGE NUMBER(18,5);
  V_ACCOUNT_CLASS NVARCHAR2(20);
  V_FEE_TYPE   CHAR(6):='N';
  V_RANGE_FROM NUMBER(18,5);
  V_RANGE_TO   NUMBER(18,5);
  V_TEMP       NUMBER(5, 0) :=0;
  V_TEMP2      NUMBER(5, 0) :=0;
  V_EXCISE_DUTY_RATE  NUMBER(18,5):=0;
  V_EXCISE_DUTY_AMOUNT  NUMBER(18,5);
  V_AVAILABLE_BAL NVARCHAR2(20) :='';
  V_COUNT NUMBER(2) :=0;
BEGIN
  

  IF (LENGTH (V_FIELD102)< 1) AND (LENGTH (V_FIELD103)< 1) THEN
    BEGIN
      OPEN C_1 FOR SELECT V_CHARGE||'|'||V_CHARGE103 FROM DUAL;
      RETURN;
    END;
    
  ELSE 
     SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO     = V_FIELD102
      AND ROWNUM       =1
      );
      
      IF V_COUNT > 0 THEN 
           SELECT AVAILABLE_BAL INTO V_AVAILABLE_BAL FROM TB_ACCOUNT WHERE ACCOUNT_NO = V_FIELD102 AND ROWNUM = 1;        
      END IF;
        
  END IF;
  --V_ACCOUNT_CLASS:=SUBSTR(V_FIELD102, 1,3);
  BEGIN
    SELECT 1
    INTO V_TEMP
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1
      );
  EXCEPTION
  WHEN OTHERS THEN
    V_CHARGE :=-1;
  END;
  IF V_TEMP = 1 THEN
    SELECT FVR
    INTO V_FEE_TYPE
    FROM TB_TRANS_COMMISSION_CHARGES
    WHERE PROCODE     = V_FIELD3
    AND TRXCODE       = V_FIELD100
   --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
    AND TRXACTIVE     = 1
    AND ROWNUM       <=1;
  END IF;
  IF V_FEE_TYPE = 'F' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
     -- AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=-1;
    END;
  END IF;
  IF V_FEE_TYPE = 'R' THEN
    BEGIN
      SELECT NVL( AMOUNT,0)
      INTO V_CHARGE
      FROM
        (SELECT AMOUNT
        FROM TB_CHARGE_RANGE
        WHERE PROCODE = V_FIELD3 AND TRX_CODE = V_FIELD100
        AND V_FIELD4 BETWEEN RANGE_FROM AND RANGE_TO
        AND ROWNUM <= 1
        ORDER BY RANGE_TO ASC
        )
      WHERE ROWNUM <= 1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=-1;
    END;
  END IF;
  IF V_FEE_TYPE = 'P' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=-1;
    END;
  END IF;
  IF V_FEE_TYPE = 'PF' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
      SELECT NVL(RANGE_FROM,0),
        NVL( RANGE_TO,0)
      INTO V_MIN_CHARGE,
        V_MAX_CHARGE
      FROM TB_CHARGE_RANGE
      WHERE PROCODE = V_FIELD3;
      IF V_CHARGE   > V_MAX_CHARGE THEN
        V_CHARGE   := V_MAX_CHARGE;
      END IF;
      IF V_CHARGE < V_MIN_CHARGE THEN
        V_CHARGE := V_MIN_CHARGE ;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=-1;
      -- highly likely the charge is not configured
   --   OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Transaction amount not with the set limit' as RESP_CODE FROM DUAL;
    END;
  END IF;
  BEGIN
    V_EXCISE_DUTY_RATE := FN_GETGENERAL_PARAMS('EXCISE_DUTY');
    
     EXCEPTION
      WHEN OTHERS  THEN
          OPEN C_1 FOR SELECT '01' AS RESP_CODE ,
          'Failed to fetch excise duty' as RESP_DESC FROM DUAL;
  END;
  
  IF V_CHARGE = -1 THEN 
     OPEN C_1 FOR SELECT '01' AS RESP_CODE ,'Failed to retrieve charge' as RESP_DESC FROM DUAL;
     RETURN;
  END IF;
  
  V_EXCISE_DUTY_AMOUNT := V_CHARGE*V_EXCISE_DUTY_RATE/100;
  OPEN C_1 FOR SELECT '00' AS RESP_CODE ,
  'Success' as RESP_DESC,V_CHARGE as CHARGE_102,V_CHARGE103 as CHARGE_103,
  round( V_EXCISE_DUTY_AMOUNT) as EX_DUTY_AMT, V_AVAILABLE_BAL AS
  ACTUAL_BALANCE FROM DUAL;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_CHARGES_bk
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_CHARGES_bk" (
    V_FIELD3   IN NVARCHAR2,
    V_FIELD4   IN NVARCHAR2,
    V_CHANNEL  IN NVARCHAR2,
    V_FIELD100 IN NVARCHAR2,
    v_FIELD24 IN NVARCHAR2,
    V_FIELD102 IN NVARCHAR2,
    V_FIELD103 IN NVARCHAR2,
    C_1       IN OUT SYS_REFCURSOR )
AS
  V_CHARGE     NUMBER(18,5):=0;
  V_CHARGE103  NUMBER(18,5):=0;
  V_MAX_CHARGE NUMBER(18,5);
  V_MIN_CHARGE NUMBER(18,5);
  V_ACCOUNT_CLASS NVARCHAR2(20);
  V_FEE_TYPE   CHAR(6):='N';
  V_RANGE_FROM NUMBER(18,5);
  V_RANGE_TO   NUMBER(18,5);
  V_TEMP       NUMBER(5, 0) :=0;
  V_TEMP2      NUMBER(5, 0) :=0;
  V_EXCISE_DUTY_RATE  NUMBER(18,5):=0;
 V_EXCISE_DUTY_AMOUNT  NUMBER(18,5);
 V_ACTUAL_BAL NVARCHAR2(20) :='';
  V_COUNT NUMBER(2) :=0;
BEGIN
  IF (LENGTH (V_FIELD102)< 1) AND (LENGTH (V_FIELD103)< 1) THEN
    BEGIN
      OPEN C_1 FOR SELECT V_CHARGE||'|'||V_CHARGE103 FROM DUAL;
      RETURN;
    END;
    
    ELSE 
    
    IF V_FIELD24 <> 'CC' THEN 
            dbms_output.put_line('AWESOME-'||V_FIELD24||'--');
      END IF;      
    

    IF V_FIELD24 <> 'CM' AND V_FIELD24 <> 'CC' THEN
    
    dbms_output.put_line(V_FIELD24);
     SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO     = V_FIELD102
      AND ROWNUM       =1
      );
      
        IF V_COUNT > 0 THEN 
           SELECT ACTUAL_BAL INTO V_ACTUAL_BAL FROM TB_ACCOUNT WHERE ACCOUNT_NO = V_FIELD102 AND ROWNUM = 1;        
      END IF;
      
    END IF;
  END IF;
  --V_ACCOUNT_CLASS:=SUBSTR(V_FIELD102, 1,3);
  BEGIN
    SELECT 1
    INTO V_TEMP
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1
      );
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END;
  IF V_TEMP = 1 THEN
    SELECT FVR
    INTO V_FEE_TYPE
    FROM TB_TRANS_COMMISSION_CHARGES
    WHERE PROCODE     = V_FIELD3
    AND TRXCODE       = V_FIELD100
   --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
    AND TRXACTIVE     = 1
    AND ROWNUM       <=1;
  END IF;
  IF V_FEE_TYPE = 'F' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
     -- AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'R' THEN
    BEGIN
    dbms_output.put_line('R');
      SELECT NVL( AMOUNT,0)
      INTO V_CHARGE
      FROM
        (SELECT AMOUNT
        FROM TB_CHARGE_RANGE
        WHERE PROCODE = V_FIELD3 AND TRX_CODE = V_FIELD100
        AND V_FIELD4 BETWEEN RANGE_FROM AND RANGE_TO
        AND ROWNUM <= 1
        ORDER BY RANGE_TO ASC
        )
      WHERE ROWNUM <= 1;
    EXCEPTION
    WHEN OTHERS THEN
    --RAISE;
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'P' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'PF' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
      SELECT NVL(RANGE_FROM,0),
        NVL( RANGE_TO,0)
      INTO V_MIN_CHARGE,
        V_MAX_CHARGE
      FROM TB_CHARGE_RANGE
      WHERE PROCODE = V_FIELD3;
      IF V_CHARGE   > V_MAX_CHARGE THEN
        V_CHARGE   := V_MAX_CHARGE;
      END IF;
      IF V_CHARGE < V_MIN_CHARGE THEN
        V_CHARGE := V_MIN_CHARGE ;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  BEGIN
    V_EXCISE_DUTY_RATE := FN_GETGENERAL_PARAMS('EXCISE_DUTY');
    
     EXCEPTION
      WHEN OTHERS  THEN
          OPEN C_1 FOR SELECT '01' AS RESP_CODE ,
          'Failed to fetch excise duty' as RESP_DESC FROM DUAL;
  END;
  V_EXCISE_DUTY_AMOUNT :=ROUND( V_CHARGE*V_EXCISE_DUTY_RATE / 100);
  
  if V_CHARGE = -1 then
     OPEN C_1 FOR SELECT '01' AS RESP_CODE ,'Charge nor defined for amount' as RESP_DESC FROM DUAL;
  else 
      OPEN C_1 FOR SELECT '00' AS RESP_CODE ,'Success' as RESP_DESC,V_CHARGE as CHARGE_102,V_CHARGE103 as CHARGE_103, V_EXCISE_DUTY_AMOUNT as EX_DUTY_AMT,
  V_ACTUAL_BAL AS
  ACTUAL_BALANCE FROM DUAL;
  end if;

END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_LOYALITY_POINTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_LOYALITY_POINTS" (
  IV_CUSTOMER_NO IN NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR
) AS 

V_LOYALITY_POINTS NUMBER(18) :=0;
V_COUNT NUMBER(2) :=0;
BEGIN

  SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
    SELECT ID FROM TB_CUSTOMER WHERE CUSTOMER_NO = IV_CUSTOMER_NO AND ROWNUM = 1 
  );
  
  
  dbms_output.put_line('count |'||V_COUNT);
  IF V_COUNT < 1 THEN
      OPEN C_1  FOR SELECT ('57|0|0|0|0|CUSTOMER NOT FOUND') AS DATAX FROM DUAL;
      RETURN ;
  END IF;
  
  SELECT LOYALITY_POINTS INTO V_LOYALITY_POINTS FROM TB_CUSTOMER WHERE CUSTOMER_NO = IV_CUSTOMER_NO  AND ROWNUM = 1;
  
  OPEN C_1 FOR SELECT ('00|'||V_LOYALITY_POINTS||'|'||V_LOYALITY_POINTS||'|0|0|Success') AS DATAX, '0|0' AS GEMIFICATION FROM DUAL;
END A_SP_GET_LOYALITY_POINTS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_MINI_STATEMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_MINI_STATEMENT" (
    iv_MWALLETACCOUNT NVARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
BEGIN
  OPEN c_1 FOR SELECT * FROM
  (SELECT JSON_ARRAYAGG(MINI_DATA) AS MINI_DATA
  /*
  Value_Date,
    Field37,
    REPLACE(narration,'COMMISSION','CHARGE') Narration,
    CASE DRCR
      WHEN 'D'
      THEN 'DR'
      ELSE 'CR'
    END AS DRCR,
    Amount,
    ROUND(VW_TRANSACTIONS.AVAILABLE_BALANCE,2) AS AvailableBalance ,
    ROUND(VW_TRANSACTIONS.ACTUAL_BALANCE,2)    AS ActualBalance
    */
  FROM VW_TRANS_MINI_JSON
  WHERE Account_No=iv_MWALLETACCOUNT AND ROWNUM <=10
  ) WHERE ROWNUM <=10;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_RESPONSE_MAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_RESPONSE_MAPPING" (
    IV_RESP_CODE IN VARCHAR2,
    IV_LANG      IN VARCHAR2,
    C_1          IN OUT SYS_REFCURSOR)
AS
  V_COUNT NUMBER :=0;
  V_LANG nvarchar2(10):='en';
BEGIN
IF LENGTH(NVL(IV_LANG,'')) < 2 THEN
V_LANG:='en';
END IF;
  SELECT COUNT(ID)
  INTO V_COUNT
  FROM TB_ERROR_CODE
  WHERE UPPER(LANG) = UPPER(V_LANG)
  AND ERROR_CODE    = IV_RESP_CODE
  AND ROWNUM        =1;
  IF V_COUNT        = 0 THEN
    OPEN C_1 FOR SELECT '01' "RESP_CODE",
    'Response Code not Mapped' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;
  OPEN C_1 FOR SELECT '00'
AS
  RESP_CODE,
  CUSTOMER_RESPONSE
AS
  RESP_DESC FROM TB_ERROR_CODE WHERE UPPER(LANG) = UPPER(V_LANG) AND ERROR_CODE = IV_RESP_CODE AND ROWNUM=1;
END A_SP_GET_RESPONSE_MAPPING;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_SERIES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_SERIES" (
p_SeriesID IN NVARCHAR2,
p_Prefix IN number DEFAULT 0,
c_1 OUT SYS_REFCURSOR
)
AS 

v_Series  NVARCHAR2(10);
v_Length  NUMBER;
BEGIN

SELECT NVL(Series_Length,5) INTO v_Length FROM tb_Sequence WHERE UniqueID=p_SeriesID;
		SELECT CAST(NVL(Series,0) AS NUMBER(10))+1 INTO v_Series FROM tb_Sequence WHERE UniqueID=p_SeriesID;
        v_Series:= SUBSTR(CONCAT('0000000000',v_Series),-v_Length,v_Length);
		UPDATE tb_Sequence SET Series=v_Series WHERE UniqueID=p_SeriesID;

		IF(p_Prefix=1) THEN
		  OPEN c_1 FOR SELECT p_SeriesID||v_Series as Sequence FROM dual;
		ELSE
		  OPEN c_1 FOR SELECT v_Series as Sequence FROM dual;
		END IF;

EXCEPTION
WHEN OTHERS THEN
  raise;
END A_SP_Get_Series;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_SMS_MESSAGE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_SMS_MESSAGE" (
    IV_FIELD3   IN VARCHAR2,
    IV_FIELD100 IN VARCHAR2,
    IV_FIELD46  IN VARCHAR2,
    IV_FIELD39  IN VARCHAR2,
    IV_DEST     IN VARCHAR2,
    C_1         IN OUT SYS_REFCURSOR)
AS
  V_COUNT NUMBER :=0;
BEGIN
  SELECT COUNT(SMS_ID)
  INTO V_COUNT
  FROM TB_SMS_TEMPLATE
  WHERE FIELD3      = IV_FIELD3
  AND FIELD100      = IV_FIELD100
  AND LANGUAGE_CODE = IV_FIELD46
  AND DEST          = IV_DEST
  AND ROWNUM        =1;
  IF V_COUNT        < 1 THEN
    OPEN C_1 FOR SELECT '01' "RESP_CODE",
    'Response Code Not Mapped' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;
  BEGIN
    OPEN C_1 FOR SELECT '00'
  AS
    RESP_CODE,
    SMS_TEMPLATE
  AS
    RESP_DESC FROM TB_SMS_TEMPLATE 
    WHERE FIELD3 = IV_FIELD3 
    AND FIELD100 = IV_FIELD100 
    AND LANGUAGE_CODE = IV_FIELD46 
    AND DEST = IV_DEST 
    AND ROWNUM=1;
  END;
END A_SP_GET_SMS_MESSAGE;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_SPECIFIC_APPROVAL_DATA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_SPECIFIC_APPROVAL_DATA" (
    IV_created_by IN VARCHAR2,
    IV_destination_address IN VARCHAR2,
    C_1           IN OUT SYS_REFCURSOR)
AS
BEGIN

  OPEN c_1 FOR SELECT * FROM
  (SELECT '00' AS RESP_CODE,
    'Success'  AS RESP_DESC,
    A.ID,
    A.CREATED_ON,
    A.DATA,
    A.CREATED_BY,A.DESTINATION_ADDRESS
  FROM TB_STAGING_ACTION A
  WHERE A.CREATED_BY      <> IV_created_by ----Maker checker -- The one who created should not see it on Approvals
  AND A.DESTINATION_ADDRESS = IV_destination_address
  AND NVL(A.IS_APPROVED,0) = 0 AND NVL(A.IS_REJECTED,0) =0 
    --AND A.WORKFLOW_ID   = IV_workflow_id
  ORDER BY ID DESC
  )WHERE ROWNUM<=100;
  
END A_SP_GET_SPECIFIC_APPROVAL_DATA;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GET_TRANS_REFERENCE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GET_TRANS_REFERENCE" (
    C_1 IN OUT SYS_REFCURSOR)
AS
BEGIN
 OPEN c_1 FOR  SELECT TRANS_AGENCY_REFERENCE_SEQ.NEXTVAL AS CHANNEL_TRANS_REF FROM DUAL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_GL_BALANCE_ARCHIVE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GL_BALANCE_ARCHIVE" (
	p_updateDate DATE, ---pass working date ---DD-MM-YYYY
	c_1 OUT SYS_REFCURSOR
)
AS

 v_GL_Code NVARCHAR2(20);
 v_GLCode nvarchar2(10);
 v_GLAmount number(18,5);
 v_totSum number(18,5);
 v_GLType char(1);
 v_OPENINGBAL NUMBER(18,2);

 v_PreviousWorkingDate DATE; 
 v_WorkingDate DATE;  
 v_PostingDate DATE; 
 v_PreviousEndOfYear DATE; 
 v_datediff NUMBER(10);
 v_CrAmt number(18,5);
 v_DrAmt number(18,5);
 v_ClosingBal number(18,5);
 v_ProductCode NVARCHAR2(5); 
 v_AMT  NUMBER(18,2); 
 v_LeafGL NVARCHAR2(10);
 v_HolidayDate DATE;
 V_COUNT INT := 0;
BEGIN

SAVEPOINT V_SAFEPOINT;

SELECT PreviousWorkingDate, WorkingDate, PreviousEndOfYear INTO v_PreviousWorkingDate, v_WorkingDate, v_PreviousEndOfYear FROM tb_Date_Settings;

	v_HolidayDate := p_updateDate; ---We use this variable to find previous date considering holidays, and cases of several subsequent holidays
	v_WorkingDate := p_updateDate;
	v_PreviousWorkingDate := TO_DATE(v_HolidayDate) - 1;

	----
    ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
	(SELECT * FROM tb_Holiday WHERE Holiday_Date = v_PreviousWorkingDate AND ROWNUM =1);
	IF(V_COUNT > 0) THEN
		v_HolidayDate := TO_DATE(v_HolidayDate) - 1; 
		v_PreviousWorkingDate := TO_DATE(v_HolidayDate) - 1;
	END IF;

		DELETE tb_GL_Balance_Archive WHERE Working_Date = v_WorkingDate; ---remove any records for the selected working date

		INSERT INTO tb_GL_Balance_Archive(
		 GL_Code,Financial_Cycle,Financial_Period,DR_Bal_LCY,CR_Bal_LCY,GL_Balance,DR_Close_Balance,CR_Close_Balance,
		 CR_Open_Balance,DR_Open_Balance,Created_By,Created_On,CR_Period_Balance,DR_Period_Balance,Date_Added,Working_Date,Opening_Bal,zero_gl,Closing_Bal)
		 SELECT GL_Code,Financial_Cycle,Financial_Period,0,0,GL_Balance,DR_Close_Balance,CR_Close_Balance,
		 CR_Open_Balance,DR_Open_Balance,Created_By,Created_On,CR_Period_Balance,DR_Period_Balance,SYSTIMESTAMP,v_WorkingDate,0,zero_gl,NVL(GL_Balance,0)
		 FROM tb_GL_Balance; --ISNULL(GLBalance,0)



		-------------------------------------------------------------------------------
			--UPDATE OPENING BALANCES ..formular = OpeningBal + DrMvt - CrMvt		

			 MERGE INTO tb_GL_Balance_Archive t1
				USING
				(
					-- For more complicated queries you can use WITH clause here
						WITH CTE_OpeningBal AS
						(
							  SELECT  NVL(GL_Code,'') GLCode, (NVL(Opening_Bal,0) + DR_Bal_LCY - CR_Bal_LCY) Balance 
							  FROM tb_GL_Balance_Archive WHERE  TO_DATE(Working_Date) = v_WorkingDate ---We have holidays and sundays skipped at eod, use prev working date here
						)
						SELECT * FROM CTE_OpeningBal
				)t2
				ON(t1.GL_Code = t2.GlCode AND TO_DATE(t1.Working_Date) = v_WorkingDate)
				WHEN MATCHED THEN UPDATE SET
				t1.Opening_Bal = t2.Balance;

		-------------------------------------------------------------------------------
    DECLARE
		CURSOR CUR_LEAFGL IS
		 SELECT NVL(Opening_Bal,0) GLAmount, GL_Code FROM tb_GL_Balance_Archive WHERE TO_DATE(Working_Date) = v_WorkingDate; 
         V_CUR_LEAFGL_DATA CUR_LEAFGL%ROWTYPE;

         BEGIN
          -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
          OPEN CUR_LEAFGL;
          -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
          FETCH CUR_LEAFGL
          INTO V_CUR_LEAFGL_DATA;
          -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
          WHILE CUR_LEAFGL%FOUND
          LOOP
            BEGIN
                v_GLAmount := V_CUR_LEAFGL_DATA.GLAmount;
                v_GLCode   := V_CUR_LEAFGL_DATA.GL_Code;

                -- IF(@GLType IN ('A','E') AND  @DRCR='C')  --- DR INCREASE , CR DECREASE
                 SELECT GL_TYPE INTO v_GLType FROM tb_GL WHERE GL_Code=v_GLCode;
                 SELECT NVL(SUM(AMOUNT),0) INTO v_CrAmt FROM VW_TRANSACTIONS WHERE Account_No=v_GLCode AND DRCR='C' AND  TO_DATE(VALUE_DATE) = v_WorkingDate;
                 SELECT NVL(SUM(AMOUNT),0) INTO v_DrAmt FROM VW_TRANSACTIONS WHERE Account_No=v_GLCode AND DRCR='D' AND  TO_DATE(VALUE_DATE) = v_WorkingDate;

                 IF(v_GLType IN ('A','E')) THEN
                   v_GLAmount := NVL(v_GLAmount,0)  + NVL(v_DrAmt,0) -NVL(v_CrAmt,0);
                 ELSE
                   v_GLAmount := NVL(v_GLAmount,0)+NVL(v_CrAmt,0) - NVL(v_DrAmt,0);
                END IF;

                    UPDATE tb_GL_Balance_Archive SET CR_Bal_LCY = NVL(v_CrAmt,0),DR_Bal_LCY=NVL(v_DrAmt,0),Gl_Balance = NVL(v_GLAmount,0), 
                    Closing_Bal =  NVL(v_GLAmount,0) where GL_Code=v_GLCode AND TO_DATE(Working_Date) = v_WorkingDate;

                 v_CrAmt := 0;
                 v_DrAmt := 0;

            ---CATCH EXCEPTION
            EXCEPTION
              WHEN OTHERS THEN
              --RAISE;
                OPEN c_1 FOR SELECT '01' AS Status, 'There was an error while acrchiving GL Balances' AS Narration FROM dual;

                ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                RETURN;
            END;

        FETCH CUR_LEAFGL INTO V_CUR_LEAFGL_DATA;
      END LOOP;
      -- FREE RESOURCES USED BY THE CURSOR
      CLOSE CUR_LEAFGL;

    END;
		--------------------------------------------------------------------------------
        ---Update all other GLs
		A_Update_Other_GL_Balance (v_WorkingDate, v_WorkingDate);
		--------------------------------------------------------------------------------

COMMIT ;


 OPEN c_1 FOR SELECT '00' AS Status, 'successful' AS Narration FROM dual;

EXCEPTION
  WHEN OTHERS THEN
  --RAISE;
	OPEN c_1 FOR SELECT '01' AS Status, 'There was an error while acrchiving GL Balances' AS Narration FROM dual;

	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_GL_FULLSTATEMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_GL_FULLSTATEMENT" (
		p_AccountNo NVARCHAR2, --Pass the GL code
		p_FrmDate DATE,
		p_ToDate DATE, 
        c_1 OUT SYS_REFCURSOR
)
AS

v_GLType NVARCHAR2(200);
v_OpeningBal NUMBER(18,2) := 0.00;
v_OpeningBalDate DATE := SYSTIMESTAMP;
v_PRODUCTCODE NVARCHAR2(4);
V_COUNT INT := 0;
BEGIN	

SAVEPOINT V_SAFEPOINT;	

SELECT GL_TYPE INTO v_GLType FROM tb_GL WHERE GL_Code=p_AccountNo;

SELECT NVL(Opening_Bal,0), Working_Date INTO v_OpeningBal, v_OpeningBalDate FROM (
SELECT * FROM tb_GL_Balance_Archive  WHERE GL_Code = p_AccountNo AND Working_Date <= p_FrmDate ORDER BY ID DESC
) WHERE rownum <= 1;



SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE  EXISTS(SELECT * FROM tb_Products WHERE Leaf_GL = p_AccountNo AND rownum <= 1);

  IF(V_COUNT > 0) THEN

			SELECT Product_Code INTO v_PRODUCTCODE FROM tb_Products WHERE Leaf_GL=p_AccountNo;

			----Reset count
			 V_COUNT := 0;

			SELECT COUNT(1)
			  INTO V_COUNT
			  FROM DUAL
			  WHERE EXISTS(SELECT * FROM VW_TRANSACTIONS WHERE 
					(SUBSTR(Account_No, 1,2) = v_PRODUCTCODE AND IsCustomerGL='C') 
					 AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') >= p_FrmDate AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') <= p_ToDate AND rownum <= 1 );

					IF(V_COUNT > 0) THEN
							 OPEN c_1 FOR 
                             SELECT  1 AS ID,v_OpeningBal OpeningBal, 
							 CAST ('Opening Balance' AS NVARCHAR2(20)) as TrxRefNo, 
                             CAST ('' AS NVARCHAR2(20)) AS Channel, CAST ('' AS CHAR(1)) AS DRCR,
                             v_OpeningBal Amount, TO_CHAR(v_OpeningBalDate, 'YYYY-MM-DD') TrxDate, SYSTIMESTAMP Created_On, 
                             v_GLType Narration, p_AccountNo ACCOUNT_NO FROM dual
							UNION
							SELECT ID,v_OpeningBal OpeningBal, 
							Field37 as TrxRefNo, Field32 as Channel, DRCR,
							 CASE  WHEN v_GLType='A' AND DRCR='C' THEN  (-1 * Amount)
								   WHEN v_GLType='E' AND DRCR='C' THEN  (-1 * Amount)
								   WHEN v_GLType='L' AND DRCR='C' THEN  (-1 * Amount)
								   WHEN v_GLType='I' AND DRCR='D' THEN  ( Amount)
								 ELSE Amount
								 END AS Amount,			 
							  TO_CHAR(CREATED_ON, 'YYYY-MM-DD') as TrxDate, Created_On, Narration, ACCOUNT_NO FROM VW_TRANSACTIONS
							WHERE ( 
							(SUBSTR(Account_No, 1,3) IN(SELECT Product_Code FROM tb_Products WHERE Leaf_GL=p_AccountNo) AND IsCustomerGL='C')  
							OR  Account_No = p_AccountNo  ) 
							AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') >= p_FrmDate AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') <= p_ToDate 
							ORDER BY Id ASC; 
					ELSE
					  OPEN c_1 FOR SELECT  v_OpeningBal OpeningBal, '' AS TrxRefNo, '' AS Channel, '' AS DRCR, 0 AS Amount,'' AS TrxDate,'' AS Created_On, v_GLType Narration, '' AS ACCOUNT_NO FROM dual;
					END IF;
 ELSE

		----Reset count
		V_COUNT := 0;
			SELECT COUNT(1)
			  INTO V_COUNT
			  FROM DUAL
			  WHERE EXISTS(SELECT * FROM VW_TRANSACTIONS WHERE Account_No = p_AccountNo AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') >= p_FrmDate AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') <= p_ToDate AND rownum <= 1 );

				IF(V_COUNT > 0) THEN

					 OPEN c_1 FOR 
                     SELECT  1 AS ID,v_OpeningBal OpeningBal, 
						CAST ('Opening Balance' AS NVARCHAR2(20)) AS TrxRefNo,
                        CAST ('' AS NVARCHAR2(20)) AS Channel, CAST ('' AS CHAR(1)) AS DRCR, v_OpeningBal Amount, 
                        TO_CHAR(v_OpeningBalDate, 'YYYY-MM-DD') TrxDate, SYSTIMESTAMP Created_On, 
                        v_GLType Narration, p_AccountNo ACCOUNT_NO 
                            FROM dual
					UNION ALL
						SELECT ID, v_OpeningBal OpeningBal,
						Field37 as TrxRefNo
                        , Field32 as Channel, DRCR,
						 CASE  WHEN v_GLType='A' AND DRCR='C' THEN  (-1 * Amount)
							   WHEN v_GLType='E' AND DRCR='C' THEN  (-1 * Amount)
							   WHEN v_GLType='L' AND DRCR='C' THEN  (-1 * Amount)
							   WHEN v_GLType='I' AND DRCR='D' THEN  ( Amount)
							 ELSE Amount
							 END AS Amount,

						  TO_CHAR(CREATED_ON, 'YYYY-MM-DD') TrxDate, Created_On, Narration,ACCOUNT_NO 
                        FROM VW_TRANSACTIONS
						WHERE Account_No = p_AccountNo AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') >= p_FrmDate AND TO_CHAR(CREATED_ON, 'YYYY-MM-DD') <= p_ToDate 
						ORDER BY Id ASC;

			ELSE
				OPEN c_1 FOR SELECT  v_OpeningBal OpeningBal, '' AS TrxRefNo, '' AS Channel, '' AS DRCR,0 AS Amount,'' AS TrxDate,'' AS Created_On,'' AS Narration, '' AS ACCOUNT_NO  FROM dual;
			END IF;
	END IF;

EXCEPTION
WHEN OTHERS THEN
  --RAISE;
   OPEN c_1 FOR SELECT v_OpeningBal OpeningBal, '' AS TrxRefNo, '' AS Channel, '' AS DRCR,0 AS Amount,'' AS TrxDate,'' AS CreatedOn,'' AS Narration, '' AS ACCOUNTNO FROM DUAL;

  ROLLBACK TO SAVEPOINT V_SAFEPOINT;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERTDSSTXN_PERSONAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERTDSSTXN_PERSONAL" (
v_ACCOUNTNUMBER IN	VARCHAR2,
v_FIRSTNAME IN	VARCHAR2,
v_MIDDLENAME IN	VARCHAR2,
v_SURNAME IN	VARCHAR2,
v_GENDER IN	VARCHAR2,
v_DOB IN	VARCHAR2,
v_PLACEOFBIRTH IN	VARCHAR2,
v_IDTYPE IN	VARCHAR2,
v_IDNUMBER IN	VARCHAR2,
v_MOBILENUMBER IN	VARCHAR2,
v_PROFESSION IN	VARCHAR2,
v_BRANCH IN	VARCHAR2,
v_EMAIL IN	VARCHAR2,
v_BRANCHNAME IN	VARCHAR2,
v_DSSFLEXID IN	VARCHAR2,
v_DSSACCOUNTNUMBER IN	VARCHAR2,
v_IMGPASSPORT	 IN	CLOB,
v_IMGID	 		IN	CLOB,
v_IMGSIGNATURE	IN	CLOB,
v_ACC_CLS IN	VARCHAR2,
v_CUSTOMER_CATEGORY IN	VARCHAR2,
v_CARD_NUMBER IN	VARCHAR2,
v_DSSMOBILENUMBER IN	VARCHAR2,
v_PERMANENT_REGION IN	VARCHAR2,
v_PERMANENT_DISTRICT IN	VARCHAR2,
v_PERMANENT_WARD IN	VARCHAR2,
v_PERMANENT_STREET IN	VARCHAR2,
v_RES_DISTRICT IN	VARCHAR2,
v_RES_WARD IN	VARCHAR2,
v_RES_STREET IN	VARCHAR2,
v_RES_REGION IN	VARCHAR2,
v_POSTALADDRESS IN	VARCHAR2,
v_PLOTNUMBER IN	VARCHAR2,
v_INTRODUCTORY_LETTER	IN	CLOB,
v_TERMS_AND_CONDITIONS	IN	CLOB,
v_MANDATE_DECLARATION	IN	CLOB,
v_MARITAL_STATUS IN	VARCHAR2,
v_CITIZENSHIP IN	VARCHAR2,
v_CURRENCY IN	VARCHAR2,
v_NMBMOBILE_STATUS IN	VARCHAR2,
v_TIN IN	VARCHAR2,
v_CHECK_NUMBER IN	VARCHAR2,
v_TELEPHONE IN VARCHAR2,
v_TITLE_PREFIX1  IN VARCHAR2,
v_TITLE_PREFIX2  IN VARCHAR2,
v_TITLE_PREFIX3  IN VARCHAR2,
v_MAIDEN_NAME  IN VARCHAR2,
v_LANDMARKS  IN VARCHAR2,
v_ID_ISSUEDATE  IN VARCHAR2,
v_ID_EXPIRYDATE  IN VARCHAR2,
v_MONTHLY_INCOME  IN VARCHAR2,
v_INCOME_SOURCE  IN VARCHAR2,
v_KYCREF   IN VARCHAR2,
cv_1 IN OUT SYS_REFCURSOR)
    AS
    v_NMBMOBILEREG NUMBER:=0;
    v_NMBMOBILEREGNARATIVE VARCHAR2(200):='';
    v_RECLASSIFY NUMBER:=0;
BEGIN
IF SUBSTR(v_ACCOUNTNUMBER,0,3) = '123' THEN
    v_NMBMOBILEREG  :='3';
    v_RECLASSIFY :=1;
    v_NMBMOBILEREGNARATIVE :='CHAPCHAP PLUS ACCOUNT. NO MOBILE REGISTRATION';
  END IF;
IF v_NMBMOBILE_STATUS = '0' THEN
    v_NMBMOBILEREG  :=3;
    v_NMBMOBILEREGNARATIVE :='NO MOBILE REGISTRATION';
  END IF;
INSERT INTO TBDSSTXN_PERSONAL (
ACCOUNTNUMBER,
FIRSTNAME,
MIDDLENAME,
SURNAME,
GENDER,
DOB,
PLACEOFBIRTH,
IDTYPE,
IDNUMBER,
MOBILENUMBER,
PROFESSION,
BRANCH,
EMAIL,
BRANCHNAME,
DSSFLEXID,
DSSACCOUNTNUMBER,
IMGPASSPORT,
IMGID,
IMGSIGNATURE,
ACC_CLS,
CUSTOMER_CATEGORY,
CARD_NUMBER,
DSSMOBILENUMBER,
PERMANENT_REGION,
PERMANENT_DISTRICT,
PERMANENT_WARD,
PERMANENT_STREET,
RES_DISTRICT,
RES_WARD,
RES_STREET,
RES_REGION,
POSTALADDRESS,
PLOTNUMBER,
INTRODUCTORY_LETTER,
TERMS_AND_CONDITIONS,
MARITAL_STATUS,
CITIZENSHIP,
CURRENCY,
APP_USER_STATUS,
TIN,
CHECK_NUMBER,
TELEPHONE,
TITLE_PREFIX1,
TITLE_PREFIX2,
TITLE_PREFIX3,
MAIDEN_NAME,
LANDMARKS,
ID_ISSUEDATE,
ID_EXPIRYDATE,
MONTHLY_INCOME,
INCOME_SOURCE,
APP_USERREG,
APP_USERREGNARATIVE,
RECLASSIFY,
MANDATE_DECLARATION,
KYCREF
    ) VALUES (
v_ACCOUNTNUMBER,
v_FIRSTNAME,
v_MIDDLENAME,
v_SURNAME,
v_GENDER,
v_DOB,
v_PLACEOFBIRTH,
v_IDTYPE,
v_IDNUMBER,
v_MOBILENUMBER,
v_PROFESSION,
v_BRANCH,
v_EMAIL,
v_BRANCHNAME,
v_DSSFLEXID,
v_DSSACCOUNTNUMBER,
v_IMGPASSPORT,
v_IMGID,
v_IMGSIGNATURE,
v_ACC_CLS,
v_CUSTOMER_CATEGORY,
v_CARD_NUMBER,
v_DSSMOBILENUMBER,
v_PERMANENT_REGION,
v_PERMANENT_DISTRICT,
v_PERMANENT_WARD,
v_PERMANENT_STREET,
v_RES_DISTRICT,
v_RES_WARD,
v_RES_STREET,
v_RES_REGION,
v_POSTALADDRESS,
v_PLOTNUMBER,
v_INTRODUCTORY_LETTER,
v_TERMS_AND_CONDITIONS,
v_MARITAL_STATUS,
v_CITIZENSHIP,
v_CURRENCY,
v_NMBMOBILE_STATUS,
v_TIN,
v_CHECK_NUMBER,
v_TELEPHONE,
v_TITLE_PREFIX1,
v_TITLE_PREFIX2,
v_TITLE_PREFIX3,
v_MAIDEN_NAME,
v_LANDMARKS,
v_ID_ISSUEDATE,
v_ID_EXPIRYDATE,
v_MONTHLY_INCOME,
v_INCOME_SOURCE,
v_NMBMOBILEREG,
v_NMBMOBILEREGNARATIVE,
v_RECLASSIFY,
v_MANDATE_DECLARATION,
v_KYCREF
);
OPEN cv_1 FOR SELECT TBDSSTXN_PERSONAL_SEQ.CURRVAL FROM DUAL;

  EXCEPTION 
  WHEN OTHERS THEN  
    RAISE;
END A_SP_INSERTDSSTXN_PERSONAL;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERTDSSTXN_REMIDIATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERTDSSTXN_REMIDIATION" (
v_ACCOUNTNUMBER IN	VARCHAR2,
v_FIRSTNAME IN	VARCHAR2,
v_MIDDLENAME IN	VARCHAR2,
v_SURNAME IN	VARCHAR2,
v_GENDER IN	VARCHAR2,
v_DOB IN	VARCHAR2,
v_PLACEOFBIRTH IN	VARCHAR2,
v_IDTYPE IN	VARCHAR2,
v_IDNUMBER IN	VARCHAR2,
v_MOBILENUMBER IN	VARCHAR2,
v_PROFESSION IN	VARCHAR2,
v_BRANCH IN	VARCHAR2,
v_EMAIL IN	VARCHAR2,
v_BRANCHNAME IN	VARCHAR2,
v_DSSFLEXID IN	VARCHAR2,
v_DSSACCOUNTNUMBER IN	VARCHAR2,
v_IMGPASSPORT	 IN	CLOB,
v_IMGID	 		IN	CLOB,
v_IMGSIGNATURE	IN	CLOB,
v_ACC_CLS IN	VARCHAR2,
v_CUSTOMER_CATEGORY IN	VARCHAR2,
v_CARD_NUMBER IN	VARCHAR2,
v_DSSMOBILENUMBER IN	VARCHAR2,
v_PERMANENT_REGION IN	VARCHAR2,
v_PERMANENT_DISTRICT IN	VARCHAR2,
v_PERMANENT_WARD IN	VARCHAR2,
v_PERMANENT_STREET IN	VARCHAR2,
v_RES_DISTRICT IN	VARCHAR2,
v_RES_WARD IN	VARCHAR2,
v_RES_STREET IN	VARCHAR2,
v_RES_REGION IN	VARCHAR2,
v_POSTALADDRESS IN	VARCHAR2,
v_PLOTNUMBER IN	VARCHAR2,
v_INTRODUCTORY_LETTER	IN	CLOB,
v_TERMS_AND_CONDITIONS	IN	CLOB,
v_MANDATE_DECLARATION	IN	CLOB,
v_MARITAL_STATUS IN	VARCHAR2,
v_CITIZENSHIP IN	VARCHAR2,
v_CURRENCY IN	VARCHAR2,
v_NMBMOBILE_STATUS IN	VARCHAR2,
v_TIN IN	VARCHAR2,
v_CHECK_NUMBER IN	VARCHAR2,
v_TELEPHONE IN VARCHAR2,
v_TITLE_PREFIX1  IN VARCHAR2,
v_TITLE_PREFIX2  IN VARCHAR2,
v_TITLE_PREFIX3  IN VARCHAR2,
v_MAIDEN_NAME  IN VARCHAR2,
v_LANDMARKS  IN VARCHAR2,
v_ID_ISSUEDATE  IN VARCHAR2,
v_ID_EXPIRYDATE  IN VARCHAR2,
v_MONTHLY_INCOME  IN VARCHAR2,
v_INCOME_SOURCE  IN VARCHAR2,
v_KYCREF   IN VARCHAR2,
cv_1 IN OUT SYS_REFCURSOR)
    AS
    v_NMBMOBILEREG NUMBER:=0;
    v_NMBMOBILEREGNARATIVE VARCHAR2(200):='';
    v_RECLASSIFY NUMBER:=0;
BEGIN
IF SUBSTR(v_ACCOUNTNUMBER,0,3) = '123' THEN
    v_NMBMOBILEREG  :='3';
    v_RECLASSIFY :=1;
    v_NMBMOBILEREGNARATIVE :='CHAPCHAP PLUS ACCOUNT. NO MOBILE REGISTRATION';
  END IF;
IF v_NMBMOBILE_STATUS = '0' THEN
    v_NMBMOBILEREG  :=3;
    v_NMBMOBILEREGNARATIVE :='NO MOBILE REGISTRATION';
  END IF;
INSERT INTO TBDSSTXN_REMIDIATION (
ACCOUNTNUMBER,
FIRSTNAME,
MIDDLENAME,
SURNAME,
GENDER,
DOB,
PLACEOFBIRTH,
IDTYPE,
IDNUMBER,
MOBILENUMBER,
PROFESSION,
BRANCH,
EMAIL,
BRANCHNAME,
DSSFLEXID,
DSSACCOUNTNUMBER,
IMGPASSPORT,
IMGID,
IMGSIGNATURE,
ACC_CLS,
CUSTOMER_CATEGORY,
CARD_NUMBER,
DSSMOBILENUMBER,
PERMANENT_REGION,
PERMANENT_DISTRICT,
PERMANENT_WARD,
PERMANENT_STREET,
RES_DISTRICT,
RES_WARD,
RES_STREET,
RES_REGION,
POSTALADDRESS,
PLOTNUMBER,
INTRODUCTORY_LETTER,
TERMS_AND_CONDITIONS,
MARITAL_STATUS,
CITIZENSHIP,
CURRENCY,
NMBMOBILE_STATUS,
TIN,
CHECK_NUMBER,
TELEPHONE,
TITLE_PREFIX1,
TITLE_PREFIX2,
TITLE_PREFIX3,
MAIDEN_NAME,
LANDMARKS,
ID_ISSUEDATE,
ID_EXPIRYDATE,
MONTHLY_INCOME,
INCOME_SOURCE,
NMBMOBILEREG,
NMBMOBILEREGNARATIVE,
RECLASSIFY,
MANDATE_DECLARATION,
KYCREF
    ) VALUES (
v_ACCOUNTNUMBER,
v_FIRSTNAME,
v_MIDDLENAME,
v_SURNAME,
v_GENDER,
v_DOB,
v_PLACEOFBIRTH,
v_IDTYPE,
v_IDNUMBER,
v_MOBILENUMBER,
v_PROFESSION,
v_BRANCH,
v_EMAIL,
v_BRANCHNAME,
v_DSSFLEXID,
v_DSSACCOUNTNUMBER,
v_IMGPASSPORT,
v_IMGID,
v_IMGSIGNATURE,
v_ACC_CLS,
v_CUSTOMER_CATEGORY,
v_CARD_NUMBER,
v_DSSMOBILENUMBER,
v_PERMANENT_REGION,
v_PERMANENT_DISTRICT,
v_PERMANENT_WARD,
v_PERMANENT_STREET,
v_RES_DISTRICT,
v_RES_WARD,
v_RES_STREET,
v_RES_REGION,
v_POSTALADDRESS,
v_PLOTNUMBER,
v_INTRODUCTORY_LETTER,
v_TERMS_AND_CONDITIONS,
v_MARITAL_STATUS,
v_CITIZENSHIP,
v_CURRENCY,
v_NMBMOBILE_STATUS,
v_TIN,
v_CHECK_NUMBER,
v_TELEPHONE,
v_TITLE_PREFIX1,
v_TITLE_PREFIX2,
v_TITLE_PREFIX3,
v_MAIDEN_NAME,
v_LANDMARKS,
v_ID_ISSUEDATE,
v_ID_EXPIRYDATE,
v_MONTHLY_INCOME,
v_INCOME_SOURCE,
v_NMBMOBILEREG,
v_NMBMOBILEREGNARATIVE,
v_RECLASSIFY,
v_MANDATE_DECLARATION,
v_KYCREF
);
UPDATE TBREMIDIATION_ACCOUNTS SET PROCESSED=1, DSSFLEXID=v_DSSFLEXID  WHERE ACCOUNTNUMBER=v_ACCOUNTNUMBER;
OPEN cv_1 FOR SELECT TBDSSTXN_REMIDIATION_SEQ.CURRVAL FROM DUAL;

  EXCEPTION 
  WHEN OTHERS THEN  
    RAISE;
END A_SP_INSERTDSSTXN_REMIDIATION;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_ADVERTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_ADVERTS" (

	iv_MERCHANT_ID IN NVARCHAR2,
	iv_ITEM_NAME IN NVARCHAR2,
	iv_CURRENT_VALUE IN NVARCHAR2,
	iv_DISCOUNTED_VALUE IN NVARCHAR2,
	iv_IMAGE IN CLOB,
	c_1 IN OUT SYS_REFCURSOR

)
AS
    
v_Narration NVARCHAR2(500);
v_Resp_Code NVARCHAR2(50)   := '00';

BEGIN

	INSERT INTO tbadverts (MERCHANT_ID,ITEM_NAME,CURRENT_VALUE,DISCOUNTED_VALUE,IMAGE_STRING)
			VALUES (iv_MERCHANT_ID,iv_ITEM_NAME,iv_CURRENT_VALUE,iv_DISCOUNTED_VALUE,iv_IMAGE);

	--COMMIT ;

	v_Resp_Code     :='00';
	v_Narration     := 'Successful';	
	OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;	          

EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while inserting the new deal';
    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;
    RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_CUSTOMER_CARE_REQUESTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_CUSTOMER_CARE_REQUESTS" (
    IV_MOBILE_NUMBER  IN VARCHAR2,
    IV_REQUEST_SUBJECT   IN VARCHAR2,
    IV_CHANNEL        IN VARCHAR2,
    IV_TRN_REF_NO     IN VARCHAR2,
    IV_REQUEST_DESCRIPTION   IN VARCHAR2 DEFAULT '',
    C_1 OUT SYS_REFCURSOR)
    
AS
V_COUNT NUMBER(2) :=0;
V_CUSTOMER_NAME NVARCHAR2(100) :='';

BEGIN

   SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM VW_ALLCUSTOMERS
      WHERE PHONE_NUMBER =IV_MOBILE_NUMBER
      AND ROWNUM         =1
      );
      
      IF V_COUNT < 1 THEN
        OPEN C_1 FOR SELECT '01' "RESP_CODE",'Customer not found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
        RETURN;
      END IF;
      
      SELECT CUSTOMER_NAME INTO V_CUSTOMER_NAME FROM VW_ALLCUSTOMERS WHERE PHONE_NUMBER =IV_MOBILE_NUMBER AND ROWNUM =1;
  BEGIN
    INSERT
    INTO TB_ISSUES
      (
        MOBILE_NUMBER,
        CUSTOMER_PHONE_NUMBER,
        REQUEST_SUBJECT,
        CHANNEL,
        TRN_REF_NO,
        DESCRIPTION,
        REQUEST_STATUS,
        CUSTOMER_NAME
      )
      VALUES
      (
        IV_MOBILE_NUMBER,
        IV_MOBILE_NUMBER,
        IV_REQUEST_SUBJECT,
        IV_CHANNEL,
        IV_TRN_REF_NO,
        IV_REQUEST_DESCRIPTION,
        'NEW',
        V_CUSTOMER_NAME
      );

  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    ROLLBACK;
    OPEN C_1 FOR SELECT '57' "RESP_CODE",'Insert Failed' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END;
  COMMIT;
    OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
END A_SP_INSERT_CUSTOMER_CARE_REQUESTS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_CUSTOMER_REQUESTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_CUSTOMER_REQUESTS" (
    IV_ACCOUNT        IN VARCHAR2,
    IV_CURRENCY       IN VARCHAR2 DEFAULT 'UGX',
    IV_MOBILE_NUMBER  IN VARCHAR2,
    IV_CUSTOMER_NO    IN VARCHAR2,
    IV_REQUEST_TYPE   IN VARCHAR2,
    IV_CHANNEL        IN VARCHAR2,
    IV_TRN_REF_NO     IN VARCHAR2,
    IV_NO_OF_LEAVES   IN VARCHAR2 DEFAULT '',
    IV_NO_OF_BOOKS IN VARCHAR2 DEFAULT '',
    C_1 OUT SYS_REFCURSOR)
AS
BEGIN
  BEGIN
    INSERT
    INTO TB_REQUESTS
      (
        ACCOUNT,
        CURRENCY,
        MOBILE_NUMBER,
        CUSTOMER_NO,
        REQUEST_TYPE,
        CHANNEL,
        TRN_REF_NO,
        NO_OF_LEAVES,NO_OF_BOOKS
      )
      VALUES
      (
        IV_ACCOUNT,
        IV_CURRENCY,
        IV_MOBILE_NUMBER,
        IV_CUSTOMER_NO,
        IV_REQUEST_TYPE,
        IV_CHANNEL,
        IV_TRN_REF_NO,
        IV_NO_OF_LEAVES,IV_NO_OF_BOOKS
      );

  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    ROLLBACK;
    OPEN C_1 FOR SELECT '57' "RESP_CODE",'Insert Failed' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END;
  COMMIT;
    OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
END A_SP_INSERT_CUSTOMER_REQUESTS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_CUST_ANSWERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_CUST_ANSWERS" (
ANSWERS_ARRAY IN NVARCHAR2,
IV_CUSTOMER_ID IN NUMBER,
 C_1 IN OUT SYS_REFCURSOR
) AS 

ANSWERS JSON_ARRAY_T;
j_obj JSON_OBJECT_T;
BEGIN
 SAVEPOINT V_SAFEPOINT;
  -- check if the security questions 
  ANSWERS := json_array_t(ANSWERS_ARRAY);
  
  IF ANSWERS.get_size < 3 then
      OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Provide all 3 security questions' AS RESP_DESC FROM DUAL;
      RETURN ;
  end if;
  
  FOR indx in 0 .. ANSWERS.get_size - 1
    loop
      j_obj := TREAT(ANSWERS.get(indx) AS JSON_OBJECT_T );
      INSERT INTO TB_CUSTOMER_ANSWERS (QUESTION, ANSWER, CUSTOMER_ID) VALUES (j_obj.get_string('question')
      ,j_obj.get_string('answer'),IV_CUSTOMER_ID);  
    end loop;
  
   OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Security questions added successfully' AS RESP_DESC FROM DUAL;
      RETURN ;
      
   EXCEPTION WHEN OTHERS THEN
    ROLLBACK TO V_SAFEPOINT;
    RAISE;
    OPEN C_1 FOR SELECT '02' AS RESP_CODE , 'failed to insert objects' AS RESP_DESC FROM DUAL;
   RETURN;
END A_SP_INSERT_CUST_ANSWERS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_GL_TRANSACTIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_GL_TRANSACTIONS" (
  IV_GL_CODE IN VARCHAR2,
  IV_FIELD37 IN VARCHAR2,
  IV_DRCR IN VARCHAR2,
  IV_FIELD100 IN VARCHAR2,
  IV_FIELD3 IN VARCHAR2,
  IV_VALUE_DATE IN VARCHAR2,
  IV_TRANS_CODE IN VARCHAR2,
  IV_TRANS_SERIAL IN NUMBER,
  IV_AMOUNT IN NUMBER) AS 
BEGIN

  INSERT INTO TB_TRANSACTIONS_GL (GL_CODE , FIELD37 , DRCR, FIELD100, FIELD3, AMOUNT , VALUE_DATE, TRANS_CODE, 
  TRANS_SERIAL)
  VALUES (IV_GL_CODE,IV_FIELD37,IV_DRCR,IV_FIELD100,IV_FIELD3,IV_AMOUNT, IV_VALUE_DATE,IV_TRANS_CODE,IV_TRANS_SERIAL );
  
END A_SP_INSERT_GL_TRANSACTIONS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_LINKED_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_LINKED_ACCOUNT" (
  PHONE_NUMBER IN NVARCHAR2,
  ACCOUNT_NUMBER IN NVARCHAR2,
  CHANNEL IN NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR ) AS 
  
  V_COUNT NUMBER :=0;
  V_IDENTIFICATION_ID NVARCHAR2(50) :='';

BEGIN

   SELECT COUNT(ID) INTO V_COUNT FROM TB_CUSTOMER WHERE CUSTOMER_NO = PHONE_NUMBER AND ROWNUM = 1;

   IF V_COUNT < 1 THEN 
    OPEN C_1 FOR SELECT '01' "RESP_CODE",'User Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;

--   SELECT COUNT(ACCOUNT_ID) INTO V_COUNT FROM TB_ACCOUNT WHERE ACCOUNT_NO = ACCOUNT_NUMBER AND ROWNUM = 1;
--   
--   IF V_COUNT < 1 THEN 
--    OPEN C_1 FOR SELECT '02' "RESP_CODE",'Account number Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
--    RETURN;
--  END IF;

  SELECT IDENTIFICATION_ID INTO V_IDENTIFICATION_ID FROM TB_CUSTOMER WHERE CUSTOMER_NO = PHONE_NUMBER AND ROWNUM = 1;

  INSERT INTO TB_LINKED_ACCOUNTS (PHONENUMBER, NATIONAL_ID, LINKEDACCOUNT, CBS_ACCOUNTNUMBER,CURRENCY)
  VALUES (PHONE_NUMBER, V_IDENTIFICATION_ID, ACCOUNT_NUMBER, ACCOUNT_NUMBER,'KES');

  OPEN C_1 FOR SELECT '00' "RESP_CODE",'Account linked successfully' "RESP_DESC" FROM "SYS"."DUAL" "A1";
  RETURN;
--  NULL;
END A_SP_INSERT_LINKED_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_MERCHANT_DEVICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_MERCHANT_DEVICE" (
      IV_DEVICE_IMEI IN VARCHAR2
    , IV_DEVICE_IMEI2 IN VARCHAR2
    , IV_DEVICE_MOBILE IN VARCHAR2
    ,IV_DEVICE_TYPE IN VARCHAR2
    , IV_MERCHANT_ID IN VARCHAR2
   -- ,IV_LATITUDE IN VARCHAR2
    ,IV_DEVICEID IN NVARCHAR2
  --  ,IV_LONGITUDE IN VARCHAR2
    ,IV_PIN IN NVARCHAR2
    ,IV_REMARKS IN NVARCHAR2
    ,IV_AGENT_CODE IN NVARCHAR2
   -- ,IV_LOCATION IN NVARCHAR2
    ,C_1 OUT SYS_REFCURSOR
)      AS
    IV_MWALLET_ACCOUNT NVARCHAR2(20) :='';
    IV_POS_ID NVARCHAR2(20)             :='';

BEGIN
  BEGIN
       A_SP_GET_AGENT_CODE('POS',IV_POS_ID); -- GET POS_ID
      SELECT ACCOUNT_NO INTO IV_MWALLET_ACCOUNT FROM TB_ACCOUNT WHERE CUSTOMER_NO=IV_AGENT_CODE AND account_class='204';
   INSERT INTO TB_AGENT_DEVICES
      (
        DEVICE_IMEI,
        DEVICEIMEI2,
        DEVICE_MOBILE_NUMBER,
        DEVICE_TYPE,
        DEVICEID,
        CREATED_ON,
        CREATED_BY,
        APPROVED,
       APPROVED_BY,
      APPROVED_ON,
       ASSIGNED,
       ASSIGNED_TO,
       REMARKS
   --    ,LATITUDE,
    --   LOCATION,
    --   LONGITUDE
      )
      VALUES
      (
IV_DEVICE_IMEI,
IV_DEVICE_IMEI2,
IV_DEVICE_MOBILE,
IV_DEVICE_TYPE,
IV_DEVICEID,
 SYSTIMESTAMP,
IV_MERCHANT_ID,
  1,
IV_MERCHANT_ID,
SYSTIMESTAMP,
       1,
       IV_MERCHANT_ID,
       IV_REMARKS
--IV_LATITUDE,
     -- IV_LOCATION,
--IV_LONGITUDE
);
 INSERT
    INTO TB_AGENT_DEVICELINKING
      (
        DEVICE_IMEI,
        DEVICE_MOBILE,
        POS_ID,
        PIN,
        PASS_KEY,
        ACTIVE,
       CREATEDBY,
       CREATEDON,
       APPROVED,
       APPROVEDBY,
       APPROVEDON,
       FIRSTLOGIN,
       AGENT_ID,
       MWALLET_ACCOUNT,
       REMARKS
      )
      VALUES
      (
        IV_DEVICE_IMEI,
        IV_DEVICE_MOBILE,
        IV_POS_ID,
        IV_PIN,
        IV_PIN,
        1,
        IV_MERCHANT_ID,
        SYSTIMESTAMP,
       1,
        IV_MERCHANT_ID,
       SYSTIMESTAMP,
        1,
       IV_MERCHANT_ID,
       IV_MWALLET_ACCOUNT,
       IV_REMARKS
      );
  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    ROLLBACK;
    OPEN C_1 FOR SELECT '57' "RESP_CODE",'Insert Failed' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END;
  COMMIT;
    OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
END A_SP_INSERT_MERCHANT_DEVICE;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_MERCHANT_OUTLET
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_MERCHANT_OUTLET" (

	iv_MERCHANT_ID IN NVARCHAR2,
	iv_OUTLET_NAME IN NVARCHAR2,
	iv_LOCATION IN NVARCHAR2,
	iv_LATITUDE IN NVARCHAR2,
	iv_LONGITUDE IN NVARCHAR2,
	iv_REMARKS IN NVARCHAR2,
	c_1 IN OUT SYS_REFCURSOR
)
AS
    
v_Narration NVARCHAR2(500);
v_Resp_Code NVARCHAR2(50)   := '00';

BEGIN
INSERT INTO tb_outlet (agent_id,outlet_name,location,latitude,longitude,remarks) 
VALUES (iv_MERCHANT_ID,iv_OUTLET_NAME,iv_LOCATION,iv_LATITUDE, iv_LONGITUDE,iv_REMARKS);

	--COMMIT ;

	v_Resp_Code     :='00';
	v_Narration     := 'Successful';	
	OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;	          

EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
  RAISE ;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while inserting the new outlet';
    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;
    RETURN;
  END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_SMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_SMS" (

	iv_MobileNumber IN NVARCHAR2,
	iv_AccountNo IN NVARCHAR2,
	iv_Message IN NVARCHAR2,
	iv_Channel IN NVARCHAR2,
	iv_TXN_TYPE IN NVARCHAR2,
	iv_FIELD100 IN NVARCHAR2,
	c_1 IN OUT SYS_REFCURSOR

)
AS

v_Narration NVARCHAR2(500);
v_Resp_Code NVARCHAR2(50)   := '00';

BEGIN

	INSERT INTO TB_MESSAGES_SMS (PHONE_NUMBER,ACCOUNT_NUMBER,MESSAGE,CHANNEL,DATE_CREATED,TXN_TYPE,TRIALS,SENT,Field100)
			VALUES (iv_MobileNumber,iv_AccountNo,iv_Message,iv_Channel,SYSTIMESTAMP,iv_TXN_TYPE,0,0,iv_FIELD100);

	COMMIT ;

	v_Resp_Code     :='00';
	v_Narration     := 'Successful';	
	OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;	          

EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'System encountered an error while inserting the new SMS Message';
    OPEN c_1 FOR SELECT V_Resp_Code,v_Narration FROM DUAL;
    RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_TERMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_TERMS" 
(
  ty IN VARCHAR2 
) AS 
BEGIN
NULL;
END A_SP_INSERT_TERMS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INSERT_TRANSACTIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INSERT_TRANSACTIONS" (
    IV_MSGTYPE      IN VARCHAR2,
    IV_FIELD32      IN VARCHAR2,
    IV_FIELD37      IN VARCHAR2,
    V_serialno      IN VARCHAR2,
    IV_FIELD68      IN VARCHAR2,
    V_GCACCOUNTNO   IN VARCHAR2,
    IV_CUSTCURRENCY IN VARCHAR2,
    V_DRCR          IN VARCHAR2,
    IV_FIELD3       IN VARCHAR2,
    IV_FIELD100     IN VARCHAR2,
    iv_Field11      IN VARCHAR2,
    V_AMOUNT        IN NUMBER,
    V_Workingdate   IN DATE,
    V_Financialyr   IN VARCHAR2,
    V_Financialprd  IN VARCHAR2,
    IV_USERID       IN VARCHAR2,
    v_GC            IN VARCHAR2,
    V_parentref     IN VARCHAR2,
    IV_FIELD65      IN VARCHAR2,
    V_TRXCODE       IN VARCHAR2, --Differentiate Transaction-7777 and Charges-9999
    V_FIELD41       IN VARCHAR2,
    V_FIELD42       IN VARCHAR2,
    IV_FIELD24      IN VARCHAR2,
    IV_COB          IN NUMBER,
    V_TRXREFNO IN VARCHAR2)
AS
  V_ACTUAL_BAL    NUMBER(18,5) :=0;
  V_AVAILABLE_BAL NUMBER(18,5) :=0;

BEGIN
  BEGIN -- I want to avoid using Triggers for running balances, Triggers are a huge bottle neck for High Traffic Transaction Requests
    IF v_GC = 'C' AND FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN
      SELECT (NVL(AVAILABLE_BAL,0)               - NVL(BLOCKED_AMOUNT,0)),
        ACTUAL_BAL
      INTO V_AVAILABLE_BAL ,
        V_ACTUAL_BAL
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = V_GCACCOUNTNO
      AND ROWNUM       =1;
    ELSIF v_GC         = 'G' THEN
      SELECT Gl_Balance
      INTO V_ACTUAL_BAL
      FROM TB_GL_BALANCE
      WHERE GL_CODE =V_GCACCOUNTNO
      AND ROWNUM    =1;
      V_AVAILABLE_BAL:= V_ACTUAL_BAL;
    END IF;
     EXCEPTION
  WHEN OTHERS THEN
  dbms_output.put_line('failing to post inserting transaction....');
    RAISE;
    ROLLBACK;
    RETURN;
  END;


  BEGIN
    IF IV_COB = 0 THEN
      INSERT
      INTO TB_TRANSACTIONS
        (
          MSGTYPE,
          FIELD32,
          FIELD37,
          TRX_SERIAL_NO,
          NARRATION,
          ACCOUNT_NO,
          CURRENCY,
          DRCR,
          FIELD3,
          FIELD100,
          STAN,
          AMOUNT,
          VALUE_DATE,
          FINANCIAL_CYCLE,
          FINANCIAL_PERIOD,
          CREATED_BY,
          AUTHORIZED_BY,
          AUTHORIZED_ON,
          ISCUSTOMERGL,
          CLEARED_BALANCE,
          AVAILABLE_BALANCE,
          FIELD90,
          PAYMENT_NUMBER,
          TRAN_CODE,
          FIELD41,
          FIELD42,
          FIELD24,TRX_REFNO
        )
        VALUES
        (
          IV_MSGTYPE,
          IV_FIELD32,
          IV_FIELD37,
          V_serialno,
          IV_FIELD68,
          V_GCACCOUNTNO,
          IV_CUSTCURRENCY,
          V_DRCR,
          IV_FIELD3,
          IV_FIELD100,
          iv_Field11,
          V_AMOUNT,
          V_Workingdate,
          V_Financialyr,
          V_Financialprd,
          IV_USERID,
          IV_USERID,
          Systimestamp,
          v_GC,
          V_ACTUAL_BAL,
          V_AVAILABLE_BAL,
          V_parentref,
          IV_FIELD65,
          V_TRXCODE, --Differentiate Transaction-7777 and Charges-9999
          V_FIELD41,
          V_FIELD42,
          IV_FIELD24,V_TRXREFNO
        );
    ELSIF IV_COB = 0 THEN
      INSERT
      INTO TB_TRANSACTIONS_COB
        (
          MSGTYPE,
          FIELD32,
          FIELD37,
          TRX_SERIAL_NO,
          NARRATION,
          ACCOUNT_NO,
          CURRENCY,
          DRCR,
          FIELD3,
          FIELD100,
          STAN,
          AMOUNT,
          VALUE_DATE,
          FINANCIAL_CYCLE,
          FINANCIAL_PERIOD,
          CREATED_BY,
          AUTHORIZED_BY,
          AUTHORIZED_ON,
          ISCUSTOMERGL,
          CLEARED_BALANCE,
          AVAILABLE_BALANCE,
          FIELD90,
          PAYMENT_NUMBER,
          TRAN_CODE,
          FIELD41,
          FIELD42,
          FIELD24,TRX_REFNO
        )
        VALUES
        (
          IV_MSGTYPE,
          IV_FIELD32,
          IV_FIELD37,
          V_serialno,
          IV_FIELD68,
          V_GCACCOUNTNO,
          IV_CUSTCURRENCY,
          V_DRCR,
          IV_FIELD3,
          IV_FIELD100,
          iv_Field11,
          V_AMOUNT,
          V_Workingdate,
          V_Financialyr,
          V_Financialprd,
          IV_USERID,
          IV_USERID,
          Systimestamp,
          v_GC,
          V_ACTUAL_BAL,
          V_AVAILABLE_BAL,
          V_parentref,
          IV_FIELD65,
          V_TRXCODE, --Differentiate Transaction-7777 and Charges-9999
          V_FIELD41,
          V_FIELD42,
          IV_FIELD24,V_TRXREFNO
        );
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    ROLLBACK;
    RETURN;
  END;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INVITE_FRIENDS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INVITE_FRIENDS" (
    iv_MWALLET_ACCOUNT  IN VARCHAR2,
    iv_INVITED_PHONENUMBER IN VARCHAR2,
    --iv_STATUS IN VARCHAR2,
    --iv_DATE_INVITED    IN VARCHAR2,
    iv_CUSTOMER_NAME IN VARCHAR2,
    v_CHANNEL IN VARCHAR2,
    IV_REF_CODE IN NVARCHAR2,
    c_1 OUT SYS_REFCURSOR)
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  v_Customer_No NVARCHAR2(50);
  V_COUNT NUMBER(1)          := 0;
  iv_CREATEDBY NVARCHAR2(50) :=iv_MWALLET_ACCOUNT;
  iv_APPROVEDBY NVARCHAR2(50):=iv_MWALLET_ACCOUNT;
  iv_STATUS NVARCHAR2(50):='PENDING'; --Lets assume its PENDING for now
BEGIN

--SELECT COUNT(ID) INTO V_COUNT  FROM TB_CUSTOMER WHERE CUSTOMER_NO = iv_MWALLET_ACCOUNT and ROWNUM=1;
--IF V_COUNT < 1 THEN
--OPEN c_1 FOR SELECT '01' AS  Resp_Code, 'Customer Not found' AS  Resp_Desc FROM DUAL;
--RETURN;
--END IF;

  BEGIN
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM TB_CUSTOMER
      WHERE CUSTOMER_NO = iv_INVITED_PHONENUMBER
      AND ROWNUM        = 1
      );
      
      if V_COUNT > 0 THEN 
        OPEN c_1 FOR SELECT '01' AS  Resp_Code, 'Customer already exists' AS  Resp_Desc FROM DUAL; 
        return;
      END IF;
   
      ---LINK THE CUSTOMER ACCOUNT
      INSERT
      INTO TB_INVITED_FRIENDS
        (
          MWALLET_ACCOUNT,
          INVITED_PHONENUMBER,
          STATUS,
          DATE_INVITED,
          CUSTOMER_NAME,
          CHANNEL,
          REFFERAL_C0DE
        )
        VALUES
        (
          iv_MWALLET_ACCOUNT,
          iv_INVITED_PHONENUMBER,
          iv_STATUS,
          SYSTIMESTAMP,
          iv_CUSTOMER_NAME,
          v_CHANNEL,
          IV_REF_CODE
        ) ;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'LINK-ONLY - Could not link customer account';
    v_Customer_No   := '';
    OPEN c_1 FOR SELECT V_Resp_Code AS  Resp_Code, v_Narration AS  Resp_Desc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
 OPEN c_1 FOR SELECT '00' AS  Resp_Code, 'Add a friend Success' AS  Resp_Desc FROM DUAL; 
 RETURN;
END A_SP_INVITE_FRIENDS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_INVITE_MEMBER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_INVITE_MEMBER" (
    IV_GROUP_ID         IN VARCHAR2,
    IV_GROUP_NAME       IN VARCHAR2,
    IV_MEMBER_WALLET_AC IN VARCHAR2,
    IV_MEMBER_PHONE IN VARCHAR2,
    IV_ADMIN_PHONE      IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR)
AS
 CV_1 SYS_REFCURSOR;
 V_MESSAGE NVARCHAR2(200):='Dear Member You have been Invited to Join '|| IV_GROUP_NAME || ' by '||IV_ADMIN_PHONE;
BEGIN
  BEGIN
    INSERT
    INTO TB_GROUP_LINKING
      (
        MWALLET_AC,
        GROUP_ID
      )
      VALUES
      (
        IV_MEMBER_WALLET_AC,
        IV_GROUP_ID
      );

     A_SP_INSERT_SMS(IV_MEMBER_PHONE,IV_MEMBER_WALLET_AC,V_MESSAGE,'APP','INVITE_GRP_MEMBER','INVITE_GRP_MEMBER',CV_1); 
  EXCEPTION
  WHEN OTHERS THEN
    -- RAISE;

    OPEN c_1 FOR SELECT '57' AS   Resp_Code, 'Error adding member on Tbgrouplinking'  AS
    Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  OPEN c_1 FOR SELECT '00' AS Resp_Code, 'Success' AS   Resp_Desc_Acc FROM DUAL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_JOIN_GROUP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_JOIN_GROUP" (
    IV_GROUP_ID         IN VARCHAR2,
    IV_GROUP_NAME       IN VARCHAR2,
    IV_MEMBER_WALLET_AC IN VARCHAR2,
    IV_ADMIN_PHONE      IN VARCHAR2,
    IV_ACCEPTED         IN VARCHAR2,
    c_1 OUT SYS_REFCURSOR)
AS
  CV_1 SYS_REFCURSOR;
  V_MESSAGE NVARCHAR2(200):='';
BEGIN
  BEGIN
    IF IV_ACCEPTED = 1 THEN
      UPDATE TB_GROUP_LINKING
      SET ACCEPTED   = 1,
        LINKED_ON    = SYSTIMESTAMP
      WHERE GROUP_ID = IV_GROUP_ID
      AND MWALLET_AC = IV_MEMBER_WALLET_AC
      AND ROWNUM     =1;
      V_MESSAGE:= 'Dear Admin Member  '|| IV_MEMBER_WALLET_AC || ' has joined '||IV_GROUP_NAME;
    ELSE
      DELETE
      FROM TB_GROUP_LINKING
      WHERE GROUP_ID = IV_GROUP_ID
      AND MWALLET_AC = IV_MEMBER_WALLET_AC
      AND ROWNUM     =1;
      V_MESSAGE:= 'Dear Admin Member  '|| IV_MEMBER_WALLET_AC || ' has rejected request to join group '||IV_GROUP_NAME;
    END IF;
    A_SP_INSERT_SMS(IV_ADMIN_PHONE,IV_MEMBER_WALLET_AC,V_MESSAGE,'APP','INVITE_GRP_MEMBER','INVITE_GRP_MEMBER',CV_1);
  EXCEPTION
  WHEN OTHERS THEN
    -- RAISE;

    OPEN c_1 FOR SELECT '57' AS Resp_Code,'Error Undefined(A_SP_JOIN_GROUP)'  AS    Resp_Desc_Acc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  OPEN c_1 FOR SELECT '00' AS  Resp_Code,  'Success' AS  Resp_Desc_Acc FROM DUAL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LDAP_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LDAP_LOGIN" (
 IV_USERNAME VARCHAR2,
    IV_PASSWORD IN VARCHAR2,
    C_1         IN OUT SYS_REFCURSOR)
AS
  V_count  NUMBER         :=0;
  V_TRIALS NUMBER         :=0;
  V_USERID NVARCHAR2(50)  :='';
  V_PASSWORD NVARCHAR2(50):='';
  v_MOBILENUMBER NVARCHAR2(50) :='';
  v_OTP NVARCHAR2(50):= '1111' ;
  v_OTP_64 NVARCHAR2(50):= '' ;  
  iv_Message NVARCHAR2(500) := '';
BEGIN

--select round(dbms_random.value(1000, 9999), 0) INTO v_OTP from dual;
iv_Message := 'Dear '||IV_USERNAME|| ',Your Flexi-pay admin login OTP is: ' ||v_OTP ;

v_OTP_64 := FN_STR_TO_BASE64(v_OTP); 

  SELECT COUNT(ID)
   INTO V_count
   FROM TB_USER
  WHERE USER_NAME = IV_USERNAME AND DELETED = 0
  AND ROWNUM      =1;
  IF V_count      < 1 THEN
    OPEN C_1 FOR SELECT '04' "RESP_CODE",'User Not registered on portal' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;
SELECT PASSWORD_HASH, MOBILE_NUMBER,
    TRIALS,ID
  INTO V_PASSWORD,v_MOBILENUMBER,
    V_TRIALS,V_USERID
  FROM TB_USER
  WHERE USER_NAME = IV_USERNAME
  AND ROWNUM      =1; 

  
  BEGIN
   UPDATE TB_USER
                SET OTP          = IV_PASSWORD,
                  OTP_TIME         = SYSTIMESTAMP
                WHERE USER_NAME        = IV_USERNAME
                AND ROWNUM              =1;
  END;
  OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC",V_USERID  USERID FROM "SYS"."DUAL" "A1";
  RETURN;
END A_SP_LDAP_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_LINK_ACCOUNT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LINK_ACCOUNT" (
    iv_ACCOUNTNUMBER  IN VARCHAR2,
    iv_PHONENUMBER    IN VARCHAR2,
    iv_TxnLimitAmount IN VARCHAR2,
    iv_ACCOUNTTYPE    IN VARCHAR2,
    iv_Currency IN VARCHAR2 DEFAULT 'UGX',
    iv_Channel IN VARCHAR2,
    v_ACCOUNTNAME IN VARCHAR2,
    iv_AccountClass IN VARCHAR2 DEFAULT  '',
    iv_IdentificationID IN VARCHAR2 DEFAULT  '',
    c_1 OUT SYS_REFCURSOR)
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  v_Customer_No NVARCHAR2(50);
  V_COUNT NUMBER(1)          := 0;
  iv_CREATEDBY NVARCHAR2(50) :=iv_PHONENUMBER;
  iv_APPROVEDBY NVARCHAR2(50):=iv_PHONENUMBER;
  iv_AccountStatus NVARCHAR2(50):='ACTIVE'; --Lets assume its active for now
BEGIN

SELECT COUNT(ID) INTO V_COUNT  FROM TB_CUSTOMER WHERE CUSTOMER_NO = iv_PHONENUMBER and ROWNUM=1;
IF V_COUNT < 1 THEN
OPEN c_1 FOR SELECT '01' AS  Resp_Code, 'Customer Not found' AS  Resp_Desc FROM DUAL;
RETURN;
END IF;

  BEGIN
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM tb_Linked_Accounts
      WHERE
      -- PhoneNumber = iv_PHONENUMBER
      --AND
      LinkedAccount = iv_ACCOUNTNUMBER
      AND ROWNUM        = 1
      );
      
      IF V_COUNT > 0 THEN 
         v_Resp_Code     :='01';
        v_Narration     := 'LINK-ONLY - Could not link customer account';
      v_Customer_No   := '';
    OPEN c_1 FOR SELECT V_Resp_Code AS  Resp_Code, v_Narration AS  Resp_Desc FROM DUAL;
    RETURN;
      END IF;
      
      
    IF(V_COUNT = 0) AND LENGTH(iv_ACCOUNTNUMBER) > 5 THEN
      ---LINK THE CUSTOMER ACCOUNT
      INSERT
      INTO tb_Linked_Accounts
        (
          PhoneNumber,
          National_ID,
          LinkedAccount,
          Channel,
          CBS_AccountName,
          CBS_AccountNumber,
          CBS_MobileNumber,
          CBS_National_Id,
          CBS_AccountStatus,
          CBS_CustomerID,
          Currency,
          AccountType,
          STATUS,
          Date_Linked,
          Level1Authorised,
          Level1AuthorisedBy,
          Level1AuthorisedOn,
          LinkedBy,
          LinkedOn,
          Daily_txn_limit
        )
        VALUES
        (
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_ACCOUNTNUMBER,
          iv_Channel,
          v_ACCOUNTNAME,
          iv_ACCOUNTNUMBER,
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_AccountStatus,
          iv_PHONENUMBER,
          iv_Currency,
          iv_ACCOUNTTYPE,
          1,
          SYSTIMESTAMP,
          1,
          iv_APPROVEDBY,
          SYSTIMESTAMP,
          iv_CREATEDBY,
          SYSTIMESTAMP,
          iv_TxnLimitAmount
        ) ;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'LINK-ONLY - Could not link customer account';
    v_Customer_No   := '';
    OPEN c_1 FOR SELECT V_Resp_Code AS  Resp_Code, v_Narration AS  Resp_Desc FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
 OPEN c_1 FOR SELECT '00' AS  Resp_Code, 'AccountLinking Success' AS  Resp_Desc FROM DUAL; 
 RETURN;
END A_SP_LINK_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_LINK_WALLET_SACCO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LINK_WALLET_SACCO" (
    IV_SACCO_ACCOUNT        IN VARCHAR2,
    IV_SACCO_ID             IN VARCHAR2,
    IV_CUSTOMER_ACCOUNT     IN VARCHAR2,
    IV_CUSTOMER_PHONENUMBER IN VARCHAR2 )
AS
BEGIN
  INSERT
  INTO TB_SACCO_LINKING
    (
      SACCO_ACCOUNT,
      SACCO_ID,
      CUSTOMER_ACCOUNT,
      CUSTOMER_PHONENUMBER,
      CREATED_BY
    )
    VALUES
    (
      IV_SACCO_ACCOUNT,
      IV_SACCO_ID,
      IV_CUSTOMER_ACCOUNT,
      IV_CUSTOMER_PHONENUMBER,
      IV_CUSTOMER_PHONENUMBER
    );
END A_SP_LINK_WALLET_SACCO;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOANSCORING_INIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOANSCORING_INIT" 
(
	p_accountNumber nvarchar2,
    c_1 OUT SYS_REFCURSOR
)
AS
 v_data nvarchar2(4000);

BEGIN

    -----Score the customer 1st
    A_SP_Loan_Scoring (p_accountNumber);

    -----retuen the scored data as JSON
	OPEN c_1 FOR SELECT JSON_ARRAYAGG(
        JSON_OBJECT (
        'ID' VALUE  ID,'AccountNumber' VALUE  Account_Number,
        'ACCOUNT_AGE' VALUE  ACCOUNT_AGE,'DR_Count' VALUE  DR_Count,'CR_Count' VALUE  CR_Count,
        'Avg_DR_Count' VALUE  Avg_DR_Count,'Avg_CR_Count' VALUE  Avg_CR_Count,'All_Txn_Count' VALUE  All_Txn_Count,
        'Avg_Txn_Count' VALUE  Avg_Txn_Count,'DR_Amount' VALUE  DR_Amount,'CR_Amount' VALUE  CR_Amount,
        'Avg_DR_Amount' VALUE  Avg_DR_Amount,'Avg_CR_Amount' VALUE  Avg_CR_Amount,
        'AccountBalanceM1' VALUE  Account_BalanceM1,'AccountBalanceM2' VALUE  Account_BalanceM2,
        'AccountBalanceM3' VALUE  Account_BalanceM3,'Avg_AccountBalance' VALUE  Avg_Account_Balance,
        'InternalLoanCount' VALUE  InternalLoanCount,'Avg_LoanAmount' VALUE  Avg_LoanAmount,'ExternalLoanCount' VALUE  ExternalLoanCount,
        'DateAdded' VALUE  DateAdded,'CRB_Grade' VALUE  CRB_Grade,'CRB_Score' VALUE  CRB_Score,'TotalScore' VALUE  TotalScore,
        'ScoredAmount' VALUE  ScoredAmount FORMAT JSON) ) INTO  v_data 
        FROM tb_loan_scoring where ACCOUNT_NUMBER = p_accountNumber;

END A_sp_LoanScoring_init;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOAN_APPLICATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOAN_APPLICATION" 
(	-- Add the parameters for the stored procedure here	  
	  p_MobileNumber NVARCHAR2,
	  p_LoanAmount   NUMBER, ----loan amount applied for
	  p_LoanLimitAmount   NUMBER,----loan limit score amount 
	  p_ProductCode NVARCHAR2,
	  p_Channel NVARCHAR2,
	  p_Field37 NVARCHAR2, 
      c_1 OUT SYS_REFCURSOR
)

AS 

v_Resp_Code NVARCHAR2(50) := '00';
v_Narration NVARCHAR2(150);
v_Loan_Acc_No NVARCHAR2(50);
v_USERID NVARCHAR2(50):='ESB';
v_AccountNo NVARCHAR2(15); ----Wallet account
v_CustomerNo NVARCHAR2(9);
v_Country VARCHAR2(20) := 'KENYA';
v_Nationality VARCHAR2(20):='KENYAN';
--@ProductCode  NVARCHAR(4),
v_InterestRate NUMBER(18,2):=0;
v_GracePeriod NUMBER(10) := 0;
v_PrincipalAmount  NUMBER(18,2);
v_Interest  NUMBER(18,2);
v_TotalFacilityAmount NUMBER(18,2);
v_CurrentInterestBalance NUMBER(18,2) := 0;
v_QualifiedAmount NUMBER(18,2);
v_MaximumAmount NUMBER(18,2); 
v_MinimumAmount NUMBER(18,2); 
v_RepaymentPeriod NUMBER(10);
v_FinalInstallmentDate DATE := SYSTIMESTAMP;
v_LoanId NVARCHAR2(15):='';
v_TrxSerialNo NUMBER(10) := 0;
v_Stan NVARCHAR2(6);
v_LoanAccount NVARCHAR2(10);
v_AdditionalText NVARCHAR2(1000);
v_Strfield37 NVARCHAR2(20);
v_TrxNarration NVARCHAR2(500);
v_Status number(1):=0;
--v_Field24 NVARCHAR2(3);
v_Strfield7 NVARCHAR2(10);
v_F44 NVARCHAR2(500) := '';
v_TRXNO NVARCHAR2(18);
v_EXTERNALREF NVARCHAR2(100) := p_Field37;
v_RepaymentFrequency CHAR(1):='M';
v_FieldOfficer NVARCHAR2(50):='SELF';
v_ApplicationDate TIMESTAMP(3) := SYSTIMESTAMP;
v_LoanAccountNo NVARCHAR2(15);
v_Checksum NVARCHAR2(50);
v_Currency NVARCHAR2(50) := 'KES';
v_Narration NVARCHAR2(150);
v_FirstName NVARCHAR2(150);
v_DisburseAmount NUMBER(18,2);
v_InterestGL  NVARCHAR2(10);
v_InterestReceivableGL  NVARCHAR2(10);
v_InterestAccruedGL  NVARCHAR2(10);
v_ProductName NVARCHAR2(50);
v_LAF number(1) := 0; 
v_LAF_Rate NUMBER(18,2);  ----Loan Application Fee (LAF)
v_MinimumLAF NUMBER(18,2);  ----Loan Application Fee (LAF) minimum Amount ;
v_LAFAmount NUMBER(18,2);  ----Loan Application Fee (LAF) minimum Amount ;
v_LoanCount number(10) := 1;
v_DisburseDate  DATE := SYSTIMESTAMP;
v_DisburseNarration NVARCHAR2(500);
v_RepaymentPrincipal NUMBER(18,2) := 0;
v_RepaymentInterest NUMBER(18,2) := 0;
v_ExiseDutyAmt NUMBER(18,2) := 0;
v_CheckStatusCode NVARCHAR2(5); ----Loan basic checks
v_CheckNarration NVARCHAR2(500);
v_LoanValidation NVARCHAR2(500);
V_COUNT INT := 0;
v_BranchCode NVARCHAR2(5) := '001';
CV_1 SYS_REFCURSOR;
V_LN_ACC_RESPONSE_CODE NVARCHAR2(10);
V_LN_ACC_RESPONSE_DESC NVARCHAR2(100);
V_LN_ACC_NO NVARCHAR2(20);
V_DATAX NVARCHAR2(500);
V_RESPONSE_CODE  NVARCHAR2(20);
V_available_actual   NVARCHAR2(20);
V_CHARGES_AMT   NUMBER(18,2) := 0;
V_EXCISE_DUTY_AMT  NUMBER(18,2) := 0;
V_Resp_Narrartionon   NVARCHAR2(500);
v_Interest_Upfront number := 0;

---post-mini
    V_MSGTYPE        NVARCHAR2(50) ;
    V_FIELD2         NVARCHAR2(50) ;
    V_FIELD3         NVARCHAR2(50);
    V_FIELD4         NUMBER(18,2) := 0;--AMOUNT
    V_FIELD7         NVARCHAR2(50);
    V_FIELD11        NVARCHAR2(50) ;--STAN
    V_FIELD24        NVARCHAR2(50);
    V_FIELD32        NVARCHAR2(50) ;
    V_FIELD35        NVARCHAR2(50);
    V_FIELD37        NVARCHAR2(50);
    V_FIELD65        NVARCHAR2(50) ;
    V_FIELD68        NVARCHAR2(50);
    V_FIELD90        NVARCHAR2(50);
    V_FIELD100       NVARCHAR2(50);
    V_FIELD101       NVARCHAR2(50);
    V_FIELD102       NVARCHAR2(50);
    V_FIELD103       NVARCHAR2(50);
    V_COMMISSION     NUMBER(18,2) := 0;
    V_CUSTCURRENCY   NVARCHAR2(50):= 'KES' ;
    V_TERMINALID     NVARCHAR2(50);
    V_TRNCODE        NVARCHAR2(50) ;
    V_EXTERNALREFNO  NVARCHAR2(50);  

BEGIN
SAVEPOINT V_SAFEPOINT;

----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT * FROM tb_Products WHERE Product_Code = p_ProductCode AND Product_Code NOT IN(3002));

  IF(V_COUNT = 0) THEN
	OPEN c_1 FOR SELECT 'Invalid Product Code' AS Narration,'Error' AS TrxStatus,'01' AS ResponseCode, '' AS CustomerName, 
	v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt,
    '' AS LoanId FROM dual;
    RETURN;
  END IF;

-----Loan basic checks are done via scoring engine. funtcion called [FN_LOAN_CHECKS]
--------lets do our own checks here too just incase
SELECT FN_LOAN_CHECKS(p_MobileNumber,p_LoanAmount,p_LoanLimitAmount,p_ProductCode,'ESB') INTO v_LoanValidation FROM DUAL;

v_CheckStatusCode := substr(v_LoanValidation,0,2) ;
v_CheckNarration  := SUBSTR(v_LoanValidation, INSTR(v_LoanValidation, '|') + 1);

IF(v_CheckStatusCode <> '00')----ONE OR MORE VALIDATION FAILED
THEN
	OPEN c_1 FOR SELECT v_CheckNarration AS Narration,'Validation failed' AS TrxStatus, v_CheckStatusCode AS ResponseCode, '' AS CustomerName, 
	v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
RETURN;
END IF;

	SELECT  Maximum_Amount,Minimum_Amount, NVL(Repayment_Period,0),
		Repayment_Frequency, NVL(Application_Fee,0), Application_Fee_Rate, 
	 Application_Fee_Min, B.Product_Name,  A.Interest_Account,
		A.Interest_Rate, NVL(Grace_period,0), NVL(INTEREST_UPFRONT,0) INTO v_MaximumAmount, v_MinimumAmount, v_RepaymentPeriod, v_RepaymentFrequency, 
        v_LAF, v_LAF_Rate, v_MinimumLAF, v_ProductName, v_InterestGL, v_InterestRate, v_GracePeriod, v_Interest_Upfront FROM tb_Loan_Products A INNER JOIN 
		tb_Products B ON A.Product_Code = B.Product_Code WHERE A.Product_Code=p_ProductCode;

	SELECT FIRST_NAME INTO v_FirstName FROM TB_CUSTOMER WHERE CUSTOMER_NO = p_MobileNumber;
	SELECT ACCOUNT_NO INTO v_AccountNo FROM TB_ACCOUNT WHERE CUSTOMER_NO = p_MobileNumber AND ACCOUNT_CLASS='254';
	SELECT COUNT(*) INTO v_LoanCount FROM tb_Loan_Details WHERE MobileNo = p_MobileNumber;
	v_LoanCount := v_LoanCount + 1;


    SELECT  SUBSTR(p_MobileNumber,5,8) INTO v_CustomerNo FROM dual;
    v_FinalInstallmentDate :=  v_ApplicationDate + 30;  --v_GracePeriod;   

    ---LETS CREATE THE LOAN ACCOUNT
    BEGIN
        A_SP_Add_Loan_Account(p_MobileNumber, p_ProductCode, v_BranchCode, v_Currency, v_FieldOfficer, CV_1);
    LOOP
      FETCH CV_1 INTO V_LN_ACC_RESPONSE_CODE,V_LN_ACC_RESPONSE_DESC,V_LN_ACC_NO;
      EXIT
    WHEN CV_1%NOTFOUND;
      IF V_LN_ACC_RESPONSE_CODE NOT IN ('00') THEN
        OPEN C_1 FOR 
            SELECT V_LN_ACC_RESPONSE_DESC AS Narration,'Loan Acc Create failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
            v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
        RETURN;        
      ELSE
        v_LoanAccountNo := V_LN_ACC_NO;
      END IF;
      --DBMS_OUTPUT.PUT_LINE(V_LN_ACC_RESPONSE_CODE || ' ' || V_LN_ACC_RESPONSE_DESC);
    END LOOP;
    CLOSE CV_1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR 
        SELECT 'There was an error while creating the customer Loan Account' AS Narration,'Loan Acc Create failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
        v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;

    v_LoanId := FN_Get_Series('LAP',1);

    IF(v_InterestRate > 0) THEN
		v_Interest := p_LoanAmount * (v_InterestRate/100) * v_RepaymentPeriod / 12;
    END IF; ---12 months

	v_CurrentInterestBalance := v_Interest;
	IF (v_Interest_Upfront = 0) THEN
		v_CurrentInterestBalance := 0;
	END IF;

		v_PrincipalAmount := p_LoanAmount; 
		v_TotalFacilityAmount := p_LoanAmount + v_Interest;
		v_RepaymentPrincipal := v_PrincipalAmount / v_RepaymentPeriod;
		v_RepaymentInterest := v_Interest / v_RepaymentPeriod;
        v_DisburseNarration := v_ProductName||' Disbursment';

BEGIN
    ---create the loan now
    INSERT INTO tb_Loan_Details
				(LoanId,AccountNo,CustAccount,MobileNo,ProductCode,InterestRate,GracePeriod,PrincipalAmount,Interest,TotalFacilityAmount,RepaymentPeriod,
				 RepaymentTotalAmount,RepaymentInterestComponent,RepaymentPrincipalComponent,RepaymentFrequency,PaymentFrequency,
				 CurrentTotalBalance,CurrentPrincipalBalance,CurrentInterestBalance,LoanStatus,CompletedStatus,
				 FinalInstallmentDate,CreatedBy,CreatedOn,ApplicationDate,PrincipleRepaymentStart,ScheduleType,DisbursementMode,
				 InArrears, DateArreared,AmountInArrears,AmountInArrearsPrincipal,AmountInArrearsInterest,
				 Level1Authorized, Level1AuthorizedOn, Level1AuthorizedBy, Level1Remarks,
				 Level2Authorized, Level2AuthorizedOn, Level2AuthorizedBy, Level2Remarks,
				 Level3Authorized, Level3AuthorizedOn, Level3AuthorizedBy, Level3Remarks,
				 Level4Authorized, Level4AuthorizedOn, Level4AuthorizedBy, Level4Remarks,
				 Level1Disbursed, Level1DisbursementDate, Level1DisbursedBy, Level1DisburseRemarks,LoanCount,LoanLimitAmount )
			 VALUES
				 (v_LoanId,v_LoanAccountNo,v_AccountNo,p_MobileNumber,p_ProductCode,v_InterestRate,v_GracePeriod,v_PrincipalAmount,v_Interest,v_TotalFacilityAmount,
				 v_RepaymentPeriod, v_TotalFacilityAmount, v_Interest, v_PrincipalAmount,v_RepaymentFrequency,1,
				  (v_PrincipalAmount + v_CurrentInterestBalance),v_PrincipalAmount,v_CurrentInterestBalance,'LST-011',0,
				  v_FinalInstallmentDate,v_FieldOfficer,SYSTIMESTAMP, v_ApplicationDate, v_ApplicationDate, 'S01','DSM00001',
				  0, NULL, 0, 0, 0,
				  1, SYSTIMESTAMP, v_FieldOfficer, v_DisburseNarration,
				  1, SYSTIMESTAMP, v_FieldOfficer, v_DisburseNarration,
				  1, SYSTIMESTAMP, v_FieldOfficer, v_DisburseNarration,
				  1, SYSTIMESTAMP, v_FieldOfficer, v_DisburseNarration,
				  1, v_ApplicationDate, v_FieldOfficer, v_DisburseNarration, v_LoanCount, p_LoanLimitAmount);

        ----now we create the loan Schedule
        ----if loan term is 1 month, we do a direct insert. if ter is >1 we use the schedule SP to breakdown the loan schedule

        IF(v_RepaymentPeriod = 1) THEN
            ---v_Checksum := CHECKSUM(v_AccountNo,v_TotalFacilityAmount);

		INSERT INTO tb_Loan_Schedule(Account_No,Loan_Id,Repayment_Number,Repayment_Due_Date,Repayment_Total_Amount,Repayment_Principal_Amount,
        Repayment_Interest_Amount, Running_Balance,Created_By,Created_On,CheckSum)  
                VALUES(v_LoanAccountNo, v_LoanId,1,v_FinalInstallmentDate, (v_PrincipalAmount + v_Interest),v_PrincipalAmount,v_Interest,  
                        v_PrincipalAmount, v_FieldOfficer, SYSTIMESTAMP,v_Checksum); 

        ELSE

		----Here, call the loan_schedule SP
            INSERT INTO tb_Loan_Schedule(Account_No,Loan_Id,Repayment_Number,Repayment_Due_Date,Repayment_Total_Amount,Repayment_Principal_Amount,
                            Repayment_Interest_Amount, Running_Balance,Created_By,Created_On,CheckSum)  
                VALUES(v_LoanAccountNo, v_LoanId,1,v_FinalInstallmentDate, (v_PrincipalAmount + v_Interest),v_PrincipalAmount,v_Interest,  
                        v_PrincipalAmount, v_FieldOfficer, SYSTIMESTAMP,v_Checksum); 

        END IF;

EXCEPTION
  WHEN OTHERS THEN
    RAISE;
	OPEN c_1 FOR SELECT 'NEW-LOAN - Could insert new loan' AS Narration,'Error' AS TrxStatus, '01' AS ResponseCode, v_FirstName AS CustomerName, 
    v_FinalInstallmentDate AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' as InterestAmt, '' AS LoanId
     FROM dual; 
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
  END;


--Now let us disburse the loan via post-mini

V_TERMINALID := ''; 
V_FIELD2 := p_MobileNumber;
V_FIELD3 := '660000';	
V_FIELD4 :=  v_PrincipalAmount;	
V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
V_FIELD24 := 'MM' ;	
V_FIELD32 := p_Channel ;
V_FIELD35 := '' ;	
V_FIELD37 := FN_GET_REFERENCE(V_FIELD32);	
V_FIELD65 := p_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
v_AdditionalText := v_ProductName||' DISBURSEMENT TO ' || v_AccountNo || ' LOAN ID :: '||v_LoanId|| ' AMOUNT :: '||v_PrincipalAmount; 
V_FIELD68 := v_AdditionalText ;	
V_FIELD90 := '' ;	
V_FIELD100 := 'LOANDISBURSE' ;	V_FIELD101 := '' ;	
V_FIELD102 := v_LoanAccountNo ;
V_FIELD103 := v_AccountNo ;	V_COMMISSION := 0 ;	
V_CUSTCURRENCY := v_Currency ;	
V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

BEGIN
        --Put this in a cursor
        A_SP_POST_MINI_TRANSACTIONS(
            V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
            V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
            V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
        );
    LOOP
      FETCH CV_1 INTO    V_DATAX ;   
        EXIT
    WHEN CV_1%NOTFOUND;
    ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
    ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
		---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
        select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
           regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
           regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
           regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
           regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
        FROM DUAL;

      IF V_RESPONSE_CODE IN ('00') THEN
		v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;
        OPEN C_1 FOR   SELECT V_Resp_Narrartionon AS Narration,'Loan posting failed' AS TrxStatus, V_RESPONSE_CODE AS ResponseCode, '' AS CustomerName, 
        v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, V_EXCISE_DUTY_AMT AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;       
	ELSE
	 ---
         OPEN C_1 FOR   SELECT 'There was an error while posting the  Loan Amounts'  AS Narration,'Loan posting failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
        v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
		RETURN;
	END IF;     

    END LOOP;
    CLOSE CV_1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR 
        SELECT 'There was an error while while posting the  Loan Amounts.' AS Narration,'Loan post principal amounts failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
        v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;


  ------------START POSTING COMMISSION TRX--------------------------------------------------------
	---get Loan charges

IF( v_LAF = 1) THEN ----Execute this block only if the product has LAF (Loan Application Fee) charges

			v_LAFAmount := v_PrincipalAmount * v_LAF_Rate / 100;
			IF(v_LAFAmount < v_MinimumLAF) THEN 			
				v_LAFAmount := v_MinimumLAF;
			END IF;

			v_AdditionalText := 'LOAN APPLICATION COMMISSION :: '||p_ProductCode||' LOAN ID :: '||v_LoanId|| ' Amount :: '||v_LAFAmount;

			V_TERMINALID := ''; 
			V_FIELD2 := p_MobileNumber;
			V_FIELD3 := '680000';	
			V_FIELD4 :=  v_LAFAmount;	
			V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
			V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
			V_FIELD24 := 'MM' ;	
			V_FIELD32 := p_Channel ;
			V_FIELD35 := '' ;	
			V_FIELD37 := V_FIELD37; ---FN_GET_REFERENCE(V_FIELD32);	
			V_FIELD65 := p_ProductCode ;	---pass product code, helps to get extra configs in post-mini
			V_FIELD68 := v_AdditionalText ;	
			V_FIELD90 := '' ;	
			V_FIELD100 := 'LOANCOMMN' ;	V_FIELD101 := '' ;	
			V_FIELD102 := v_AccountNo ;
			V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
			V_CUSTCURRENCY := v_Currency ;	
			V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
			V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;



			BEGIN
        --Put this in a cursor
				A_SP_POST_MINI_TRANSACTIONS(
					V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
					V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
					V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
				);
			LOOP
			  FETCH CV_1 INTO    V_DATAX ;   
				EXIT
			WHEN CV_1%NOTFOUND;
				select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
				FROM DUAL;

				IF V_RESPONSE_CODE IN ('00') THEN
					v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;
					UPDATE tb_Loan_Details SET ApplicationFeeRate = v_LAF_Rate, ApplicationFeeAmount = v_LAFAmount WHERE LoanId = v_LoanId;

				ELSE
				----Loan application fee posting failed
					OPEN C_1 FOR   SELECT 'There was an error while posting the Loan Application Fee'  AS Narration,'Loan Application Fee posting failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
					v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
				RETURN;

				END IF; 

			END LOOP;
			CLOSE CV_1;
		  EXCEPTION
		  WHEN OTHERS THEN
			RAISE;
			OPEN C_1 FOR 
				SELECT 'There was an error while while posting the Loan Application Fee.' AS Narration,'Loan post Application Fee failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
				v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
			ROLLBACK TO SAVEPOINT V_SAFEPOINT;
			RETURN;
		  END;

	END IF; 
------------END POSTING COMMISSION TRX--------------------------------------------------------


------------START POSTING INTEREST TRX--------------------------------------------------------
	---get Loan charges

IF( v_InterestRate > 0 AND v_Interest_Upfront = 1) THEN ----Execute this block only if the product has INTEREST charges and if the customer charges interest upfront

			----Interest amount is already calculated up there		
			v_AdditionalText := v_ProductName||' LOAN INTEREST ' || v_AccountNo || ' LOAN ID :: '||v_LoanId|| ' AMOUNT :: '|| v_Interest; 
			v_F44 := 'LOAN INTEREST :: '||p_ProductCode||' LOAN ID :: '||v_LoanId|| ' Amount :: '|| v_Interest;			 


			V_TERMINALID := ''; 
			V_FIELD2 := p_MobileNumber;
			V_FIELD3 := '680000';	
			V_FIELD4 :=  v_Interest;	
			V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
			V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
			V_FIELD24 := 'MM' ;	
			V_FIELD32 := p_Channel ;
			V_FIELD35 := '' ;	
			V_FIELD37 := V_FIELD37; ---FN_GET_REFERENCE(V_FIELD32);	
			V_FIELD65 := p_ProductCode ;	---pass product code, helps to get extra configs in post-mini
			V_FIELD68 := v_AdditionalText ;	
			V_FIELD90 := '' ;	
			V_FIELD100 := 'LOANINTEREST' ;	V_FIELD101 := '' ;	
			V_FIELD102 := v_AccountNo ;
			V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
			V_CUSTCURRENCY := v_Currency ;	
			V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
			V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;



			BEGIN
        --Put this in a cursor
				A_SP_POST_MINI_TRANSACTIONS(
					V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
					V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
					V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
				);
			LOOP
			  FETCH CV_1 INTO    V_DATAX ;   
				EXIT
			WHEN CV_1%NOTFOUND;
				select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
				   regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
				FROM DUAL;
			IF V_RESPONSE_CODE IN ('00') THEN
				v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;
				UPDATE tb_Loan_Details SET ApplicationFeeRate = v_LAF_Rate, ApplicationFeeAmount = v_LAFAmount WHERE LoanId = v_LoanId;
			ELSE
			----Interest posting failed
				OPEN C_1 FOR   SELECT 'There was an error while posting the Loan Application Fee'  AS Narration,'Loan Application Fee posting failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
				v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
			RETURN;
			END IF; 

			END LOOP;
			CLOSE CV_1;
		  EXCEPTION
		  WHEN OTHERS THEN
			RAISE;
			OPEN C_1 FOR 
				SELECT 'There was an error while while posting the Loan Interest Amount.' AS Narration,'Loan post Interest Amount failed' AS TrxStatus, '01' AS ResponseCode, '' AS CustomerName, 
				v_FinalInstallmentDate  AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' AS InterestAmt, '' AS LoanId FROM dual;
			ROLLBACK TO SAVEPOINT V_SAFEPOINT;
			RETURN;
		  END;

	END IF; 
------------END POSTING INTEREST TRX--------------------------------------------------------

OPEN c_1 FOR SELECT 'Loan Successfully Disbursed.' AS Narration,'Successful' AS TrxStatus,'00' AS ResponseCode, v_FirstName AS CustomerName, 
	   v_FinalInstallmentDate AS RepaymentDueDate, v_LAFAmount AS CommnAmount, v_ExiseDutyAmt AS ExiseDutyAmt, 
       v_Interest as InterestAmt, v_LoanId AS LoanId FROM dual;


COMMIT ;

EXCEPTION
  WHEN OTHERS THEN
    RAISE;
	OPEN c_1 FOR SELECT 'FAILED - Could not disburse loan' AS Narration,'Error' AS TrxStatus, '01' AS ResponseCode, v_FirstName AS CustomerName, 
    v_FinalInstallmentDate AS RepaymentDueDate, '0' AS CommnAmount, '0' AS ExiseDutyAmt, '0' as InterestAmt, '' AS LoanId
     FROM dual; 
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOAN_AUTO_REPAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOAN_AUTO_REPAYMENT" 
(
    c_1 OUT SYS_REFCURSOR
)
AS
v_WorkingDate DATE;
v_FINANCIALYR NVARCHAR2(6);
v_FINANCIALPRD NVARCHAR2(3);
v_AccountNo NVARCHAR2(15):='';
v_AVLBAL NUMBER(18,2) := 0;
v_TrxSerialNo NUMBER(10) := 0;
v_DRCR CHAR(1);
v_Stan NVARCHAR2(6);
v_TRXNO NVARCHAR2(18);
v_LoanAccount NVARCHAR2(10);
v_GLACCOUNT NVARCHAR2(10);
v_ExcessAccount NVARCHAR2(10);
v_InterestAccount NVARCHAR2(10);
v_LoanId  NVARCHAR2(11);
v_PostAmount NUMBER(18,2):=0;
v_ProductCode  NVARCHAR2(4);
v_InterestBalance NUMBER(18,2) := 0;
v_PrincipalBalance NUMBER(18,2) := 0;
v_TotalFacilityAmount NUMBER(18,2) := 0;
v_OverPayment NUMBER(18,2):=0;
v_Penalty NUMBER(18,2):=0;
v_TotalBalance NUMBER(18,2) := 0;
v_InterestCleared NUMBER(18,2) := 0;
v_PrincipalCleared NUMBER(18,2) := 0;
v_AdditionalText NVARCHAR2(1000);
v_Strfield37 NVARCHAR2(20);
v_TrxNarration NVARCHAR2(500);
v_Status number(1):=0;
v_Strfield7 NVARCHAR2(10);
v_RepaymentNumber NUMBER(18,0) := 0;
v_ACCOUNTNUMBER  NVARCHAR2(20);
v_AMOUNT   NUMBER(18,2);
v_RepaymentInterestComponent NUMBER(18,2); 
v_RepaymentPrincipalComponent NUMBER(18,2);
v_EXTERNALREF NVARCHAR2(100):= '';
---@USERID NVARCHAR(50)='EOD',
---@Channel VARCHAR(6) = 'ESB',
---v_Field24 NVARCHAR2(3) :='';
v_LoanCount NUMBER(10) := 0;
v_id NUMBER(18,0) := 0;
v_PenaltyGL NVARCHAR2(10);
v_InterestGL  NVARCHAR2(10);
v_Narration NVARCHAR2(200);
v_InstalmentAmt number(18,2);
v_duedate date;
v_ExcessRepayment NUMBER(18,2) := 0;
v_LoanNo nvarchar2(50);
v_USERID NVARCHAR2(50) := 'ESB';
v_Currency NVARCHAR2(5) := 'KES';
v_InterestReceivableGL  NVARCHAR2(10);
v_InterestAccruedGL  NVARCHAR2(10);
v_InterestRate NUMBER(18,1):=0;
v_InterestAmount  NUMBER(18,2);
v_PrincipalAmount  NUMBER(18,2);
v_RepaymentPeriod NUMBER(10) := 1;
v_RepaymentDueDate DATE;
v_RepaymentTotalAmount NUMBER(18,2) := 0;
v_CustAccount NVARCHAR2(15);
v_AccountBal  NUMBER(18,2);
v_ProductName NVARCHAR2(50) ;
v_ExternalRefID NVARCHAR2(50);
v_ApplicationDate Date;
v_PrincipalPaid  NUMBER(18,2) := 0;
v_InterestPaid  NUMBER(18,2) := 0;
v_PenaltyPaid  NUMBER(18,2) := 0;
v_RollOverFee  NUMBER(18,2) := 0;
v_ExiseDutyAmt NUMBER(18,2) := 0;
v_RollOverFeePaid NUMBER(18,2) := 0;
v_TotalLoanPaid NUMBER(18,2) := 0;
v_F44 NVARCHAR2(4000) := '';
v_MaturityDate DATE;
v_Channel VARCHAR2(6) := 'ESB';
V_COB    NUMBER  :=0;
V_Count    NUMBER  :=0;
v_MobileNo NVARCHAR2(50);
--Take care of excise duty amount else u are doomed. subtract it from the total repayment amount #
v_ExciseDutyType NVARCHAR2(2); v_ExciseDutyRate NUMBER(18,2);v_ChargeCollectionAccount NVARCHAR2(50);
v_ExciseDuty number(10) := 0; v_ExciseDutyAmount number(18,2) := 0;v_ChargeCommnCode NVARCHAR2(6);
v_TrxnCharge number(18,4):=0;v_FeeType NVARCHAR2(2);v_TransCharge number(18,2) := 0;

V_DATAX NVARCHAR2(500);
V_RESPONSE_CODE  NVARCHAR2(20);
V_available_actual   NVARCHAR2(20);
V_CHARGES_AMT   NUMBER(18,2) := 0;
V_EXCISE_DUTY_AMT  NUMBER(18,2) := 0;
V_Resp_Narrartionon   NVARCHAR2(500);

---post-mini
V_MSGTYPE        NVARCHAR2(50) ;
V_FIELD2         NVARCHAR2(50) ;
V_FIELD3         NVARCHAR2(50);
V_FIELD4         NUMBER(18,2) := 0;--AMOUNT
V_FIELD7         NVARCHAR2(50);
V_FIELD11        NVARCHAR2(50) ;--STAN
V_FIELD24        NVARCHAR2(50);
V_FIELD32        NVARCHAR2(50) ;
V_FIELD35        NVARCHAR2(50);
V_FIELD37        NVARCHAR2(50);
V_FIELD65        NVARCHAR2(50) ;
V_FIELD68        NVARCHAR2(50);
V_FIELD90        NVARCHAR2(50);
V_FIELD100       NVARCHAR2(50);
V_FIELD101       NVARCHAR2(50);
V_FIELD102       NVARCHAR2(50);
V_FIELD103       NVARCHAR2(50);
V_COMMISSION     NUMBER(18,2) := 0;
V_CUSTCURRENCY   NVARCHAR2(50):= 'KES' ;
V_TERMINALID     NVARCHAR2(50);
V_TRNCODE        NVARCHAR2(50) ;
V_EXTERNALREFNO  NVARCHAR2(50);  
CV_1 SYS_REFCURSOR;

BEGIN
  SAVEPOINT V_SAFEPOINT;

----Repayment process here
		--1. code = 01, msg=You have no outstanding loan. --customer tries to pay loan while they have no outstanding loan
		--2. code = 00, msg=LOAN SUCCESSFULLY PAID --succesfull repayment
		--3. code = 02, msg=sql generated error --this is any other error resulting from other eventualities

SELECT  WORKINGDATE, FinancialYear, FinancialPeriod INTO v_WorkingDate, v_FINANCIALYR, v_FINANCIALPRD FROM tb_Date_Settings ;

v_Narration := 'LOAN PROCESSED BUT NO MONEY POSTED';

BEGIN
DECLARE
 CURSOR CUR_AUTO_REPAY_TRX IS

		SELECT DISTINCT A.Loan_Id,B.RepaymentPeriod,A.Repayment_Due_Date,A.Repayment_Total_Amount,B.CustAccount, B.MobileNo
		FROM tb_Loan_Schedule A INNER JOIN tb_Loan_Details B ON A.Loan_Id = B.LoanId
		INNER JOIN TB_ACCOUNT C ON B.CustAccount = C.ACCOUNT_NO
		WHERE A.Repayment_Due_Date <= v_WorkingDate 
		AND NVL(Schedule_Paid,0)=0 and B.LoanStatus IN('LST-011','LST-012')
		AND C.AVAILABLE_BAL > 1 --to make sure atleast the customer has some cash
		---AND A.LoanId='LAP00002895' --FOR TESTING
		ORDER BY B.RepaymentPeriod,A.Repayment_Due_Date,A.Repayment_Total_Amount,B.CustAccount;

	V_CUR_LOAN_DATA CUR_AUTO_REPAY_TRX%ROWTYPE;

BEGIN
  -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
  OPEN CUR_AUTO_REPAY_TRX;
  -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
  FETCH CUR_AUTO_REPAY_TRX
  INTO V_CUR_LOAN_DATA;
  -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
  WHILE CUR_AUTO_REPAY_TRX%FOUND
  LOOP
  ---v_LoanId,v_RepaymentPeriod,v_RepaymentDueDate,v_RepaymentTotalAmount,v_CustAccount
	v_LoanId  := V_CUR_LOAN_DATA.Loan_Id;
	v_RepaymentPeriod := V_CUR_LOAN_DATA.RepaymentPeriod;
	v_RepaymentDueDate  := V_CUR_LOAN_DATA.Repayment_Due_Date; 
	v_RepaymentTotalAmount  := V_CUR_LOAN_DATA.Repayment_Total_Amount;
	v_CustAccount  := V_CUR_LOAN_DATA.CustAccount;
    v_MobileNo  := V_CUR_LOAN_DATA.MobileNo;



    SELECT  WORKINGDATE, FinancialYear, FinancialPeriod, COB INTO v_WorkingDate, v_FINANCIALYR, v_FINANCIALPRD, V_COB FROM tb_Date_Settings; --RETURN THIS ON LIVE
  --SET @WORKINGDATE= CONVERT(DATE,GETDATE()) --for testing

   SELECT NVL(COUNT(*),0) INTO v_LoanCount  FROM tb_Loan_Details WHERE CustAccount=v_ACCOUNTNUMBER AND LoanStatus IN ('LST-012','LST-011');

       SELECT NVL(AccountNo,''), LoanId,ProductCode ,
       NVL(CurrentInterestBalance,0),
       NVL(Penalty,0),
       NVL(CurrentPrincipalBalance,0),
       NVL(CurrentTotalBalance,0),
       NVL(TotalFacilityAmount,0),
       NVL(RepaymentInterestComponent,0),
       NVL(RepaymentPrincipalComponent,0),
       Interest,
       PrincipalAmount,
       RollOverFeeAmount,
       NVL(ExternalRefID,''),
       FinalInstallmentDate INTO v_AccountNo, v_LoanId, v_ProductCode, v_InterestBalance, v_Penalty, v_PrincipalBalance, v_TotalBalance, v_TotalFacilityAmount, v_RepaymentInterestComponent, v_RepaymentPrincipalComponent, v_InterestAmount, v_PrincipalAmount, v_RollOverFee, v_ExternalRefID, v_MaturityDate
       FROM tb_Loan_Details WHERE CustAccount=v_ACCOUNTNUMBER
       AND LoanStatus IN ('LST-012','LST-011')
       AND LoanId = v_LoanNo AND rownum <= 1;
       --(SELECT LoanStatusID FROM tbLoanStatus WHERE LoanActive=1) 

   IF (v_AccountNo = '' OR v_TotalBalance = 0)
   THEN
     OPEN c_1 FOR SELECT '01' AS PAYSTATUS, 'Customer has no outstanding loan.' AS Narration, '0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  '0' AS PenaltyPaid, '' AS MaturityDate,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
     RETURN;
   END IF;

    --Get account balance so we know the amount we are working with, incase customer has penalties/rollover fees
    v_AccountBal :=FN_GETBALANCE('C',V_COB,v_ACCOUNTNUMBER);   

    ------account balance
			IF(v_AccountBal <= 0)	THEN
				OPEN c_1 FOR SELECT '01' AS PAYSTATUS, 'Insufficient balance' AS Narration, '0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  '0' AS PenaltyPaid, '' AS MaturityDate,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
				 RETURN;
			END IF;

			IF(v_AMOUNT > v_AccountBal)
			THEN
				v_AMOUNT := v_AccountBal;
			END IF;		

        -----GETERATE THE REF NUMBER FOR OUR TXNs
        v_TRXNO := FN_GET_REFERENCE(v_Channel);

		SELECT NVL(A.Interest_Account,''), NVL(A.Interest_Receivable_Account,''),
			 NVL(A.Accrued_Interest_Account,''), A.Interest_Rate, B.Product_Name INTO v_InterestGL, v_InterestReceivableGL, v_InterestAccruedGL, v_InterestRate, v_ProductName
			FROM tb_Loan_Products A INNER JOIN TB_PRODUCTS B ON A.Product_Code=B.Product_Code where A.Product_Code = v_ProductCode;


        --------------START BY REPAYING PENALTY-------------------------------------------------------
		  IF(v_Penalty > 0)  THEN
            v_TransCharge := v_Penalty;

            ----Take care of excise duty amount else post-mini may hit a snag of unsufficient funds. subtract it from the total repayment amount #
            select ITEMVALUE INTO v_ExciseDutyRate from tb_general_params where itemname='EXCISE_DUTY';
            v_ExciseDutyAmount := (v_TransCharge * v_ExciseDutyRate)/100 ; 

            IF(v_AMOUNT >= v_Penalty) THEN
				   v_PostAmount := v_Penalty;
				END IF;

				IF(v_AMOUNT < v_Penalty) THEN
				  v_PostAmount := v_AMOUNT;
				END IF;

				v_AdditionalText := v_ProductName||' PENALTY PAYMENT ' || v_ACCOUNTNUMBER || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;
				--Now let us repay the loan via post-mini
                V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := v_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANPENALTYPAY' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN
                    v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;

                    UPDATE tb_Loan_Details SET Penalty=Penalty-v_PostAmount WHERE LoanId=v_LoanId;

                    INSERT INTO TB_LOAN_RECOVERIES(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
                                                 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
                    VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANPENALTYPAY',v_WorkingDate,SYSTIMESTAMP,0,0,v_PostAmount,0,v_PostAmount,v_EXTERNALREF);

                    ----TRACK AMOUNTS
                       v_AMOUNT := v_AMOUNT - v_PostAmount - v_ExciseDutyAmount; ----Subtract the excise duty since its charged on the penalty amount
                       v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                       v_PenaltyPaid := v_PostAmount;  ---Used in the response msg
                       v_TransCharge := 0;
                       v_PostAmount := 0;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan penalty. Error while posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;


          END IF;
--------------END REPAYING PENALTY-------------------------------------------------------
--------------START ROLLOVER FEE---------------------------------------------------------
        IF(v_RollOverFee > 0)  THEN
            v_TransCharge := v_RollOverFee;  

            ----Take care of excise duty amount else post-mini may hit a snag of unsufficient funds. subtract it from the total repayment amount #
            ---GET EXCISE DUTY AMT
            select ITEMVALUE INTO v_ExciseDutyRate from tb_general_params where itemname='EXCISE_DUTY';
            v_ExciseDutyAmount := (v_TransCharge * v_ExciseDutyRate)/100 ; 

            IF(v_AMOUNT >= v_RollOverFee) THEN
               v_PostAmount := v_RollOverFee;
            END IF;

            IF(v_AMOUNT < v_RollOverFee) THEN
              v_PostAmount := v_AMOUNT;
            END IF;

            v_AdditionalText := v_ProductName||' ROLLOVER COMMISSION REPAYMENT ' || v_ACCOUNTNUMBER || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;             
            --CALL POST-MINI

            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := v_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANCOMMN' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN
                    v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;

                    UPDATE tb_Loan_Details SET RollOverFeeAmount = RollOverFeeAmount - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANCOMMN',v_WorkingDate,SYSTIMESTAMP,0,0,0,v_PostAmount,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS
					   v_AMOUNT := v_AMOUNT - v_PostAmount - v_ExciseDutyAmount;
					   v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
					   v_RollOverFeePaid := v_PostAmount; ---Used in the response msg
					   v_PostAmount := 0;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan rollover fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;

        END IF;
--------------END ROLLOVER FEE-------------------------------------------------------      

-----------------START REPAY INTEREST IF AMOUNT >0 AND INTEREST_BAL > 0 ------------------------------------------------------------------------------
            SELECT NVL(Repayment_Interest_Amount,0) - NVL(Interest_Paid,0), Repayment_Number INTO v_RepaymentInterestComponent, v_RepaymentNumber
                 FROM tb_Loan_Schedule WHERE NVL(Schedule_Paid,0)=0 AND 
                 NVL(Repayment_Interest_Amount,0)<>NVL(Interest_Paid,0) 
                 AND  Loan_Id = v_LoanId 
                 AND rownum <= 1
                 ORDER BY Repayment_Number ASC;

    IF(v_InterestBalance > 0 AND v_AMOUNT > 0)	  THEN			
            IF(v_AMOUNT > v_RepaymentInterestComponent  ) THEN
                v_PostAmount := v_RepaymentInterestComponent;
            END IF;

            IF(v_AMOUNT <= v_RepaymentInterestComponent) THEN
                v_PostAmount := v_AMOUNT;
            END IF;

            v_PrincipalCleared := 0;
            v_AdditionalText := v_ProductName||' INTEREST REPAYMENT ' || v_AccountNo || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;

            --CALL POST-MINI            
            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := v_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANINTEREST' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN

                    UPDATE tb_Loan_Schedule SET Interest_Paid = NVL(Interest_Paid,0) + v_PostAmount,
							Total_Paid = NVL(Total_Paid,0) + v_PostAmount
							WHERE Loan_Id = v_LoanId; --AND RepaymentNumber = @RepaymentNumber

                    UPDATE tb_Loan_Details SET CurrentTotalBalance=CurrentTotalBalance-v_PostAmount, 
                    CurrentInterestBalance=CurrentInterestBalance - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANINTEREST',v_WorkingDate,SYSTIMESTAMP,v_PostAmount,0,0,0,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS                       
                       v_InterestCleared := v_PostAmount;
                       v_InterestPaid := v_PostAmount; ---Used in the response msg
                       v_AMOUNT := v_AMOUNT - v_PostAmount;
                       v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                       v_TotalBalance := v_TotalBalance - v_InterestCleared;
                       v_PostAmount := 0;

                   INSERT INTO tb_Loan_Schedule_Repayment(Loan_Id,Repayment_Number,Interest_Amount_Paid,Principal_Amount_Paid,Date_Paid, Total_Amount_Paid,TrxRef_No)
                        VALUES(v_LoanId, v_RepaymentNumber,v_InterestCleared,v_PrincipalCleared,v_WorkingDate,  v_PrincipalCleared, v_TRXNO);

                    UPDATE tb_Loan_Schedule SET schedule_paid = 1 WHERE Loan_Id=v_LoanId AND NVL(Repayment_Principal_Amount,0) = NVL(Principal_Paid,0)
                    AND NVL(Repayment_Interest_Amount,0) = NVL(Interest_Paid,0) AND Repayment_Number = v_RepaymentNumber;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan interest fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;


    END IF;

-----------------END REPAY INTEREST-----------------------------------------------------------------------------------------------------------------


-----------------START REPAY PRINCIPAL IF AMOUNT >0  AND PRINCIPAL_BAL > 0 ------------------------------------------------------------------------------
        SELECT NVL(Repayment_Principal_Amount,0) - NVL(Principal_Paid,0), Repayment_Number INTO v_RepaymentPrincipalComponent, v_RepaymentNumber
					 FROM tb_Loan_Schedule WHERE NVL(Schedule_Paid,0)=0 AND 
					 NVL(Repayment_Principal_Amount,0)<>NVL(Principal_Paid,0) 
                     AND  Loan_Id = v_LoanId 
                     AND rownum <= 1
                     ORDER BY Repayment_Number ASC;

    IF(v_PrincipalBalance > 0 AND v_AMOUNT > 0)	  THEN

            IF(v_AMOUNT > v_RepaymentPrincipalComponent  ) THEN
            v_PostAmount := v_RepaymentPrincipalComponent;
            END IF;

            IF(v_AMOUNT <= v_RepaymentPrincipalComponent) THEN
            v_PostAmount := v_AMOUNT;
            END IF;

            v_PrincipalCleared := 0;
            v_AdditionalText := v_ProductName||' PRINCIPAL REPAYMENT ' || v_AccountNo || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;
            --CALL POST-MINI            
            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := v_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANPRINCPAY' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := v_AccountNo ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN

                    UPDATE tb_Loan_Schedule SET Principal_Paid = NVL(Principal_Paid,0) + v_PostAmount,
                        Total_Paid = NVL(Total_Paid,0) + v_PostAmount
                        WHERE Loan_Id = v_LoanId; --AND RepaymentNumber = @RepaymentNumber

                    UPDATE tb_Loan_Details SET CurrentTotalBalance=CurrentTotalBalance-v_PostAmount, 
                    CurrentPrincipalBalance=CurrentPrincipalBalance - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANPRINCPAY',v_WorkingDate,SYSTIMESTAMP,0,v_PostAmount,0,0,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS                       
                    v_PrincipalCleared := v_PostAmount;
                    v_PrincipalPaid := v_PostAmount; ---Used in the response msg
                    v_AMOUNT := v_AMOUNT -v_PostAmount;
                    v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                    v_TotalBalance := v_TotalBalance - v_PrincipalCleared;
                    v_PostAmount := 0;

                    INSERT INTO tb_Loan_Schedule_Repayment(Loan_Id,Repayment_Number,Interest_Amount_Paid,Principal_Amount_Paid,Date_Paid, Total_Amount_Paid,TrxRef_No)
                    VALUES(v_LoanId, v_RepaymentNumber,v_InterestCleared,v_PrincipalCleared,v_WorkingDate,  v_PrincipalCleared, v_TRXNO);

                    UPDATE tb_Loan_Schedule SET schedule_paid = 1 WHERE Loan_Id=v_LoanId AND NVL(Repayment_Principal_Amount,0) = NVL(Principal_Paid,0)
                    AND NVL(Repayment_Interest_Amount,0) = NVL(Interest_Paid,0) AND Repayment_Number = v_RepaymentNumber;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan interest fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;



    END IF;

-----------------END REPAY PRINCIPAL --------------------------------------------------------------------------------------------------------------------

    SELECT NVL(CurrentInterestBalance,0),
       NVL(CurrentPrincipalBalance,0), NVL(CurrentTotalBalance,0),
       NVL(TotalFacilityAmount,0) INTO v_InterestBalance, v_PrincipalBalance, v_TotalBalance, v_TotalFacilityAmount   FROM tb_Loan_Details WHERE LoanId=v_LoanId AND rownum <= 1;

        -----If the customer has cleared the loan, lets close it
        IF(v_TotalBalance <= 0)
          THEN
               UPDATE tb_Loan_Details SET LoanStatus = 'LST-013', PrevRepaymentDate = SYSTIMESTAMP, FullRepaymentDate = SYSTIMESTAMP  WHERE LoanId = v_LoanId;
               UPDATE tb_Account SET Blocked_Amount=0 WHERE Account_No = v_ACCOUNTNUMBER;
          END IF;


    FETCH CUR_AUTO_REPAY_TRX  INTO  V_CUR_LOAN_DATA;
 END LOOP;
 -- FREE RESOURCES USED BY THE CURSOR
CLOSE CUR_AUTO_REPAY_TRX;
END;

EXCEPTION
WHEN OTHERS THEN
RAISE;
	OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
		'0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
ROLLBACK TO SAVEPOINT V_SAFEPOINT;
RETURN;
END;					


	v_Narration := 'LOAN SUCCESSFULLY PAID';
	OPEN c_1 FOR SELECT '00' AS PAYSTATUS, v_Narration AS Narration, v_TotalBalance  AS LoanBalance, v_PrincipalPaid AS PrincipalPaid,  
		v_InterestPaid AS InterestPaid,  v_PenaltyPaid AS PenaltyPaid, v_RollOverFeePaid AS RollOverFeePaid, v_MaturityDate AS MaturityDate, v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;

COMMIT ;


EXCEPTION
  WHEN OTHERS THEN
  RAISE;
	OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Loan repayment failed' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
			'0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOAN_REPAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOAN_REPAYMENT" 
(
	p_CustomerAccountNo IN NVARCHAR2, ---pass wallet account
	p_AmountPaid IN NUMBER,
	p_LoanProductCode IN NVARCHAR2,
	p_Channel IN VARCHAR2,
	p_Field37 IN NVARCHAR2, 
    c_1 OUT SYS_REFCURSOR
)
AS
v_WorkingDate DATE;
v_FINANCIALYR NVARCHAR2(6);
v_FINANCIALPRD NVARCHAR2(3);
v_AccountNo NVARCHAR2(15):='';
v_AVLBAL NUMBER(18,2) := 0;
v_TrxSerialNo NUMBER(10) := 0;
v_DRCR CHAR(1);
v_Stan NVARCHAR2(6);
v_TRXNO NVARCHAR2(18);
v_LoanAccount NVARCHAR2(10);
v_GLACCOUNT NVARCHAR2(10);
v_ExcessAccount NVARCHAR2(10);
v_InterestAccount NVARCHAR2(10);
v_LoanId  NVARCHAR2(11);
v_PostAmount NUMBER(18,2):=0;
v_ProductCode  NVARCHAR2(4);
v_InterestBalance NUMBER(18,2) := 0;
v_PrincipalBalance NUMBER(18,2) := 0;
v_TotalFacilityAmount NUMBER(18,2) := 0;
v_OverPayment NUMBER(18,2):=0;
v_Penalty NUMBER(18,2):=0;
v_TotalBalance NUMBER(18,2) := 0;
v_InterestCleared NUMBER(18,2) := 0;
v_PrincipalCleared NUMBER(18,2) := 0;
v_AdditionalText NVARCHAR2(1000);
v_Strfield37 NVARCHAR2(20);
v_TrxNarration NVARCHAR2(500);
v_Status number(1):=0;
v_Strfield7 NVARCHAR2(10);
v_RepaymentNumber NUMBER(18,0) := 0;
v_ACCOUNTNUMBER  NVARCHAR2(20);
v_AMOUNT   NUMBER(18,2);
v_RepaymentInterestComponent NUMBER(18,2); 
v_RepaymentPrincipalComponent NUMBER(18,2);
v_EXTERNALREF NVARCHAR2(100):= p_Field37;
---@USERID NVARCHAR(50)='EOD',
---@Channel VARCHAR(6) = 'ESB',
---v_Field24 NVARCHAR2(3) :='';
v_LoanCount NUMBER(10) := 0;
v_id NUMBER(18,0) := 0;
v_PenaltyGL NVARCHAR2(10);
v_InterestGL  NVARCHAR2(10);
v_Narration NVARCHAR2(200);
v_InstalmentAmt number(18,2);
v_duedate date;
v_ExcessRepayment NUMBER(18,2) := 0;
v_LoanNo nvarchar2(50);
v_USERID NVARCHAR2(50) := 'ESB';
v_Currency NVARCHAR2(5) := 'KES';
v_InterestReceivableGL  NVARCHAR2(10);
v_InterestAccruedGL  NVARCHAR2(10);
v_InterestRate NUMBER(18,1):=0;
v_InterestAmount  NUMBER(18,2);
v_PrincipalAmount  NUMBER(18,2);
v_AccountBal  NUMBER(18,2);
v_ProductName NVARCHAR2(50) ;
v_ExternalRefID NVARCHAR2(50);
v_ApplicationDate Date;
v_PrincipalPaid  NUMBER(18,2) := 0;
v_InterestPaid  NUMBER(18,2) := 0;
v_PenaltyPaid  NUMBER(18,2) := 0;
v_RollOverFee  NUMBER(18,2) := 0;
v_ExiseDutyAmt NUMBER(18,2) := 0;
v_RollOverFeePaid NUMBER(18,2) := 0;
v_TotalLoanPaid NUMBER(18,2) := 0;
v_F44 NVARCHAR2(4000) := '';
v_MaturityDate DATE;
V_COB    NUMBER  :=0;
V_Count    NUMBER  :=0;
v_MobileNo NVARCHAR2(50);
--Take care of excise duty amount else u are doomed. subtract it from the total repayment amount #
v_ExciseDutyType NVARCHAR2(2); v_ExciseDutyRate NUMBER(18,2);v_ChargeCollectionAccount NVARCHAR2(50);
v_ExciseDuty number(10) := 0; v_ExciseDutyAmount number(18,2) := 0;v_ChargeCommnCode NVARCHAR2(6);
v_TrxnCharge number(18,4):=0;v_FeeType NVARCHAR2(2);v_TransCharge number(18,2) := 0;

V_DATAX NVARCHAR2(500);
V_RESPONSE_CODE  NVARCHAR2(20);
V_available_actual   NVARCHAR2(20);
V_CHARGES_AMT   NUMBER(18,2) := 0;
V_EXCISE_DUTY_AMT  NUMBER(18,2) := 0;
V_Resp_Narrartionon   NVARCHAR2(500);

---post-mini
V_MSGTYPE        NVARCHAR2(50) ;
V_FIELD2         NVARCHAR2(50) ;
V_FIELD3         NVARCHAR2(50);
V_FIELD4         NUMBER(18,2) := 0;--AMOUNT
V_FIELD7         NVARCHAR2(50);
V_FIELD11        NVARCHAR2(50) ;--STAN
V_FIELD24        NVARCHAR2(50);
V_FIELD32        NVARCHAR2(50) ;
V_FIELD35        NVARCHAR2(50);
V_FIELD37        NVARCHAR2(50);
V_FIELD65        NVARCHAR2(50) ;
V_FIELD68        NVARCHAR2(50);
V_FIELD90        NVARCHAR2(50);
V_FIELD100       NVARCHAR2(50);
V_FIELD101       NVARCHAR2(50);
V_FIELD102       NVARCHAR2(50);
V_FIELD103       NVARCHAR2(50);
V_COMMISSION     NUMBER(18,2) := 0;
V_CUSTCURRENCY   NVARCHAR2(50):= 'KES' ;
V_TERMINALID     NVARCHAR2(50);
V_TRNCODE        NVARCHAR2(50) ;
V_EXTERNALREFNO  NVARCHAR2(50);  
CV_1 SYS_REFCURSOR;

BEGIN
  SAVEPOINT V_SAFEPOINT;

----Repayment process here
 V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE  EXISTS(SELECT A.AccountNo  FROM  tb_Loan_Details A INNER JOIN tb_Account B ON A.AccountNo=B.ACCOUNT_NO
WHERE LoanStatus IN ('LST-012','LST-011')
AND CustAccount = p_CustomerAccountNo AND (B.AVAILABLE_BAL * -1)  > 0);

	IF(V_COUNT = 0) THEN
		OPEN c_1 FOR SELECT '01' AS PAYSTATUS, 'You have no outstanding loan.' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  '0' AS PenaltyPaid, '' AS MaturityDate FROM dual  ;

		RETURN;
	END IF;

		--1. code = 01, msg=You have no outstanding loan. --customer tries to pay loan while they have no outstanding loan
		--2. code = 00, msg=LOAN SUCCESSFULLY PAID --succesfull repayment
		--3. code = 02, msg=sql generated error --this is any other error resulting from other eventualities


		SELECT AccountNo INTO v_AccountNo  FROM  tb_Loan_Details 
		WHERE LoanStatus IN ('LST-012','LST-011')
		AND CustAccount=p_CustomerAccountNo AND rownum <= 1;

		v_Narration := 'LOAN PROCESSED BUT NO MONEY POSTED';

BEGIN
DECLARE
 CURSOR CUR_REPAY_TRX IS

		SELECT DISTINCT  Id,LoanId,p_AmountPaid AS Amount, CustAccount,MobileNo,ApplicationDate  FROM  tb_Loan_Details 
		WHERE LoanStatus IN ('LST-012','LST-011')
		AND CustAccount = p_CustomerAccountNo
		AND p_AmountPaid  > 0
		AND ProductCode = p_LoanProductCode
		AND ROWNUM <= 1
		ORDER BY ApplicationDate ASC;

	V_CUR_LOAN_DATA CUR_REPAY_TRX%ROWTYPE;

BEGIN
  -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
  OPEN CUR_REPAY_TRX;
  -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
  FETCH CUR_REPAY_TRX
  INTO V_CUR_LOAN_DATA;
  -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
  WHILE CUR_REPAY_TRX%FOUND
  LOOP
	v_id  := V_CUR_LOAN_DATA.Id;
	v_LoanNo := V_CUR_LOAN_DATA.LoanId;
	v_AMOUNT  := V_CUR_LOAN_DATA.Amount; 
	v_ACCOUNTNUMBER  := V_CUR_LOAN_DATA.CustAccount;
    v_MobileNo  := V_CUR_LOAN_DATA.MobileNo;
	v_ApplicationDate  := V_CUR_LOAN_DATA.ApplicationDate;



    SELECT  WORKINGDATE, FinancialYear, FinancialPeriod, COB INTO v_WorkingDate, v_FINANCIALYR, v_FINANCIALPRD, V_COB FROM tb_Date_Settings; --RETURN THIS ON LIVE
  --SET @WORKINGDATE= CONVERT(DATE,GETDATE()) --for testing

   SELECT NVL(COUNT(*),0) INTO v_LoanCount  FROM tb_Loan_Details WHERE CustAccount=v_ACCOUNTNUMBER AND LoanStatus IN ('LST-012','LST-011');

       SELECT NVL(AccountNo,''), LoanId,ProductCode ,
       NVL(CurrentInterestBalance,0),
       NVL(Penalty,0),
       NVL(CurrentPrincipalBalance,0),
       NVL(CurrentTotalBalance,0),
       NVL(TotalFacilityAmount,0),
       NVL(RepaymentInterestComponent,0),
       NVL(RepaymentPrincipalComponent,0),
       Interest,
       PrincipalAmount,
       RollOverFeeAmount,
       NVL(ExternalRefID,''),
       FinalInstallmentDate INTO v_AccountNo, v_LoanId, v_ProductCode, v_InterestBalance, v_Penalty, v_PrincipalBalance, v_TotalBalance, v_TotalFacilityAmount, v_RepaymentInterestComponent, v_RepaymentPrincipalComponent, v_InterestAmount, v_PrincipalAmount, v_RollOverFee, v_ExternalRefID, v_MaturityDate
       FROM tb_Loan_Details WHERE CustAccount=v_ACCOUNTNUMBER
       AND LoanStatus IN ('LST-012','LST-011')
       AND LoanId = v_LoanNo AND rownum <= 1;
       --(SELECT LoanStatusID FROM tbLoanStatus WHERE LoanActive=1) 

   IF (v_AccountNo = '' OR v_TotalBalance = 0)
   THEN
     OPEN c_1 FOR SELECT '01' AS PAYSTATUS, 'Customer has no outstanding loan.' AS Narration, '0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  '0' AS PenaltyPaid, '' AS MaturityDate,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
     RETURN;
   END IF;

    --Get account balance so we know the amount we are working with, incase customer has penalties/rollover fees
    v_AccountBal :=FN_GETBALANCE('C',V_COB,v_ACCOUNTNUMBER);   

    ------account balance
			IF(v_AccountBal <= 0)	THEN
				OPEN c_1 FOR SELECT '01' AS PAYSTATUS, 'Insufficient balance' AS Narration, '0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  '0' AS PenaltyPaid, '' AS MaturityDate,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
				 RETURN;
			END IF;

			IF(v_AMOUNT > v_AccountBal)
			THEN
				v_AMOUNT := v_AccountBal;
			END IF;		

        -----GETERATE THE REF NUMBER FOR OUR TXNs
        v_TRXNO := FN_GET_REFERENCE(p_Channel);

		SELECT NVL(A.Interest_Account,''), NVL(A.Interest_Receivable_Account,''),
			 NVL(A.Accrued_Interest_Account,''), A.Interest_Rate, B.Product_Name INTO v_InterestGL, v_InterestReceivableGL, v_InterestAccruedGL, v_InterestRate, v_ProductName
			FROM tb_Loan_Products A INNER JOIN TB_PRODUCTS B ON A.Product_Code=B.Product_Code where A.Product_Code = p_LoanProductCode;


        --------------START BY REPAYING PENALTY-------------------------------------------------------
		  IF(v_Penalty > 0)  THEN
            v_TransCharge := v_Penalty;

            ----Take care of excise duty amount else post-mini may hit a snag of unsufficient funds. subtract it from the total repayment amount #
            select ITEMVALUE INTO v_ExciseDutyRate from tb_general_params where itemname='EXCISE_DUTY';
            v_ExciseDutyAmount := (v_TransCharge * v_ExciseDutyRate)/100 ; 

            IF(v_AMOUNT >= v_Penalty) THEN
				   v_PostAmount := v_Penalty;
				END IF;

				IF(v_AMOUNT < v_Penalty) THEN
				  v_PostAmount := v_AMOUNT;
				END IF;

				v_AdditionalText := v_ProductName||' PENALTY PAYMENT ' || v_ACCOUNTNUMBER || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;
				--Now let us repay the loan via post-mini
                V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := p_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANPENALTYPAY' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN
                    v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;

                    UPDATE tb_Loan_Details SET Penalty=Penalty-v_PostAmount WHERE LoanId=v_LoanId;

                    INSERT INTO TB_LOAN_RECOVERIES(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
                                                 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
                    VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANPENALTYPAY',v_WorkingDate,SYSTIMESTAMP,0,0,v_PostAmount,0,v_PostAmount,v_EXTERNALREF);

                    ----TRACK AMOUNTS
                       v_AMOUNT := v_AMOUNT - v_PostAmount - v_ExciseDutyAmount; ----Subtract the excise duty since its charged on the penalty amount
                       v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                       v_PenaltyPaid := v_PostAmount;  ---Used in the response msg
                       v_TransCharge := 0;
                       v_PostAmount := 0;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan penalty. Error while posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;


          END IF;
--------------END REPAYING PENALTY-------------------------------------------------------
--------------START ROLLOVER FEE---------------------------------------------------------
        IF(v_RollOverFee > 0)  THEN
            v_TransCharge := v_RollOverFee;  

            ----Take care of excise duty amount else post-mini may hit a snag of unsufficient funds. subtract it from the total repayment amount #
            ---GET EXCISE DUTY AMT
            select ITEMVALUE INTO v_ExciseDutyRate from tb_general_params where itemname='EXCISE_DUTY';
            v_ExciseDutyAmount := (v_TransCharge * v_ExciseDutyRate)/100 ; 

            IF(v_AMOUNT >= v_RollOverFee) THEN
               v_PostAmount := v_RollOverFee;
            END IF;

            IF(v_AMOUNT < v_RollOverFee) THEN
              v_PostAmount := v_AMOUNT;
            END IF;

            v_AdditionalText := v_ProductName||' ROLLOVER COMMISSION REPAYMENT ' || v_ACCOUNTNUMBER || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;             
            --CALL POST-MINI

            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := p_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANCOMMN' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN
                    v_ExiseDutyAmt := v_ExiseDutyAmt + V_EXCISE_DUTY_AMT;

                    UPDATE tb_Loan_Details SET RollOverFeeAmount = RollOverFeeAmount - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANCOMMN',v_WorkingDate,SYSTIMESTAMP,0,0,0,v_PostAmount,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS
					   v_AMOUNT := v_AMOUNT - v_PostAmount - v_ExciseDutyAmount;
					   v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
					   v_RollOverFeePaid := v_PostAmount; ---Used in the response msg
					   v_PostAmount := 0;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan rollover fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;

        END IF;
--------------END ROLLOVER FEE-------------------------------------------------------      

-----------------START REPAY INTEREST IF AMOUNT >0 AND INTEREST_BAL > 0 ------------------------------------------------------------------------------
            SELECT NVL(Repayment_Interest_Amount,0) - NVL(Interest_Paid,0), Repayment_Number INTO v_RepaymentInterestComponent, v_RepaymentNumber
                 FROM tb_Loan_Schedule WHERE NVL(Schedule_Paid,0)=0 AND 
                 NVL(Repayment_Interest_Amount,0)<>NVL(Interest_Paid,0) 
                 AND  Loan_Id = v_LoanId 
                 AND rownum <= 1
                 ORDER BY Repayment_Number ASC;

    IF(v_InterestBalance > 0 AND v_AMOUNT > 0)	  THEN			
            IF(v_AMOUNT > v_RepaymentInterestComponent  ) THEN
                v_PostAmount := v_RepaymentInterestComponent;
            END IF;

            IF(v_AMOUNT <= v_RepaymentInterestComponent) THEN
                v_PostAmount := v_AMOUNT;
            END IF;

            v_PrincipalCleared := 0;
            v_AdditionalText := v_ProductName||' INTEREST REPAYMENT ' || v_AccountNo || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;

            --CALL POST-MINI            
            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := p_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANINTEREST' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := '' ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN

                    UPDATE tb_Loan_Schedule SET Interest_Paid = NVL(Interest_Paid,0) + v_PostAmount,
							Total_Paid = NVL(Total_Paid,0) + v_PostAmount
							WHERE Loan_Id = v_LoanId; --AND RepaymentNumber = @RepaymentNumber

                    UPDATE tb_Loan_Details SET CurrentTotalBalance=CurrentTotalBalance-v_PostAmount, 
                    CurrentInterestBalance=CurrentInterestBalance - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANINTEREST',v_WorkingDate,SYSTIMESTAMP,v_PostAmount,0,0,0,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS                       
                       v_InterestCleared := v_PostAmount;
                       v_InterestPaid := v_PostAmount; ---Used in the response msg
                       v_AMOUNT := v_AMOUNT - v_PostAmount;
                       v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                       v_TotalBalance := v_TotalBalance - v_InterestCleared;
                       v_PostAmount := 0;

                   INSERT INTO tb_Loan_Schedule_Repayment(Loan_Id,Repayment_Number,Interest_Amount_Paid,Principal_Amount_Paid,Date_Paid, Total_Amount_Paid,TrxRef_No)
                        VALUES(v_LoanId, v_RepaymentNumber,v_InterestCleared,v_PrincipalCleared,v_WorkingDate,  v_PrincipalCleared, v_TRXNO);

                    UPDATE tb_Loan_Schedule SET schedule_paid = 1 WHERE Loan_Id=v_LoanId AND NVL(Repayment_Principal_Amount,0) = NVL(Principal_Paid,0)
                    AND NVL(Repayment_Interest_Amount,0) = NVL(Interest_Paid,0) AND Repayment_Number = v_RepaymentNumber;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan interest fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;


    END IF;

-----------------END REPAY INTEREST-----------------------------------------------------------------------------------------------------------------


-----------------START REPAY PRINCIPAL IF AMOUNT >0  AND PRINCIPAL_BAL > 0 ------------------------------------------------------------------------------
        SELECT NVL(Repayment_Principal_Amount,0) - NVL(Principal_Paid,0), Repayment_Number INTO v_RepaymentPrincipalComponent, v_RepaymentNumber
					 FROM tb_Loan_Schedule WHERE NVL(Schedule_Paid,0)=0 AND 
					 NVL(Repayment_Principal_Amount,0)<>NVL(Principal_Paid,0) 
                     AND  Loan_Id = v_LoanId 
                     AND rownum <= 1
                     ORDER BY Repayment_Number ASC;

    IF(v_PrincipalBalance > 0 AND v_AMOUNT > 0)	  THEN

            IF(v_AMOUNT > v_RepaymentPrincipalComponent  ) THEN
            v_PostAmount := v_RepaymentPrincipalComponent;
            END IF;

            IF(v_AMOUNT <= v_RepaymentPrincipalComponent) THEN
            v_PostAmount := v_AMOUNT;
            END IF;

            v_PrincipalCleared := 0;
            v_AdditionalText := v_ProductName||' PRINCIPAL REPAYMENT ' || v_AccountNo || ' Loan Id :: '||v_LoanId|| ' Amount :: '||v_PostAmount;
            --CALL POST-MINI            
            V_TERMINALID := ''; 
                V_FIELD2 := v_MobileNo;
                V_FIELD3 := '680000';	
                V_FIELD4 :=  v_PostAmount;	
                V_FIELD7 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD11 := to_char(SYSTIMESTAMP, 'DDMMYYYYHH24MISS') ;	
                V_FIELD24 := 'MM' ;	
                V_FIELD32 := p_Channel ;
                V_FIELD35 := '' ;	
                V_FIELD37 := v_TRXNO;	
                V_FIELD65 := v_ProductCode ;	---pass product code, helps to get extra configs in post-mini	
                V_FIELD68 := v_AdditionalText ;	
                V_FIELD90 := '' ;	
                V_FIELD100 := 'LOANPRINCPAY' ;	V_FIELD101 := '' ;	
                V_FIELD102 := v_ACCOUNTNUMBER ;
                V_FIELD103 := v_AccountNo ;	V_COMMISSION := 0 ;	
                V_CUSTCURRENCY := v_Currency ;	
                V_TERMINALID := '' ;	V_USERID  := v_USERID ;	V_TRNCODE  := '' ;	
                V_EXTERNALREFNO := v_EXTERNALREF || ' :: '||v_LoanId ;

                BEGIN
                        ---call post-mini
                    A_SP_POST_MINI_TRANSACTIONS(
                        V_MSGTYPE,	V_FIELD2,	V_FIELD3,	V_FIELD4,	V_FIELD7,	V_FIELD11,	V_FIELD24,	V_FIELD32,
                        V_FIELD35,	V_FIELD37,	V_FIELD65,	V_FIELD68,	V_FIELD90,	V_FIELD100,	V_FIELD101,	V_FIELD102,
                        V_FIELD103,	V_COMMISSION,	V_CUSTCURRENCY,	V_TERMINALID,	V_USERID ,	V_TRNCODE ,	V_EXTERNALREFNO, CV_1 
                    );

                LOOP
                  FETCH CV_1 INTO    V_DATAX ;   
                    EXIT
                WHEN CV_1%NOTFOUND;
                ----('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX
                ---V_available_actual , V_CHARGES_AMT, V_EXCISE_DUTY_AMT,  V_Resp_Narrartionon
                    ---V_RESPONSE_CODE := substr(V_DATAX,0,2) ;
                    select regexp_substr(V_DATAX, '[^|]+', 1, 1) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 2) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 3) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 4) ,
                       regexp_substr(V_DATAX, '[^|]+', 1, 5) INTO V_RESPONSE_CODE, V_available_actual, V_CHARGES_AMT, V_EXCISE_DUTY_AMT, V_Resp_Narrartionon
                    FROM DUAL;

                  IF V_RESPONSE_CODE IN ('00') THEN

                    UPDATE tb_Loan_Schedule SET Principal_Paid = NVL(Principal_Paid,0) + v_PostAmount,
                        Total_Paid = NVL(Total_Paid,0) + v_PostAmount
                        WHERE Loan_Id = v_LoanId; --AND RepaymentNumber = @RepaymentNumber

                    UPDATE tb_Loan_Details SET CurrentTotalBalance=CurrentTotalBalance-v_PostAmount, 
                    CurrentPrincipalBalance=CurrentPrincipalBalance - v_PostAmount, PrevRepaymentDate = SYSTIMESTAMP WHERE LoanId=v_LoanId;

					INSERT INTO tb_Loan_Recoveries(LoanId,ReferenceNumber,AccountNumber,TransactionCode,TransactionDate,
												 TransactionDateTime,InterestAmount,PrincipalAmount,Penalty,ROLLOVERFEE,TotalAmount,ExternalRef)
					VALUES(v_LoanId,v_TRXNO,v_AccountNo,'LOANPRINCPAY',v_WorkingDate,SYSTIMESTAMP,0,v_PostAmount,0,0,v_PostAmount,v_EXTERNALREF);

                     ----TRACK AMOUNTS                       
                    v_PrincipalCleared := v_PostAmount;
                    v_PrincipalPaid := v_PostAmount; ---Used in the response msg
                    v_AMOUNT := v_AMOUNT -v_PostAmount;
                    v_TotalLoanPaid := v_TotalLoanPaid + v_PostAmount; ----Track amount paid 
                    v_TotalBalance := v_TotalBalance - v_PrincipalCleared;
                    v_PostAmount := 0;

                    INSERT INTO tb_Loan_Schedule_Repayment(Loan_Id,Repayment_Number,Interest_Amount_Paid,Principal_Amount_Paid,Date_Paid, Total_Amount_Paid,TrxRef_No)
                    VALUES(v_LoanId, v_RepaymentNumber,v_InterestCleared,v_PrincipalCleared,v_WorkingDate,  v_PrincipalCleared, v_TRXNO);

                    UPDATE tb_Loan_Schedule SET schedule_paid = 1 WHERE Loan_Id=v_LoanId AND NVL(Repayment_Principal_Amount,0) = NVL(Principal_Paid,0)
                    AND NVL(Repayment_Interest_Amount,0) = NVL(Interest_Paid,0) AND Repayment_Number = v_RepaymentNumber;

                ELSE
                 ---
                     OPEN C_1 FOR  SELECT '01' AS PAYSTATUS, V_Resp_Narrartionon AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                        V_CHARGES_AMT AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;
                    RETURN;
                END IF;     

                END LOOP;
                CLOSE CV_1;

        EXCEPTION
            WHEN OTHERS THEN
            RAISE;
                OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan interest fee. Error from posting amounts' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
                    '0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            RETURN;
            END;



    END IF;

-----------------END REPAY PRINCIPAL --------------------------------------------------------------------------------------------------------------------

    SELECT NVL(CurrentInterestBalance,0),
       NVL(CurrentPrincipalBalance,0), NVL(CurrentTotalBalance,0),
       NVL(TotalFacilityAmount,0) INTO v_InterestBalance, v_PrincipalBalance, v_TotalBalance, v_TotalFacilityAmount   FROM tb_Loan_Details WHERE LoanId=v_LoanId AND rownum <= 1;

        -----If the customer has cleared the loan, lets close it
        IF(v_TotalBalance <= 0)
          THEN
               UPDATE tb_Loan_Details SET LoanStatus = 'LST-013', PrevRepaymentDate = SYSTIMESTAMP, FullRepaymentDate = SYSTIMESTAMP  WHERE LoanId = v_LoanId;
               UPDATE tb_Account SET Blocked_Amount=0 WHERE Account_No = v_ACCOUNTNUMBER;
          END IF;


    FETCH CUR_REPAY_TRX  INTO  V_CUR_LOAN_DATA;
 END LOOP;
 -- FREE RESOURCES USED BY THE CURSOR
CLOSE CUR_REPAY_TRX;
END;

EXCEPTION
WHEN OTHERS THEN
RAISE;
	OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Could not repay loan' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
		'0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ;
ROLLBACK TO SAVEPOINT V_SAFEPOINT;
RETURN;
END;					


	v_Narration := 'LOAN SUCCESSFULLY PAID';
	OPEN c_1 FOR SELECT '00' AS PAYSTATUS, v_Narration AS Narration, v_TotalBalance  AS LoanBalance, v_PrincipalPaid AS PrincipalPaid,  
		v_InterestPaid AS InterestPaid,  v_PenaltyPaid AS PenaltyPaid, v_RollOverFeePaid AS RollOverFeePaid, v_MaturityDate AS MaturityDate, v_TotalLoanPaid AS TotalLoanPaid, v_ExiseDutyAmt AS ExiseDutyPaid FROM dual ;

COMMIT ;


EXCEPTION
  WHEN OTHERS THEN
  RAISE;
	OPEN c_1 FOR SELECT '02' AS PAYSTATUS, 'Loan repayment failed' AS Narration,'0' AS LoanBalance, '0' AS PrincipalPaid,  '0' AS InterestPaid,  
			'0' AS PenaltyPaid, '' AS MaturityDate ,  v_TotalLoanPaid AS TotalLoanPaid, '0' AS ExiseDutyPaid FROM dual ; 
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOAN_SCORING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOAN_SCORING" (
	p_accountNumber IN nvarchar2
)
AS

 v_Narration NVARCHAR2(150);
 v_TrxNarration NVARCHAR2(150);
 v_Tr_Narration NVARCHAR2(150);
 v_Status NUMBER(1);
 v_dateDifference number(10);
 v_exists number(10);
 v_CRB_Score_exists number(10);
 V_COUNT INT := 0;
BEGIN

SAVEPOINT V_SAFEPOINT;

--- we only score if the user doesnt exist in the loansScoring table or if the users data has expired ( is over 30 days old )
----Reset count
  V_COUNT := 0;
SELECT COUNT(1)
    INTO V_COUNT
      FROM DUAL
      WHERE EXISTS( select * from tb_Loan_Scoring where Account_Number = p_accountNumber AND ROWNUM <=1 );
        IF(V_COUNT = 0) THEN
          v_exists := 0;
        END IF;

--- Let us check if the CRB Score for the existsing customer is updated, if not let us score them a fresh
--- Sometime the CRB scoring may fail
----Reset count
  V_COUNT := 0;
SELECT COUNT(1)
    INTO V_COUNT
      FROM DUAL
      WHERE EXISTS( select * from tb_Loan_Scoring where Account_Number = p_accountNumber AND  NVL(CRB_Grade,'') = '' AND ROWNUM <=1 );
        IF(V_COUNT = 0) THEN
          v_CRB_Score_exists := 0;
        END IF;


    SELECT ROUND(sysdate -  TO_DATE(DateAdded, 'YYYY-MM-DD'),0) INTO v_dateDifference FROM tb_Loan_Scoring WHERE Account_Number = p_accountNumber;

    IF ( v_dateDifference > 30  OR v_exists = 0  OR v_CRB_Score_exists = 0) THEN

            ----WE DONT NEED PREVIOUS SCORES
			DELETE FROM tb_Loan_Scoring WHERE Account_Number = p_accountNumber;

			INSERT INTO tb_Loan_Scoring (Account_Number,ACCOUNT_AGE,DR_Amount,CR_Amount,DR_Count,CR_Count,Avg_DR_Amount,Avg_CR_Amount,InternalLoanCount,ExternalLoanCount,Avg_DR_Count, Avg_CR_Count,Account_BalanceM1 ,Account_BalanceM2, Account_BalanceM3,Avg_Account_Balance,All_Txn_Count,Avg_Txn_Count,Avg_LoanAmount,CRB_Grade)
			SELECT DISTINCT Account_No,ROUND( MONTHS_BETWEEN (SYSTIMESTAMP , Opening_Date ), 0),0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'NULL' from tb_Account where Account_Class in('254') and Dormant = 'N' and Account_No = p_accountNumber;


			------------ALL CUSTOMER TRXS--------------------------
			MERGE INTO tb_Loan_Scoring t1
				USING
				(
					-- For more complicated queries you can use WITH clause here
					WITH ALLTrxCTE AS
					(
						  SELECT DISTINCT A.Account_No, SUM(A.Amount) DR_Amount,COUNT(A.Id) ALL_Count,NVL( SUM(A.Amount), 0) Avg_DR FROM VW_TRANSACTIONS A INNER JOIN
							tb_Loan_Scoring B ON A.Account_No=B.Account_Number		    
							WHERE A.Value_Date >= add_months(TRUNC(SYSDATE) + 1, -3)---GET ONLY DATA FOR LAST 3 MONTHS ONLY
							AND A.Account_No =  p_accountNumber
							GROUP BY A.Account_No
					)
					SELECT * FROM ALLTrxCTE

				)t2
				ON(t1.Account_Number = t2.Account_No )
				WHEN MATCHED THEN UPDATE 
				SET	 t1.All_Txn_Count = t2.ALL_Count, t1.Avg_Txn_Count = t2.ALL_Count/3;
			-----------------------------------------------------

			------------CUSTOMER DR TRXS--------------------------	
			MERGE INTO tb_Loan_Scoring t1
				USING
				(
					-- For more complicated queries you can use WITH clause here
					WITH DrTrxCTE AS
					(
						  SELECT DISTINCT A.Account_No, SUM(A.Amount) DRAmount,COUNT(A.Id) DR_Count,NVL( SUM(A.Amount), 0) Avg_DR FROM VW_TRANSACTIONS A INNER JOIN
							tb_Loan_Scoring B ON A.Account_No=B.Account_Number		    
							WHERE A.DRCR='D' and A.Value_Date >= add_months(TRUNC(SYSDATE) + 1, -3)---GET ONLY DATA FOR LAST 3 MONTHS ONLY
							AND A.Account_No =  p_accountNumber
							GROUP BY A.Account_No
					)
					SELECT * FROM DrTrxCTE

				)t2
				ON(t1.Account_Number = t2.Account_No )
				WHEN MATCHED THEN UPDATE 
				SET	 t1.DR_Amount = t2.DRAmount,t1.DR_Count = t2.DR_Count, t1.Avg_DR_Amount = t2.Avg_DR/3, t1.Avg_DR_Count = t2.DR_Count/3;

			-----------------------------------------------------

			------------CUSTOMER CR TRXS---------------
			MERGE INTO tb_Loan_Scoring t1
				USING
				(
					-- For more complicated queries you can use WITH clause here
					WITH CrTrxCTE AS
					(
						  SELECT DISTINCT A.Account_No, SUM(A.Amount) CRAmount,COUNT(A.Id) CR_Count,NVL( SUM(A.Amount), 0) Avg_CR FROM VW_TRANSACTIONS A INNER JOIN
							tb_Loan_Scoring B ON A.Account_No=B.Account_Number		    
							WHERE A.DRCR='C' and A.Value_Date >= add_months(TRUNC(SYSDATE) + 1, -3)---GET ONLY DATA FOR LAST 3 MONTHS ONLY
							AND A.Account_No =  p_accountNumber
							GROUP BY A.Account_No
					)
					SELECT * FROM CrTrxCTE

				)t2
				ON(t1.Account_Number = t2.Account_No )
				WHEN MATCHED THEN UPDATE 
				SET	 t1.CR_Amount=t2.CRAmount,t1.CR_Count=t2.CR_Count, t1.Avg_CR_Amount=t2.Avg_CR/3, t1.Avg_CR_Count=t2.CR_Count/3;
			-----------------------------------------------------


			-------CUSTOMER INTERNAL LOANS-----			
			MERGE INTO tb_Loan_Scoring t1
				USING
				(
					-- For more complicated queries you can use WITH clause here
					WITH LoanCountCTE AS
					(
						  SELECT COUNT(A.Id) Ln_Count,CustAccount,SUM(A.PrincipalAmount) Avg_LoanAmount FROM tb_Loan_Details A INNER JOIN
							tb_Loan_Scoring B ON A.CustAccount=B.Account_Number		    
							WHERE A.LoanStatus IN('LST-011','LST-012','LST-013','LST-014') GROUP BY CustAccount
					)
					SELECT * FROM LoanCountCTE

				)t2
				ON(t1.Account_Number = t2.CustAccount )
				WHEN MATCHED THEN UPDATE 
				SET	 t1.InternalLoanCount=t2.Ln_Count, t1.Avg_LoanAmount = (t2.Avg_LoanAmount / t2.Ln_Count);
			-----------------------------------------

			----------------------UPDATE LAST 3 MONTH BALANCES-----------------

			A_get_3months_Account_balance(p_accountNumber);

			---------------------------------------------------------------------- 
			COMMIT ; 

    END IF;


    END A_SP_Loan_Scoring;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_LOG_DECLINED_LOAN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_LOG_DECLINED_LOAN" (
	p_MobileNumber IN NVARCHAR2,
	p_CustomerAccount IN  NVARCHAR2,
	p_CBS_AccountNumber IN NVARCHAR2,
	p_ProductCode IN NVARCHAR2,
	p_AmountBorrowed IN NUMBER DEFAULT 0,
	p_DeclineReason IN NVARCHAR2,
	p_Channel IN NVARCHAR2, 
	c_1 IN OUT SYS_REFCURSOR
)
AS

v_Reference NVARCHAR2(50);
v_Narration NVARCHAR2(500);
BEGIN

SAVEPOINT V_SAFEPOINT;

		v_Reference := FN_Get_Series('LD',1);

		-- Insert statements for procedure here
		INSERT INTO tb_Loan_Declined (Reference,MobileNumber,CustomerAccount,CBS_AccountNumber,ProductCode,AmountBorrowed,DeclineReason,Channel,CreatedOn)
		 VALUES (v_Reference,p_MobileNumber,p_CustomerAccount, p_CBS_AccountNumber,p_ProductCode,p_AmountBorrowed,p_DeclineReason,p_Channel,SYSTIMESTAMP);

		v_Narration := 'Successfully Logged' ;

		BEGIN
		OPEN c_1 FOR SELECT v_Narration AS Narration,'00' AS ResponseCode,  v_Reference AS Reference FROM dual;
		END

		COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    RAISE;
		OPEN c_1 FOR SELECT 'Could not insert declined loan' AS Narration, '01' AS ResponseCode, v_Reference AS Reference FROM dual;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_PIN_CHANGE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_PIN_CHANGE" (
    iv_PHONE_NUMBER NVARCHAR2,
    iv_PIN NVARCHAR2,
    iv_OldPIN NVARCHAR2,
    c_1 OUT SYS_REFCURSOR )
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  V_COUNT NUMBER(1) := 0;
   V_PIN_TRACKER NUMBER(2) :=0;
BEGIN
--INSERT INTO TB_SP_ERROR_LOG (ERROR_MESSAGE,CUSTOM_ERROR_MESSAGE) VALUES (iv_PHONE_NUMBER,iv_PIN);
  ---CHECK IF CUSTOMER EXISTS
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE CUSTOMER_NO = iv_PHONE_NUMBER AND 
    PIN           = iv_OldPIN AND ROWNUM=1    
    );
  IF(V_COUNT > 0) THEN
  
    IF iv_OldPIN =  iv_PIN THEN
       OPEN c_1 FOR SELECT '01' as Resp_Code,'You current pin and new pin are the same. Please try again' as Resp_Desc FROM DUAL;
       RETURN;
    END IF;
   -- check for pin history by the customer 
    V_PIN_TRACKER  := FN_KEY_PROCESSOR (iv_PHONE_NUMBER , iv_PIN);
    
    dbms_output.put_line('v pin tracker | '||V_PIN_TRACKER);
    
    IF  V_PIN_TRACKER = -1 THEN
        OPEN c_1 FOR SELECT '01' as Resp_Code,'pin history validation error' as Resp_Desc FROM DUAL;
        RETURN;
    ELSIF V_PIN_TRACKER = 1 THEN
        OPEN c_1 FOR SELECT '01' as Resp_Code,'Your PIN cannot be the same as previous PIN`s which you created.
        Please try again.' as Resp_Desc FROM DUAL;
        RETURN;
    END IF;
    
    
    ----CUSTOMER EXISTS, LETS UPDATE THEIR PIN
    UPDATE TB_CUSTOMER_VALIDATION SET PIN = iv_PIN, FIRST_LOGIN = 0  
    WHERE ID = (SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE PHONE_NUMBER =  iv_PHONE_NUMBER AND ROWNUM = 1);
 --   AND ROWNUM        =1;
    ELSE
    OPEN c_1 FOR SELECT '01' as Resp_Code,'Old PIN is Incorrect' as Resp_Desc FROM DUAL;
     RETURN; 
  END IF;
  OPEN c_1 FOR SELECT '00' as Resp_Code,'Success' as Resp_Desc FROM DUAL;
     RETURN;
EXCEPTION
WHEN OTHERS THEN  
  ROLLBACK;
        raise;
      OPEN c_1 FOR SELECT '57' as Resp_Code,'Error occured PIN Change Failed' as Resp_Desc FROM DUAL;
     RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_POST_AFTER_EOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_POST_AFTER_EOD" AS 
BEGIN
  NULL;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_POST_MINI_TRANSACTIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_POST_MINI_TRANSACTIONS" (
    IV_MSGTYPE       IN NVARCHAR2 ,
    IV_FIELD2        IN NVARCHAR2 ,
    IV_FIELD3        IN NVARCHAR2,
    IV_FIELD4        IN NUMBER DEFAULT 0,--AMOUNT
    IV_FIELD7        IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD11       IN NVARCHAR2 ,--STAN
    IV_FIELD24       IN NVARCHAR2,
    IV_FIELD32       IN NVARCHAR2 ,
    IV_FIELD35       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD37       IN NVARCHAR2,
    IV_FIELD65       IN NVARCHAR2 DEFAULT NULL ,
    IV_FIELD68       IN NVARCHAR2,
    IV_FIELD90       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD100      IN NVARCHAR2,---SERVICE TN/TA
    IV_FIELD101      IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD102      IN NVARCHAR2,
    IV_FIELD103      IN NVARCHAR2 DEFAULT '' ,
    IV_COMMISSION    IN NUMBER DEFAULT 0,
    IV_CUSTCURRENCY  IN NVARCHAR2 DEFAULT 'UGX' ,
    IV_TERMINALID    IN NVARCHAR2 DEFAULT '' ,
    IV_USERID        IN NVARCHAR2 DEFAULT NULL ,
    IV_TRNCODE       IN NVARCHAR2 DEFAULT NULL ,
    IV_EXTERNALREFNO IN NVARCHAR2 DEFAULT NULL, --E.G MPESA OR CBS
    C_1              IN OUT SYS_REFCURSOR)
AS
  V_WORKINGDATE DATE;
  V_FINANCIALYR NVARCHAR2(6);
  V_FINANCIALPRD NVARCHAR2(3);
  V_TRXREFNO NVARCHAR2(200) :='';
  V_PARENTREF NVARCHAR2(70):=IV_FIELD90;
  V_COB    NUMBER             :=0;
  V_AMOUNT NUMERIC(18,5)      :=IV_FIELD4;
  V_REVERSALRETURNMESSAGE NVARCHAR2(500) ;
  CV_1 SYS_REFCURSOR;
  V_LIMIT_RESPONSE_CODE NVARCHAR2(10);
  V_LIMIT_RESPONSE_DESC NVARCHAR2(100);
  V_G_C NVARCHAR2(2);
  V_DR_CR NVARCHAR2(2);
  V_VALIDATION NVARCHAR2(10);
  V_GCACCOUNTNO NVARCHAR2(20);
  V_serialno NUMBER (10,0)      :=0;-- :=TBTRANSACTIONS_ID.nextval;
  V_PAYMENT_NUMBER NVARCHAR2(10):='';
  V_FIELD41 NVARCHAR2(50)       :='';
  V_FIELD42 NVARCHAR2(50)       :='';
  V_LEAFGL_DR NVARCHAR2(50)     :='';
  V_LEAFGL_CR NVARCHAR2(50)     :='';
  V_LEAFGL_LOYALITY_CR NVARCHAR2(50)     :='';
  V_TRXCODE NVARCHAR2(50)       :='7777'; --Differentiate Charges from Actual Transactions
  V_clearbal          NUMBER (18,5)      :=0;
  V_AVAILABLE_BALANCE NUMBER (18,5)      :=0;
  V_CHARGES_AMT       NUMBER (18,5)      :=0;
  V_COMMISSION_AMT       NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_RATE  NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_AMT   NUMBER (18,5)      :=0;
  V_balanceaccount    NVARCHAR2(100)      :='';
  V_available_actual NVARCHAR2(100)      :='';
  V_MINI_DATA VARCHAR2(4000)             :='';
  V_FIELD103 NVARCHAR2(50)       :=IV_FIELD103;

  V_CHECK_COMMISSION_ACCOUNT NUMBER := 0;
  V_AGENT_COMMISSION_ACCOUNT NVARCHAR2(50) := '';

  --- gemification

    V_LOYALITY_POINTS_ACCOUNT NVARCHAR2(50) :='';
    V_GEMIFICATION_RESPONSE NVARCHAR2(50) :='';
    V_TOTAL_LOYALITY_POINTS NUMBER(18) :='';

  -- limit check
  V_LIMIT_CHECK NUMBER(5) :=0;

  -- BANK and eclectics accounts
  V_GET_ECLE_COMM_GL NVARCHAR2(50) :='';
  V_GET_BANK_COMM_GL NVARCHAR2(50) :='';
  V_COMM_SPLIT NUMBER(18) :=0;
  V_ECLE_COMM NUMBER(18) :=0;
  V_BANK_COMM NUMBER(18) :=0;
  V_GUARD_REPONSE NVARCHAR2(50) :=0;
  V_REF_CHECKER NUMBER :=0;
  --
BEGIN
--Take Note-- To make PostMini less bulky, Modularize, use Functions to do most things.
  SAVEPOINT V_SAFEPOINT;
  BEGIN
    SELECT WORKINGDATE,
      FINANCIALYEAR ,
      FINANCIALPERIOD,
      COB
    INTO V_WORKINGDATE,
      V_FINANCIALYR,
      V_FINANCIALPRD,
      V_COB
    FROM TB_DATE_SETTINGS
    WHERE ROWNUM = 1;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR FETCHING WORKING DATE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
  BEGIN -- check if the end of day is currently running 
  
  IF V_COB = 1 THEN 
      OPEN C_1 FOR SELECT ('58' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'END OF DAY PROCESS LOCK')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END IF;
    
  END;
  
  
--  BEGIN
--    IF IV_FIELD100 = 'FT_BULK_PAYMENT' THEN
--      V_FIELD103:= FN_AUTO_REG_BULK_PAY(IV_FIELD35,IV_FIELD65);
--    END IF;
--    
--     EXCEPTION
--  WHEN OTHERS THEN
--  
--    RAISE;
--    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN AUTO-REGISTRATION FOR BULK PAYMENT')DATAX FROM DUAL;
--    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
--    RETURN;
--  END;
  BEGIN
    V_VALIDATION :=FN_VALIDATE_CUSTOMER(IV_FIELD2,IV_FIELD24,IV_FIELD102,V_FIELD103);
       IF V_VALIDATION = 'NOTOK' THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT-PHONENUMBER VALIDATION')DATAX FROM DUAL;
            RETURN;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING CUSTOMER PHONE_NUMBER')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
  
  -- check transaction ref processing 
  
  BEGIN
  
   V_REF_CHECKER := FN_CHECK_TRANSACTION_REF (IV_FIELD37 , IV_MSGTYPE);
   IF  V_REF_CHECKER > 0 THEN
       OPEN C_1 FOR SELECT ('70' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Duplicate transaction detected.')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF ;
  END ;


  --Get Leaf GL
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      
      dbms_output.put_line('field102 -- '||IV_FIELD102);
      SELECT LEAF_GL
      INTO V_LEAFGL_DR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(IV_FIELD102,1,3)
      AND ROWNUM         =1;
      
      dbms_output.put_line('leaf GL DR-- '||V_LEAFGL_DR);

      IF SUBSTR(IV_FIELD102,1,3) = '256' OR IV_FIELD24 = 'CM' THEN  -- currently for customers alone
         SELECT LEAF_GL
         INTO V_LEAFGL_LOYALITY_CR
         FROM TB_PRODUCTS
        WHERE PRODUCT_CODE = '207'
        AND ROWNUM         =1;
        
      dbms_output.put_line('leaf loyality DR-- '||V_LEAFGL_LOYALITY_CR);
      END IF;
    END IF;
    IF FN_IS_WALLET(V_FIELD103) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      SELECT LEAF_GL
      INTO V_LEAFGL_CR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(V_FIELD103,1,3)
      AND ROWNUM         =1;
    END IF;
    
    -- loyality points for all the core 2 wallet transactions
    IF IV_FIELD24 = 'CM' THEN
         SELECT LEAF_GL
         INTO V_LEAFGL_LOYALITY_CR
         FROM TB_PRODUCTS
        WHERE PRODUCT_CODE = '207'
        AND ROWNUM         =1;
        
      dbms_output.put_line('leaf loyality DR-- '||V_LEAFGL_LOYALITY_CR);
    END IF;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GETTING LEAF GL')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --1) VALIDATE DR/CR ACCOUNTS/TXN
  BEGIN
    IF IV_FIELD102 = V_FIELD103 THEN
      OPEN C_1 FOR SELECT ('15' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR DEBIT TO SAME CREDIT ACCOUNT')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR COMPARING DEBIT AND CREDIT ACCOUNTS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
    IF FN_VALIDATE_TXN_TYPE(IV_FIELD3,IV_FIELD100,IV_FIELD4,IV_FIELD24) < 1 THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INVALID FIELD3 OR FIELD100 OR TRX_MATRIX CONFIG NOT DONE')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING FIELD3 AND FIELD100')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
--  -- validate guarded transactions 
--  BEGIN
--      V_GUARD_REPONSE := FN_CHECK_TOKEN(IV_FIELD100, IV_EXTERNALREFNO);
--      
--      IF SUBSTR(v_token_check_response,1,Instr(v_token_check_response,'|',1,1)-1) <> '00' THEN
--        OPEN C_1 FOR V_GUARD_REPONSE AS DATAX FROM DUAL;
--        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
--        RETURN;
--  
--  END;
  
  --2) GET TRX REFERENCE
  BEGIN
    V_TRXREFNO  := FN_GET_REFERENCE(IV_FIELD32);
    V_PARENTREF := IV_FIELD11 ||V_TRXREFNO||IV_FIELD37; --FIELD90 AKA PARENTREF
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GENERATING TRANSACTION REFERENCE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --3) CHECK IF ITS A REVERSAL REQUEST AND PROCESS
  IF IV_MSGTYPE = '0420' THEN
    BEGIN
      V_REVERSALRETURNMESSAGE:= '00';
      V_REVERSALRETURNMESSAGE := FN_MINI_REV(IV_FIELD32, IV_FIELD37, IV_FIELD90);
      NULL;
      OPEN C_1 FOR SELECT (V_REVERSALRETURNMESSAGE)DATAX FROM DUAL;
      RETURN;
    EXCEPTION
    WHEN OTHERS THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR REVERSING TRANSACTION')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END;
  END IF;
  --4) CHECK TRANS LIMITS
  BEGIN
    A_SP_CHECK_TXN_LIMIT_GLOBAL(IV_FIELD2,IV_FIELD4, IV_FIELD24, IV_FIELD32,IV_FIELD100, trim(IV_FIELD102), IV_CUSTCURRENCY,CV_1);
    LOOP
      FETCH CV_1 INTO V_LIMIT_RESPONSE_CODE,V_LIMIT_RESPONSE_DESC;
      EXIT
    WHEN CV_1%NOTFOUND;
      IF V_LIMIT_RESPONSE_CODE NOT IN ('00') THEN
        OPEN C_1 FOR SELECT ( V_LIMIT_RESPONSE_CODE ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || V_LIMIT_RESPONSE_DESC)DATAX FROM DUAL;
        RETURN;
      END IF;
      --DBMS_OUTPUT.PUT_LINE(V_LIMIT_RESPONSE_CODE || ' ' || V_LIMIT_RESPONSE_DESC);
    END LOOP;
    CLOSE CV_1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING LIMITS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --4) Check Balances
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      V_AVAILABLE_BALANCE       := FN_GETBALANCE_AVAILABLE('C', V_COB, trim(IV_FIELD102));
     DBMS_OUTPUT.put_line(V_AVAILABLE_BALANCE);
      V_CHARGES_AMT         := FN_GET_CHARGES(iv_Field3,iv_Field4,iv_Field32,iv_Field100,iv_Field102,V_FIELD103);
      DBMS_OUTPUT.put_line(V_CHARGES_AMT);
      IF V_AVAILABLE_BALANCE < V_AMOUNT + V_CHARGES_AMT AND FN_IS_WALLET(IV_FIELD102) > 0 THEN
        OPEN C_1 FOR SELECT ( '51' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INSUFFICIENT FUNDS')DATAX FROM DUAL;
        RETURN;
      END IF;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING CUSTOMER BALANCES')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE('posting transaction ...');
  --5) POST THE TRANSACTION
  BEGIN
    DECLARE
      CURSOR CUR_TRXMATRIX
      IS
        SELECT ACCOUNTNO,
          DRCR ,
          FVR ,
          MF ,
          G_C
        FROM TB_TRANSACTION_MATRIX
        WHERE
          --CHANNEL = IV_FIELD32 AND
          PROCODE    = IV_FIELD3
        AND FIELD100 = IV_FIELD100
        AND FIELD24  =IV_FIELD24
        AND V_AMOUNT > 0
        ORDER BY DRCR DESC;
      V_TRXMATRIXDATA CUR_TRXMATRIX%ROWTYPE;
    BEGIN
      -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
      OPEN CUR_TRXMATRIX;
      -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
      FETCH CUR_TRXMATRIX
      INTO V_TRXMATRIXDATA;
      -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
      WHILE CUR_TRXMATRIX%FOUND
      LOOP
        V_DR_CR := V_TRXMATRIXDATA.DRCR;
        V_G_C   := V_TRXMATRIXDATA.G_C;
        --  V_GCACCOUNTNO          := V_TRXMATRIXDATA.ACCOUNTNO ;x
        V_gcaccountno          :=FN_GET_GL_ACCOUNT(IV_FIELD100,IV_FIELD3);
        
        dbms_output.put_line('CURRENCT DRCR | '||V_TRXMATRIXDATA.DRCR);
        dbms_output.put_line('CURRENCT G_C | '||V_TRXMATRIXDATA.G_C);
        IF LENGTH(V_GCACCOUNTNO)<1 AND V_TRXMATRIXDATA.G_C = 'G' THEN--VALIDATE GL IS CONFIGURED
          BEGIN

            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'GL ACCOUNT NOT FOUND(GL MAPPING ERROR)')DATAX FROM DUAL;
            RETURN;
          EXCEPTION
          WHEN OTHERS THEN
          raise;
          DBMS_OUTPUT.PUT_LINE('ERROR ON GL ACCOUNT...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR READING GL ACCOUNT')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        IF V_TRXMATRIXDATA.G_C   = 'C' THEN
          IF V_TRXMATRIXDATA.DRCR= 'D' THEN
            V_VALIDATION        :=FN_VALIDATE_ACCOUNT(IV_FIELD102,'D');
            V_GCACCOUNTNO       :=(IV_FIELD102);
          ELSE
            V_VALIDATION  :=FN_VALIDATE_ACCOUNT(V_FIELD103,'C');
            V_GCACCOUNTNO :=(V_FIELD103);
          END IF;
          IF V_VALIDATION = 'NOTOK' THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT VALIDATION')DATAX FROM DUAL;
            RETURN;
          END IF;
        END IF;
        --5A) UPDATE BALANCES
        IF V_COB = 0 THEN --COB CHECK DONT UPDATE BALANCES DURING COB
          ----------------------------------------------
          BEGIN
            --UPDATE CUSTOMERS BALANCES
            dbms_output.put_line('updating customer balances the transaction...'||V_TRXMATRIXDATA.G_C);
            IF V_TRXMATRIXDATA.G_C    = 'C' THEN
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL           = NVL(ACTUAL_BAL,0)    - (V_AMOUNT ),
                  AVAILABLE_BAL          = NVL(AVAILABLE_BAL,0) - (V_AMOUNT ),
                  TODAY_DR               = NVL(TODAY_DR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE  = V_WORKINGDATE
                WHERE ACCOUNT_NO         = V_GCACCOUNTNO
                AND ROWNUM               =1;        --PUT rownum to avoid FTS (Full table Scan)

                  dbms_output.put_line('checking debit limit for the transaction...');
                  V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'D');

                  IF V_LIMIT_CHECK < 0 THEN
                     ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                     OPEN C_1 FOR SELECT ( '20' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
                      'Transaction exceed minimum allowed balance')DATAX FROM DUAL;
                    RETURN;
                  END IF;


                  -- debit customer Leaf GL
                     IF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
                      dbms_output.put_line('debit gl serial 1 |'||V_LEAFGL_DR||'| amount |'||V_AMOUNT||'|'||V_LEAFGL_DR);
                        UPDATE TB_GL_BALANCE
                        SET Gl_Balance                  = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                          Dr_Bal_Lcy                    = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                        WHERE GL_CODE                   = V_LEAFGL_DR;
             --           AND ROWNUM                      =1;
             
                        A_SP_INSERT_GL_TRANSACTIONS (V_LEAFGL_DR , IV_FIELD37, 'D', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_AMOUNT);
                    END IF;

                  
                  DBMS_OUTPUT.PUT_LINE('debit check is complete ...');
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    + (V_AMOUNT ),
                  AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) +(V_AMOUNT ),
                  TODAY_CR              = NVL(TODAY_CR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE = V_WORKINGDATE
                WHERE ACCOUNT_NO        = V_GCACCOUNTNO
                AND ROWNUM              =1;
                
                dbms_output.put_line('checking credit limit for the transaction...');
                V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'C'); --incase of a higher balance than what is configured
                  IF V_LIMIT_CHECK > 0 THEN
                       ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                       OPEN C_1 FOR SELECT ( '20' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
                        'Transaction exceed maximum allowed balance')DATAX FROM DUAL;
                      RETURN;
                    END IF;


                                -- credit customer Leaf GL
                     IF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, CREDIT LEAF
                       dbms_output.put_line('credit gl serial 2 |'||V_LEAFGL_CR||'| amount |'||V_AMOUNT);
                        UPDATE TB_GL_BALANCE
                        SET Gl_Balance                  = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                          Cr_Bal_Lcy                    = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                        WHERE GL_CODE                   = V_LEAFGL_CR;
               --         AND ROWNUM                      =1;
               
                     A_SP_INSERT_GL_TRANSACTIONS (V_LEAFGL_DR , IV_FIELD37, 'C', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_AMOUNT);
                    END IF;

              END IF;

              -- credit customer LEAF GL

      
              -- it will block all DR
            END IF;--end of CUSTbalances Update
            
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR Updating Customer Balances')DATAX FROM DUAL;
            RETURN;
          END;
          -----------------------------------------------------------
          BEGIN
            dbms_output.put_line('updating gl balances for the transaction...'||V_TRXMATRIXDATA.G_C);
            --UPDATE GL BALANCES---
            IF V_TRXMATRIXDATA.G_C    = 'G' THEN
               dbms_output.put_line('G FOUND...');
            --UPDATE GL BALANCES---
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER

                UPDATE TB_GL_BALANCE
                SET Gl_Balance           = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                  Dr_Bal_Lcy             = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE            = V_GCACCOUNTNO
                AND ROWNUM               =1;
                
                A_SP_INSERT_GL_TRANSACTIONS (V_GCACCOUNTNO , IV_FIELD37, 'D', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_AMOUNT);
              
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT GL
               dbms_output.put_line('crediting the gl balance...');
                UPDATE TB_GL_BALANCE
                SET Gl_Balance = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                  Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE  = V_GCACCOUNTNO
                AND ROWNUM     =1;
                --Update Leaf GL Balances--
                dbms_output.put_line('update complete...');
                A_SP_INSERT_GL_TRANSACTIONS (V_GCACCOUNTNO , IV_FIELD37, 'C', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_AMOUNT);
              END IF;
              --Update leaf GLs
            END IF; --end of gLbalances Update
            
             dbms_output.put_line('balances posted...'||V_TRXMATRIXDATA.G_C);
          EXCEPTION
          WHEN OTHERS THEN
          RAISE;
            DBMS_OUTPUT.PUT_LINE('ERROR ON GL BALANCE...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        ---Insert into tb_transactions--
        -------------------------------------
         dbms_output.put_line('inserting transactions...'||V_TRXMATRIXDATA.G_C);
        BEGIN
          A_SP_INSERT_TRANSACTIONS( IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68, V_GCACCOUNTNO, IV_CUSTCURRENCY, V_DR_CR, IV_FIELD3, IV_FIELD100, iv_Field11, V_AMOUNT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, v_G_C, V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
          V_serialno:=V_serialno                                                   +1;
        EXCEPTION
        WHEN OTHERS THEN
          RAISE;
          OPEN c_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction (Principle) - COB flag-'||V_COB ) DATAX FROM DUAL;
          ROLLBACK TO SAVEPOINT v_SafePoint;
          RETURN;
        END;
        dbms_output.put_line('transaction posted...'||V_TRXMATRIXDATA.G_C);
        FETCH CUR_TRXMATRIX INTO V_TRXMATRIXDATA;
      END LOOP;
      -- FREE RESOURCES USED BY THE CURSOR
      CLOSE CUR_TRXMATRIX;
    EXCEPTION
    WHEN OTHERS THEN
      RAISE;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
      RETURN;
    END;
  END;
  
  
  DBMS_OUTPUT.PUT_LINE('posting charges...');
  --6) Post Charges
  BEGIN
    IF V_CHARGES_AMT > 0 THEN
      V_TRXCODE     := '9999';--charges Code
      BEGIN
        V_GCACCOUNTNO     :=FN_GET_GL_AC_CHARGES(IV_FIELD100,IV_FIELD3);
        V_EXCISE_DUTY_RATE:= FN_GETGENERAL_PARAMS('EXCISE_DUTY');

        --get gl for eclectics charges and for the bank
        -- we need to split the charge commission based on what is set in the general params


      EXCEPTION
      WHEN OTHERS THEN
        --RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching Charges GL Account')DATAX FROM DUAL;
        RETURN;
      END;
      --6a)Debit Customer
      IF V_COB = 0 THEN
        UPDATE TB_ACCOUNT
        SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    - (V_CHARGES_AMT ),
          AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) - (V_CHARGES_AMT ),
          TODAY_DR              = NVL(TODAY_DR, 0)     + (V_CHARGES_AMT ),
          LAST_TRANSACTION_DATE = V_WORKINGDATE
        WHERE ACCOUNT_NO        = IV_FIELD102
        AND ROWNUM              =1;
        
        --6b) Credit Wallet Income GL
        UPDATE TB_GL_BALANCE
        SET Gl_Balance = NVL(Gl_Balance,0)  + (V_CHARGES_AMT ),
          Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_CHARGES_AMT )
        WHERE GL_CODE  = V_GCACCOUNTNO
        AND ROWNUM     =1;
        
            A_SP_INSERT_GL_TRANSACTIONS (V_GCACCOUNTNO , IV_FIELD37, 'C', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_CHARGES_AMT);
        --Update Leaf GL Balances--
        IF FN_IS_WALLET(IV_FIELD102) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
         dbms_output.put_line('debit gl serial 3 |'||V_LEAFGL_CR||'| amount |'||V_CHARGES_AMT);
          UPDATE TB_GL_BALANCE
          SET Gl_Balance = NVL(Gl_Balance,0)  - (V_CHARGES_AMT ),
            Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_CHARGES_AMT )
          WHERE GL_CODE  = V_LEAFGL_DR;
          
              A_SP_INSERT_GL_TRANSACTIONS (V_LEAFGL_DR , IV_FIELD37, 'D', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_CHARGES_AMT);
   --       AND ROWNUM     =1;
        END IF;
      END IF;
      --6c) Post  Charges tbtransactions
      BEGIN
        --Post Charges DR Leg --Customer
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Charges', IV_FIELD102, IV_CUSTCURRENCY, 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_CHARGES_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C',V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
        --Post Charges CR leg Income GL
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Charges', V_GCACCOUNTNO, IV_CUSTCURRENCY, 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_CHARGES_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction Charges' ) DATAX FROM DUAL;
        ROLLBACK TO SAVEPOINT v_SafePoint;
        RETURN;
      END;
    END IF;
  END;



DBMS_OUTPUT.PUT_LINE('posting excise duty...');
  --7) Excise Duty
  BEGIN
    V_EXCISE_DUTY_AMT   :=round(V_EXCISE_DUTY_RATE/100 *V_CHARGES_AMT);
    V_GCACCOUNTNO       := FN_GET_GL_ACCOUNT('EXCISE_DUTY','999999');
    IF V_EXCISE_DUTY_AMT > 0 THEN
      V_TRXCODE         := '8888';--ExciseDuty Code
      IF V_COB           = 0 THEN
        UPDATE TB_ACCOUNT
        SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    - (V_EXCISE_DUTY_AMT ),
          AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) - (V_EXCISE_DUTY_AMT ),
          TODAY_DR              = NVL(TODAY_DR, 0)     + (V_EXCISE_DUTY_AMT ),
          LAST_TRANSACTION_DATE = V_WORKINGDATE
        WHERE ACCOUNT_NO        = IV_FIELD102
        AND ROWNUM              =1;
        --6b) Credit Wallet Income GL
        UPDATE TB_GL_BALANCE
        SET Gl_Balance = NVL(Gl_Balance,0)  + (V_EXCISE_DUTY_AMT ),
          Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_EXCISE_DUTY_AMT )
        WHERE GL_CODE  = V_GCACCOUNTNO
        AND ROWNUM     =1;
        
            A_SP_INSERT_GL_TRANSACTIONS (V_GCACCOUNTNO , IV_FIELD37, 'C', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_EXCISE_DUTY_AMT);
        --Update Leaf GL Balances--
        IF FN_IS_WALLET(IV_FIELD102) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
           dbms_output.put_line('debit gl serial 4 |'||V_LEAFGL_CR||'| amount |'||V_EXCISE_DUTY_AMT);
          UPDATE TB_GL_BALANCE
          SET Gl_Balance = NVL(Gl_Balance,0)  - (V_EXCISE_DUTY_AMT ),
            Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_EXCISE_DUTY_AMT)
          WHERE GL_CODE  = V_LEAFGL_DR;
   --       AND ROWNUM     =1;
                 A_SP_INSERT_GL_TRANSACTIONS (V_LEAFGL_DR , IV_FIELD37, 'D', IV_FIELD100, IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_EXCISE_DUTY_AMT);
        END IF;
      END IF;
      BEGIN
        --Post Excise Duty DR Leg --Customer
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -ExciseDuty', IV_FIELD102, IV_CUSTCURRENCY, 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_EXCISE_DUTY_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
        --Post Excise Duty CR leg Income GL
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -ExciseDuty', V_GCACCOUNTNO, IV_CUSTCURRENCY, 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_EXCISE_DUTY_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
      EXCEPTION
      WHEN OTHERS THEN
        OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction ExciseDuty' ) DATAX FROM DUAL;
        ROLLBACK TO SAVEPOINT v_SafePoint;
        RETURN;
      END;
    END IF;
  END;



DBMS_OUTPUT.PUT_LINE('posting loyality points...');

BEGIN

  --9) process loyality points for the account-----------------------------------------------------------------------------------------

  -- check if the transaction can earn points
  V_TOTAL_LOYALITY_POINTS := FN_GET_LOYALITY_POINTS(IV_FIELD3, IV_FIELD100, IV_FIELD4, IV_FIELD2, IV_FIELD102, IV_FIELD24);
  V_TRXCODE         := '2077';--poinsts Code
  DBMS_OUTPUT.PUT_LINE('earnable points | '||V_TOTAL_LOYALITY_POINTS);

  IF V_TOTAL_LOYALITY_POINTS > 0 THEN

      -- fetch loyality points for field102
      -- get loyality points account
      V_LOYALITY_POINTS_ACCOUNT := FN_CHECK_LOYALITY_AC(IV_FIELD2);
      
      DBMS_OUTPUT.PUT_LINE('account check | '||V_LOYALITY_POINTS_ACCOUNT);

       IF V_LOYALITY_POINTS_ACCOUNT <> '0' THEN

           -- fetch gl for loyality points
           BEGIN
             V_GCACCOUNTNO := FN_GET_GL_ACCOUNT('LOYALITY_COLLECTION','400000' );

             -- debit loyality points GL
                UPDATE TB_GL_BALANCE
                SET Gl_Balance = NVL(Gl_Balance,0)  - (V_TOTAL_LOYALITY_POINTS ),
                Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_TOTAL_LOYALITY_POINTS )
                WHERE GL_CODE  = V_GCACCOUNTNO
                AND ROWNUM     =1;

                 A_SP_INSERT_GL_TRANSACTIONS (V_GCACCOUNTNO , IV_FIELD37, 'D', 'LOYALITY_COLLECTION', IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_TOTAL_LOYALITY_POINTS);
            -- credit loyality points GL
                  UPDATE TB_ACCOUNT
                  SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    + (V_TOTAL_LOYALITY_POINTS),
                  AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) + (V_TOTAL_LOYALITY_POINTS),
                  TODAY_CR              = NVL(TODAY_CR, 0)     + (V_TOTAL_LOYALITY_POINTS),
                  LAST_TRANSACTION_DATE = V_WORKINGDATE
                  WHERE ACCOUNT_NO        = V_LOYALITY_POINTS_ACCOUNT -- ENTER COMMISSION ACCOUNT
                  AND ROWNUM              =1;

                --Update Leaf GL Balances--
                  IF FN_IS_WALLET(V_LOYALITY_POINTS_ACCOUNT) > 0 THEN --UPDATE LEAF GLS BLANCES, CREDIT LEAF
                    dbms_output.put_line('credit gl serial 4 -loyality |'||V_LEAFGL_LOYALITY_CR||'| amount |'||V_TOTAL_LOYALITY_POINTS );
                    -- fetch the wallet 

                    UPDATE TB_GL_BALANCE    
                    SET Gl_Balance                  = NVL(Gl_Balance,0)  + (V_TOTAL_LOYALITY_POINTS ),
                      Cr_Bal_Lcy                    = NVL(Cr_Bal_Lcy, 0) + (V_TOTAL_LOYALITY_POINTS )
                    WHERE GL_CODE                   = V_LEAFGL_LOYALITY_CR;
          --          AND ROWNUM                      =1;
                    A_SP_INSERT_GL_TRANSACTIONS (V_LEAFGL_LOYALITY_CR , IV_FIELD37, 'C', 'LOYALITY_COLLECTION', IV_FIELD3, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_TOTAL_LOYALITY_POINTS);
                  END IF;

                    --6c) Post  loyality points tbtransactions
                  BEGIN
                    --Post Commissions DR Leg --Customer
                    A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Points', V_GCACCOUNTNO, 'UGX', 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_TOTAL_LOYALITY_POINTS, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G',V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
                    V_serialno:=V_serialno                                                  +1;
                    --Post Commissions CR leg Income GL
                    A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Points', V_LOYALITY_POINTS_ACCOUNT, 'UGX', 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_TOTAL_LOYALITY_POINTS, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
                    V_serialno:=V_serialno                                                  +1;
                  EXCEPTION
                  WHEN OTHERS THEN
               --    RAISE;
                    OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Loyality points' ) DATAX FROM DUAL;
                    ROLLBACK TO SAVEPOINT v_SafePoint;
                    RETURN;
                  END;
             EXCEPTION
             WHEN OTHERS THEN
         --    RAISE;
                 OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching loyality Gl account' ) DATAX FROM DUAL;
                  ROLLBACK TO SAVEPOINT v_SafePoint;
                RETURN;
           END;

--       ELSE
--          DBMS_OUTPUT.PUT_LINE('account not found | '||V_LOYALITY_POINTS_ACCOUNT);
--        
--          OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
--          'Error Fetching loyality points account' ) as DATAX FROM DUAL;
--          
--         ROLLBACK TO SAVEPOINT v_SafePoint;
--          RETURN;
       END IF;


      --debit loyality gl

      -- credit loyality accounts
  END IF;

END;


DBMS_OUTPUT.PUT_LINE('finished legging ...');
  ---------------------------------------end loyality points -----------------------------------------------


  IF SUBSTR(IV_FIELD24,0,1)    = 'M' THEN
    V_balanceaccount          := iv_Field102;
  ELSIF SUBSTR(IV_FIELD24,0,2) = 'BM' THEN
    V_balanceaccount          := V_FIELD103;
  END IF;
  
    IF IV_FIELD3 = '210000' THEN  -- check for agency transaction
     V_balanceaccount          := V_FIELD103;
  END IF;
  BEGIN
    V_available_actual :=FN_GETBALANCE('C',V_COB,V_balanceaccount);
  EXCEPTION
  WHEN OTHERS THEN
    OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching Account Balance' ) DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT v_SafePoint;
    RETURN;
  END;
  
  -- fetch gemification details at the end of the transaction
  V_GEMIFICATION_RESPONSE := FN_GEMIFICATION_RESPONSE(V_TOTAL_LOYALITY_POINTS ,'LOYALITY_COLLECTION','C');
  
  
  IF IV_FIELD100 IN ('FT_BULK_PAYMENT') THEN
     OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual 
     || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX FROM DUAL;
  END IF;
  
  IF IV_FIELD3 IN ('380000') THEN
    V_MINI_DATA:= FN_GET_MINI(iv_Field102);
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX, 
    NVL(V_MINI_DATA,'') AS MINI_DATA, V_GEMIFICATION_RESPONSE AS GEMIFICATION FROM DUAL;
  ELSE
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX,
    V_GEMIFICATION_RESPONSE AS GEMIFICATION ,V_PARENTREF as PARENT_REFERENCE  FROM DUAL;
  END IF;
  
  
  COMMIT;
  
  dbms_output.put_line('committed transaction...');
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_POST_MINI_TRANSACTIONS_BK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_POST_MINI_TRANSACTIONS_BK" (
    IV_MSGTYPE       IN NVARCHAR2 ,
    IV_FIELD2        IN NVARCHAR2 ,
    IV_FIELD3        IN NVARCHAR2,
    IV_FIELD4        IN NUMBER DEFAULT 0,--AMOUNT
    IV_FIELD7        IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD11       IN NVARCHAR2 ,--STAN
    IV_FIELD24       IN NVARCHAR2,
    IV_FIELD32       IN NVARCHAR2 ,
    IV_FIELD35       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD37       IN NVARCHAR2,
    IV_FIELD65       IN NVARCHAR2 DEFAULT NULL ,
    IV_FIELD68       IN NVARCHAR2,
    IV_FIELD90       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD100      IN NVARCHAR2,---SERVICE TN/TA
    IV_FIELD101      IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD102      IN NVARCHAR2,
    IV_FIELD103      IN NVARCHAR2 DEFAULT '' ,
    IV_COMMISSION    IN NUMBER DEFAULT 0,
    IV_CUSTCURRENCY  IN NVARCHAR2 DEFAULT 'UGX' ,
    IV_TERMINALID    IN NVARCHAR2 DEFAULT '' ,
    IV_USERID        IN NVARCHAR2 DEFAULT NULL ,
    IV_TRNCODE       IN NVARCHAR2 DEFAULT NULL ,
    IV_EXTERNALREFNO IN NVARCHAR2 DEFAULT NULL, --E.G MPESA OR CBS
    C_1              IN OUT SYS_REFCURSOR)
AS
  V_WORKINGDATE DATE;
  V_FINANCIALYR NVARCHAR2(6);
  V_FINANCIALPRD NVARCHAR2(3);
  V_TRXREFNO NVARCHAR2(200) :='';
  V_PARENTREF NVARCHAR2(70):=IV_FIELD90;
  V_COB    NUMBER             :=0;
  V_AMOUNT NUMERIC(18,5)      :=IV_FIELD4;
  V_REVERSALRETURNMESSAGE NVARCHAR2(500) ;
  CV_1 SYS_REFCURSOR;
  V_LIMIT_RESPONSE_CODE NVARCHAR2(10);
  V_LIMIT_RESPONSE_DESC NVARCHAR2(100);
  V_G_C NVARCHAR2(2);
  V_DR_CR NVARCHAR2(2);
  V_VALIDATION NVARCHAR2(10);
  V_GCACCOUNTNO NVARCHAR2(20);
  V_serialno NUMBER (10,0)      :=0;-- :=TBTRANSACTIONS_ID.nextval;
  V_PAYMENT_NUMBER NVARCHAR2(10):='';
  V_FIELD41 NVARCHAR2(50)       :='';
  V_FIELD42 NVARCHAR2(50)       :='';
  V_LEAFGL_DR NVARCHAR2(50)     :='';
  V_LEAFGL_CR NVARCHAR2(50)     :='';
  V_LEAFGL_LOYALITY_CR NVARCHAR2(50)     :='';
  V_TRXCODE NVARCHAR2(50)       :='7777'; --Differentiate Charges from Actual Transactions
  V_clearbal          NUMBER (18,5)      :=0;
  V_AVAILABLE_BALANCE NUMBER (18,5)      :=0;
  V_CHARGES_AMT       NUMBER (18,5)      :=0;
  V_COMMISSION_AMT       NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_RATE  NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_AMT   NUMBER (18,5)      :=0;
  V_balanceaccount    NVARCHAR2(100)      :='';
  V_available_actual NVARCHAR2(100)      :='';
  V_MINI_DATA VARCHAR2(4000)             :='';
  V_FIELD103 NVARCHAR2(50)       :=IV_FIELD103;

  V_CHECK_COMMISSION_ACCOUNT NUMBER := 0;
  V_AGENT_COMMISSION_ACCOUNT NVARCHAR2(50) := '';

  --- gemification

    V_LOYALITY_POINTS_ACCOUNT NVARCHAR2(50) :='';
    V_GEMIFICATION_RESPONSE NVARCHAR2(50) :='';
    V_TOTAL_LOYALITY_POINTS NUMBER(18) :='';

  -- limit check
  V_LIMIT_CHECK NUMBER(5) :=0;

  -- BANK and eclectics accounts
  V_GET_ECLE_COMM_GL NVARCHAR2(50) :='';
  V_GET_BANK_COMM_GL NVARCHAR2(50) :='';
  V_COMM_SPLIT NUMBER(18) :=0;
  V_ECLE_COMM NUMBER(18) :=0;
  V_BANK_COMM NUMBER(18) :=0;
  V_GUARD_REPONSE NVARCHAR2(50) :=0;
  V_REF_CHECKER NUMBER :=0;
  --
BEGIN
--Take Note-- To make PostMini less bulky, Modularize, use Functions to do most things.
  SAVEPOINT V_SAFEPOINT;
  BEGIN
    SELECT WORKINGDATE,
      FINANCIALYEAR ,
      FINANCIALPERIOD,
      COB
    INTO V_WORKINGDATE,
      V_FINANCIALYR,
      V_FINANCIALPRD,
      V_COB
    FROM TB_DATE_SETTINGS
    WHERE ROWNUM = 1;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR FETCHING WORKING DATE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
  BEGIN -- check if the end of day is currently running 
  
  IF V_COB = 1 THEN 
      OPEN C_1 FOR SELECT ('58' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'END OF DAY PROCESS LOCK')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END IF;
    
  END;
  
  
--  BEGIN
--    IF IV_FIELD100 = 'FT_BULK_PAYMENT' THEN
--      V_FIELD103:= FN_AUTO_REG_BULK_PAY(IV_FIELD35,IV_FIELD65);
--    END IF;
--    
--     EXCEPTION
--  WHEN OTHERS THEN
--  
--    RAISE;
--    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN AUTO-REGISTRATION FOR BULK PAYMENT')DATAX FROM DUAL;
--    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
--    RETURN;
--  END;
  BEGIN
    V_VALIDATION :=FN_VALIDATE_CUSTOMER(IV_FIELD2,IV_FIELD24,IV_FIELD102,V_FIELD103);
       IF V_VALIDATION = 'NOTOK' THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT-PHONENUMBER VALIDATION')DATAX FROM DUAL;
            RETURN;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING CUSTOMER PHONE_NUMBER')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
  
  -- check transaction ref processing 
  
  BEGIN
  
   V_REF_CHECKER := FN_CHECK_TRANSACTION_REF (IV_FIELD37 , IV_MSGTYPE);
   IF  V_REF_CHECKER > 0 THEN
       OPEN C_1 FOR SELECT ('70' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Duplicate transaction detected.')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF ;
  END ;


  --Get Leaf GL
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      
      dbms_output.put_line('field102 -- '||IV_FIELD102);
      SELECT LEAF_GL
      INTO V_LEAFGL_DR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(IV_FIELD102,1,3)
      AND ROWNUM         =1;
      
      dbms_output.put_line('leaf GL DR-- '||V_LEAFGL_DR);

      IF SUBSTR(IV_FIELD102,1,3) = '256' OR IV_FIELD24 = 'CM' THEN  -- currently for customers alone
         SELECT LEAF_GL
         INTO V_LEAFGL_LOYALITY_CR
         FROM TB_PRODUCTS
        WHERE PRODUCT_CODE = '207'
        AND ROWNUM         =1;
        
      dbms_output.put_line('leaf loyality DR-- '||V_LEAFGL_LOYALITY_CR);
      END IF;
    END IF;
    IF FN_IS_WALLET(V_FIELD103) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      SELECT LEAF_GL
      INTO V_LEAFGL_CR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(V_FIELD103,1,3)
      AND ROWNUM         =1;
    END IF;
    
    -- loyality points for all the core 2 wallet transactions
    IF IV_FIELD24 = 'CM' THEN
         SELECT LEAF_GL
         INTO V_LEAFGL_LOYALITY_CR
         FROM TB_PRODUCTS
        WHERE PRODUCT_CODE = '207'
        AND ROWNUM         =1;
        
      dbms_output.put_line('leaf loyality DR-- '||V_LEAFGL_LOYALITY_CR);
    END IF;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GETTING LEAF GL')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --1) VALIDATE DR/CR ACCOUNTS/TXN
  BEGIN
    IF IV_FIELD102 = V_FIELD103 THEN
      OPEN C_1 FOR SELECT ('15' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR DEBIT TO SAME CREDIT ACCOUNT')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR COMPARING DEBIT AND CREDIT ACCOUNTS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
    IF FN_VALIDATE_TXN_TYPE(IV_FIELD3,IV_FIELD100,IV_FIELD4,IV_FIELD24) < 1 THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INVALID FIELD3 OR FIELD100 OR TRX_MATRIX CONFIG NOT DONE')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING FIELD3 AND FIELD100')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  
--  -- validate guarded transactions 
--  BEGIN
--      V_GUARD_REPONSE := FN_CHECK_TOKEN(IV_FIELD100, IV_EXTERNALREFNO);
--      
--      IF SUBSTR(v_token_check_response,1,Instr(v_token_check_response,'|',1,1)-1) <> '00' THEN
--        OPEN C_1 FOR V_GUARD_REPONSE AS DATAX FROM DUAL;
--        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
--        RETURN;
--  
--  END;
  
  --2) GET TRX REFERENCE
  BEGIN
    V_TRXREFNO  := FN_GET_REFERENCE(IV_FIELD32);
    V_PARENTREF := IV_FIELD11 ||V_TRXREFNO||IV_FIELD37; --FIELD90 AKA PARENTREF
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GENERATING TRANSACTION REFERENCE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --3) CHECK IF ITS A REVERSAL REQUEST AND PROCESS
  IF IV_MSGTYPE = '0420' THEN
    BEGIN
    
    
      dbms_output.put_line('field 90 | '||V_PARENTREF);
    
      V_REVERSALRETURNMESSAGE:= '00';
      V_REVERSALRETURNMESSAGE := FN_MINI_REV(IV_FIELD32, IV_FIELD37, IV_FIELD90); -- changed from field90 to parentRef
      NULL;
      OPEN C_1 FOR SELECT (V_REVERSALRETURNMESSAGE)DATAX FROM DUAL;
      RETURN;
    EXCEPTION
    WHEN OTHERS THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR REVERSING TRANSACTION')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END;
  END IF;
  --4) CHECK TRANS LIMITS
  BEGIN
    A_SP_CHECK_TXN_LIMIT_GLOBAL(IV_FIELD2,IV_FIELD4, IV_FIELD24, IV_FIELD32,IV_FIELD100, trim(IV_FIELD102), IV_CUSTCURRENCY,CV_1);
    LOOP
      FETCH CV_1 INTO V_LIMIT_RESPONSE_CODE,V_LIMIT_RESPONSE_DESC;
      EXIT
    WHEN CV_1%NOTFOUND;
      IF V_LIMIT_RESPONSE_CODE NOT IN ('00') THEN
        OPEN C_1 FOR SELECT ( V_LIMIT_RESPONSE_CODE ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || V_LIMIT_RESPONSE_DESC)DATAX FROM DUAL;
        RETURN;
      END IF;
      --DBMS_OUTPUT.PUT_LINE(V_LIMIT_RESPONSE_CODE || ' ' || V_LIMIT_RESPONSE_DESC);
    END LOOP;
    CLOSE CV_1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING LIMITS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --4) Check Balances
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      V_AVAILABLE_BALANCE       := FN_GETBALANCE_AVAILABLE('C', V_COB, trim(IV_FIELD102));
     DBMS_OUTPUT.put_line(V_AVAILABLE_BALANCE);
      V_CHARGES_AMT         := FN_GET_CHARGES(iv_Field3,iv_Field4,iv_Field32,iv_Field100,iv_Field102,V_FIELD103);
      DBMS_OUTPUT.put_line(V_CHARGES_AMT);
      IF V_AVAILABLE_BALANCE < V_AMOUNT + V_CHARGES_AMT AND FN_IS_WALLET(IV_FIELD102) > 0 THEN
        OPEN C_1 FOR SELECT ( '51' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INSUFFICIENT FUNDS')DATAX FROM DUAL;
        RETURN;
      END IF;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING CUSTOMER BALANCES')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  DBMS_OUTPUT.PUT_LINE('posting transaction ...');
  --5) POST THE TRANSACTION
  BEGIN
    DECLARE
      CURSOR CUR_TRXMATRIX
      IS
        SELECT ACCOUNTNO,
          DRCR ,
          FVR ,
          MF ,
          G_C
        FROM TB_TRANSACTION_MATRIX
        WHERE
          --CHANNEL = IV_FIELD32 AND
          PROCODE    = IV_FIELD3
        AND FIELD100 = IV_FIELD100
        AND FIELD24  =IV_FIELD24
        AND V_AMOUNT > 0
        ORDER BY DRCR DESC;
      V_TRXMATRIXDATA CUR_TRXMATRIX%ROWTYPE;
    BEGIN
      -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
      OPEN CUR_TRXMATRIX;
      -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
      FETCH CUR_TRXMATRIX
      INTO V_TRXMATRIXDATA;
      -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
      WHILE CUR_TRXMATRIX%FOUND
      LOOP
        V_DR_CR := V_TRXMATRIXDATA.DRCR;
        V_G_C   := V_TRXMATRIXDATA.G_C;
        --  V_GCACCOUNTNO          := V_TRXMATRIXDATA.ACCOUNTNO ;x
        V_gcaccountno          :=FN_GET_GL_ACCOUNT(IV_FIELD100,IV_FIELD3);
        
        dbms_output.put_line('CURRENCT DRCR | '||V_TRXMATRIXDATA.DRCR);
        dbms_output.put_line('CURRENCT G_C | '||V_TRXMATRIXDATA.G_C);
        IF LENGTH(V_GCACCOUNTNO)<1 AND V_TRXMATRIXDATA.G_C = 'G' THEN--VALIDATE GL IS CONFIGURED
          BEGIN

            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'GL ACCOUNT NOT FOUND(GL MAPPING ERROR)')DATAX FROM DUAL;
            RETURN;
          EXCEPTION
          WHEN OTHERS THEN
          raise;
          DBMS_OUTPUT.PUT_LINE('ERROR ON GL ACCOUNT...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR READING GL ACCOUNT')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        IF V_TRXMATRIXDATA.G_C   = 'C' THEN
          IF V_TRXMATRIXDATA.DRCR= 'D' THEN
            V_VALIDATION        :=FN_VALIDATE_ACCOUNT(IV_FIELD102,'D');
            V_GCACCOUNTNO       :=(IV_FIELD102);
            
             IF V_VALIDATION = 'NOTOK' THEN
                ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT VALIDATION')DATAX FROM DUAL;
                RETURN;
             END IF;
          ELSE
            V_VALIDATION  :=FN_VALIDATE_ACCOUNT(V_FIELD103,'C');
            V_GCACCOUNTNO :=(V_FIELD103);
            
             IF V_VALIDATION = 'NOTOK' THEN
                ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                OPEN C_1 FOR SELECT ( '12' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT VALIDATION')DATAX FROM DUAL;
                RETURN;
             END IF;
          END IF;
         
        END IF;
        --5A) UPDATE BALANCES
        IF V_COB = 0 THEN --COB CHECK DONT UPDATE BALANCES DURING COB
          ----------------------------------------------
          BEGIN
            --UPDATE CUSTOMERS BALANCES
            dbms_output.put_line('updating customer balances the transaction...'||V_TRXMATRIXDATA.G_C);
            IF V_TRXMATRIXDATA.G_C    = 'C' THEN
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL           = NVL(ACTUAL_BAL,0)    - (V_AMOUNT ),
                  AVAILABLE_BAL          = NVL(AVAILABLE_BAL,0) - (V_AMOUNT ),
                  TODAY_DR               = NVL(TODAY_DR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE  = V_WORKINGDATE
                WHERE ACCOUNT_NO         = V_GCACCOUNTNO
                AND ROWNUM               =1;        --PUT rownum to avoid FTS (Full table Scan)

                  dbms_output.put_line('checking debit limit for the transaction...');
                  V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'D');

                  IF V_LIMIT_CHECK < 0 THEN
                     ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                     OPEN C_1 FOR SELECT ( '20' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
                      'Transaction exceed minimum allowed balance')DATAX FROM DUAL;
                    RETURN;
                  END IF;


                  -- debit customer Leaf GL
                     IF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
                      dbms_output.put_line('debit gl serial 1 |'||V_LEAFGL_DR||'| amount |'||V_AMOUNT||'|'||V_LEAFGL_DR);
                        UPDATE TB_GL_BALANCE
                        SET Gl_Balance                  = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                          Dr_Bal_Lcy                    = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                        WHERE GL_CODE                   = V_LEAFGL_DR;
             --           AND ROWNUM                      =1;
                    END IF;

                  
                  DBMS_OUTPUT.PUT_LINE('debit check is complete ...');
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    + (V_AMOUNT ),
                  AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) +(V_AMOUNT ),
                  TODAY_CR              = NVL(TODAY_CR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE = V_WORKINGDATE
                WHERE ACCOUNT_NO        = V_GCACCOUNTNO
                AND ROWNUM              =1;
                
                dbms_output.put_line('checking credit limit for the transaction...');
                V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'C'); --incase of a higher balance than what is configured
                  IF V_LIMIT_CHECK > 0 THEN
                       ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                       OPEN C_1 FOR SELECT ( '20' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
                        'Transaction exceed maximum allowed balance')DATAX FROM DUAL;
                      RETURN;
                    END IF;


                                -- credit customer Leaf GL
                     IF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, CREDIT LEAF
                       dbms_output.put_line('credit gl serial 2 |'||V_LEAFGL_CR||'| amount |'||V_AMOUNT);
                        UPDATE TB_GL_BALANCE
                        SET Gl_Balance                  = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                          Cr_Bal_Lcy                    = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                        WHERE GL_CODE                   = V_LEAFGL_CR;
               --         AND ROWNUM                      =1;
                    END IF;

              END IF;

              -- credit customer LEAF GL

      
              -- it will block all DR
            END IF;--end of CUSTbalances Update
            
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR Updating Customer Balances')DATAX FROM DUAL;
            RETURN;
          END;
          -----------------------------------------------------------
          BEGIN
            dbms_output.put_line('updating gl balances for the transaction...'||V_TRXMATRIXDATA.G_C);
            --UPDATE GL BALANCES---
            IF V_TRXMATRIXDATA.G_C    = 'G' THEN
               dbms_output.put_line('G FOUND...');
            --UPDATE GL BALANCES---
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER

                UPDATE TB_GL_BALANCE
                SET Gl_Balance           = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                  Dr_Bal_Lcy             = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE            = V_GCACCOUNTNO
                AND ROWNUM               =1;
              
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT GL
               dbms_output.put_line('crediting the gl balance...');
                UPDATE TB_GL_BALANCE
                SET Gl_Balance = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                  Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE  = V_GCACCOUNTNO
                AND ROWNUM     =1;
                --Update Leaf GL Balances--
                dbms_output.put_line('update complete...');
              END IF;
              --Update leaf GLs
            END IF; --end of gLbalances Update
            
             dbms_output.put_line('balances posted...'||V_TRXMATRIXDATA.G_C);
          EXCEPTION
          WHEN OTHERS THEN
          RAISE;
            DBMS_OUTPUT.PUT_LINE('ERROR ON GL BALANCE...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        ---Insert into tb_transactions--
        -------------------------------------
         dbms_output.put_line('inserting transactions...'||V_TRXMATRIXDATA.G_C);
        BEGIN
          A_SP_INSERT_TRANSACTIONS( IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68, V_GCACCOUNTNO, IV_CUSTCURRENCY, V_DR_CR, IV_FIELD3, IV_FIELD100, iv_Field11, V_AMOUNT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, v_G_C, V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
          V_serialno:=V_serialno                                                   +1;
        EXCEPTION
        WHEN OTHERS THEN
          RAISE;
          OPEN c_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction (Principle) - COB flag-'||V_COB ) DATAX FROM DUAL;
          ROLLBACK TO SAVEPOINT v_SafePoint;
          RETURN;
        END;
        dbms_output.put_line('transaction posted...'||V_TRXMATRIXDATA.G_C);
        FETCH CUR_TRXMATRIX INTO V_TRXMATRIXDATA;
      END LOOP;
      -- FREE RESOURCES USED BY THE CURSOR
      CLOSE CUR_TRXMATRIX;
    EXCEPTION
    WHEN OTHERS THEN
      RAISE;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
      RETURN;
    END;
  END;
  
  
  DBMS_OUTPUT.PUT_LINE('posting charges...');
  --6) Post Charges
  BEGIN
    IF V_CHARGES_AMT > 0 THEN
      V_TRXCODE     := '9999';--charges Code
      BEGIN
        V_GCACCOUNTNO     :=FN_GET_GL_AC_CHARGES(IV_FIELD100,IV_FIELD3);
        V_EXCISE_DUTY_RATE:= FN_GETGENERAL_PARAMS('EXCISE_DUTY');

        --get gl for eclectics charges and for the bank
        -- we need to split the charge commission based on what is set in the general params


      EXCEPTION
      WHEN OTHERS THEN
        --RAISE;
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching Charges GL Account')DATAX FROM DUAL;
        RETURN;
      END;
      --6a)Debit Customer
      IF V_COB = 0 THEN
        UPDATE TB_ACCOUNT
        SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    - (V_CHARGES_AMT ),
          AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) - (V_CHARGES_AMT ),
          TODAY_DR              = NVL(TODAY_DR, 0)     + (V_CHARGES_AMT ),
          LAST_TRANSACTION_DATE = V_WORKINGDATE
        WHERE ACCOUNT_NO        = IV_FIELD102
        AND ROWNUM              =1;
        --6b) Credit Wallet Income GL
        UPDATE TB_GL_BALANCE
        SET Gl_Balance = NVL(Gl_Balance,0)  + (V_CHARGES_AMT ),
          Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_CHARGES_AMT )
        WHERE GL_CODE  = V_GCACCOUNTNO
        AND ROWNUM     =1;
        --Update Leaf GL Balances--
        IF FN_IS_WALLET(IV_FIELD102) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
         dbms_output.put_line('debit gl serial 3 |'||V_LEAFGL_CR||'| amount |'||V_CHARGES_AMT);
          UPDATE TB_GL_BALANCE
          SET Gl_Balance = NVL(Gl_Balance,0)  - (V_CHARGES_AMT ),
            Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_CHARGES_AMT )
          WHERE GL_CODE  = V_LEAFGL_DR;
   --       AND ROWNUM     =1;
        END IF;
      END IF;
      --6c) Post  Charges tbtransactions
      BEGIN
        --Post Charges DR Leg --Customer
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Charges', IV_FIELD102, IV_CUSTCURRENCY, 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_CHARGES_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C',V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
        --Post Charges CR leg Income GL
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Charges', V_GCACCOUNTNO, IV_CUSTCURRENCY, 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_CHARGES_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction Charges' ) DATAX FROM DUAL;
        ROLLBACK TO SAVEPOINT v_SafePoint;
        RETURN;
      END;
    END IF;
  END;



DBMS_OUTPUT.PUT_LINE('posting excise duty...');
  --7) Excise Duty
  BEGIN
    V_EXCISE_DUTY_AMT   :=round(V_EXCISE_DUTY_RATE/100 *V_CHARGES_AMT);
    V_GCACCOUNTNO       := FN_GET_GL_ACCOUNT('EXCISE_DUTY','999999');
    IF V_EXCISE_DUTY_AMT > 0 THEN
      V_TRXCODE         := '8888';--ExciseDuty Code
      IF V_COB           = 0 THEN
        UPDATE TB_ACCOUNT
        SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    - (V_EXCISE_DUTY_AMT ),
          AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) - (V_EXCISE_DUTY_AMT ),
          TODAY_DR              = NVL(TODAY_DR, 0)     + (V_EXCISE_DUTY_AMT ),
          LAST_TRANSACTION_DATE = V_WORKINGDATE
        WHERE ACCOUNT_NO        = IV_FIELD102
        AND ROWNUM              =1;
        --6b) Credit Wallet Income GL
        UPDATE TB_GL_BALANCE
        SET Gl_Balance = NVL(Gl_Balance,0)  + (V_EXCISE_DUTY_AMT ),
          Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_EXCISE_DUTY_AMT )
        WHERE GL_CODE  = V_GCACCOUNTNO
        AND ROWNUM     =1;
        --Update Leaf GL Balances--
        IF FN_IS_WALLET(IV_FIELD102) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
           dbms_output.put_line('debit gl serial 4 |'||V_LEAFGL_CR||'| amount |'||V_EXCISE_DUTY_AMT);
          UPDATE TB_GL_BALANCE
          SET Gl_Balance = NVL(Gl_Balance,0)  - (V_EXCISE_DUTY_AMT ),
            Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_EXCISE_DUTY_AMT)
          WHERE GL_CODE  = V_LEAFGL_DR;
   --       AND ROWNUM     =1;
        END IF;
      END IF;
      BEGIN
        --Post Excise Duty DR Leg --Customer
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -ExciseDuty', IV_FIELD102, IV_CUSTCURRENCY, 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_EXCISE_DUTY_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
        --Post Excise Duty CR leg Income GL
        A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -ExciseDuty', V_GCACCOUNTNO, IV_CUSTCURRENCY, 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_EXCISE_DUTY_AMT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
        V_serialno:=V_serialno                                                  +1;
      EXCEPTION
      WHEN OTHERS THEN
        OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction ExciseDuty' ) DATAX FROM DUAL;
        ROLLBACK TO SAVEPOINT v_SafePoint;
        RETURN;
      END;
    END IF;
  END;



DBMS_OUTPUT.PUT_LINE('posting loyality points...');

BEGIN

  --9) process loyality points for the account-----------------------------------------------------------------------------------------

  -- check if the transaction can earn points
  V_TOTAL_LOYALITY_POINTS := FN_GET_LOYALITY_POINTS(IV_FIELD3, IV_FIELD100, IV_FIELD4, IV_FIELD2, IV_FIELD102, IV_FIELD24);
  V_TRXCODE         := '2077';--poinsts Code
  DBMS_OUTPUT.PUT_LINE('earnable points | '||V_TOTAL_LOYALITY_POINTS);

  IF V_TOTAL_LOYALITY_POINTS > 0 THEN

      -- fetch loyality points for field102
      -- get loyality points account
      V_LOYALITY_POINTS_ACCOUNT := FN_CHECK_LOYALITY_AC(IV_FIELD2);
      
      DBMS_OUTPUT.PUT_LINE('account check | '||V_LOYALITY_POINTS_ACCOUNT);

       IF V_LOYALITY_POINTS_ACCOUNT <> '0' THEN

           -- fetch gl for loyality points
           BEGIN
             V_GCACCOUNTNO := FN_GET_GL_ACCOUNT('LOYALITY_COLLECTION','400000' );

             -- debit loyality points GL
                UPDATE TB_GL_BALANCE
                SET Gl_Balance = NVL(Gl_Balance,0)  - (V_TOTAL_LOYALITY_POINTS ),
                Dr_Bal_Lcy   = NVL(Dr_Bal_Lcy, 0) + (V_TOTAL_LOYALITY_POINTS )
                WHERE GL_CODE  = V_GCACCOUNTNO
                AND ROWNUM     =1;

            -- credit loyality points GL
                  UPDATE TB_ACCOUNT
                  SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    + (V_TOTAL_LOYALITY_POINTS),
                  AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) + (V_TOTAL_LOYALITY_POINTS),
                  TODAY_CR              = NVL(TODAY_CR, 0)     + (V_TOTAL_LOYALITY_POINTS),
                  LAST_TRANSACTION_DATE = V_WORKINGDATE
                  WHERE ACCOUNT_NO        = V_LOYALITY_POINTS_ACCOUNT -- ENTER COMMISSION ACCOUNT
                  AND ROWNUM              =1;

                --Update Leaf GL Balances--
                  IF FN_IS_WALLET(V_LOYALITY_POINTS_ACCOUNT) > 0 THEN --UPDATE LEAF GLS BLANCES, CREDIT LEAF
                    dbms_output.put_line('credit gl serial 4 -loyality |'||V_LEAFGL_LOYALITY_CR||'| amount |'||V_TOTAL_LOYALITY_POINTS );
                    -- fetch the wallet 

                    UPDATE TB_GL_BALANCE    
                    SET Gl_Balance                  = NVL(Gl_Balance,0)  + (V_TOTAL_LOYALITY_POINTS ),
                      Cr_Bal_Lcy                    = NVL(Cr_Bal_Lcy, 0) + (V_TOTAL_LOYALITY_POINTS )
                    WHERE GL_CODE                   = V_LEAFGL_LOYALITY_CR;
          --          AND ROWNUM                      =1;
                  END IF;

                    --6c) Post  loyality points tbtransactions
                  BEGIN
                    --Post Commissions DR Leg --Customer
                    A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Points', V_GCACCOUNTNO, 'UGX', 'D', IV_FIELD3, IV_FIELD100, iv_Field11, V_TOTAL_LOYALITY_POINTS, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'G',V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
                    V_serialno:=V_serialno                                                  +1;
                    --Post Commissions CR leg Income GL
                    A_SP_INSERT_TRANSACTIONS(IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68 || ' -Points', V_LOYALITY_POINTS_ACCOUNT, 'UGX', 'C', IV_FIELD3, IV_FIELD100, iv_Field11, V_TOTAL_LOYALITY_POINTS, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, 'C', V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
                    V_serialno:=V_serialno                                                  +1;
                  EXCEPTION
                  WHEN OTHERS THEN
               --    RAISE;
                    OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Loyality points' ) DATAX FROM DUAL;
                    ROLLBACK TO SAVEPOINT v_SafePoint;
                    RETURN;
                  END;
             EXCEPTION
             WHEN OTHERS THEN
         --    RAISE;
                 OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching loyality Gl account' ) DATAX FROM DUAL;
                  ROLLBACK TO SAVEPOINT v_SafePoint;
                RETURN;
           END;

--       ELSE
--          DBMS_OUTPUT.PUT_LINE('account not found | '||V_LOYALITY_POINTS_ACCOUNT);
--        
--          OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
--          'Error Fetching loyality points account' ) as DATAX FROM DUAL;
--          
--         ROLLBACK TO SAVEPOINT v_SafePoint;
--          RETURN;
       END IF;


      --debit loyality gl

      -- credit loyality accounts
  END IF;

END;


DBMS_OUTPUT.PUT_LINE('finished legging ...');
  ---------------------------------------end loyality points -----------------------------------------------


  IF SUBSTR(IV_FIELD24,0,1)    = 'M' THEN
    V_balanceaccount          := iv_Field102;
  ELSIF SUBSTR(IV_FIELD24,0,2) = 'BM' THEN
    V_balanceaccount          := V_FIELD103;
  END IF;
  
    IF IV_FIELD3 = '210000' THEN  -- check for agency transaction
     V_balanceaccount          := V_FIELD103;
  END IF;
  BEGIN
    V_available_actual :=FN_GETBALANCE('C',V_COB,V_balanceaccount);
  EXCEPTION
  WHEN OTHERS THEN
    OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching Account Balance' ) DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT v_SafePoint;
    RETURN;
  END;
  
  -- fetch gemification details at the end of the transaction
  V_GEMIFICATION_RESPONSE := FN_GEMIFICATION_RESPONSE(V_TOTAL_LOYALITY_POINTS ,'LOYALITY_COLLECTION','C');
  
  
  IF IV_FIELD100 IN ('FT_BULK_PAYMENT') THEN
     OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual 
     || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX FROM DUAL;
  END IF;
  
  IF IV_FIELD3 IN ('380000') THEN
    V_MINI_DATA:= FN_GET_MINI(iv_Field102);
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX, 
    NVL(V_MINI_DATA,'') AS MINI_DATA, V_GEMIFICATION_RESPONSE AS GEMIFICATION FROM DUAL;
  ELSE
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX,
    V_GEMIFICATION_RESPONSE AS GEMIFICATION , V_PARENTREF AS PARENT_REFERENCE FROM DUAL;
  END IF;
  
  
  COMMIT;
  
  dbms_output.put_line('committed transaction...');
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_POST_TRANSACTIONS_GEMI
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_POST_TRANSACTIONS_GEMI" (
    IV_MSGTYPE       IN NVARCHAR2 ,
    IV_FIELD2        IN NVARCHAR2 ,
    IV_FIELD3        IN NVARCHAR2,
    IV_FIELD4        IN NUMBER DEFAULT 0,--AMOUNT
    IV_FIELD7        IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD11       IN NVARCHAR2 ,--STAN
    IV_FIELD24       IN NVARCHAR2,
    IV_FIELD32       IN NVARCHAR2 ,
    IV_FIELD35       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD37       IN NVARCHAR2,
    IV_FIELD65       IN NVARCHAR2 DEFAULT NULL ,
    IV_FIELD68       IN NVARCHAR2,
    IV_FIELD90       IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD100      IN NVARCHAR2,---SERVICE TN/TA
    IV_FIELD101      IN NVARCHAR2 DEFAULT '' ,
    IV_FIELD102      IN NVARCHAR2,
    IV_FIELD103      IN NVARCHAR2 DEFAULT '' ,
    IV_COMMISSION    IN NUMBER DEFAULT 0,
    IV_CUSTCURRENCY  IN NVARCHAR2 DEFAULT 'UGX' ,
    IV_TERMINALID    IN NVARCHAR2 DEFAULT '' ,
    IV_USERID        IN NVARCHAR2 DEFAULT NULL ,
    IV_TRNCODE       IN NVARCHAR2 DEFAULT NULL ,
    IV_EXTERNALREFNO IN NVARCHAR2 DEFAULT NULL, --E.G MPESA OR CBS
    C_1              IN OUT SYS_REFCURSOR)
AS
  V_WORKINGDATE DATE;
  V_FINANCIALYR NVARCHAR2(6);
  V_FINANCIALPRD NVARCHAR2(3);
  V_TRXREFNO NVARCHAR2(200) :='';
  V_PARENTREF NVARCHAR2(70):=IV_FIELD90;
  V_COB    NUMBER             :=0;
  V_AMOUNT NUMERIC(18,5)      :=IV_FIELD4;
  V_REVERSALRETURNMESSAGE NVARCHAR2(500) ;
  CV_1 SYS_REFCURSOR;
  V_LIMIT_RESPONSE_CODE NVARCHAR2(10);
  V_LIMIT_RESPONSE_DESC NVARCHAR2(100);
  V_G_C NVARCHAR2(2);
  V_DR_CR NVARCHAR2(2);
  V_VALIDATION NVARCHAR2(10);
  V_GCACCOUNTNO NVARCHAR2(20);
  V_serialno NUMBER (10,0)      :=0;-- :=TBTRANSACTIONS_ID.nextval;
  V_PAYMENT_NUMBER NVARCHAR2(10):='';
  V_FIELD41 NVARCHAR2(50)       :='';
  V_FIELD42 NVARCHAR2(50)       :='';
  V_LEAFGL_DR NVARCHAR2(50)     :='';
  V_LEAFGL_CR NVARCHAR2(50)     :='';
  V_TRXCODE NVARCHAR2(50)       :='7777'; --Differentiate Charges from Actual Transactions
  V_clearbal          NUMBER (18,5)      :=0;
  V_AVAILABLE_BALANCE NUMBER (18,5)      :=0;
  V_CHARGES_AMT       NUMBER (18,5)      :=0;
  V_COMMISSION_AMT       NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_RATE  NUMBER (18,5)      :=0;
  V_EXCISE_DUTY_AMT   NUMBER (18,5)      :=0;
  V_balanceaccount    NVARCHAR2(100)      :='';
  V_available_actual NVARCHAR2(100)      :='';
  V_MINI_DATA VARCHAR2(4000)             :='';
  V_FIELD103 NVARCHAR2(50)       :=IV_FIELD103;
  
  V_CHECK_COMMISSION_ACCOUNT NUMBER := 0;
  V_AGENT_COMMISSION_ACCOUNT NVARCHAR2(50) := '';

  --- gemification

    V_LOYALITY_POINTS_ACCOUNT NVARCHAR2(50) :='';
    V_TOTAL_LOYALITY_POINTS NUMBER(18) :='';

  -- limit check 
  V_LIMIT_CHECK NUMBER(5) :=0; 

  -- BANK and eclectics accounts  
  V_GET_ECLE_COMM_GL NVARCHAR2(50) :='';
  V_GET_BANK_COMM_GL NVARCHAR2(50) :='';
  V_COMM_SPLIT NUMBER(18) :=0;
  V_ECLE_COMM NUMBER(18) :=0;
  V_BANK_COMM NUMBER(18) :=0;

  --
BEGIN
--Take Note-- To make PostMini less bulky, Modularize, use Functions to do most things.
  SAVEPOINT V_SAFEPOINT;
  BEGIN
    SELECT WORKINGDATE,
      FINANCIALYEAR ,
      FINANCIALPERIOD,
      COB
    INTO V_WORKINGDATE,
      V_FINANCIALYR,
      V_FINANCIALPRD,
      V_COB
    FROM TB_DATE_SETTINGS
    WHERE ROWNUM = 1;
  EXCEPTION
  WHEN OTHERS THEN

    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR FETCHING WORKING DATE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
    IF IV_FIELD100 = 'FT_BULK_PAYMENT' THEN
      V_FIELD103:= FN_AUTO_REG_BULK_PAY(IV_FIELD35,IV_FIELD65);
    END IF;
     EXCEPTION
  WHEN OTHERS THEN
    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN AUTO-REGISTRATION FOR BULK PAYMENT')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
    V_VALIDATION :=FN_VALIDATE_CUSTOMER(IV_FIELD2,IV_FIELD24,IV_FIELD102,V_FIELD103);    
       IF V_VALIDATION = 'NOTOK' THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT-PHONENUMBER VALIDATION')DATAX FROM DUAL;
            RETURN;
        END IF;
  EXCEPTION
  WHEN OTHERS THEN
      
    OPEN C_1 FOR SELECT ('57' ||'|' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING CUSTOMER PHONE_NUMBER')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;

 
  --Get Leaf GL
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      SELECT LEAF_GL
      INTO V_LEAFGL_DR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(IV_FIELD102,1,3)
      AND ROWNUM         =1;
    END IF;
    IF FN_IS_WALLET(V_FIELD103) > 0 THEN
      --CA-Customer Account, Agent Account, Merchant Account, Group Account
      SELECT LEAF_GL
      INTO V_LEAFGL_CR
      FROM TB_PRODUCTS
      WHERE PRODUCT_CODE = SUBSTR(V_FIELD103,1,3)
      AND ROWNUM         =1;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
  
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GETTING LEAF GL')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --1) VALIDATE DR/CR ACCOUNTS/TXN
  BEGIN
    IF IV_FIELD102 = V_FIELD103 THEN
      OPEN C_1 FOR SELECT ('15' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR DEBIT TO SAME CREDIT ACCOUNT')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
  RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR COMPARING DEBIT AND CREDIT ACCOUNTS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  BEGIN
    IF FN_VALIDATE_TXN_TYPE(IV_FIELD3,IV_FIELD100,IV_FIELD4,IV_FIELD24) < 1 THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INVALID FIELD3 OR FIELD100 OR TRX_MATRIX CONFIG NOT DONE')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR VALIDATING FIELD3 AND FIELD100')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --2) GET TRX REFERENCE
  BEGIN
    V_TRXREFNO  := FN_GET_REFERENCE(IV_FIELD32);
    V_PARENTREF := IV_FIELD11 ||V_TRXREFNO||IV_FIELD37; --FIELD90 AKA PARENTREF
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR GENERATING TRANSACTION REFERENCE')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --3) CHECK IF ITS A REVERSAL REQUEST AND PROCESS
  IF IV_MSGTYPE = '0420' THEN
    BEGIN
      V_REVERSALRETURNMESSAGE:= '00';
      V_REVERSALRETURNMESSAGE := FN_MINI_REV(IV_FIELD32, IV_FIELD37, IV_FIELD90);
      NULL;
      OPEN C_1 FOR SELECT (V_REVERSALRETURNMESSAGE)DATAX FROM DUAL;
      RETURN;
    EXCEPTION
    WHEN OTHERS THEN
      OPEN C_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR REVERSING TRANSACTION')DATAX FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
    END;
  END IF;
  --4) CHECK TRANS LIMITS
  BEGIN
    A_SP_CHECK_TXN_LIMIT_GLOBAL(IV_FIELD2,IV_FIELD4, IV_FIELD24, IV_FIELD32,IV_FIELD100, trim(IV_FIELD102), IV_CUSTCURRENCY,CV_1);
    LOOP
      FETCH CV_1 INTO V_LIMIT_RESPONSE_CODE,V_LIMIT_RESPONSE_DESC;
      EXIT
    WHEN CV_1%NOTFOUND;
      IF V_LIMIT_RESPONSE_CODE NOT IN ('00') THEN
        OPEN C_1 FOR SELECT ( '16' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || V_LIMIT_RESPONSE_DESC)DATAX FROM DUAL;
        RETURN;
      END IF;
      --DBMS_OUTPUT.PUT_LINE(V_LIMIT_RESPONSE_CODE || ' ' || V_LIMIT_RESPONSE_DESC);
    END LOOP;
    CLOSE CV_1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING LIMITS')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --4) Check Balances
  BEGIN
    IF FN_IS_WALLET(IV_FIELD102) > 0 THEN
      V_AVAILABLE_BALANCE       := FN_GETBALANCE_AVAILABLE('C', V_COB, trim(IV_FIELD102));
     DBMS_OUTPUT.put_line(V_AVAILABLE_BALANCE);
      V_CHARGES_AMT         := FN_GET_CHARGES(iv_Field3,iv_Field4,iv_Field32,iv_Field100,iv_Field102,V_FIELD103);
      DBMS_OUTPUT.put_line(V_CHARGES_AMT);
      IF V_AVAILABLE_BALANCE < V_AMOUNT + V_CHARGES_AMT AND FN_IS_WALLET(IV_FIELD102) > 0 THEN
        OPEN C_1 FOR SELECT ( '51' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'INSUFFICIENT FUNDS')DATAX FROM DUAL;
        RETURN;
      END IF;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR CHECKING CUSTOMER BALANCES')DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  --5) POST THE TRANSACTION
  BEGIN
    DECLARE
      CURSOR CUR_TRXMATRIX
      IS
        SELECT ACCOUNTNO,
          DRCR ,
          FVR ,
          MF ,
          G_C
        FROM TB_TRANSACTION_MATRIX
        WHERE
          --CHANNEL = IV_FIELD32 AND
          PROCODE    = IV_FIELD3
        AND FIELD100 = IV_FIELD100
        AND FIELD24  =IV_FIELD24
        AND V_AMOUNT > 0
        ORDER BY DRCR DESC;
      V_TRXMATRIXDATA CUR_TRXMATRIX%ROWTYPE;
    BEGIN
      -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
      OPEN CUR_TRXMATRIX;
      -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
      FETCH CUR_TRXMATRIX
      INTO V_TRXMATRIXDATA;
      -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
      WHILE CUR_TRXMATRIX%FOUND
      LOOP
        V_DR_CR := V_TRXMATRIXDATA.DRCR;
        V_G_C   := V_TRXMATRIXDATA.G_C;
        --  V_GCACCOUNTNO          := V_TRXMATRIXDATA.ACCOUNTNO ;x
        V_gcaccountno          :=FN_GET_GL_ACCOUNT(IV_FIELD100,IV_FIELD3);
        IF LENGTH(V_GCACCOUNTNO)<1 AND V_TRXMATRIXDATA.G_C = 'G' THEN--VALIDATE GL IS CONFIGURED
          BEGIN
          
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'GL ACCOUNT NOT FOUND(GL MAPPING ERROR)')DATAX FROM DUAL;
            RETURN;
          EXCEPTION
          WHEN OTHERS THEN
          DBMS_OUTPUT.PUT_LINE('ERROR ON GL ACCOUNT...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR READING GL ACCOUNT')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        IF V_TRXMATRIXDATA.G_C   = 'C' THEN
          IF V_TRXMATRIXDATA.DRCR= 'D' THEN
            V_VALIDATION        :=FN_VALIDATE_ACCOUNT(IV_FIELD102,'D');
            V_GCACCOUNTNO       :=(IV_FIELD102);
          ELSE
            V_VALIDATION  :=FN_VALIDATE_ACCOUNT(V_FIELD103,'C');
            V_GCACCOUNTNO :=(V_FIELD103);
          END IF;
          IF V_VALIDATION = 'NOTOK' THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '11' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR IN ACCOUNT VALIDATION')DATAX FROM DUAL;
            RETURN;
          END IF;
        END IF;
        --5A) UPDATE BALANCES
        IF V_COB = 0 THEN --COB CHECK DONT UPDATE BALANCES DURING COB
          ----------------------------------------------
          BEGIN
            --UPDATE CUSTOMERS BALANCES
            IF V_TRXMATRIXDATA.G_C    = 'C' THEN
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL           = NVL(ACTUAL_BAL,0)    - (V_AMOUNT ),
                  AVAILABLE_BAL          = NVL(AVAILABLE_BAL,0) - (V_AMOUNT ),
                  TODAY_DR               = NVL(TODAY_DR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE  = V_WORKINGDATE
                WHERE ACCOUNT_NO         = V_GCACCOUNTNO
                AND ROWNUM               =1;        --PUT rownum to avoid FTS (Full table Scan)

                  V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'D');

                  IF V_LIMIT_CHECK < 0 THEN
                     ROLLBACK TO SAVEPOINT V_SAFEPOINT;
                     OPEN C_1 FOR SELECT ( '20' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' ||
                      'Transaction amount higher than the balance')DATAX FROM DUAL;
                    RETURN;
                  END IF;
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT CUSTOMER
                UPDATE TB_ACCOUNT
                SET ACTUAL_BAL          = NVL(ACTUAL_BAL,0)    + (V_AMOUNT ),
                  AVAILABLE_BAL         = NVL(AVAILABLE_BAL,0) +(V_AMOUNT ),
                  TODAY_CR              = NVL(TODAY_CR, 0)     + (V_AMOUNT ),
                  LAST_TRANSACTION_DATE = V_WORKINGDATE
                WHERE ACCOUNT_NO        = V_GCACCOUNTNO
                AND ROWNUM              =1;
              END IF;

              V_LIMIT_CHECK := FN_CHECK_ACCOUNT_LIMIT(V_GCACCOUNTNO, 'D'); --incase of a higher balance than what is configured 
              -- it will block all DR 
            END IF;--end of CUSTbalances Update
          EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'ERROR Updating Customer Balances')DATAX FROM DUAL;
            RETURN;
          END;
          -----------------------------------------------------------
          BEGIN
            --UPDATE GL BALANCES---
            IF V_TRXMATRIXDATA.G_C    = 'G' THEN
              IF V_TRXMATRIXDATA.DRCR = 'D' THEN --DEBIT CUSTOMER
             
                UPDATE TB_GL_BALANCE
                SET Gl_Balance           = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                  Dr_Bal_Lcy             = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE            = V_GCACCOUNTNO
                AND ROWNUM               =1;
              ELSIF V_TRXMATRIXDATA.DRCR = 'C' THEN --CREDIT CUSTOMER
                UPDATE TB_GL_BALANCE
                SET Gl_Balance = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                  Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                WHERE GL_CODE  = V_GCACCOUNTNO
                AND ROWNUM     =1;
                --Update Leaf GL Balances--
                IF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, DEBIT LEAF
                  UPDATE TB_GL_BALANCE
                  SET Gl_Balance                  = NVL(Gl_Balance,0)  - (V_AMOUNT ),
                    Dr_Bal_Lcy                    = NVL(Dr_Bal_Lcy, 0) + (V_AMOUNT )
                  WHERE GL_CODE                   = V_LEAFGL_DR
                  AND ROWNUM                      =1;
                ELSIF FN_IS_WALLET(V_GCACCOUNTNO) > 0 THEN --UPDATE LEAF GLS BLANCES, CREDIT LEAF
                  UPDATE TB_GL_BALANCE
                  SET Gl_Balance = NVL(Gl_Balance,0)  + (V_AMOUNT ),
                    Cr_Bal_Lcy   = NVL(Cr_Bal_Lcy, 0) + (V_AMOUNT )
                  WHERE GL_CODE  = V_LEAFGL_CR
                  AND ROWNUM     =1;
                END IF;
              END IF;
              --Update leaf GLs
            END IF; --end of gLbalances Update
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            DBMS_OUTPUT.PUT_LINE('ERROR ON GL BALANCE...');
            ROLLBACK TO SAVEPOINT V_SAFEPOINT;
            OPEN C_1 FOR SELECT ( '57' || 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
            RETURN;
          END;
        END IF;
        ---Insert into tb_transactions--
        -------------------------------------
        BEGIN
          A_SP_INSERT_TRANSACTIONS( IV_MSGTYPE, IV_FIELD32, IV_FIELD37, V_serialno + 1, IV_FIELD68, V_GCACCOUNTNO, IV_CUSTCURRENCY, V_DR_CR, IV_FIELD3, IV_FIELD100, iv_Field11, V_AMOUNT, V_Workingdate, V_Financialyr, V_Financialprd, IV_USERID, v_G_C, V_parentref, IV_FIELD65, V_TRXCODE, V_FIELD41, V_FIELD42, IV_FIELD24,V_COB,V_TRXREFNO);
          V_serialno:=V_serialno                                                   +1;
        EXCEPTION
        WHEN OTHERS THEN
          RAISE;
          OPEN c_1 FOR SELECT ('57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Logging Transaction (Principle) - COB flag-'||V_COB ) DATAX FROM DUAL;
          ROLLBACK TO SAVEPOINT v_SafePoint;
          RETURN;
        END;
        FETCH CUR_TRXMATRIX INTO V_TRXMATRIXDATA;
      END LOOP;
      -- FREE RESOURCES USED BY THE CURSOR
      CLOSE CUR_TRXMATRIX;
    EXCEPTION
    WHEN OTHERS THEN
      --RAISE;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      OPEN C_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Updating GL Balances')DATAX FROM DUAL;
      RETURN;
    END;
  END;
 
  
  IF SUBSTR(IV_FIELD24,0,1)    = 'M' THEN
    V_balanceaccount          := iv_Field102;
  ELSIF SUBSTR(IV_FIELD24,0,2) = 'BM' THEN
    V_balanceaccount          := V_FIELD103;
  END IF;
  BEGIN
    V_available_actual :=FN_GETBALANCE('C',V_COB,V_balanceaccount);
  EXCEPTION
  WHEN OTHERS THEN
    OPEN c_1 FOR SELECT ( '57' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || 'Error Fetching Account Balance' ) DATAX FROM DUAL;
    ROLLBACK TO SAVEPOINT v_SafePoint;
    RETURN;
  END;
  IF IV_FIELD3 IN ('380000') THEN
    V_MINI_DATA:= FN_GET_MINI(iv_Field102);
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX, NVL(V_MINI_DATA,'') AS MINI_DATA FROM DUAL;
  ELSE
    OPEN c_1 FOR SELECT ('00'||'|'||V_available_actual || '|' || V_CHARGES_AMT ||'|' || V_EXCISE_DUTY_AMT || '|' || 'Successful')DATAX FROM DUAL;
  END IF;
  COMMIT;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_PROCESS_BULK_PAYMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_PROCESS_BULK_PAYMENT" (
  IV_BATCH_NO IN NVARCHAR2 ,
  C_1 IN OUT SYS_REFCURSOR
) AS 

V_COUNT NUMBER :=0;
V_CUMILATIVE_AMOUNT NUMBER(18) :=0;
V_AVAILABLE_BALANCE NUMBER (18) :=0;
V_INSITUTION_ACCOUNT NUMBER(18) :=0;
V_GET_INSTITUTION_AC NVARCHAR2(20) :=0;
V_INSTITUTION_NAME nvarchar2(100) :='';

batch_data json_array_t ;
batch_record JSON_OBJECT_T := new JSON_OBJECT_T;

v_field103 NVARCHAR2(50) :='';
v_account_name NVARCHAR2(200) :='';
v_field37 nvarchar2(50) :='';
v_field4 number(18) :='';
v_field7 nvarchar2(10) :='';
v_field11 nvarchar2(10) :='';
v_field2 nvarchar2(20) :='';
v_field3 nvarchar2(10) := '400000';
v_field24 nvarchar2(2) :='MM';
v_field32 nvarchar2(10) := 'ADMIN';
v_field68 nvarchar2(200) :='';
v_field100 nvarchar2(50) :='FT_BULK_PAYMENT';
C_V_1 SYS_REFCURSOR;
V_POST_MINI_RESPONSE nvarchar2(200) :='';
V_POST_MINI_GEMI nvarchar2(100) :='';
V_POST_MINI_CODE nvarchar2(5) :='';
BEGIN
  
  -- perform batch check
  SELECT COUNT (1) INTO V_COUNT FROM DUAL  WHERE EXISTS
    (SELECT ID  FROM TB_INSTITUTION_UPLOADS WHERE BATCH_NO =IV_BATCH_NO AND ROWNUM         =1);
  
  IF V_COUNT < 1 THEN 
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Batch number not found' as RESP_DESC from DUAL;
    RETURN;
  END IF ;
  
  -- create seqeunce for field37 transactions on post mini
  
  -- load total amount for the payout from tb_insititution payouts 
  
  SELECT NVL(SUM(NVL(AMOUNT , 0)),0) INTO V_CUMILATIVE_AMOUNT FROM 
  TB_INSTITUTION_BATCH_PAYOUT WHERE BATCH_NO = IV_BATCH_NO AND VERIFIED =1;
  
  IF V_CUMILATIVE_AMOUNT = 0 THEN 
     OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'UGX 0 Found for the provided batch' as RESP_DESC from DUAL;
    RETURN;
  END IF;
  
  
  -- check the balance 
   SELECT COUNT (1) INTO V_COUNT FROM DUAL  WHERE EXISTS
    (SELECT ID  FROM TB_INSTITUTIONS WHERE INSTITUTION_CODE =
      ( SELECT INSTITUTION_CODE FROM TB_INSTITUTION_UPLOADS WHERE BATCH_NO = IV_BATCH_NO AND ROWNUM =1 )AND ROWNUM = 1);
   
  
  IF V_COUNT < 1 THEN 
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Institution code not found' as RESP_DESC from DUAL;
    RETURN;
  END IF;
  
  
  select INSTITUTION_NAME into V_INSTITUTION_NAME from TB_INSTITUTIONS where INSTITUTION_CODE = 
      ( SELECT INSTITUTION_CODE FROM TB_INSTITUTION_UPLOADS WHERE BATCH_NO = IV_BATCH_NO AND ROWNUM =1 );
  -- V_GET_INSTITUTION_AC
  
   SELECT COUNT (1) INTO V_COUNT FROM DUAL  WHERE EXISTS
    (SELECT ACCOUNT_ID  FROM TB_ACCOUNT WHERE CUSTOMER_NO =
      ( SELECT INSTITUTION_CODE FROM TB_INSTITUTION_UPLOADS WHERE BATCH_NO = IV_BATCH_NO AND ROWNUM =1 )AND ROWNUM = 1);
   
  
  IF V_COUNT < 1 THEN 
     OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Institution account Number not found' as RESP_DESC from DUAL;
    RETURN;
  END IF;
  
  
  SELECT ACCOUNT_NO , AVAILABLE_BAL INTO V_GET_INSTITUTION_AC,V_AVAILABLE_BALANCE 
    FROM TB_ACCOUNT WHERE CUSTOMER_NO = ( SELECT INSTITUTION_CODE
     FROM TB_INSTITUTION_UPLOADS WHERE BATCH_NO = IV_BATCH_NO AND ROWNUM =1 ) AND ROWNUM =1;
     
     
  -- check if the current institution has money to process the payout
  
  IF V_CUMILATIVE_AMOUNT >= V_AVAILABLE_BALANCE THEN 
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Insufficient balance to perform the set transaction' as RESP_DESC from DUAL;
    RETURN;
  END IF;
  -- block the total transactions that are supposed to be disbursed
  
  UPDATE TB_ACCOUNT SET AVAILABLE_BAL = NVL(AVAILABLE_BAL,0) - V_CUMILATIVE_AMOUNT,
    BLOCKED_AMOUNT = NVL(BLOCKED_AMOUNT,0)+ V_CUMILATIVE_AMOUNT WHERE ACCOUNT_NO = V_GET_INSTITUTION_AC;
  -- load payouts for the transaction
  
  batch_data := new JSON_ARRAY_T;
  batch_data := JSON_ARRAY_T( FN_FETCH_BATCH_DATA(IV_BATCH_NO)) ;
  
  dbms_output.put_line('total available size | '||batch_data.get_size);
  
  if batch_data.get_size < 1 then 
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Batch number has no provided information' as RESP_DESC from DUAL;
    RETURN;
  end if ;
  
  -- loop through the transactions making the bulk payments 
  
  
  FOR indx in 0 .. batch_data.get_size -1
  loop 
    batch_record  := new JSON_OBJECT_T;
    batch_record := TREAT(batch_data.get(indx) AS  JSON_OBJECT_T);
    -- validate if the provided mobile number has a wallet account if not create one
    v_account_name := batch_record.get_string('first_name')||' '||batch_record.get_string('middle_name')||' '||
                      batch_record.get_string('last_name');
    
    dbms_output.put_line(v_account_name); 
    
    v_field103 := FN_AUTO_REG_BULK_PAY(v_account_name , batch_record.get_string('mobile_number'));
    
    v_field4 :=  batch_record.get_string('amount');
    v_field7 := to_char(systimestamp, 'MMddyyHH24MI');
    v_field11 := to_char (systimestamp ,'HH24MISS');
    v_field2 := batch_record.get_string('mobile_number');
    v_field37 := IV_BATCH_NO||'X'||(indx + 1)||'X'||batch_record.get_string('id');
    
    v_field68 := 'payment from '||V_INSTITUTION_NAME;
    -- create a unique transaction id to process the provided transaction
    dbms_output.put_line('trxRefNo | '||IV_BATCH_NO||'X'||(indx + 1)||'X'||batch_record.get_string('id'));
    dbms_output.put_line('field103 | '||v_field103); 
    dbms_output.put_line('inst account no | '||V_GET_INSTITUTION_AC);
    dbms_output.put_line('field4 | '||v_field4);
    dbms_output.put_line('field7 | '||v_field7);
    dbms_output.put_line('field11 | '||v_field11); 
    dbms_output.put_line('field2 | '||v_field2);
    dbms_output.put_line('field68 | '||v_field68); 
    
    
    -- we unblock the amount that will be used for this transaction alone from the institution account
    
    update tb_account set available_bal = (available_bal + v_field4) ,
    blocked_amount = (blocked_amount - v_field4) where account_no = V_GET_INSTITUTION_AC and rownum = 1;
    
    
    -- proceed to process the transaction in the account
    
    declare
      C_V_1 sys_refcursor;
    --  l_rec C_V_1%rowtype;
      begin
         A_SP_POST_MINI_TRANSACTIONS('0200', v_field2 ,v_field3, v_field4, v_field7, 
        v_field11, v_field24 , v_field32, ''  , v_field37 , ''  , v_field68 , ''  , 
        v_field100, '' , V_GET_INSTITUTION_AC, v_field103 ,0, 'UGX'  , '' , ''   , v_field37  , '' ,  C_V_1 );
        
        loop
            fetch C_V_1 into V_POST_MINI_RESPONSE;
            exit when C_V_1%notfound;
            
            dbms_output.put_line( V_POST_MINI_RESPONSE );
        end loop;
      
      end;
    
       
        
        FETCH C_V_1 INTO V_POST_MINI_RESPONSE;
          DBMS_OUTPUT.PUT_LINE(V_POST_MINI_RESPONSE || ' 0999999'); 
        CLOSE C_V_1;
    -- check the cursor to 
  end loop;
  
  
  rollback;
  
  open c_1 for select '00' as resp_code from dual;
  
END A_SP_PROCESS_BULK_PAYMENT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_REDEEM_POINTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_REDEEM_POINTS" (
  V_CUSTOMER_NO IN NVARCHAR2,
  V_POINTS IN NUMBER,
  V_CHANNEL IN NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR
) AS 

V_COUNT NUMBER := 0;
V_POINTS_ACCOUNTS NVARCHAR2(50) :='';
V_AMOUNT_POINTS NVARCHAR2(50) :='';
V_ACCOUNT_ID NUMBER :=0;
V_ACTUAL_POINTS NUMBER :=0;
V_POINTS_PER_AMOUNT NUMBER :=20; -- always pick from fn_general_params
V_REMAINING_POINT_BALANCE NUMBER := 0;
V_AVAILABLE_AMOUNT NUMBER(18,2) :=0;
V_CREDITING_ACCOUNT NUMBER :=0;
V_DEBITING_ACCOUNT NVARCHAR2(50) :='';

C_V_1 SYS_REFCURSOR;
C_V_2 SYS_REFCURSOR;
V_POST_MINI_RESPONSE NVARCHAR2(50) :='';
V_POST_MINI_RESP_MESSAGE NVARCHAR2(100) :='';
V_FIELD37 NVARCHAR2(50) :='';
V_POST_MINI_CODE NVARCHAR2(20) := '';
V_POST_MINI_CODE_2 NVARCHAR2(20) := '';

V_GEMIFICATION_RESPONSE NVARCHAR2(50) := '';

BEGIN
  SAVEPOINT V_SAFEPOINT;
  -- check account
  
  BEGIN
       SELECT COUNT(1) INTO V_COUNT FROM VW_ALLCUSTOMERS WHERE CUSTOMER_NO = V_CUSTOMER_NO AND ROWNUM =1;
       EXCEPTION 
      WHEN OTHERS THEN
      OPEN C_1 FOR SELECT '01' AS RESC_CODE , 'Account not found' as RESC_DESC FROM DUAL;
      ROLLBACK TO SAVEPOINT V_SAFEPOINT;
      RETURN;
      
      IF V_COUNT < 1 THEN
       OPEN C_1 FOR SELECT '01' AS RESC_CODE , 'Account not found' as RESC_DESC FROM DUAL;
       RETURN;
      END IF;
  END;
  --get points matrix
   -- check points 
  BEGIN 
    -- get available points and compare
    SELECT  ACTUAL_BAL, ACCOUNT_NO INTO V_ACTUAL_POINTS, V_DEBITING_ACCOUNT 
    FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_CUSTOMER_NO AND ACCOUNT_CLASS = '207' AND ROWNUM = 1;
    
    SELECT ACCOUNT_NO INTO V_CREDITING_ACCOUNT FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_CUSTOMER_NO AND ACCOUNT_CLASS = '256';
    
      EXCEPTION 
        WHEN OTHERS THEN
        ROLLBACK TO SAVEPOINT V_SAFEPOINT;
        OPEN C_1 FOR SELECT '03' AS RESC_CODE , 'Error fetching loyality points' as RESC_DESC FROM DUAL;
      RETURN; 
      
      IF V_ACTUAL_POINTS < V_POINTS THEN
        OPEN C_1 FOR SELECT '04' AS RESC_CODE , 'Insuffient points' as RESC_DESC FROM DUAL; 
        RETURN;
      END IF;
  END;
  
  -- calculate points
  
  -- we first debit the loyality points account and credit the loyality points collection account
  
  -- once the transaction was successful, we procees to allocate the redeemed amount to the customer
  BEGIN
  V_POINTS_PER_AMOUNT := 20; -- pick from general params 
    V_AVAILABLE_AMOUNT := V_POINTS * V_POINTS_PER_AMOUNT;
    
    -- fetch account serial for the transaction

    V_FIELD37 := FN_GET_SERIES('PNT','1');
    
    DBMS_OUTPUT.PUT_LINE('customer no :- '||V_CUSTOMER_NO ||' | loyality ac :-'||V_DEBITING_ACCOUNT); 
      BEGIN -- DEBIT POINTS ACCOUNT
        A_SP_POST_MINI_TRANSACTIONS('0200',V_CUSTOMER_NO, '400000',V_POINTS,'', '163818','MM',V_CHANNEL,'',
          V_FIELD37,'','redeem points to collection account','','LOYALITY_COLLECTION_R','',V_DEBITING_ACCOUNT,''
          ,0,'PNT','','','','',C_V_1);
          
          


    -- PROCEED TO PROCESS THE SECOND TRANSACTION OF THE ACCOUNT 
    
     FETCH C_V_1 INTO V_POST_MINI_RESPONSE;   
       DBMS_OUTPUT.PUT_LINE(V_POST_MINI_RESPONSE || ' 0999999'); 
       V_POST_MINI_CODE := SUBSTR(V_POST_MINI_RESPONSE, 0, 2);
       DBMS_OUTPUT.PUT_LINE('MINI RESPONSE ' || V_POST_MINI_CODE);
       IF V_POST_MINI_CODE <> '00' THEN
          ROLLBACK TO V_SAFEPOINT;
          OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Failed to process transaction in phase 1' as RESP_DESC ,
          V_POST_MINI_RESP_MESSAGE AS POST_MINI_MSG FROM DUAL;
          RETURN;
       END IF;
      
       
      CLOSE C_V_1;  

--    LOOP
--      FETCH C_V_1 INTO V_POST_MINI_RESPONSE;
--      EXIT
--    WHEN C_V_1%NOTFOUND;
--      IF V_POST_MINI_RESPONSE NOT IN ('00') THEN
--
--        OPEN C_1 FOR SELECT ( '01' ||'|'|| 0 || '|' || 0 || '|' || 0 || '|' || 0 || '|' || V_POST_MINI_RESP_MESSAGE)DATAX FROM DUAL;
--        ROLLBACK; -- ROLLBACK THE ENTIRE TRANSACTION
--        RETURN;
--      END IF;
--      --DBMS_OUTPUT.PUT_LINE(V_LIMIT_RESPONSE_CODE || ' ' || V_LIMIT_RESPONSE_DESC);
--    END LOOP;
--    CLOSE C_V_1;
    END;


    -- CREDIT THE AMOUNT EARNED TO THE CUSTOMER
    DBMS_OUTPUT.PUT_LINE('customer no :- '||V_CUSTOMER_NO ||' | 256 ac :-'||V_CREDITING_ACCOUNT); 
    BEGIN
           A_SP_POST_MINI_TRANSACTIONS('0200',V_CUSTOMER_NO, '400000',V_AVAILABLE_AMOUNT,'', '163818','SM',V_CHANNEL,'',
          V_FIELD37,'','redeem points to UGX equivalence','','REDEEM_LOYALTY_POINTS','','',
          V_CREDITING_ACCOUNT,0,'UGX','','','','',C_V_2);

            FETCH C_V_2 INTO V_POST_MINI_RESP_MESSAGE;   
             DBMS_OUTPUT.PUT_LINE(V_POST_MINI_RESP_MESSAGE || ' 0008888'); 
             V_POST_MINI_CODE_2 := SUBSTR(V_POST_MINI_RESPONSE, 0, 2);
             DBMS_OUTPUT.PUT_LINE('MINI RESPONSE 2 ' || V_POST_MINI_CODE_2); 
             
             IF V_POST_MINI_CODE_2 <> '00' THEN
                ROLLBACK TO V_SAFEPOINT;
                OPEN C_1 FOR SELECT '01' AS RESP_CODE ,
                'Failed to process transaction in phase 2' as RESP_DESC,
                V_POST_MINI_RESP_MESSAGE AS POST_MINI_MSG FROM DUAL;
                RETURN;
             END IF;
            CLOSE C_V_2;  
    END;


    END;
    
    V_GEMIFICATION_RESPONSE := FN_GEMIFICATION_RESPONSE(V_POINTS,'REDEEM_LOYALTY_POINTS','D');

  OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Success' as RESP_DESC ,V_GEMIFICATION_RESPONSE AS GEMIFICATION  FROM DUAL;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_REGISTRATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_REGISTRATION" (
    iv_FirstName            IN VARCHAR,
    iv_SecondName           IN VARCHAR,
    iv_LastName             IN VARCHAR,
    iv_PHONENUMBER          IN VARCHAR,
    iv_IdentificationID     IN NVARCHAR2,
    iv_EmailAddress         IN NVARCHAR2,
    iv_PIN                  IN NVARCHAR2,
    iv_LANG                 IN NVARCHAR2,
    iv_IMSI                 IN NVARCHAR2,
    iv_IMEI                 IN NVARCHAR2,
    iv_DATEOFBIRTH          IN NVARCHAR2,
    iv_GENDER               IN NVARCHAR2,
    iv_APPROVED             IN INT DEFAULT 1,
    iv_CREATEDBY            IN NVARCHAR2,
    iv_APPROVEDBY           IN VARCHAR DEFAULT 'SELF',
    iv_COUNTRY              IN VARCHAR DEFAULT 'UGANDA',
    iv_ACCOUNTNUMBER        IN NVARCHAR2,              --Company/Cust Core account, enable account linking
    iv_ACCOUNTTYPE          IN NVARCHAR2,              --needed for acc linking
    iv_ACCOUNTDescription   IN NVARCHAR2,              --needed for acc linking--Account product
    iv_AccountStatus        IN NVARCHAR2 DEFAULT 'OK', --needed for acc linking
    iv_CustomerID           IN NVARCHAR2,              --needed for acc linking
    iv_Currency             IN NVARCHAR2 DEFAULT 'UGX',--needed for acc linking
    iv_TxnLimitAmount       IN NUMERIC DEFAULT 0,      --needed for acc linking
    iv_hasCoreAccount       IN INT DEFAULT 0,        ----1 If customer has a core account
    iv_Channel              IN NVARCHAR2,
    iv_BranchCode           IN INT DEFAULT 1, ---Default to hq branch code
    iv_TOWN                 IN NVARCHAR2,
    iv_POSTALADDRESS        IN NVARCHAR2,
    iv_POSTALCODE           IN NVARCHAR2,
    iv_REFERRAL_CODE        IN NVARCHAR2,
    iv_REFEREE_CODE        IN NVARCHAR2 DEFAULT '',
    iv_ID_FRONT             IN CLOB DEFAULT '',
    iv_ID_BACK              IN CLOB DEFAULT '',
    c_1 OUT SYS_REFCURSOR)
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  v_Customer_No NVARCHAR2(50);
  v_Wallet_Acc_No NVARCHAR2(50);
  v_First_Name   VARCHAR(50);
  v_Second_Name  VARCHAR(50);
  v_Last_Name    VARCHAR(50);
  v_OpeningDate  DATE := SYSTIMESTAMP;
  v_serial_code  VARCHAR(20);
  v_serial_value VARCHAR(20);
  v_BrandName NVARCHAR2(50);
  --Start - make them static for now since no agreement;
  v_TOWN NVARCHAR2(50)          :='';
  v_POSTALADDRESS NVARCHAR2(50) :='';
  v_POSTALCODE NVARCHAR2(50)    :='';
  v_CREATEDON   DATE              := SYSTIMESTAMP;
  v_APPROVEDON  DATE              := SYSTIMESTAMP;
  v_SENDSMS     INT               := 1;
  v_ACCOUNTNAME VARCHAR(100);
  v_CUSTOMERNO  NUMERIC(18,2);
  v_ACCOUNTCLASS NVARCHAR2(50)       :='';
  v_POINTSACCOUNTCLASS NVARCHAR2(50)       :='';
  v_POINTSACCOUNT NVARCHAR2(50)       :='';
  v_IDENTIFICATIONTYPE NVARCHAR2(50) :='';
  v_MWALLETACCOUNT NVARCHAR2(50)     :='';
  v_ACCOUNTNO NVARCHAR2(50)          := '';
  v_LinkedBy NVARCHAR2(50)           := '';
  v_LinkedOn DATE                    := SYSTIMESTAMP;
  V_COUNT    NUMBER(1)               := 0;
  v_hasCoreAccount    NUMBER(1)               := 0; ---for now wasee wana complain this is a wallet we must have wallet accounts
  v_loyality_point_processing nvarchar2(50) :='';
  
  v_logging_id number :=0;
  V_DEVICE_CHANGE NUMBER :=0;
  V_IMSI_CHANGE NUMBER :=0;
  V_CUSTOMER_ID NUMBER(18) :=0;
  iv_PARTIAL_REGISTRATION number(18) :=1;
BEGIN
iv_PARTIAL_REGISTRATION := 1;
  -- log the initial request to tb_registrations
  
  BEGIN
  
    INSERT INTO TB_REGISTRATIONS (
    FirstName             ,
    SecondName            ,
    LastName              ,
    PHONENUMBER           ,
    IdentificationID      ,
    EmailAddress          ,
    PIN                   ,
    LANG                  ,
    IMSI                  ,
    IMEI                  ,
    DATEOFBIRTH           ,
    GENDER                ,
    APPROVED              ,
    PARTIAL_REGISTRATION  , 
    CREATEDBY             ,
    APPROVEDBY            ,
    COUNTRY               ,
    ACCOUNTNUMBER         ,             
    ACCOUNTTYPE           ,            
    ACCOUNTDescription    ,             
    AccountStatus         , 
    CustomerID            ,             
    Currency              ,
    TxnLimitAmount        ,     
    hasCoreAccount        ,       
    Channel               ,
    BranchCode            , 
    TOWN                  ,
    POSTALADDRESS         ,
    POSTALCODE            ,
    REFERRAL_CODE         ,
    REFEREE_CODE          ,
    ID_BACK_PHOTO         ,
    ID_FRONT_PHOTO        
) VALUES (    iv_FirstName             ,
    iv_SecondName            ,
    iv_LastName              ,
    iv_PHONENUMBER           ,
    iv_IdentificationID      ,
    iv_EmailAddress          ,
    iv_PIN                   ,
    iv_LANG                  ,
    iv_IMSI                  ,
    iv_IMEI                  ,
    iv_DATEOFBIRTH           ,
    iv_GENDER                ,
    iv_APPROVED              ,
    iv_PARTIAL_REGISTRATION  ,
    iv_CREATEDBY             ,
    iv_APPROVEDBY            ,
    iv_COUNTRY               ,
    iv_ACCOUNTNUMBER         ,
    iv_ACCOUNTTYPE           ,
    iv_ACCOUNTDescription    ,
    iv_AccountStatus         ,
    iv_CustomerID            ,
    iv_Currency              ,
    iv_TxnLimitAmount        ,
    iv_hasCoreAccount        ,   
    iv_Channel               ,
    iv_BranchCode            , 
    iv_TOWN                  ,
    iv_POSTALADDRESS         ,
    iv_POSTALCODE            ,
    iv_REFERRAL_CODE         ,
    iv_REFEREE_CODE          ,
    iv_ID_BACK           ,
    iv_ID_FRONT          ) RETURNING ID INTO v_logging_id;
    
    -- extract the last id that we will use for updating
  END;

  SAVEPOINT V_SAFEPOINT;
  ---Reg Process flow here
  v_First_Name   := UPPER(iv_FirstName);  --FORMAT NAMES AS JOHN DOE
  v_Second_Name  := UPPER(iv_SecondName); --FORMAT NAMES AS JOHN DOE
  v_Last_Name    := UPPER(iv_LastName);   --FORMAT NAMES AS JOHN DOE
  v_CUSTOMERNO   := iv_PHONENUMBER;
  v_ACCOUNTNAME  := iv_FirstName || ' ' || iv_SecondName || ' ' || iv_LastName;
  v_ACCOUNTCLASS := '256'; --this is the agreed upon acc class for wallet accounts
  v_POINTSACCOUNT:= CONCAT(SUBSTR(iv_PHONENUMBER,4,9),'007'); -- we create an account for loyalty points
  v_POINTSACCOUNTCLASS := '222'; 
  ----Account number format as 254700123456
  v_ACCOUNTNO:= FN_GET_CUST_ACCOUNT(iv_PHONENUMBER);---CONCAT(v_ACCOUNTCLASS, SUBSTR(iv_PHONENUMBER,4,9)); ----This generates accounts in the format CA700123456
 ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID FROM TB_CUSTOMER WHERE CUSTOMER_NO = iv_PHONENUMBER AND ROWNUM=1 -- AND identification_id = iv_identificationid
    );
  
  IF V_COUNT > 0  THEN --AND LENGTH(NVL(iv_ACCOUNTNUMBER,'')) < 12
    v_Resp_Code     :='01';
    v_Narration     := 'Customer Exists';
    v_Customer_No   := iv_PHONENUMBER;
    v_Wallet_Acc_No := '';
    
    UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = v_Narration WHERE ID = v_logging_id;
    OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
    RETURN;
  END IF;
  
  -- CHECK FOR DUPLICATE ID NOs
    V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID FROM TB_CUSTOMER WHERE identification_id = iv_identificationid AND ROWNUM=1 -- AND identification_id = iv_identificationid
    );
  
  IF V_COUNT > 0  THEN --AND LENGTH(NVL(iv_ACCOUNTNUMBER,'')) < 12
    v_Resp_Code     :='01';
    v_Narration     := 'Customer Identification number exists';
    v_Customer_No   := iv_PHONENUMBER;
    v_Wallet_Acc_No := '';
    
    UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = v_Narration WHERE ID = v_logging_id;
    OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
    RETURN;
  END IF;
  
  

IF(V_COUNT >= 1) THEN
  BEGIN
    ----Customer exists/is already registered, just link their account. But 1st check if this account is already linked to them
    ----Reset count
    V_COUNT := 0;
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM tb_Linked_Accounts
      WHERE PhoneNumber = iv_PHONENUMBER
      AND LinkedAccount = iv_ACCOUNTNUMBER
      AND ROWNUM        = 1
      );
    IF(V_COUNT = 0)  AND LENGTH(iv_ACCOUNTNUMBER) > 5 THEN
      ---LINK THE CUSTOMER ACCOUNT
      INSERT
      INTO tb_Linked_Accounts
        (
          PhoneNumber,
          National_ID,
          LinkedAccount,
          Channel,
          CBS_AccountName,
          CBS_AccountNumber,
          CBS_MobileNumber,
          CBS_National_Id,
          CBS_AccountStatus,
          CBS_CustomerID,
          Currency,
          AccountType,
          STATUS,
          Date_Linked,
          Level1Authorised,
          Level1AuthorisedBy,
          Level1AuthorisedOn,
          LinkedBy,
          LinkedOn,
          Daily_txn_limit
        )
        VALUES
        (
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_ACCOUNTNUMBER,
          iv_Channel,
          v_ACCOUNTNAME,
          iv_ACCOUNTNUMBER,
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_AccountStatus,
          iv_CustomerID,
          iv_Currency,
          iv_ACCOUNTTYPE,
          1,
          SYSTIMESTAMP,
          1,
          iv_APPROVEDBY,
          SYSTIMESTAMP,
          iv_CREATEDBY,
          SYSTIMESTAMP,
          iv_TxnLimitAmount
        ) ;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'LINK-ONLY - Could not link customer account';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';
    
    UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = v_Narration WHERE ID = v_logging_id;
    OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
ELSE

BEGIN
  ---Register the customer
  v_IDENTIFICATIONTYPE := 'NATIONAL ID';
  
  
  INSERT
  INTO TB_CUSTOMER
    (
      FIRST_NAME,
      SECOND_NAME,
      LAST_NAME,
      CUSTOMER_NO,
      CATEGORY,
      IDENTIFICATION_ID,
      MODE_OF_IDENTIFICATION_ID,
      EMAIL_ADDRESS,
      CREATED_BY,
      CREATED_ON,
      APPROVED_BY,
      APPROVED_ON,
      APPROVED,
      COUNTRY,
      DATE_OF_BIRTH,
      GENDER,
      TOWN,
      POSTAL_ADDRESS,
      POSTAL_CODE,
      LOCAL_BRANCH_ID,
      CHANNEL,MWALLET_ACCOUNT,
      REFERRAL_CODE,
      ID_FRONT_PHOTO,
      ID_BACK_PHOTO
    )
    VALUES
    (
      v_First_Name,
      v_Second_Name,
      v_Last_Name,
      v_CUSTOMERNO,
      'I',
      iv_IdentificationID,
      v_IDENTIFICATIONTYPE,
      iv_EmailAddress,
      iv_CREATEDBY,
      v_CREATEDON,
      iv_APPROVEDBY,
      v_APPROVEDON,
      iv_APPROVED,
      iv_COUNTRY,
      TO_DATE(iv_DATEOFBIRTH,'YYYYMMDD'),
      iv_GENDER,
      v_TOWN,
      v_POSTALADDRESS,
      v_POSTALCODE,
      iv_BranchCode,
      iv_Channel,
      v_ACCOUNTNO,
      iv_REFERRAL_CODE,
      iv_ID_FRONT,
      iv_ID_BACK
    ) RETURNING ID INTO V_CUSTOMER_ID; 
    
    -- check if the channel for the channel to allow for first login on channels
    IF iv_Channel = 'APP' THEN 
      V_IMSI_CHANGE := 1;
    ELSE 
      V_DEVICE_CHANGE := 1;
    END IF;  
  INSERT
  INTO TB_CUSTOMER_VALIDATION
    (
      CUSTOMER_NO,
      PHONE_NUMBER,
      PIN,
      FIRST_LOGIN,
      ACTIVE,
      LANG,
      IMSI,
      IMEI,
      IMSI_CHANGE,
      DEVICE_CHANGE
    )
    VALUES
    (
      v_CUSTOMERNO,
      iv_PHONENUMBER,
      iv_PIN,
      '1',
      '1',
      iv_LANG,
      iv_IMSI,
      iv_IMEI,
      V_IMSI_CHANGE,
      V_DEVICE_CHANGE
    );
  ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT *
    FROM tb_Linked_Accounts
    WHERE PhoneNumber =iv_PHONENUMBER
    AND LinkedAccount = iv_ACCOUNTNUMBER
    );
  IF(V_COUNT = 0 AND LENGTH(iv_ACCOUNTNUMBER) > 5) ---this acc is not yet linked to thies customer
    THEN
    ---LINK THE CUSTOMER ACCOUNT
    IF(iv_Channel = 'ADMIN') THEN
      SELECT Created_By,
        Created_On
      INTO v_LinkedBy,
        v_LinkedOn
      FROM tb_Customer_Migration
      WHERE Mobile_Number = iv_PHONENUMBER
      AND Account_Number  = iv_ACCOUNTNUMBER
      AND ROWNUM          =1;
      -- SELECT Created_On INTO v_LinkedOn FROM tb_Customer_Migration WHERE Mobile_Number = iv_PHONENUMBER AND Account_Number = iv_ACCOUNTNUMBER;
    ELSE
      v_LinkedBy := iv_CREATEDBY;
      v_LinkedOn := SYSTIMESTAMP;
    END IF;
    INSERT
    INTO tb_Linked_Accounts
      (
        PhoneNumber,
        National_ID,
        LinkedAccount,
        Channel,
        CBS_AccountName,
        CBS_AccountNumber,
        CBS_MobileNumber,
        CBS_National_Id,
        CBS_AccountStatus,
        CBS_CustomerID,
        Currency,
        AccountType,
        STATUS,
        Date_Linked,
        Level1Authorised,
        Level1AuthorisedBy,
        Level1AuthorisedOn,
        LinkedBy,
        LinkedOn,
        Daily_txn_limit
      )
      VALUES
      (
        iv_PHONENUMBER,
        iv_IdentificationID,
        iv_ACCOUNTNUMBER,
        iv_Channel,
        v_ACCOUNTNAME,
        iv_ACCOUNTNUMBER,
        iv_PHONENUMBER,
        iv_IdentificationID,
        iv_AccountStatus,
        iv_CustomerID,
        iv_Currency,
        iv_ACCOUNTTYPE,
        1,
        SYSTIMESTAMP,
        1,
        iv_CREATEDBY,
        SYSTIMESTAMP,
        v_LinkedBy,
        v_LinkedOn,
        iv_TxnLimitAmount
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  v_Resp_Code     :='01';
  v_Narration     := 'ERROR: REG - Could not register Csutomer ';
  v_Customer_No   := '';
  v_Wallet_Acc_No := '';
  
 
   OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

  ROLLBACK TO SAVEPOINT V_SAFEPOINT;
   UPDATE TB_REGISTRATIONS SET STATUS = '01' , RESPONSE_DESC = 'ERROR: REG - Could not register Csutomer ' WHERE ID = v_logging_id;
  RETURN;
END;

 BEGIN
    ---create the wallet acc where customer doesnt have a core account and wallet account not yet created
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ACCOUNT_ID
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = v_ACCOUNTNO
      AND ROWNUM       =1
      );
    --IF(V_COUNT = 0) THEN
     IF(v_hasCoreAccount = 0 AND V_COUNT = 0) THEN
      v_MWALLETACCOUNT  := v_ACCOUNTNO;
      INSERT
      INTO TB_ACCOUNT
        (
          CUSTOMER_NO,
          ACCOUNT_NO,
          ACCOUNT_NAME,
          ACCOUNT_CLASS,
          BRANCH_ID,
          PHONE_NUMBER,
          CURRENCY,
          CREATED_BY,
          PARTIAL_REGISTRATION,
          ALLOW_CR,
          ALLOW_DR,
          Allow_Overdraft,
          DORMANT,
          OPENING_DATE,
          BLOCKED,
          STOPPED,
          IS_FROZEN,
          CHEQUE_BOOK_FACILITY,
          ATM_FACILITY,
          APPROVED_BY,
          APPROVED_ON,
          OPENING_BAL,
          last_transaction_date
        )
        VALUES
        (
          v_CUSTOMERNO,
          v_ACCOUNTNO,
          v_accountname,
          v_ACCOUNTCLASS,
          '1',--iv_branchcode
          iv_PHONENUMBER,
          iv_Currency,
          iv_CREATEDBY,
          0,
          'Y',
          'Y',
          0,
          'N',
          v_OpeningDate,
          'N',
          'N',
          'N',
          'N',
          'N',
          iv_CREATEDBY,
          v_OpeningDate,
          0,
          v_OpeningDate
        );
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
   -- RAISE;
    ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'ACC - Could not create wallet account';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';
    
    
      OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    UPDATE TB_REGISTRATIONS SET STATUS = '01' , RESPONSE_DESC = 'ACC - Could not create wallet account' WHERE ID = v_logging_id;
    RETURN;
  END;
  ------ Loyalty point Account
  BEGIN
   
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ACCOUNT_ID
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = v_POINTSACCOUNT
      AND ROWNUM       =1
      );
    --IF(V_COUNT = 0) THEN
     --IF(v_hasCoreAccount = 0 AND V_COUNT = 0) THEN
     -- v_MWALLETACCOUNT  := v_ACCOUNTNO;
      INSERT
      INTO TB_ACCOUNT
        (
          CUSTOMER_NO,
          ACCOUNT_NO,
          ACCOUNT_NAME,
          ACCOUNT_CLASS,
          BRANCH_ID,
          PHONE_NUMBER,
          CURRENCY,
          CREATED_BY,
          PARTIAL_REGISTRATION,
          ALLOW_CR,
          ALLOW_DR,
          Allow_Overdraft,
          DORMANT,
          OPENING_DATE,
          BLOCKED,
          STOPPED,
          IS_FROZEN,
          CHEQUE_BOOK_FACILITY,
          ATM_FACILITY,
          APPROVED_BY,
          APPROVED_ON,
          OPENING_BAL,
          last_transaction_date
        )
        VALUES
        (
          v_CUSTOMERNO,
          CONCAT('207',v_POINTSACCOUNT),
          v_accountname,
          '207',
          '1',--iv_branchcode
          iv_PHONENUMBER,
          iv_Currency,
          iv_CREATEDBY,
          0,
          'Y',
          'Y',
          0,
          'N',
          v_OpeningDate,
          'N',
          'N',
          'N',
          'N',
          'N',
          iv_CREATEDBY,
          v_OpeningDate,
          0,
          v_OpeningDate
        );
    --END IF;
  EXCEPTION
  WHEN OTHERS THEN
   -- RAISE;
    ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'ACC - Could not create wallet account';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';
    UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = v_Narration WHERE ID = v_logging_id;
      OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

  --  RAISE;
    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
  -------End
END IF;


BEGIN -- add customer compliance information 

  INSERT INTO TB_CUSTOMER_COMPLIANCE (CUSTOMER_ID) VALUES (V_CUSTOMER_ID);

  EXCEPTION WHEN OTHERS THEN
     v_Resp_Code     :='01';
    v_Narration     := 'Failed on compliance registration';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';

END ;

  -- process loyality points 
  
 
    v_loyality_point_processing := FN_PROCESS_REFERRAL(iv_PHONENUMBER, iv_REFEREE_CODE);
    if SUBSTR(v_loyality_point_processing, 1, Instr(v_loyality_point_processing, '|', 1, 1) -1) <> '0' then
        UPDATE TB_INVITED_FRIENDS SET STATUS = 'ACCEPTED' WHERE invited_phonenumber = iv_PHONENUMBER ;
    end if;     
 

v_Resp_Code     :='00';
v_Narration     := 'Successful';
v_Customer_No   := v_CUSTOMERNO;
v_Wallet_Acc_No := v_ACCOUNTNO;

UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = v_Narration WHERE ID = v_logging_id;
--OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,
v_Narration as Resp_Desc,
 '1'  as Active,
iv_PIN as Pin,
'0' as Trials,
iv_IdentificationID as Identification_Id,
iv_DATEOFBIRTH as Date_Of_Birth,
v_First_Name as First_name,
v_Second_Name as Second_name,
v_Last_Name as Last_name,
iv_PARTIAL_REGISTRATION as Partial_Registration,
v_Customer_No as Phone_number,
'0' as First_login,
iv_EmailAddress as Email_Address,
iv_GENDER as Gender,
iv_LANG as Lang,
v_Wallet_Acc_No as Mwallet_Account,
'null' as Linked_accounts,
v_Customer_No as Customer_No,
v_Wallet_Acc_No as Wallet_Acc, v_loyality_point_processing AS GEMIFICATION FROM DUAL;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  v_Resp_Code     :='01';
  v_Narration     := 'System encountered an error while registering customer details';
  v_Customer_No   := '';
  v_Wallet_Acc_No := '';
  
  
   OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

  ROLLBACK TO SAVEPOINT V_SAFEPOINT;
  UPDATE TB_REGISTRATIONS SET STATUS = v_Resp_Code , RESPONSE_DESC = 'System encountered an error while registering customer details' WHERE ID = v_logging_id;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_REGISTRATION_17.08.2020
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_REGISTRATION_17.08.2020" (
    iv_FirstName            IN VARCHAR,
    iv_SecondName           IN VARCHAR,
    iv_LastName             IN VARCHAR,
    iv_PHONENUMBER          IN VARCHAR,
    iv_IdentificationID     IN NVARCHAR2,
    iv_EmailAddress         IN NVARCHAR2,
    iv_PIN                  IN NVARCHAR2,
    iv_LANG                 IN NVARCHAR2,
    iv_IMSI                 IN NVARCHAR2,
    iv_IMEI                 IN NVARCHAR2,
    iv_DATEOFBIRTH          IN NVARCHAR2,
    iv_GENDER               IN NVARCHAR2,
    iv_APPROVED             IN INT DEFAULT 1,
    iv_PARTIAL_REGISTRATION IN INT DEFAULT 1, --pass 1 for partial reg
    iv_CREATEDBY            IN NVARCHAR2,
    iv_APPROVEDBY           IN VARCHAR DEFAULT 'SELF',
    iv_COUNTRY              IN VARCHAR DEFAULT 'KENYA',
    iv_ACCOUNTNUMBER        IN NVARCHAR2,              --Company/Cust Core account, enable account linking
    iv_ACCOUNTTYPE          IN NVARCHAR2,              --needed for acc linking
    iv_ACCOUNTDescription   IN NVARCHAR2,              --needed for acc linking--Account product
    iv_AccountStatus        IN NVARCHAR2 DEFAULT 'OK', --needed for acc linking
    iv_CustomerID           IN NVARCHAR2,              --needed for acc linking
    iv_Currency             IN NVARCHAR2 DEFAULT 'UGX',--needed for acc linking
    iv_TxnLimitAmount       IN NUMERIC DEFAULT 0,      --needed for acc linking
    iv_hasCoreAccount       IN INT DEFAULT 0,        ----1 If customer has a core account
    iv_Channel              IN NVARCHAR2,
    iv_BranchCode           IN NVARCHAR2 DEFAULT '1', ---Default to hq branch code
    iv_TOWN                 IN NVARCHAR2,
    iv_POSTALADDRESS        IN NVARCHAR2,
    iv_POSTALCODE           IN NVARCHAR2,
    --iv_ID_FRONT             IN CLOB,
   -- iv_ID_BACK              IN CLOB,
    c_1 OUT SYS_REFCURSOR)
AS
  v_Resp_Code NVARCHAR2(50) := '00';
  v_Narration NVARCHAR2(150);
  v_Customer_No NVARCHAR2(50);
  v_Wallet_Acc_No NVARCHAR2(50);
  v_First_Name   VARCHAR(50);
  v_Second_Name  VARCHAR(50);
  v_Last_Name    VARCHAR(50);
  v_OpeningDate  DATE := SYSTIMESTAMP;
  v_serial_code  VARCHAR(20);
  v_serial_value VARCHAR(20);
  v_BrandName NVARCHAR2(50);
  --Start - make them static for now since no agreement;
  v_TOWN NVARCHAR2(50)          :='';
  v_POSTALADDRESS NVARCHAR2(50) :='';
  v_POSTALCODE NVARCHAR2(50)    :='';
  v_CREATEDON   DATE              := SYSTIMESTAMP;
  v_APPROVEDON  DATE              := SYSTIMESTAMP;
  v_SENDSMS     INT               := 1;
  v_ACCOUNTNAME VARCHAR(100);
  v_CUSTOMERNO  NUMERIC(18,2);
  v_ACCOUNTCLASS NVARCHAR2(50)       :='';
  v_IDENTIFICATIONTYPE NVARCHAR2(50) :='';
  v_MWALLETACCOUNT NVARCHAR2(50)     :='';
  v_ACCOUNTNO NVARCHAR2(50)          := '';
  v_LinkedBy NVARCHAR2(50)           := '';
  v_LinkedOn DATE                    := SYSTIMESTAMP;
  V_COUNT    NUMBER(1)               := 0;
  v_hasCoreAccount    NUMBER(1)               := 0; ---for now wasee wana complain this is a wallet we must have wallet accounts
BEGIN
  SAVEPOINT V_SAFEPOINT;
  ---Reg Process flow here
  v_First_Name   := UPPER(iv_FirstName);  --FORMAT NAMES AS JOHN DOE
  v_Second_Name  := UPPER(iv_SecondName); --FORMAT NAMES AS JOHN DOE
  v_Last_Name    := UPPER(iv_LastName);   --FORMAT NAMES AS JOHN DOE
  v_CUSTOMERNO   := iv_PHONENUMBER;
  v_ACCOUNTNAME  := iv_FirstName || ' ' || iv_SecondName || ' ' || iv_LastName;
  v_ACCOUNTCLASS := '254'; --this is the agreed upon acc class for walllet accounts
  ----Account number format as 254700123456
  v_ACCOUNTNO:= FN_GET_CUST_ACCOUNT(iv_PHONENUMBER);---CONCAT(v_ACCOUNTCLASS, SUBSTR(iv_PHONENUMBER,4,9)); ----This generates accounts in the format CA700123456
 ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID FROM TB_CUSTOMER WHERE CUSTOMER_NO = iv_PHONENUMBER AND ROWNUM=1 -- AND identification_id = iv_identificationid
    );

  IF V_COUNT > 0  THEN --AND LENGTH(NVL(iv_ACCOUNTNUMBER,'')) < 12
    v_Resp_Code     :='01';
    v_Narration     := 'Customer Exists';
    v_Customer_No   := iv_PHONENUMBER;
    v_Wallet_Acc_No := '';
    OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
    RETURN;
  END IF;

IF(V_COUNT >= 1) THEN
  BEGIN
    ----Customer exists/is already registered, just link their account. But 1st check if this account is already linked to them
    ----Reset count
    V_COUNT := 0;
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ID
      FROM tb_Linked_Accounts
      WHERE PhoneNumber = iv_PHONENUMBER
      AND LinkedAccount = iv_ACCOUNTNUMBER
      AND ROWNUM        = 1
      );
    IF(V_COUNT = 0)  AND LENGTH(iv_ACCOUNTNUMBER) > 5 THEN
      ---LINK THE CUSTOMER ACCOUNT
      INSERT
      INTO tb_Linked_Accounts
        (
          PhoneNumber,
          National_ID,
          LinkedAccount,
          Channel,
          CBS_AccountName,
          CBS_AccountNumber,
          CBS_MobileNumber,
          CBS_National_Id,
          CBS_AccountStatus,
          CBS_CustomerID,
          Currency,
          AccountType,
          STATUS,
          Date_Linked,
          Level1Authorised,
          Level1AuthorisedBy,
          Level1AuthorisedOn,
          LinkedBy,
          LinkedOn,
          Daily_txn_limit
        )
        VALUES
        (
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_ACCOUNTNUMBER,
          iv_Channel,
          v_ACCOUNTNAME,
          iv_ACCOUNTNUMBER,
          iv_PHONENUMBER,
          iv_IdentificationID,
          iv_AccountStatus,
          iv_CustomerID,
          iv_Currency,
          iv_ACCOUNTTYPE,
          1,
          SYSTIMESTAMP,
          1,
          iv_APPROVEDBY,
          SYSTIMESTAMP,
          iv_CREATEDBY,
          SYSTIMESTAMP,
          iv_TxnLimitAmount
        ) ;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
   RAISE;
    v_Resp_Code     :='01';
    v_Narration     := 'LINK-ONLY - Could not link customer account';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';
    OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;
ELSE

BEGIN
  ---Register the customer
  v_IDENTIFICATIONTYPE := 'NATIONAL ID';
  INSERT
  INTO TB_CUSTOMER
    (
      FIRST_NAME,
      SECOND_NAME,
      LAST_NAME,
      CUSTOMER_NO,
      CATEGORY,
      IDENTIFICATION_ID,
      MODE_OF_IDENTIFICATION_ID,
      EMAIL_ADDRESS,
      CREATED_BY,
      CREATED_ON,
      APPROVED_BY,
      APPROVED_ON,
      APPROVED,
      COUNTRY,
      DATE_OF_BIRTH,
      GENDER,
      TOWN,
      POSTAL_ADDRESS,
      POSTAL_CODE,
      LOCAL_BRANCH_ID,
      CHANNEL,MWALLET_ACCOUNT
      --ID_FRONT_PHOTO,
     -- ID_BACK_PHOTO
    )
    VALUES
    (
      v_First_Name,
      v_Second_Name,
      v_Last_Name,
      v_CUSTOMERNO,
      'I',
      iv_IdentificationID,
      v_IDENTIFICATIONTYPE,
      iv_EmailAddress,
      iv_CREATEDBY,
      v_CREATEDON,
      iv_APPROVEDBY,
      v_APPROVEDON,
      iv_APPROVED,
      iv_COUNTRY,
      TO_DATE(iv_DATEOFBIRTH,'YYYYMMDD'),
      iv_GENDER,
      v_TOWN,
      v_POSTALADDRESS,
      v_POSTALCODE,
      iv_BranchCode,
      iv_Channel,
      v_ACCOUNTNO
   --   iv_ID_FRONT,
   -- iv_ID_BACK
    );
  INSERT
  INTO TB_CUSTOMER_VALIDATION
    (
      CUSTOMER_NO,
      PHONE_NUMBER,
      PIN,
      FIRST_LOGIN,
      ACTIVE,
      LANG,
      IMSI,
      IMEI,
      PARTIAL_REGISTRATION
    )
    VALUES
    (
      v_CUSTOMERNO,
      iv_PHONENUMBER,
      iv_PIN,
      '1',
      '1',
      iv_LANG,
      iv_IMSI,
      iv_IMEI,
      iv_PARTIAL_REGISTRATION
    );
  ----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT *
    FROM tb_Linked_Accounts
    WHERE PhoneNumber =iv_PHONENUMBER
    AND LinkedAccount = iv_ACCOUNTNUMBER
    );
  IF(V_COUNT = 0 AND LENGTH(iv_ACCOUNTNUMBER) > 5) ---this acc is not yet linked to thies customer
    THEN
    ---LINK THE CUSTOMER ACCOUNT
    IF(iv_Channel = 'ADMIN') THEN
      SELECT Created_By,
        Created_On
      INTO v_LinkedBy,
        v_LinkedOn
      FROM tb_Customer_Migration
      WHERE Mobile_Number = iv_PHONENUMBER
      AND Account_Number  = iv_ACCOUNTNUMBER
      AND ROWNUM          =1;
      -- SELECT Created_On INTO v_LinkedOn FROM tb_Customer_Migration WHERE Mobile_Number = iv_PHONENUMBER AND Account_Number = iv_ACCOUNTNUMBER;
    ELSE
      v_LinkedBy := iv_CREATEDBY;
      v_LinkedOn := SYSTIMESTAMP;
    END IF;
    INSERT
    INTO tb_Linked_Accounts
      (
        PhoneNumber,
        National_ID,
        LinkedAccount,
        Channel,
        CBS_AccountName,
        CBS_AccountNumber,
        CBS_MobileNumber,
        CBS_National_Id,
        CBS_AccountStatus,
        CBS_CustomerID,
        Currency,
        AccountType,
        STATUS,
        Date_Linked,
        Level1Authorised,
        Level1AuthorisedBy,
        Level1AuthorisedOn,
        LinkedBy,
        LinkedOn,
        Daily_txn_limit
      )
      VALUES
      (
        iv_PHONENUMBER,
        iv_IdentificationID,
        iv_ACCOUNTNUMBER,
        iv_Channel,
        v_ACCOUNTNAME,
        iv_ACCOUNTNUMBER,
        iv_PHONENUMBER,
        iv_IdentificationID,
        iv_AccountStatus,
        iv_CustomerID,
        iv_Currency,
        iv_ACCOUNTTYPE,
        1,
        SYSTIMESTAMP,
        1,
        iv_CREATEDBY,
        SYSTIMESTAMP,
        v_LinkedBy,
        v_LinkedOn,
        iv_TxnLimitAmount
      );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  v_Resp_Code     :='01';
  v_Narration     := 'ERROR: REG - Could not register Csutomer ';
  v_Customer_No   := '';
  v_Wallet_Acc_No := '';
   OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

  ROLLBACK TO SAVEPOINT V_SAFEPOINT;
  RETURN;
END;

 BEGIN
    ---create the wallet acc where customer doesnt have a core account and wallet account not yet created
    SELECT COUNT(1)
    INTO V_COUNT
    FROM DUAL
    WHERE EXISTS
      (SELECT ACCOUNT_ID
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = v_ACCOUNTNO
      AND ROWNUM       =1
      );
    --IF(V_COUNT = 0) THEN
     IF(v_hasCoreAccount = 0 AND V_COUNT = 0) THEN
      v_MWALLETACCOUNT  := v_ACCOUNTNO;
      INSERT
      INTO TB_ACCOUNT
        (
          CUSTOMER_NO,
          ACCOUNT_NO,
          ACCOUNT_NAME,
          ACCOUNT_CLASS,
          BRANCH_ID,
          PHONE_NUMBER,
          CURRENCY,
          CREATED_BY,
          PARTIAL_REGISTRATION,
          ALLOW_CR,
          ALLOW_DR,
          Allow_Overdraft,
          DORMANT,
          OPENING_DATE,
          BLOCKED,
          STOPPED,
          IS_FROZEN,
          CHEQUE_BOOK_FACILITY,
          ATM_FACILITY,
          APPROVED_BY,
          APPROVED_ON,
          OPENING_BAL,
          last_transaction_date
        )
        VALUES
        (
          v_CUSTOMERNO,
          v_ACCOUNTNO,
          v_accountname,
          v_ACCOUNTCLASS,
          '1',--iv_branchcode
          iv_PHONENUMBER,
          iv_Currency,
          iv_CREATEDBY,
          0,
          'Y',
          'Y',
          0,
          'N',
          v_OpeningDate,
          'N',
          'N',
          'N',
          'N',
          'N',
          iv_CREATEDBY,
          v_OpeningDate,
          0,
          v_OpeningDate
        );
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
   -- RAISE;
    ROLLBACK;
    v_Resp_Code     :='01';
    v_Narration     := 'ACC - Could not create wallet account';
    v_Customer_No   := '';
    v_Wallet_Acc_No := '';
      OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

    ROLLBACK TO SAVEPOINT V_SAFEPOINT;
    RETURN;
  END;

END IF;

v_Resp_Code     :='00';
v_Narration     := 'Successful';
v_Customer_No   := v_CUSTOMERNO;
v_Wallet_Acc_No := v_ACCOUNTNO;
--OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,
v_Narration as Resp_Desc,
 '1'  as Active,
iv_PIN as Pin,
'0' as Trials,
iv_IdentificationID as Identification_Id,
iv_DATEOFBIRTH as Date_Of_Birth,
v_First_Name as First_name,
v_Second_Name as Second_name,
v_Last_Name as Last_name,
iv_PARTIAL_REGISTRATION as Partial_Registration,
v_Customer_No as Phone_number,
'0' as First_login,
iv_EmailAddress as Email_Address,
iv_GENDER as Gender,
iv_LANG as Lang,
v_Wallet_Acc_No as Mwallet_Account,
'null' as Linked_accounts,
v_Customer_No as Customer_No,
v_Wallet_Acc_No as Wallet_Acc FROM DUAL;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  --RAISE;
  ROLLBACK;
  v_Resp_Code     :='01';
  v_Narration     := 'System encountered an error while registering customer details';
  v_Customer_No   := '';
  v_Wallet_Acc_No := '';
   OPEN c_1 FOR SELECT V_Resp_Code as Resp_Code,v_Narration as Resp_Desc,v_Customer_No as Customer_No,v_Wallet_Acc_No as Wallet_Acc FROM DUAL;

  ROLLBACK TO SAVEPOINT V_SAFEPOINT;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_RESET_DATES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_RESET_DATES" 
AS
  V_PreviousWorkingDate DATE;
  V_NextWorkingDate     DATE;
  --V_NextNextWorkingDate DATE;
  V_WorkingDate        DATE;
  V_PreviousEndOfMonth DATE;
  V_EndOfMonthDate     DATE;
  V_NextEndOfMonth     DATE;
  --V_NextNextEndOfMonth DATE;
  V_EndOfYear     DATE;
  V_NextEndOfYear DATE;
  --V_NextNextEndOfYear DATE;
  V_PreviousEndOfYear DATE;
  V_FinancialPeriod NVARCHAR2(3);
  V_FinancialYear NVARCHAR2(6);
  V_COUNT           NUMBER DEFAULT 0;
  V_POST_ON_HOLIDAY NUMBER DEFAULT 0; --Posting on a holiday Allowed? 0- No, 1=Yes, depends with client
BEGIN
  BEGIN
    SELECT ITEMVALUE
    INTO V_POST_ON_HOLIDAY
    FROM TB_GENERAL_PARAMS
    WHERE ITEMNAME = 'POST_TRANS_ON_HOLIDAY'
    AND ROWNUM     =1;
    SELECT PREVIOUSWORKINGDATE,
      WorkingDate,
      NextWorkingDate ,
      EndOfMonthDate,
      NextEndOfMonth,
      EndOfYear,
      NextEndOfYear,
      PreviousEndOfYear
    INTO V_PreviousWorkingDate,
      V_WorkingDate,
      V_NextWorkingDate,
      V_EndOfMonthDate,
      V_NextEndOfMonth,
      V_EndOfYear,
      V_NextEndOfYear,
      V_PreviousEndOfYear
    FROM TB_DATE_SETTINGS;
    --START WITH INTIAL ASSIGNMENT OF VARIABLES
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '001',
        'Executing SP_EOD_RESET_DEFAULTS',
        'Error Executing SP_EOD_RESET_DEFAULTS.',
        'SP_EOD_RESET_DEFAULTS'
      );
    COMMIT;
    RETURN;
  END;
  --start eom
  IF V_EndOfMonthDate = V_WorkingDate THEN
    BEGIN
      SELECT COUNT(ID)
      INTO V_COUNT
      FROM tb_Holiday
      WHERE Holiday_Date =v_NextEndOfMonth
      AND ROWNUM         =1;
      IF V_COUNT         > 0 AND V_POST_ON_HOLIDAY = 0 THEN
        v_NextEndOfMonth:=v_NextEndOfMonth+1;
      ELSE
        V_COUNT:=0;
      END IF;
      V_FinancialPeriod := FN_FORMAT_DATE(V_NextEndOfMonth,'MM');
      -- V_FinancialPeriod    := 'M'||V_FinancialPeriod;
      V_PreviousEndOfMonth := V_EndOfMonthDate;
      V_EndOfMonthDate     :=V_NextEndOfMonth;
      V_NextEndOfMonth     :=ADD_MONTHS(V_NextEndOfMonth,1);
      UPDATE TB_DATE_SETTINGS
      SET PREVIOUSENDOFMONTH = V_PreviousEndOfMonth,
        ENDOFMONTHDATE       = V_EndOfMonthDate,
        NEXTENDOFMONTH       = V_NextEndOfMonth,
        FINANCIALPERIOD      =V_FinancialPeriod;
      UPDATE TB_GL_BALANCE SET FINANCIAL_PERIOD = V_FinancialPeriod;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      INSERT
      INTO TB_EOD_ACTIVITY
        (
          CODE,
          ACTIVITY,
          DESCRIPTION,
          SP_NAME
        )
        VALUES
        (
          '002',
          'Error Update the default month dates',
          'Error Update the default month dates in A_SP_RESET_DATES',
          'A_SP_RESET_DATES'
        );
      COMMIT;
      RETURN;
    END;
  END IF;
  -- end eom
  --start eoy
  IF V_EndOfYear = V_WorkingDate THEN
    BEGIN
      SELECT COUNT(ID)
      INTO V_COUNT
      FROM tb_Holiday
      WHERE Holiday_Date =v_NextEndOfMonth
      AND ROWNUM         =1;
      IF V_COUNT         > 0 AND V_POST_ON_HOLIDAY = 0 THEN
        V_NextEndOfYear :=V_NextEndOfYear+1;
      ELSE
        V_COUNT:=0;
      END IF;
      V_FinancialYear :=FN_FORMAT_DATE(V_NextEndOfYear,'YYYY');
      -- V_FinancialYear     := 'FY'||V_FinancialYear;
      V_PreviousEndOfYear :=V_EndOfYear;
      V_EndOfYear         :=V_NextEndOfYear;
      V_NextEndOfYear     := ADD_MONTHS(V_NextEndOfYear,12);
      UPDATE TB_DATE_SETTINGS
      SET PREVIOUSENDOFYEAR = V_PreviousEndOfYear,
        ENDOFYEAR           = V_EndOfYear,
        NEXTENDOFYEAR       = V_NextEndOfYear,
        FinancialYear       =V_FinancialYear;
      UPDATE TB_GL_BALANCE SET FINANCIAL_CYCLE=V_FinancialYear;
    EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      INSERT
      INTO TB_EOD_ACTIVITY
        (
          CODE,
          ACTIVITY,
          DESCRIPTION,
          SP_NAME
        )
        VALUES
        (
          '002',
          'Error Update the default yearly dates',
          'Error Update the default yearly dates in A_SP_RESET_DATES',
          'A_SP_RESET_DATES'
        );
      COMMIT;
      RETURN;
    END;
  END IF;
  -- end eoy
  -- these will be the default settings for each of the working days
  BEGIN
    V_PreviousWorkingDate :=V_WorkingDate;
    V_WorkingDate         := V_NextWorkingDate;
    V_NextWorkingDate     :=V_NextWorkingDate+1;
    SELECT COUNT(ID)
    INTO V_COUNT
    FROM tb_Holiday
    WHERE Holiday_Date  =V_NextWorkingDate
    AND ROWNUM          =1;
    IF V_COUNT          > 0 AND V_POST_ON_HOLIDAY = 0 THEN
      V_NextWorkingDate:=V_NextWorkingDate+1;
    ELSE
      V_COUNT:=0;
    END IF;
    UPDATE TB_DATE_SETTINGS
    SET previousworkingdate = V_PreviousWorkingDate,
      workingdate           = V_WorkingDate,
      nextworkingdate       = V_NextWorkingDate;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    INSERT
    INTO TB_EOD_ACTIVITY
      (
        CODE,
        ACTIVITY,
        DESCRIPTION,
        SP_NAME
      )
      VALUES
      (
        '002',
        'Error Update the default yearly dates',
        'Error Update the default yearly dates in A_SP_RESET_DATES',
        'A_SP_RESET_DATES'
      );
    COMMIT;
    RETURN;
  END;
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  INSERT
  INTO TB_EOD_ACTIVITY
    (
      CODE,
      ACTIVITY,
      DESCRIPTION,
      SP_NAME
    )
    VALUES
    (
      '002',
      'Error Update the default daily dates',
      'Error Update the default daily dates in A_SP_RESET_DATES',
      'A_SP_RESET_DATES'
    );
  COMMIT;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_REST_CALL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_REST_CALL" AS 


  

req utl_http.req;
res utl_http.resp;

 url varchar2(200) := 'http://10.229.119.221:8585/ebankdb/db-api/execute-operation';
 
payload varchar2(1000) :='{
    "query":"GET_CUSTOMER_COMPLIANCE_INFORMATION",
    "data":{
       "PAGE":0,
       "SIZE":10,
       "CUSTOMER_ID":3674
    }
}'; 
 
BEGIN

                              
  req := utl_http.begin_request(url, 'POST',' HTTP/1.1');
  utl_http.set_header(req, 'user-agent', 'mozilla/4.0'); 
  utl_http.set_header(req, 'content-type', 'application/json'); 
  utl_http.set_header(req, 'Content-Length', length(payload));
  
  utl_http.write_text(req, payload);
  res := utl_http.get_response(req);
  
END A_SP_REST_CALL;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_ACTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_ACTION" (
    IV_req_type            IN VARCHAR2,
    IV_created_by          IN VARCHAR2,
    IV_destination_address IN VARCHAR,
    IV_data                IN VARCHAR2,
    IV_unique_identifier   IN VARCHAR2,
    C_1                    IN OUT SYS_REFCURSOR)
AS
  --,_original_id         IN VARCHAR2 DEFAULT ''
  V_workflow_id       NUMBER:=0;--select ID from tb_data_workflow--9
  V_current_action_id NUMBER:=0;--select ID from tb_data_workflow_action where work_flow_id = 9
  V_count             NUMBER:=0;
BEGIN
  BEGIN
    SELECT COUNT(ID)
    INTO V_count
    FROM TB_DATA_WORKFLOW
    WHERE ADDRESS_NAME = TRIM(LOWER(IV_destination_address))
    AND ROWNUM =1;
    IF V_count < 1 THEN
      OPEN C_1 FOR SELECT '01' AS RESP_CODE, 'Action not available in workflow' AS RESP_DESC FROM dual;
      RETURN;
    END IF;
    SELECT ID
    INTO V_workflow_id
    FROM TB_DATA_WORKFLOW
    WHERE ADDRESS_NAME = TRIM(LOWER(IV_destination_address))
    AND ROWNUM=1;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
    OPEN C_1 FOR SELECT '57' AS RESP_CODE,'Error while fetching workflow_id' AS RESP_DESC FROM dual;
    RETURN;
  END;
BEGIN
  SELECT COUNT(ID)
  INTO V_count
  FROM TB_DATA_WORKFLOW_ACTION
  WHERE WORKFLOW_ID = V_workflow_id
  AND ROWNUM        =1;
  SELECT ID
  INTO V_current_action_id
  FROM TB_DATA_WORKFLOW_ACTION
  WHERE WORKFLOW_ID = V_workflow_id
  --AND IS_FINAL =0
  AND ROWNUM        =1;
  IF V_count        < 1 THEN
    OPEN C_1 FOR SELECT '02' AS RESP_CODE, 'CurrentActionID Not found' AS RESP_DESC FROM dual;
    RETURN;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  OPEN C_1 FOR SELECT '57' AS  RESP_CODE,  'Error while fetching CurrentID' AS RESP_DESC FROM dual;
  RETURN;
END;
BEGIN
  SELECT COUNT(1)
  INTO V_count
  FROM DUAL
  WHERE EXISTS
    (SELECT ID
    FROM TB_STAGING_ACTION
    WHERE ORIGINAL_ID =IV_unique_identifier
    AND REQ_TYPE      = IV_req_type 
    AND IS_APPROVED = 0
     AND IS_REJECTED = 0
  --  AND
  --  ROWNUM=1
    AND IV_destination_address NOT IN 
    ('profile_management_add_roles_profile','users_block_user',
    'users_unblock_user','users_reset_password', 'configuration_create_charge',
    'create_gl_definition', 'create_biller_mapping','create_gl_mapping')
    );
  IF V_count > 0 THEN
    OPEN C_1 FOR SELECT '03'  AS    RESP_CODE, 'Record Exists - Duplicates not Allowed'  AS    RESP_DESC FROM dual;    
    RETURN;
  END IF;
  INSERT
  INTO TB_STAGING_ACTION
    (
      CREATED_BY,
      DESTINATION_ADDRESS,
      WORKFLOW_ID,
      DATA,
      CURRENT_ACTION_ID,
      ORIGINAL_ID,
      REQ_TYPE
    )
    VALUES
    (
      IV_created_by,
      IV_destination_address,
      V_workflow_id,
      REPLACE(TRIM(IV_data),'\',''),
      V_current_action_id,
      IV_unique_identifier,
      IV_req_type
    );
EXCEPTION
WHEN OTHERS THEN
  OPEN C_1 FOR SELECT '57' AS RESP_CODE,'Error Inserting into TB_STAGING_ACTION' AS  RESP_DESC FROM dual;
  RETURN;
END;
OPEN C_1 FOR SELECT '00' AS  RESP_CODE,  'Staging Successful' AS  RESP_DESC FROM dual;
  COMMIT;
  RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APPROVAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APPROVAL" (
    IV_req_type            IN VARCHAR2,
    IV_staging_id          IN VARCHAR2,
    IV_approved_by         IN VARCHAR2,
    IV_remarks             IN VARCHAR2,
    IV_destination_address IN VARCHAR,
    IV_additional_info     IN varchar2 DEFAULT '',
    C_1                    IN OUT SYS_REFCURSOR)
AS
  V_original_unqueID NVARCHAR2(50):='';--select ID from tb_data_workflow--9
  V_count   NUMBER                  :=0;
  V_approve NUMBER                  :=1;
  V_data    VARCHAR2(2000);
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_destination_address));
  V_type_request NVARCHAR2(50):='';
BEGIN
SAVEPOINT V_SAFEPOINT;

IF IV_destination_address = 'update_customer_compliance_details' THEN

      dbms_output.put_line('processing update_customer_compliance_details');
      A_SP_STAGING_CUST_COMP (IV_staging_id , IV_additional_info, C_1);
      RETURN;
 END IF;


  
  SELECT COUNT(1)
  INTO V_count
  FROM TB_STAGING_ACTION
  WHERE ID                  = IV_staging_id
  AND ROWNUM                =1
  AND (IS_APPROVED          =0
  OR IV_destination_address = 'profile_management_revoke_profile');-- Can be
  IF V_count                < 1 THEN
    OPEN C_1 FOR SELECT '01' AS RESP_CODE,'Record Not Found' AS RESP_DESC FROM dual;
    RETURN;
  END IF;
  SELECT DATA,
    REQ_TYPE,
    ORIGINAL_ID
  INTO V_data,
    V_type_request,
    V_original_unqueID
  FROM TB_STAGING_ACTION
  WHERE ID                  = IV_staging_id
  AND ROWNUM                =1
  AND (IS_APPROVED          =0
  OR IV_destination_address = 'profile_management_revoke_profile');
  
  
BEGIN
  IF IV_req_type = 'approve' THEN
    CASE
    WHEN V_type_request IN ('create_user','create_profile','create_role', 'delete_role','edit_role','edit_profile','delete_profile',
    'assign_profile','revoke_profile','block_user','unblock_user','reset_password','edit_user','delete_user') THEN
      BEGIN
        A_SP_STAGING_APRV_USR_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '02' AS RESP_CODE, 'Failed while updating users table' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
      -------the below update for the customer module is used to block cr and dr because tbe V_original_uniqueID sent is 
      ------- an account number and not the customer number...
       WHEN V_type_request IN ('block_cr','block_dr','unblock_dr', 'unblock_cr') THEN
      BEGIN
        A_SP_STAGING_APRV_CUST_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '02' AS RESP_CODE, 'Failed while updating accounts table' AS RESP_DESC FROM dual;
        RETURN;
      END;
      ---------creation of saccos----
      WHEN V_type_request IN ('create_sacco') THEN
      BEGIN
        A_SP_STAGING_APRV_SACCO_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '02' AS RESP_CODE, 'Failed while updating accounts table' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
   ----------- end of block cr / block dr -------------------------------
    WHEN V_type_request IN ('unblock_customer','block_customer',
    'update_imei','reset_pin','update_imsi', 'edit_customer') THEN
      IF(FN_CHECK_CUSTOMER(V_original_unqueID)) > 0 THEN
        A_SP_STAGING_APRV_CUST_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      ELSE
        OPEN C_1 FOR SELECT '03' AS RESP_CODE,'Customer Not Found' AS RESP_DESC FROM dual;
        RETURN;
      END IF;
      WHEN V_type_request IN ('close_account') THEN ---handles both close wallet and  locksavnigs  accounts
      IF(FN_CHECK_CUSTOMER(V_original_unqueID)) > 0 THEN
        A_SP_ARCHIVE_CLOSED_ACCOUNT(V_original_unqueID,IV_approved_by, IV_staging_id);
      ELSE
        OPEN C_1 FOR SELECT '03' AS RESP_CODE,'Customer Not Found' AS RESP_DESC FROM dual;
        RETURN;
      END IF;
    WHEN V_type_request IN ('create_agent_category','edit_agent_category','create_super_agent','create_agent',
    'device_linking','agent_device_linking','edit_agents','delete_agent','delete_agent_category','delete_super_agent','edit_super_agent','create_outlet',
    'edit_agent_outlet','delete_agent_outlet','edit_outlet_operator','create_operator','delete_outlet_operator',
    'create_device','edit_device','unblock_pin_agent','block_pin_agent','delete_device','delink_agent_device','reset_agent_password','reset_agent_pin',
    'unblock_agent','block_agent') THEN
      A_SP_STAGING_APRV_AGENT_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
    WHEN  V_type_request  IN ('add_roles_profile') THEN
     V_approve:=1;
    
    WHEN V_type_request IN ('create_services','enable_disable_service','delete_service','edit_services','create_biller_mapping',
    'edit_biller_mapping','create_charge', 'edit_charge', 'create_gl_mapping', 'edit_gl_mapping', 'create_gl_definition',
    'edit_gl_definition', 'delete_gl_definition', 'delete_gl_mapping', 'delete_gl','create_general_parameter','edit_general_parameter',
    'delete_general_parameter','create_gl','create_charge_range','edit_charge_range','delete_charge_range') THEN
    
      A_SP_STAGING_APRV_TRXNS_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      
    WHEN V_type_request IN ('create_sms', 'edit_sms_notification','create_email_template','edit_email_template') THEN ---handles configs
      BEGIN
        A_SP_STAGING_APRV_CONFIG_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating SMS/Email template' AS RESP_DESC FROM dual;
        RETURN;
      END;  
      
      WHEN V_type_request IN ('create_merchant', 'edit_merchant', 'delete_merchant','create_merchant_outlet' ,'edit_merchant_outlet', 
      'delete_merchant_outlet', 'reset_merchant_pwd', 'create_merchant_deals', 'edit_merchant_deal', 'delete_merchant_deal') THEN ---handles merchants module
      BEGIN
        A_SP_STAGING_APRV_MERCHANTS_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating  Merchant' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
       WHEN V_type_request IN ('create_issue', 'edit_issue', 'delete_issue', 'create_category', 'edit_category') THEN ---handles merchants module
      BEGIN
        A_SP_STAGING_APRV_ISSUES_MODULE(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating  issues' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
       WHEN V_type_request IN ('create_user_institution','edit_user_institution') THEN ---handles institution module
      BEGIN
        A_SP_STAGING_APRV_USR_INST(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating  Institution' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
      -----LOYALITY POINTS START ------------------
      
       WHEN V_type_request IN ('create_loyality_points','update_loyality_points') THEN ---handles institution module
      BEGIN
        A_SP_STAGING_APRV_LYT_PNTS(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating  Institution' AS RESP_DESC FROM dual;
        RETURN;
      END;
      
      -------- LOYALITY POINTS ENDING ---------------
    
     WHEN V_type_request IN ('create_institution','edit_institution','delete_institution','create_institution_type',
     'edit_institution_type','delete_institution_type') THEN ---handles institution module
      BEGIN
        A_SP_STAGING_APPRV_INSTITUTION(IV_staging_id,IV_approved_by,IV_remarks,V_type_request,IV_additional_info);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        V_approve:=0;
        ROLLBACK;
        OPEN C_1 FOR SELECT '04' AS RESP_CODE, 'Failed while /creating/updating  Institution' AS RESP_DESC FROM dual;
        RETURN;
      END;
    ELSE
      V_approve:=0;
    END CASE;
  BEGIN
    UPDATE TB_STAGING_ACTION
    SET IS_APPROVED = 1,
      APPROVED_BY   =IV_approved_by,
      APPROVED_ON   = SYSTIMESTAMP
    WHERE ID        = IV_staging_id
    AND ROWNUM      =1
    AND V_approve   = 1;
  EXCEPTION
  WHEN OTHERS THEN
    V_approve:=0;
    RAISE;
    ROLLBACK;
    OPEN C_1 FOR SELECT '04' AS RESP_CODE,'Failed while updating Staging table' AS RESP_DESC FROM dual;
    RETURN;
  END;
ELSIF IV_req_type = 'reject' THEN
  UPDATE TB_STAGING_ACTION
  SET IS_REJECTED = 1,
    REJECTED_BY   =IV_approved_by,
    APPROVED_ON   = SYSTIMESTAMP
  WHERE ID        = IV_staging_id
  AND ROWNUM      =1
  AND V_approve   = 1;
END IF;
BEGIN---UPDATE TB_STAGING_COMMENTS
  INSERT
  INTO TB_STAGING_COMMENTS
    (
      STAGING_ID,
      CREATED_BY,
      WORKFLOW_COMMENT
    )
    VALUES
    (
      IV_staging_id,
      IV_approved_by,
      IV_remarks
    );
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  V_approve:=0;
  ROLLBACK;
  OPEN C_1 FOR SELECT '05' AS RESP_CODE,'Error while Saving remarks on staging_comments table'
AS
  RESP_DESC FROM dual;
  RETURN;
END;
END;
BEGIN
  IF V_type_request NOT IN ('add_roles_profile','txn_reversal') THEN
    V_data:='{}';
  END IF;
  IF V_approve = 1 THEN
    OPEN C_1 FOR SELECT '00' AS RESP_CODE,'Approval Success' AS RESP_DESC,V_data AS DATA FROM dual;
    RETURN;
    COMMIT;
  ELSE
    OPEN C_1 FOR SELECT '57' AS RESP_CODE,'General unhandled Error occured' AS RESP_DESC FROM dual;
    RETURN;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
END;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APPRV_INSTITUTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APPRV_INSTITUTION" (
 IV_staging_id          IN VARCHAR2,
 IV_approved_by         IN VARCHAR2,
 IV_remarks             IN VARCHAR2,
 IV_type_request IN VARCHAR,
 IV_additiona_info      IN VARCHAR2 DEFAULT '') AS 
 
 
V_INSTITUTION_CODE NVARCHAR2(50):= '';
V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
CV_1 SYS_REFCURSOR;
BEGIN
  CASE
    WHEN V_destination_address = 'create_institution' THEN

    BEGIN
      V_INSTITUTION_CODE := FN_Get_Series('INST',1);
       MERGE INTO TB_INSTITUTIONS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 
--            AND
--            ROWNUM = 1
            ) s1 ON (t1.INSTITUTION_CODE = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.INSTITUTION_NAME = JSON_VALUE(s1.DATA,'$.institution_name'),
              t1.CONTACT_NAME = JSON_VALUE(s1.DATA,'$.contact_name'),
              t1.INSTITUTION_ACCOUNT = JSON_VALUE(s1.DATA,'$.institution_account'),
              t1.PHONE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
              t1.EMAIL = JSON_VALUE(s1.DATA,'$.email'),
              t1.INSTITUTION_TYPE = JSON_VALUE(s1.DATA,'$.institution_type_code'),
              t1.INSTITUTION_ADDRESS =  JSON_VALUE(s1.DATA,'$.institution_address'),
              t1.SERVICE_FEE_BEARER =  JSON_VALUE(s1.DATA,'$.service_fee_bearer'),
              t1.TRANSACTION_FEE =  JSON_VALUE(s1.DATA,'$.transaction_fee'),
              t1.CREDIT_LIMIT =  JSON_VALUE(s1.DATA,'$.credit_limit'),
              t1.IMAGE_PATH =  JSON_VALUE(s1.DATA,'$.image_path'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.INSTITUTION_CODE = s1.ORIGINAL_ID 
              --AND  ROWNUM = 1

        WHEN NOT MATCHED   THEN
            INSERT (INSTITUTION_NAME,CONTACT_NAME,INSTITUTION_ACCOUNT, PHONE_NUMBER,EMAIL, 
            CREATED_BY, CREATED_ON,APPROVED, APPROVED_BY, APPROVED_ON , INSTITUTION_CODE, INSTITUTION_TYPE,
            t1.INSTITUTION_ADDRESS,t1.SERVICE_FEE_BEARER,t1.TRANSACTION_FEE,t1.CREDIT_LIMIT,t1.IMAGE_PATH) 
            VALUES(
            JSON_VALUE(s1.DATA,'$.institution_name'),
            JSON_VALUE(s1.DATA,'$.contact_name'),
            JSON_VALUE(s1.DATA,'$.institution_account'),
            JSON_VALUE(s1.DATA,'$.phone_number'),
            JSON_VALUE(s1.DATA,'$.email'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            1,
            IV_approved_by,
            SYSTIMESTAMP,
            V_INSTITUTION_CODE,
            JSON_VALUE(s1.DATA,'$.institution_type_code'),
            JSON_VALUE(s1.DATA,'$.institution_address'),
            JSON_VALUE(s1.DATA,'$.service_fee_bearer'),
            JSON_VALUE(s1.DATA,'$.transaction_fee'),
            JSON_VALUE(s1.DATA,'$.credit_limit'),
            JSON_VALUE(s1.DATA,'$.image_path')
            );
            A_SP_CREATE_INSTITUTION_ACC(V_INSTITUTION_CODE,CV_1);
           EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'edit_institution' THEN
    BEGIN
        MERGE INTO TB_INSTITUTIONS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.INSTITUTION_NAME = JSON_VALUE(s1.DATA,'$.institution_name'),
              t1.CONTACT_NAME = JSON_VALUE(s1.DATA,'$.contact_name'),
              t1.INSTITUTION_ACCOUNT = JSON_VALUE(s1.DATA,'$.institution_account'),
              t1.PHONE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
              t1.EMAIL = JSON_VALUE(s1.DATA,'$.email'),
              t1.INSTITUTION_ADDRESS =  JSON_VALUE(s1.DATA,'$.institution_address'),
              t1.SERVICE_FEE_BEARER =  JSON_VALUE(s1.DATA,'$.service_fee_bearer'),
              t1.TRANSACTION_FEE =  JSON_VALUE(s1.DATA,'$.transaction_fee'),
              t1.CREDIT_LIMIT =  JSON_VALUE(s1.DATA,'$.credit_limit'),
              t1.IMAGE_PATH =  JSON_VALUE(s1.DATA,'$.image_path'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

      WHEN V_destination_address = 'delete_institution' THEN
    BEGIN
        MERGE INTO TB_INSTITUTIONS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.APPROVED = 1,
              t1.DELETED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.DELETED_ON  = s1.CREATED_ON,
              t1.DELETED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID ;
              
              -- delete all users present in the institution
              
              -- suspend the account being transacted by the insitution
              
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

      WHEN V_destination_address = 'create_institution_type' THEN

      BEGIN
      V_INSTITUTION_CODE := FN_Get_Series('INST',1);
       MERGE INTO TB_INSTITUTION_TYPES t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.INSTITUTION_TYPES = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 

              t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.INSTITUTION_TYPES = s1.ORIGINAL_ID AND  ROWNUM = 1

        WHEN NOT MATCHED   THEN
            INSERT (INSTITUTION_TYPES,DESCRIPTION, 
            CREATED_BY, CREATED_ON,APPROVED, APPROVED_BY, APPROVED_ON) 
            VALUES(
            JSON_VALUE(s1.DATA,'$.institution_type'),
            JSON_VALUE(s1.DATA,'$.description'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            1,
            IV_approved_by,
            SYSTIMESTAMP
            );
           EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'edit_institution_type' THEN
    BEGIN
        MERGE INTO TB_INSTITUTION_TYPES t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.INSTITUTION_TYPES = JSON_VALUE(s1.DATA,'$.institution_type'),
              t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID ;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      
      --- delete institution_type
      
        WHEN V_destination_address = 'delete_institution_type' THEN
    BEGIN
        MERGE INTO TB_INSTITUTION_TYPES t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.DELETED = 1,
              t1.DELETED_ON = SYSTIMESTAMP,
              t1.DELETED = s1.CREATED_ON,
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID ;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      

  END CASE;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_AGENT_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_AGENT_MODULE" (
    IV_staging_id          IN VARCHAR2,
    IV_approved_by         IN VARCHAR2,
    IV_remarks             IN VARCHAR2,
    IV_type_request IN VARCHAR,
    IV_additiona_info      IN VARCHAR2 DEFAULT '')
AS
-- NONEDITIONABLE
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  V_POS_ID NVARCHAR2(20)             :='';
  V_MWALLET_ACCOUNT NVARCHAR2(20)    :='';
  V_COMM_ACCOUNT NVARCHAR2(20)       := '';
  V_AGENT_ID NUMBER(18)                 :=0;
  V_CREATED_BY NVARCHAR2(50)         :='';
  V_DEVICE_MOBILE NVARCHAR2(50)      :='';
  V_AGENT_CODE NVARCHAR2(50)          :='';
 V_SMS NVARCHAR2(200)       :='';
  V_OTP NVARCHAR2(20):= '1234';
   CV_1 SYS_REFCURSOR;

   V_DEVICE_LINKING_ID NUMBER(18) :=0;
   V_PAN_CODE NVARCHAR2(50) := '';
  
BEGIN
  BEGIN
    CASE
    WHEN V_destination_address = 'create_agent_category' THEN
      BEGIN
        MERGE INTO TB_AGENT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                         = IV_staging_id
        AND IS_APPROVED                  = 0
        AND ROWNUM                       =1
        ) s1 ON (t1.CATEGORY_DESCRIPTION = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.FLOAT_THRESHOLD           = JSON_VALUE(s1.DATA,'$.float_threshold'),
          t1.FLOAT_FROM                  = JSON_VALUE(s1.DATA,'$.float_from'),
          t1.FLOAT_TO                    = JSON_VALUE(s1.DATA,'$.float_to'),
          t1.NO_OF_AGENTS_FROM           = JSON_VALUE(s1.DATA,'$.no_of_agents_from'),
          t1.NO_OF_AGENTS_TO             = JSON_VALUE(s1.DATA,'$.no_of_agents_to'),
          t1.NO_OF_REGIONS_FROM          = JSON_VALUE(s1.DATA,'$.float_threshold'),
          t1.NO_OF_REGIONS_TO            = JSON_VALUE(s1.DATA,'$.no_of_regions_to'),
          t1.COMMISSION                  = JSON_VALUE(s1.DATA,'$.commission'),
          t1.COMMISSION_PAYMENT_INTERVAL = JSON_VALUE(s1.DATA,'$.commission_payment_interval'),
          t1.REMARKS                     = JSON_VALUE(s1.DATA,'$.remark'),
          t1.REWORKED_ON                 = s1.CREATED_ON,
          t1.REWORKED_BY                 = s1.CREATED_BY,
          t1.APPROVED_BY                 = IV_approved_by,
          t1.APPROVED_ON                 = SYSTIMESTAMP
        WHERE (t1.CATEGORY_DESCRIPTION   = s1.ORIGINAL_ID)
        AND ROWNUM                       =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            CATEGORY_DESCRIPTION,
            FLOAT_THRESHOLD,
            FLOAT_FROM,
            FLOAT_TO,
            NO_OF_AGENTS_FROM,
            NO_OF_AGENTS_TO,
            NO_OF_REGIONS_FROM,
            NO_OF_REGIONS_TO,
            COMMISSION,
            COMMISSION_PAYMENT_INTERVAL,
            REMARKS,
            CREATED_ON,
            CREATED_BY,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.agent_category'),
            JSON_VALUE(s1.DATA,'$.float_threshold'),
            JSON_VALUE(s1.DATA,'$.float_from'),
            JSON_VALUE(s1.DATA,'$.float_to'),
            JSON_VALUE(s1.DATA,'$.no_of_agents_from'),
            JSON_VALUE(s1.DATA,'$.no_of_agents_to'),
            JSON_VALUE(s1.DATA,'$.no_of_regions_from'),
            JSON_VALUE(s1.DATA,'$.no_of_regions_to'),
            JSON_VALUE(s1.DATA,'$.commission'),
            JSON_VALUE(s1.DATA,'$.commission_payment_interval'),
            JSON_VALUE(s1.DATA,'$.remark'),
            s1.CREATED_ON,
            s1.CREATED_BY,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
        ------------------------------EDIT AGENT CATEGORY -------------------------------

    WHEN V_destination_address = 'edit_agent_category' THEN
      BEGIN
        MERGE INTO TB_AGENT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                         = IV_staging_id
        AND IS_APPROVED                  = 0
        AND ROWNUM                       =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.FLOAT_THRESHOLD           = JSON_VALUE(s1.DATA,'$.float_threshold'),
          t1.FLOAT_FROM                  = JSON_VALUE(s1.DATA,'$.float_from'),
          t1.FLOAT_TO                    = JSON_VALUE(s1.DATA,'$.float_to'),
          t1.NO_OF_AGENTS_FROM           = JSON_VALUE(s1.DATA,'$.no_of_agents_from'),
          t1.NO_OF_AGENTS_TO             = JSON_VALUE(s1.DATA,'$.no_of_agents_to'),
          t1.NO_OF_REGIONS_FROM          = JSON_VALUE(s1.DATA,'$.float_threshold'),
          t1.NO_OF_REGIONS_TO            = JSON_VALUE(s1.DATA,'$.no_of_regions_to'),
          t1.COMMISSION                  = JSON_VALUE(s1.DATA,'$.commission'),
          t1.COMMISSION_PAYMENT_INTERVAL = JSON_VALUE(s1.DATA,'$.commission_payment_interval'),
          t1.REMARKS                     = JSON_VALUE(s1.DATA,'$.remark'),
          t1.REWORKED_ON                 = s1.CREATED_ON,
          t1.REWORKED_BY                 = s1.CREATED_BY,
          t1.APPROVED_BY                 = IV_approved_by,
          t1.APPROVED_ON                 = SYSTIMESTAMP
        WHERE (t1.ID   = s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    ------------------------------END EDIT AGENT CATEGORY ---------------------------
    
         ------------------------------DELETE AGENT CATEGORY -------------------------------
    WHEN V_destination_address = 'delete_agent_category' THEN
      BEGIN
        MERGE INTO TB_AGENT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                         = IV_staging_id
        AND IS_APPROVED                  = 0
        AND ROWNUM                       =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET
          t1.DELETED_REMARKS             = JSON_VALUE(s1.DATA,'$.remark'),
          t1.DELETED                     = 1,
          t1.DELETED_BY                  = s1.CREATED_BY,
          t1.APPROVED_BY                 = IV_approved_by,
          t1.DELETED_ON                  = SYSTIMESTAMP
        WHERE (t1.ID   = s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    ------------------------------END DELETE AGENT CATEGORY ---------------------------

    WHEN V_destination_address = 'create_super_agent' THEN
      BEGIN
        MERGE INTO TB_SUPER_AGENT t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.BUSINESS_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.NAMES               = JSON_VALUE(s1.DATA,'$.fullname'),
          t1.PHYSICAL_ADDRESS      = JSON_VALUE(s1.DATA,'$.physical_address'),
          t1.CONTACT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
          t1.LOCATION              = JSON_VALUE(s1.DATA,'$.location'),
          t1.COMMISSIONS           = JSON_VALUE(s1.DATA,'$.commissions'),
          t1.NO_OF_AGENTS          = JSON_VALUE(s1.DATA,'$.no_of_agents'),
          t1.FLOAT_THRESHOLD       = JSON_VALUE(s1.DATA,'$.float_threshold'),
          t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remark'),
          t1.REWORKED_ON           = s1.CREATED_ON,
          t1.REWORKED_BY           = s1.CREATED_BY,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE (t1.BUSINESS_NAME    = s1.ORIGINAL_ID)
        AND ROWNUM                 =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            NAMES,
            PHYSICAL_ADDRESS,
            BUSINESS_NAME,
            CONTACT_MOBILE_NUMBER,
            LOCATION,
            CREATED_BY,
            CREATED_ON,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON,
            REMARKS,
            COMMISSIONS,
            NO_OF_AGENTS,
            NO_OF_REGIONS,
            FLOAT_THRESHOLD,
            CATEGORY_ID
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.fullname'),
            JSON_VALUE(s1.DATA,'$.physical_address'),
            JSON_VALUE(s1.DATA,'$.businessname'),
            JSON_VALUE(s1.DATA,'$.mobile_number'),
            JSON_VALUE(s1.DATA,'$.location'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            1,
            IV_approved_by,
            SYSTIMESTAMP,
            JSON_VALUE(s1.DATA,'$.remark'),
            JSON_VALUE(s1.DATA,'$.commissions'),
            JSON_VALUE(s1.DATA,'$.no_of_agents'),
            JSON_VALUE(s1.DATA,'$.no_of_regions'),
            JSON_VALUE(s1.DATA,'$.float_threshold'),
            1
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
        ----------------------------- START EDIT SUPER AGENT -----------------------------

     WHEN V_destination_address = 'edit_super_agent' THEN
          BEGIN
            MERGE INTO TB_SUPER_AGENT t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.ID = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET t1.NAMES               = JSON_VALUE(s1.DATA,'$.fullname'),
              t1.PHYSICAL_ADDRESS      = JSON_VALUE(s1.DATA,'$.physical_address'),
              t1.BUSINESS_NAME         = JSON_VALUE(s1.DATA,'$.businessname'),
              t1.CONTACT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
              t1.LOCATION              = JSON_VALUE(s1.DATA,'$.location'),
              t1.COMMISSIONS           = JSON_VALUE(s1.DATA,'$.commissions'),
              t1.NO_OF_AGENTS          = JSON_VALUE(s1.DATA,'$.no_of_agents'),
              t1.FLOAT_THRESHOLD       = JSON_VALUE(s1.DATA,'$.float_threshold'),
              t1.NO_OF_REGIONS       = JSON_VALUE(s1.DATA,'$.no_of_regions'),
              t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remark'),
              t1.REWORKED_ON           = s1.CREATED_ON,
              t1.REWORKED_BY           = s1.CREATED_BY,
              t1.APPROVED_BY           = IV_approved_by,
              t1.APPROVED_ON           = SYSTIMESTAMP
            WHERE (t1.ID    = s1.ORIGINAL_ID);
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
      END;
    -------------------------------- END EDIT SUPER AGENT -------------------------------
    
       ----------------------------- START DELETE SUPER AGENT -----------------------------

     WHEN V_destination_address = 'delete_super_agent' THEN
          BEGIN
            MERGE INTO TB_SUPER_AGENT t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.ID = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET 
              t1.DELETED_REMARKS               = JSON_VALUE(s1.DATA,'$.remark'),
              t1.DELETED              =1,
              t1.DELETED_BY           = s1.CREATED_BY,
              t1.APPROVED_BY           = IV_approved_by,
              t1.DELETED_ON           = SYSTIMESTAMP
            WHERE (t1.ID    = s1.ORIGINAL_ID);
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
      END;
    -------------------------------- END DELETE SUPER AGENT -------------------------------
    
    WHEN V_destination_address = 'create_agent' THEN
      BEGIN
      
      V_AGENT_CODE := FN_Get_Series('204',1);
  --    V_AGENT_CODE := FN_Get_Series('204',1);
      V_PAN_CODE := FN_Get_Series('548757',1);
    
      A_SP_GET_AGENT_ACCOUNT('204',V_AGENT_CODE,V_MWALLET_ACCOUNT); -- float account
      A_SP_GET_AGENT_ACCOUNT('206',V_AGENT_CODE,V_COMM_ACCOUNT);
      -- create float account and commission account from the agent_code provided
      
        MERGE INTO TB_AGENTS t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
         -- AND ROWNUM      =1
        )
        s1 ON (t1.BUSINESS_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.AGENT_NAMES = JSON_VALUE(s1.DATA,'$.agent_names'),
          t1.LOCATION              = JSON_VALUE(s1.DATA,'$.region'),
          t1.EMAIL                 = JSON_VALUE(s1.DATA,'$.email_address'),
          t1.ID_NUMBER             = JSON_VALUE(s1.DATA,'$.location'),
          t1.BUSINESSMOBILE        = JSON_VALUE(s1.DATA,'$.commissions'),
          t1.FIRST_NAME            = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.SECOND_NAME           = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.LAST_NAME             = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.CONTACT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.contact_mobile_number'),
          t1.COMMISSION_ACCOUNT    = JSON_VALUE(s1.DATA,'$.commission_account'),
          t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remark'),
          t1.PASS_KEY              = IV_additiona_info,
          t1.SUPER_AGENT               = JSON_VALUE(s1.DATA,'$.super_agent'),
    --      t1.AGENT_CODE            = V_AGENT_CODE,  
          t1.REWORKED_ON           = s1.CREATED_ON,
          t1.REWORKED_BY           = s1.CREATED_BY,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP,
          t1.BANK_ACCOUNT_NUMBER  = JSON_VALUE(s1.DATA,'$.account_number'),
          t1.ACCOUNT_NAME = JSON_VALUE(s1.DATA,'$.account_name'),
          t1.BANK_NAME  = JSON_VALUE(s1.DATA,'$.bank_name'),
          t1.BANK_CODE  = JSON_VALUE(s1.DATA,'$.bank_code'),
          t1.BANK_ACCOUNT_ON_US  = JSON_VALUE(s1.DATA,'$.bank_details'),
          t1.AGENT_TYPE  = JSON_VALUE(s1.DATA,'$.agent_type'),
          t1.AGENT_REF_TYPE  = JSON_VALUE(s1.DATA,'$.reference_type'),
          t1.AGENT_CODE_ALIAS = JSON_VALUE(s1.DATA,'$.agent_code_alias'),
          t1.API_URL  = JSON_VALUE(s1.DATA,'$.api_url'),          
          t1.REGION = JSON_VALUE (s1.DATA, '$.region'),
          t1.CONTACT_NAME = JSON_VALUE (s1.DATA, '$.contact_name'),
          t1.NATURE_OF_BUSINESS = JSON_VALUE (s1.DATA, '$.nature_of_business'),
          t1.LIQUIDATION_TYPE = JSON_VALUE (s1.DATA, '$.liquidation_type'),
          t1.LIQUIDATION_RATE = JSON_VALUE (s1.DATA, '$.liquidation_rate'),
          t1.LIQUIDATION_FREQUENCY = JSON_VALUE (s1.DATA, '$.liquidation_frequency'),
          t1.SALES_PERSON_NAME = JSON_VALUE (s1.DATA, '$.sales_person_name'),
          t1.TOKEN = JSON_VALUE (s1.DATA, '$.token')
        WHERE (t1.BUSINESS_NAME    = s1.ORIGINAL_ID)
        AND ROWNUM                 =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            AGENT_NAMES,
            LOCATION,
            BUSINESS_NAME,
            EMAIL,
            ID_NUMBER,
            BUSINESSMOBILE,
            REMARKS,
            FIRST_NAME,
            SECOND_NAME,
            LAST_NAME,
            CREATED_ON,
            CREATED_BY,
            APPROVED_BY,
            APPROVED_ON,
            APPROVED,
            ACTIVE,
            CONTACT_MOBILE_NUMBER,
            COMMISSION_ACCOUNT,
            CATEGORY_ID,
            AGENT_CODE,
            SUPER_AGENT,
            PASS_KEY,
            PAN,
            BANK_ACCOUNT_NUMBER,
            ACCOUNT_NAME,
            BANK_NAME,
            BANK_CODE,
            BANK_ACCOUNT_ON_US,
            AGENT_TYPE,
            AGENT_REF_TYPE,
            API_URL,
            AGENT_CODE_ALIAS,            
            REGION,
            CONTACT_NAME,
            NATURE_OF_BUSINESS,
            LIQUIDATION_TYPE,
            LIQUIDATION_RATE,
            LIQUIDATION_FREQUENCY,
            SALES_PERSON_NAME,
            TOKEN
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.agent_names'),
            JSON_VALUE(s1.DATA,'$.region'),
            JSON_VALUE(s1.DATA,'$.business_name'),
            JSON_VALUE(s1.DATA,'$.email_address'),
            JSON_VALUE(s1.DATA,'$.id_number'),
            JSON_VALUE(s1.DATA,'$.business_mobile'),
            JSON_VALUE(s1.DATA,'$.remark'),
            JSON_VALUE(s1.DATA,'$.first_name'),
            JSON_VALUE(s1.DATA,'$.middle_name'),
            JSON_VALUE(s1.DATA,'$.last_name'),
            s1.CREATED_ON,
            s1.CREATED_BY,
            IV_approved_by,
            SYSTIMESTAMP,
            1,
            1,
            JSON_VALUE(s1.DATA,'$.contact_mobile_number'),
            JSON_VALUE(s1.DATA,'$.commission_account'),
            JSON_VALUE(s1.DATA,'$.category_id'), ---1,
            V_AGENT_CODE,
            JSON_VALUE(s1.DATA,'$.super_agent'),
            IV_additiona_info,
            V_PAN_CODE,
             JSON_VALUE(s1.DATA,'$.account_number'),
            JSON_VALUE(s1.DATA,'$.account_name'),
             JSON_VALUE(s1.DATA,'$.bank_name'),
             JSON_VALUE(s1.DATA,'$.bank_code'),
             JSON_VALUE(s1.DATA,'$.bank_details'),
             JSON_VALUE(s1.DATA,'$.agent_type'),
             JSON_VALUE(s1.DATA,'$.reference_type'),
             JSON_VALUE(s1.DATA,'$.api_url'),
             JSON_VALUE(s1.DATA,'$.agent_code_alias'),
             JSON_VALUE (s1.DATA, '$.region'),
             JSON_VALUE (s1.DATA, '$.contact_name'),
             JSON_VALUE (s1.DATA, '$.nature_of_business'),
             JSON_VALUE (s1.DATA, '$.liquidation_type'),
             JSON_VALUE (s1.DATA, '$.liquidation_rate'),
             JSON_VALUE (s1.DATA, '$.liquidation_frequency'),
             JSON_VALUE (s1.DATA, '$.sales_person_name'),
             JSON_VALUE (s1.DATA, '$.token')
          );
          DBMS_OUTPUT.PUT_LINE('insert agent details...');
          -- create float account 
          A_SP_CREATE_AGENT_ACCOUNT(V_AGENT_CODE,V_CREATED_BY, IV_APPROVED_BY,'204',V_MWALLET_ACCOUNT);
           A_SP_CREATE_AGENT_ACCOUNT(V_AGENT_CODE,V_CREATED_BY, IV_APPROVED_BY,'205',V_COMM_ACCOUNT);
          
          -- create commission account 
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
        -------------------------------- START EDIT AGENT -------------------------------
     WHEN V_destination_address = 'edit_agents' THEN  
        BEGIN
            MERGE INTO TB_AGENTS t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.ID = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET t1.AGENT_NAMES = JSON_VALUE(s1.DATA,'$.first_name')
              || ' '
              ||JSON_VALUE(s1.DATA,'$.middle_name')
              ||' '
              ||JSON_VALUE(s1.DATA,'$.last_name'),
              t1.LOCATION              = JSON_VALUE(s1.DATA,'$.region'),
              t1.EMAIL                 = JSON_VALUE(s1.DATA,'$.email_address'),
              t1.ID_NUMBER             = JSON_VALUE(s1.DATA,'$.id_number'),
              t1.BUSINESSMOBILE        = JSON_VALUE(s1.DATA,'$.business_mobile'),
              t1.FIRST_NAME            = JSON_VALUE(s1.DATA,'$.first_name'),
              t1.SECOND_NAME           = JSON_VALUE(s1.DATA,'$.middle_name'),
              t1.LAST_NAME             = JSON_VALUE(s1.DATA,'$.last_name'),
              t1.CONTACT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
              t1.COMMISSION_ACCOUNT    = JSON_VALUE(s1.DATA,'$.commission_account'),
              t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remark'),
              t1.REWORKED_ON           = s1.CREATED_ON,
              t1.REWORKED_BY           = s1.CREATED_BY,
              t1.APPROVED_BY           = IV_approved_by,
              t1.APPROVED_ON           = SYSTIMESTAMP,
              t1.BANK_ACCOUNT_NUMBER  = JSON_VALUE(s1.DATA,'$.account_number'),
              t1.BANK_NAME  = JSON_VALUE(s1.DATA,'$.bank_name'),
              t1.BANK_CODE  = JSON_VALUE(s1.DATA,'$.bank_code'),
              t1.BANK_ACCOUNT_ON_US  = JSON_VALUE(s1.DATA,'$.bank_details'),
              t1.AGENT_TYPE  = JSON_VALUE(s1.DATA,'$.agent_type'),
              t1.AGENT_REF_TYPE  = JSON_VALUE(s1.DATA,'$.reference_type'),
              t1.API_URL  = JSON_VALUE(s1.DATA,'$.api_url'),
              t1.AGENT_CODE_ALIAS = JSON_VALUE(s1.DATA,'$.agent_code_alias'),
              t1.REGION = JSON_VALUE (s1.DATA, '$.region'),
              t1.CONTACT_NAME = JSON_VALUE (s1.DATA, '$.contact_name'),
              t1.NATURE_OF_BUSINESS = JSON_VALUE (s1.DATA, '$.nature_of_business'),
              t1.LIQUIDATION_TYPE = JSON_VALUE (s1.DATA, '$.liquidation_type'),
              t1.LIQUIDATION_RATE = JSON_VALUE (s1.DATA, '$.liquidation_rate'),
              t1.LIQUIDATION_FREQUENCY = JSON_VALUE (s1.DATA, '$.liquidation_frequency'),
              t1.SALES_PERSON_NAME = JSON_VALUE (s1.DATA, '$.sales_person_name'),
              t1.TOKEN = JSON_VALUE (s1.DATA, '$.token')
            WHERE (t1.ID    = s1.ORIGINAL_ID);
          EXCEPTION 
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
          END;

    -------------------------------- END EDIT AGENT ---------------------------------
    
         -------------------------------- START DELETE AGENT -------------------------------
     WHEN V_destination_address = 'delete_agent' THEN
        BEGIN
            MERGE INTO TB_AGENTS t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.BUSINESS_NAME = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET
              t1.DELETED               = 1,
              t1.DELETED_ON            = SYSTIMESTAMP,
              t1.DELETED_BY            = s1.CREATED_BY     
            WHERE (t1.BUSINESS_NAME    = s1.ORIGINAL_ID);
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
          END;

    -------------------------------- END DELETE AGENT ---------------------------------
    WHEN V_destination_address = 'device_linking' THEN
     BEGIN
      --  A_SP_GET_AGENT_CODE('POS',V_POS_ID);
    --    A_SP_GET_AGENT_ACCOUNT(V_MWALLET_ACCOUNT); ---GETTING AGENT ACCOUNT FROM SEQUENCE
    
        
        DBMS_OUTPUT.PUT_LINE('start merge');
        MERGE INTO TB_AGENT_DEVICELINKING t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
    --      AND ROWNUM      =1
        )
        s1 ON (t1.DEVICE_IMEI = s1.ORIGINAL_ID)
        WHEN MATCHED 
        THEN UPDATE   
        SET t1.DEVICE_MOBILE       = JSON_VALUE(s1.DATA,'$.device_mobile')
        WHERE (t1.DEVICE_IMEI = s1.ORIGINAL_ID)
--       
      WHEN NOT MATCHED THEN
       
        INSERT
          (
            DEVICE_IMEI,
            DEVICE_MOBILE,
            POS_ID,
            PIN,
            CREATEDBY,
            CREATEDON,
            APPROVEDBY,
            AGENT_ID,
            REMARKS,
            MWALLET_ACCOUNT
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.device_imei'),
            JSON_VALUE(s1.DATA,'$.device_mobile')
            ,
            V_POS_ID,
            JSON_VALUE(s1.DATA,'$.pin'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            IV_approved_by,
            CAST(JSON_VALUE(s1.DATA,'$.agent_id') AS NUMBER),
            JSON_VALUE(s1.DATA,'$.remarks'),
            V_MWALLET_ACCOUNT
          );
         
          DBMS_OUTPUT.PUT_LINE('insert is successful');
          

-- CREATE AN aCCOUNT FOR AGENT
        SELECT CREATED_BY,
          JSON_VALUE(DATA,'$.agent_id') ,
          JSON_VALUE(DATA,'$.device_mobile')
        INTO V_CREATED_BY,
          V_AGENT_ID,
          V_DEVICE_MOBILE
        FROM TB_STAGING_ACTION
        WHERE ID  = IV_staging_id
        AND ROWNUM=1;        
         DBMS_OUTPUT.PUT_LINE(V_AGENT_ID);
          DBMS_OUTPUT.PUT_LINE(V_CREATED_BY);
           DBMS_OUTPUT.PUT_LINE(V_DEVICE_MOBILE);
         DBMS_OUTPUT.PUT_LINE('prepare execution of create account');
       --  A_SP_CREATE_AGENT_ACCOUNT(V_AGENT_ID,V_CREATED_BY, IV_APPROVED_BY,V_DEVICE_MOBILE,V_MWALLET_ACCOUNT);
         
  
        --  A_SP_INSERT_SMS(V_DEVICE_MOBILE,V_DEVICE_MOBILE,'Dear '||V_AGENT_ID || ',Your Flexi-pay agent login OTP is @OTP','POS','OTP','POS',CV_1);
        -- A_SP_CREATE_AGENT_ACCOUNT(V_AGENT_ID,V_CREATED_BY, IV_APPROVED_BY,V_DEVICE_MOBILE,V_MWALLET_ACCOUNT);
         DBMS_OUTPUT.PUT_LINE('finished execution of create account');
      EXCEPTION
      WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('exeption');
        RAISE;
        ROLLBACK;
      END;
      ----------------------END DEVICE LINKING---------------
      
      -----------START AGENT DEVICE LINKING-----------
      
      WHEN V_destination_address = 'agent_device_linking' THEN
      BEGIN
        A_SP_GET_AGENT_CODE('POS',V_POS_ID);
    --    A_SP_GET_AGENT_ACCOUNT(V_MWALLET_ACCOUNT); ---GETTING AGENT ACCOUNT FROM SEQUENCE
        
        DBMS_OUTPUT.PUT_LINE('start merge');
        MERGE INTO TB_AGENT_DEVICELINKING t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
    --      AND ROWNUM      =1
        )
        s1 ON (t1.DEVICE_IMEI = s1.ORIGINAL_ID)
        WHEN MATCHED 
        THEN UPDATE   
        SET t1.DEVICE_MOBILE       = JSON_VALUE(s1.DATA,'$.device_mobile')
        WHERE (t1.DEVICE_IMEI = s1.ORIGINAL_ID)
--       
      WHEN NOT MATCHED THEN
       
        INSERT
          (
            DEVICE_IMEI,
            DEVICE_MOBILE,
            POS_ID,
            PIN,
            CREATEDBY,
            CREATEDON,
            APPROVEDBY,
            AGENT_ID,
            REMARKS,
            MWALLET_ACCOUNT
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.device_imei'),
            JSON_VALUE(s1.DATA,'$.device_mobile')
            ,
            V_POS_ID,
            JSON_VALUE(s1.DATA,'$.pin'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            IV_approved_by,
            CAST(JSON_VALUE(s1.DATA,'$.agent_id') AS NUMBER),
            JSON_VALUE(s1.DATA,'$.remarks'),
            V_MWALLET_ACCOUNT
          );
         
        
          DBMS_OUTPUT.PUT_LINE('insert is successful'||V_DEVICE_MOBILE);
          
      
            

-- CREATE AN aCCOUNT FOR AGENT
        SELECT CREATED_BY,
          JSON_VALUE(DATA,'$.agent_id') ,
         JSON_VALUE(DATA,'$.device_mobile') 
        INTO V_CREATED_BY,
          V_AGENT_ID,
          V_DEVICE_MOBILE
        FROM TB_STAGING_ACTION
        WHERE ID  = IV_staging_id
        AND ROWNUM=1;        
         DBMS_OUTPUT.PUT_LINE('AGENT ID '||V_AGENT_ID);
         DBMS_OUTPUT.PUT_LINE('CREATED BY '||V_CREATED_BY);
         DBMS_OUTPUT.PUT_LINE('DEVICE ID '||V_DEVICE_MOBILE);
         DBMS_OUTPUT.PUT_LINE('prepare execution of create account');
         A_SP_CREATE_AGENT_ACCOUNT(V_AGENT_ID,V_CREATED_BY, IV_APPROVED_BY,V_DEVICE_MOBILE,V_MWALLET_ACCOUNT);
         
--        V_SMS:= FN_PORTAL_OTP_SMS( V_DEVICE_MOBILE,
--      V_DEVICE_MOBILE,
--      'Dear '||V_AGENT_ID || ',Your Flexi-pay agent login OTP is @OTP',
--      'POS',
--      'OTP',
--      'POS');    
      
         DBMS_OUTPUT.PUT_LINE('finished execution of create account');
         
         
         -- update tb_agent_devices to assigned
       --  update TB_AGENT_DEVICES
         
       UPDATE TB_AGENT_DEVICES  SET ASSIGNED =  '1' WHERE DEVICE_MOBILE_NUMBER = V_DEVICE_MOBILE;
     
      EXCEPTION
      WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('exeption');
        RAISE;
        ROLLBACK;
        
        
      END;
      
      
      ---------------------END AGENT DEVICE LINKING-----------
    WHEN V_destination_address = 'create_outlet' THEN
      BEGIN
        MERGE INTO TB_OUTLET t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                = IV_staging_id
        AND IS_APPROVED         = 0
        AND ROWNUM              =1
        ) s1 ON (t1.OUTLET_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET
          t1.AGENT_ID       = JSON_VALUE(s1.DATA,'$.agent'),
      --    t1.OUTLET_NAME      = JSON_VALUE(s1.DATA,'$.outlet_name'),
          t1.LOCATION         = JSON_VALUE(s1.DATA,'$.location'),
          t1.LONGITUDE        = JSON_VALUE(s1.DATA,'$.longitude'),
          t1.LATITUDE         = JSON_VALUE(s1.DATA,'$.latitude'),
          t1.CHECKER_REMARKS  = JSON_VALUE(s1.DATA,'$.remark'),
          t1.REWORKED_ON      = s1.CREATED_ON,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE (t1.OUTLET_NAME = s1.ORIGINAL_ID)
        AND ROWNUM            =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            AGENT_ID,
            OUTLET_NAME,
            LOCATION,
            LONGITUDE,
            LATITUDE,
            CREATED_BY,
            CREATED_ON,
            APPROVED_BY,
            REMARKS,
            CHECKER_REMARKS
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.agent'),
            JSON_VALUE(s1.DATA,'$.outlet_name'),
            JSON_VALUE(s1.DATA,'$.location'),
            JSON_VALUE(s1.DATA,'$.longitude'),
            JSON_VALUE(s1.DATA,'$.latitude'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            IV_approved_by,
            JSON_VALUE(s1.DATA,'$.remarks'),
            IV_remarks
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
          
    ---------------------------------- EDIT OUTLET ------------------------------------------
    
       WHEN V_destination_address = 'edit_agent_outlet' THEN
      BEGIN
        MERGE INTO TB_OUTLET t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                = IV_staging_id
        AND IS_APPROVED         = 0
        AND ROWNUM              =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.AGENT_ID       = JSON_VALUE(s1.DATA,'$.agent'),
          t1.OUTLET_NAME      = JSON_VALUE(s1.DATA,'$.outlet_name'),
          t1.LOCATION         = JSON_VALUE(s1.DATA,'$.location'),
          t1.LONGITUDE        = JSON_VALUE(s1.DATA,'$.longitude'),
          t1.LATITUDE         = JSON_VALUE(s1.DATA,'$.latitude'),
          t1.CHECKER_REMARKS  = JSON_VALUE(s1.DATA,'$.remark'),
          t1.REWORKED_ON      = s1.CREATED_ON,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    
    ---------------------------------- END EDIT OUTLET ---------------------------------------
    
     ------------------------------------- DELETE OUTLET ------------------------------------------

       WHEN V_destination_address = 'delete_agent_outlet' THEN
      BEGIN
        MERGE INTO TB_OUTLET t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                = IV_staging_id
        AND IS_APPROVED         = 0
        AND ROWNUM              =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET
          t1.DELETED_REMARKS  = JSON_VALUE(s1.DATA,'$.remark'),
          t1.DELETED_ON      = SYSTIMESTAMP,
          t1.DELETED        = 1,
          t1.DELETED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by
        WHERE (t1.ID = s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    ---------------------------------- END DELETE OUTLET ---------------------------------------
    
    WHEN V_destination_address = 'create_operator' THEN
      BEGIN
        MERGE INTO TB_OPERATOR t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.NATIONAL_ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.OUTLET_ID   = JSON_VALUE(s1.DATA,'$.outlet_id'),
          t1.OUTLET_NAME   = JSON_VALUE(s1.DATA,'$.outlet_name'),
          t1.OPERATOR_NAME = JSON_VALUE(s1.DATA,'$.first_name')
          || ' '
          ||JSON_VALUE(s1.DATA,'$.middle_name')
          ||' '
          ||JSON_VALUE(s1.DATA,'$.last_name') ,
          t1.EMAIL_ADDRESS    = JSON_VALUE(s1.DATA,'$.email'),
          t1.PHONE_NUMBER     = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.REWORKED_ON      = s1.CREATED_ON,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP,
          t1.FIRST_NAME = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.SECOND_NAME = JSON_VALUE(s1.DATA,'$.second_name'),
          t1.LAST_NAME = JSON_VALUE(s1.DATA,'$.last_name')
        WHERE (t1.NATIONAL_ID = s1.ORIGINAL_ID)
        AND ROWNUM            =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            OUTLET_ID,
            OUTLET_NAME,
            OPERATOR_NAME,
            EMAIL_ADDRESS,
            PHONE_NUMBER,
            CREATED_BY,
            CREATED_ON,
            APPROVED_BY,
            REMARKS,
            CHECKER_REMARKS,
            FIRST_NAME,
            SECOND_NAME,
            LAST_NAME,
            APPROVED,
            NATIONAL_ID
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.outlet_id'),
            JSON_VALUE(s1.DATA,'$.outlet_name'),
            JSON_VALUE(s1.DATA,'$.first_name')
            || ' '
            ||JSON_VALUE(s1.DATA,'$.middle_name')
            ||' '
            ||JSON_VALUE(s1.DATA,'$.last_name') ,
            JSON_VALUE(s1.DATA,'$.email'),
            JSON_VALUE(s1.DATA,'$.phone_number'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            IV_approved_by,
            JSON_VALUE(s1.DATA,'$.remarks'),
            IV_remarks,
            JSON_VALUE(s1.DATA,'$.first_name'),
            JSON_VALUE(s1.DATA,'$.second_name'),
            JSON_VALUE(s1.DATA,'$.last_name'),
            1,
            JSON_VALUE(s1.DATA,'$.national_id')
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
        ----------------------- EDIT OPERATOR -----------------------------------------------
     WHEN V_destination_address = 'edit_outlet_operator' THEN
    BEGIN
            MERGE INTO TB_OPERATOR t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.ID = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET t1.OUTLET_ID   = JSON_VALUE(s1.DATA,'$.outlet_id'),
              t1.OUTLET_NAME   = JSON_VALUE(s1.DATA,'$.outlet_name'),
              t1.OPERATOR_NAME = JSON_VALUE(s1.DATA,'$.first_name')
              || ' '
              ||JSON_VALUE(s1.DATA,'$.middle_name')
              ||' '
              ||JSON_VALUE(s1.DATA,'$.last_name') ,
              t1.EMAIL_ADDRESS    = JSON_VALUE(s1.DATA,'$.email'),
              t1.PHONE_NUMBER     = JSON_VALUE(s1.DATA,'$.phone_number'),
              t1.REWORKED_ON      = s1.CREATED_ON,
              t1.REWORKED_BY      = s1.CREATED_BY,
              t1.APPROVED_BY      = IV_approved_by,
              t1.APPROVED_ON      = SYSTIMESTAMP,
              t1.FIRST_NAME = JSON_VALUE(s1.DATA,'$.first_name'),
              t1.SECOND_NAME = JSON_VALUE(s1.DATA,'$.second_name'),
              t1.LAST_NAME = JSON_VALUE(s1.DATA,'$.last_name'),
              t1.NATIONAL_ID = JSON_VALUE(s1.DATA,'$.national_id')
            WHERE (t1.ID = s1.ORIGINAL_ID);
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
    END;
    --------------------- END EDIT OPERATOR -------------------------------------------------
    
          ----------------------- DELETE OPERATOR -----------------------------------------------
     WHEN V_destination_address = 'delete_outlet_operator' THEN
    BEGIN
            MERGE INTO TB_OPERATOR t1 USING
            (SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
            )
            s1 ON (t1.ID = s1.ORIGINAL_ID)
          WHEN MATCHED THEN
            UPDATE
            SET 
              t1.DELETED        = 1,
              t1.DELETED_BY     = s1.CREATED_BY,
              t1.APPROVED_BY      = IV_approved_by,
              t1.DELETED_ON      = SYSTIMESTAMP
            WHERE (t1.ID = s1.ORIGINAL_ID);
          EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
    END;
    --------------------- END DELETE OPERATOR -------------------------------------------------
    
             ---------------------------------- start create device ---------------------------------------
    
    WHEN V_destination_address = 'create_device' THEN
      BEGIN
        MERGE INTO TB_AGENT_DEVICES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.DEVICEID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DEVICE_IMEI    = JSON_VALUE(s1.DATA,'$.device_imei'),
          t1.DEVICEIMEI2     = JSON_VALUE(s1.DATA,'$.device_imei2'),
          t1.DEVICE_MODEL     = JSON_VALUE(s1.DATA,'$.device_model'),
          t1.SIMCARD_PHONE_NUMBER     = JSON_VALUE(s1.DATA,'$.device_mobile_number'),
          t1.DEVICE_MOBILE_NUMBER     = JSON_VALUE(s1.DATA,'$.device_mobile_number'),
          t1.TERMINAL_ID     = JSON_VALUE(s1.DATA,'$.serial_no'),
          t1.REWORKED_ON      = s1.CREATED_ON,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE (t1.DEVICEID = s1.ORIGINAL_ID)
        AND ROWNUM            =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            DEVICE_IMEI,
            DEVICEIMEI2,
            DEVICE_MODEL,
            SIMCARD_PHONE_NUMBER,
            DEVICEID,
            DEVICE_MOBILE_NUMBER,
            CREATED_BY,
            CREATED_ON,
            APPROVED_BY,
            APPROVED
      --      REMARKS,
      --      CHECKER_REMARKS
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.device_imei'),
            JSON_VALUE(s1.DATA,'$.device_imei2'),
            JSON_VALUE(s1.DATA,'$.device_model'),
            JSON_VALUE(s1.DATA,'$.phone_number'),
            JSON_VALUE(s1.DATA,'$.serial_no'),
            JSON_VALUE(s1.DATA,'$.device_mobile_number'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            IV_approved_by,
            1
         --   JSON_VALUE(s1.DATA,'$.remarks'),
       --     IV_remarks
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
        ----------------------- End create device -----------------------------------------------
        
        --------------------- UPDATE DEVICE --------------------------------------------------------
          WHEN V_destination_address = 'edit_device' THEN
      BEGIN
        MERGE INTO TB_AGENT_DEVICES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DEVICE_IMEI    = JSON_VALUE(s1.DATA,'$.device_imei'),
          t1.DEVICEIMEI2     = JSON_VALUE(s1.DATA,'$.device_imei2'),
          t1.DEVICE_MODEL     = JSON_VALUE(s1.DATA,'$.device_model'),
          t1.SIMCARD_PHONE_NUMBER     = JSON_VALUE(s1.DATA,'$.device_mobile_number'),
          t1.DEVICE_MOBILE_NUMBER     = JSON_VALUE(s1.DATA,'$.device_mobile_number'),
          t1.DEVICEID     = JSON_VALUE(s1.DATA,'$.serial_no'),
          t1.REWORKED_ON      = s1.CREATED_ON,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
        
        ---------------------- END UPDATE DEVICE ----------------------------------
        
          --------------------- DELETE DEVICE --------------------------------------------------------
          WHEN V_destination_address = 'delete_device' THEN
      BEGIN
        MERGE INTO TB_AGENT_DEVICES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DELETED = 1,
          t1.DELETED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.DELETED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
        
        ---------------------- END DELETE DEVICE ----------------------------------

        --------------------- BLOCK AGENT --------------------------------------

        WHEN V_destination_address = 'block_agent' THEN

        BEGIN 
            MERGE INTO TB_AGENTS t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.BLOCKED = 1,
          t1.ACTIVE = 0,
          t1.BLOCKED_ON      = SYSTIMESTAMP,
          t1.BLOCKED_BY      = S1.CREATED_BY,
          t1.BLOCK_REMARKS      = IV_additiona_info,
          t1.DELETED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
        
        -- block account number from transacting as well
        SELECT AGENT_CODE INTO V_AGENT_CODE FROM TB_AGENTS WHERE ID =( 
        select original_id from tb_staging_action where id = IV_staging_id and rownum = 1) ;
        
        
        update TB_ACCOUNT set ALLOW_CR = 'N' , ALLOW_DR = 'N' WHERE ACCOUNT_NO IN (select account_no 
        from TB_ACCOUNT where customer_no = V_AGENT_CODE
        ORDER BY account_id DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) ;
        
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;
        ---------------------- UNBLOCK AGENT -----------------------------------

        ---

        ---------------------START UNBLOCK AGENT --------------------------------------

        WHEN V_destination_address = 'unblock_agent' THEN

        BEGIN 
            MERGE INTO TB_AGENTS t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.BLOCKED = 0,
          t1.ACTIVE = 1,
          t1.BLOCKED_ON      = SYSTIMESTAMP,
          t1.BLOCKED_BY      = S1.CREATED_BY,
          t1.BLOCK_REMARKS      = IV_additiona_info,
          t1.DELETED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
        
         -- block account number from transacting as well
        SELECT AGENT_CODE INTO V_AGENT_CODE FROM TB_AGENTS WHERE ID =( 
        select original_id from tb_staging_action where id = IV_staging_id and rownum = 1) ;
        
        
        update TB_ACCOUNT set ALLOW_CR = 'Y' , ALLOW_DR = 'Y' WHERE ACCOUNT_NO IN (select account_no 
        from TB_ACCOUNT where customer_no = V_AGENT_CODE
        ORDER BY account_id DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY) ;
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;
        ----------------------END UNBLOCK AGENT -----------------------------------
--------------------- BLOCK AGENT PIN--------------------------------------

        WHEN V_destination_address = 'block_pin_agent' THEN

        BEGIN 
            MERGE INTO TB_AGENT_DEVICELINKING t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.BLOCKED = 1,
          t1.ACTIVE = 0,
          t1.BLOCKTIME      = SYSTIMESTAMP,
          t1.BLOCKEDBY      = S1.CREATED_BY,
          t1.BLOCKREMARKS      = IV_additiona_info,
          t1.DELETEDON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;
        ---------------------- UNBLOCK AGENT -----------------------------------

        ---

        ---------------------START UNBLOCK AGENT PIN--------------------------------------

        WHEN V_destination_address = 'unblock_pin_agent' THEN

        BEGIN 
            MERGE INTO TB_AGENT_DEVICELINKING t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.BLOCKED = 0,
          t1.ACTIVE = 1,
          t1.UNBLOCKEDON      = SYSTIMESTAMP,
          t1.UNBLOCKAPPROVEDBY      = S1.CREATED_BY
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;
        ----------------------END UNBLOCK AGENT -----------------------------------
        --------------------- START PIN RESET FOR DEVICE -----------------------

        
        WHEN V_destination_address = 'reset_agent_pin' THEN

        BEGIN 
            MERGE INTO TB_AGENT_DEVICELINKING t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.PASS_KEY = IV_additiona_info,
          t1.ACTIVE = 1,
          t1.PIN      = IV_additiona_info,
          t1.FIRSTLOGIN      = 1
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;

        -------------------- END PIN RESET FOR DEVICE -------------------------------
        --------------------- START PASSWORD RESET FOR AGENT -----------------------

        
        WHEN V_destination_address = 'reset_agent_password' THEN

        BEGIN 
            MERGE INTO TB_AGENTS t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.PASS_KEY = IV_additiona_info,
          t1.ACTIVE = 1,
          t1.FIRST_LOGIN      = 0
        WHERE (t1.ID = s1.ORIGINAL_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;

        -------------------- END PASSWORD RESET FOR AGENT -------------------------------

        ----------------------- DELINK DEVICE --------------------------------------------
   WHEN V_destination_address = 'delink_agent_device' THEN

        BEGIN 
            MERGE INTO TB_AGENTS t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DELETED = 1,
          t1.DELETED_BY = s1.CREATED_BY,
          t1.DELETED_ON      = SYSTIMESTAMP
        WHERE (t1.ID = s1.ORIGINAL_ID);

        -- move record to archive
        SELECT ORIGINAL_ID INTO V_DEVICE_LINKING_ID FROM TB_STAGING_ACTION WHERE
        ID = IV_staging_id AND IS_APPROVED = 0 AND ROWNUM = 1;
        
        A_SP_ARCHIVE_LINKED_DEVICE(V_DEVICE_LINKING_ID);
     
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
        END;

        ---------------------- END DELINK DEVICE ---------------------------------------

    ELSE
      V_count:=0;
    END CASE;
  END;
  --COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_CONFIG_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_CONFIG_MODULE" (
    IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
BEGIN

  BEGIN
    CASE
      -------------- START CREATE SMS --------------------------
      -------------- CREATED BY ROY -----------------------------
    WHEN V_destination_address = 'create_sms' THEN
        BEGIN

            MERGE INTO TB_SMS_TEMPLATE t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (CAST(t1.SMS_ID AS NVARCHAR2(20)) = s1.ORIGINAL_ID)

            WHEN MATCHED THEN
                UPDATE SET
                t1.ENABLED = JSON_VALUE(s1.DATA, '$.enabled'),
                t1.FIELD39 = JSON_VALUE(s1.DATA, '$.status_code'),
                t1.FIELD100 = JSON_VALUE(s1.DATA, '$.field100'),
                t1.FIELD3 = JSON_VALUE(s1.DATA, '$.procode'),
                t1.DEST = JSON_VALUE(s1.DATA, '$.destination'),
                t1.MTI = JSON_VALUE(s1.DATA, '$.mti'),
                t1.LANGUAGE_CODE= JSON_VALUE(s1.DATA, '$.language'),
                t1.SMS_TEMPLATE = JSON_VALUE(s1.DATA, '$.notification_template'),
                t1.SMS_DESCRIPTION = JSON_VALUE(s1.DATA, '$.template_name')
                WHERE (t1.SMS_ID = s1.ORIGINAL_ID)

            WHEN NOT MATCHED THEN
                INSERT (
                ENABLED,
                FIELD39,
                FIELD100,
                FIELD3,
                DEST,
                MTI,
                LANGUAGE_CODE,
                SMS_TEMPLATE, 
                SMS_DESCRIPTION)
                VALUES (
                JSON_VALUE(s1.DATA, '$.enabled'), 
                JSON_VALUE(s1.DATA, '$.status_code'), 
                JSON_VALUE(s1.DATA, '$.field100'),
                JSON_VALUE(s1.DATA, '$.procode'),
                JSON_VALUE(s1.DATA, '$.destination'),
                JSON_VALUE(s1.DATA, '$.mti'),
                JSON_VALUE(s1.DATA, '$.language'),
                JSON_VALUE(s1.DATA, '$.notification_template'),
                JSON_VALUE(s1.DATA, '$.template_name')
                );

            EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;
   -------------- END CREATE SMS ----------------------------

    ------------------- START EDIT SMS --------------------------
   ------------------- CREATED BY ROY -----------------------------
    WHEN V_destination_address = 'edit_sms_notification' THEN
        BEGIN

            MERGE INTO TB_SMS_TEMPLATE t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.SMS_ID = s1.ORIGINAL_ID)

            WHEN MATCHED THEN
                UPDATE SET
                t1.ENABLED = JSON_VALUE(s1.DATA, '$.enabled'),
                t1.FIELD39 = JSON_VALUE(s1.DATA, '$.status_code'),
                t1.FIELD100 = JSON_VALUE(s1.DATA, '$.field100'),
                t1.FIELD3 = JSON_VALUE(s1.DATA, '$.procode'),
                t1.DEST = JSON_VALUE(s1.DATA, '$.destination'),
                t1.MTI = JSON_VALUE(s1.DATA, '$.mti'),
                t1.LANGUAGE_CODE= JSON_VALUE(s1.DATA, '$.language'),
                t1.SMS_TEMPLATE = JSON_VALUE(s1.DATA, '$.notification_template'),
                t1.SMS_DESCRIPTION = JSON_VALUE(s1.DATA, '$.template_name')
                WHERE (t1.SMS_ID = s1.ORIGINAL_ID);

              EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    -------------- END EDIT SMS ----------------------------

    WHEN V_destination_address = 'create_email_template' THEN
        BEGIN

            MERGE INTO TB_EMAIL_TEMPLATE t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.TEMPLATE_NAME = s1.ORIGINAL_ID)

            WHEN MATCHED THEN
                UPDATE SET            
                t1.EMAIL_DESCRIPTION = JSON_VALUE(s1.DATA, '$.field100'),
                t1.EMAIL_TEMPLATE = JSON_VALUE(s1.DATA, '$.notification_template'),
                t1.LANGUAGE_CODE = JSON_VALUE(s1.DATA, '$.language'),
                t1.MTI = JSON_VALUE(s1.DATA, '$.mti'),
                t1.DEST = JSON_VALUE(s1.DATA, '$.destination'),
                t1.FIELD3 = JSON_VALUE(s1.DATA, '$.procode'),
                t1.FIELD100 = JSON_VALUE(s1.DATA, '$.field100'),
                t1.FIELD39 = JSON_VALUE(s1.DATA, '$.status_code'),
                t1.ENABLED = JSON_VALUE(s1.DATA, '$.enabled')
                WHERE t1.TEMPLATE_NAME = s1.ORIGINAL_ID               

            WHEN NOT MATCHED THEN
            INSERT (
                TEMPLATE_NAME,
                EMAIL_DESCRIPTION,
                EMAIL_TEMPLATE,
                LANGUAGE_CODE,
                MTI,
                DEST,
                FIELD3,
                FIELD100,
                FIELD39,
                ENABLED
                )
                VALUES(
                    JSON_VALUE(s1.DATA, '$.template_name'),
                    JSON_VALUE(s1.DATA, '$.field100'),
                    JSON_VALUE(s1.DATA, '$.notification_template'),
                    JSON_VALUE(s1.DATA, '$.language'),
                    JSON_VALUE(s1.DATA, '$.mti'),
                    JSON_VALUE(s1.DATA, '$.destination'),
                    JSON_VALUE(s1.DATA, '$.procode'),
                    JSON_VALUE(s1.DATA, '$.field100'),
                    JSON_VALUE(s1.DATA, '$.status_code'),
                    1
                );

        EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
          END;

    WHEN V_destination_address = 'edit_email_template' THEN
        BEGIN

            MERGE INTO TB_EMAIL_TEMPLATE t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)

            WHEN MATCHED THEN
                UPDATE SET       
                t1.EMAIL_DESCRIPTION = JSON_VALUE(s1.DATA, '$.field100'),
                t1.EMAIL_TEMPLATE = JSON_VALUE(s1.DATA, '$.notification_template'),
                t1.LANGUAGE_CODE = JSON_VALUE(s1.DATA, '$.language'),
                t1.MTI = JSON_VALUE(s1.DATA, '$.mti'),
                t1.DEST = JSON_VALUE(s1.DATA, '$.destination'),
                t1.FIELD3 = JSON_VALUE(s1.DATA, '$.procode'),
                t1.FIELD100 = JSON_VALUE(s1.DATA, '$.field100'),
                t1.FIELD39 = JSON_VALUE(s1.DATA, '$.status_code'),
                t1.ENABLED = JSON_VALUE(s1.DATA, '$.enabled')
                WHERE t1.ID = s1.ORIGINAL_ID;
        EXCEPTION
          WHEN OTHERS THEN
            RAISE;
            ROLLBACK;
          END;

    ELSE
      V_count:=0;
    END CASE;
  END;   


END A_SP_STAGING_APRV_CONFIG_MODULE;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_CUST_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_CUST_MODULE" (
    IV_staging_id          IN VARCHAR2,
    IV_approved_by         IN VARCHAR2,
    IV_remarks             IN VARCHAR2,
    IV_type_request IN VARCHAR,
    IV_additiona_info      IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  V_CUSTOMERNO NVARCHAR2(50);
  V_DATA NVARCHAR2(1000);
BEGIN
  BEGIN
    CASE
    WHEN V_destination_address = 'block_customer' THEN
      BEGIN
        MERGE INTO TB_CUSTOMER_VALIDATION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.PHONE_NUMBER = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.BLOCKED_BY          = s1.CREATED_BY,
          t1.BLOCKED_TIME          = SYSTIMESTAMP,
          t1.BLOCKER_REMARK        = IV_remarks,
          t1.BLOCK_APPROVED_BY     = IV_approved_by,
          t1.BLOCK_APPROVER_REMARK = IV_remarks,
          t1.ACTIVE                =0
        WHERE t1.PHONE_NUMBER      = s1.ORIGINAL_ID;
       -- AND ROWNUM                 =1;
       
         -- block account number from transacting as well
        SELECT original_id INTO V_CUSTOMERNO FROM tb_staging_action WHERE ID = IV_staging_id and rownum = 1;
        
        update TB_ACCOUNT set ALLOW_CR = 'N' , ALLOW_DR = 'N' WHERE ACCOUNT_NO IN (select account_no 
        from TB_ACCOUNT where customer_no = V_CUSTOMERNO
        ORDER BY account_id DESC OFFSET 0 ROWS FETCH NEXT 2 ROWS ONLY) ;
        
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'unblock_customer' THEN
      BEGIN
        MERGE INTO TB_CUSTOMER_VALIDATION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.PHONE_NUMBER = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.UNBLOCKED_BY          = s1.CREATED_BY,
          t1.UNBLOCKED_TIME          = SYSTIMESTAMP,
          t1.BLOCKER_REMARK          = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.UNBLOCKAPPROVEDBY       = IV_approved_by,
          t1.UNBLOCK_APPROVER_REMARK = IV_remarks,
          t1.ACTIVE                  =1,
          t1.TRIALS = 0
        WHERE t1.PHONE_NUMBER        = s1.ORIGINAL_ID;
        --AND ROWNUM                   =1;
        
        SELECT original_id INTO V_CUSTOMERNO FROM tb_staging_action WHERE ID = IV_staging_id and rownum = 1;
        
        update TB_ACCOUNT set ALLOW_CR = 'Y' , ALLOW_DR = 'Y' WHERE ACCOUNT_NO IN (select account_no 
        from TB_ACCOUNT where customer_no = V_CUSTOMERNO
        ORDER BY account_id DESC OFFSET 0 ROWS FETCH NEXT 2 ROWS ONLY) ;
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'update_imsi' THEN
      BEGIN
        MERGE INTO TB_CUSTOMER_VALIDATION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.PHONE_NUMBER = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.IMSI_UPDATED_BY   = IV_approved_by,
          t1.IMSI_UPDATE_TIME    = SYSTIMESTAMP,
          t1.IMSI_CHANGE_COUNT   =IMSI_CHANGE_COUNT+1,
          t1.IMSI_UPDATE_REMARKS = JSON_VALUE(s1.DATA,'$.remarks')
          || '|'
          ||IV_remarks,
          t1.IMSI_CHANGE             = '1'
        WHERE    t1.ID =(SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE PHONE_NUMBER=  s1.ORIGINAL_ID 
        ORDER BY ID DESC FETCH NEXT 1 ROWS ONLY);
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;
    WHEN V_destination_address = 'update_imei' THEN
      dbms_output.put_line('updating imei');
      BEGIN
        MERGE INTO TB_CUSTOMER_VALIDATION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.PHONE_NUMBER = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.IMEI_UPDATED_BY   = IV_approved_by,
          t1.IMEI_UPDATE_TIME    = SYSTIMESTAMP,
          t1.IMEI_CHANGE_COUNT   =IMSI_CHANGE_COUNT+1,
          t1.IMEI_UPDATE_REMARKS = JSON_VALUE(s1.DATA,'$.remarks')
          || '|'
          ||IV_remarks,
          t1.DEVICE_CHANGE             = '1'
        WHERE t1.ID =(SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE PHONE_NUMBER=  s1.ORIGINAL_ID 
        ORDER BY ID DESC FETCH NEXT 1 ROWS ONLY);
   --     AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      raise;
        ROLLBACK;
      END;

      WHEN V_destination_address = 'edit_customer' THEN
      BEGIN
        MERGE INTO TB_CUSTOMER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.CUSTOMER_NO = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET
          t1.EMAIL_ADDRESS = JSON_VALUE(s1.DATA,'$.email_address'),
           t1.IDENTIFICATION_ID = JSON_VALUE(s1.DATA,'$.id_number'),
          t1.GENDER = JSON_VALUE(s1.DATA,'$.gender'),
          t1.APPROVED = 'Y',
          t1.APPROVED_BY = IV_approved_by,
          t1.APPROVE_REMARK = JSON_VALUE(s1.DATA,'$.remarks')        
        WHERE t1.CUSTOMER_NO = s1.ORIGINAL_ID;
--        AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'reset_pin' THEN
      BEGIN
        MERGE INTO TB_CUSTOMER_VALIDATION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.PHONE_NUMBER = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.RESET_BY       = s1.CREATED_BY,
          t1.RESET_ON         = s1.CREATED_ON,
          t1.PIN_RESET_REMARK = JSON_VALUE(s1.DATA,'$.remarks')
          ||'|'
          ||IV_remarks,
          t1.RESET_APPROVEDBY = IV_approved_by,
          t1.RESET_APPROVEDON = SYSTIMESTAMP,
          t1.FIRST_LOGIN = 1,
          PIN                 = IV_additiona_info
        WHERE t1.PHONE_NUMBER = s1.ORIGINAL_ID;
    --    AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;

      ---lets handle Block DR on wallet  /saving accc
      WHEN V_destination_address = 'block_dr' THEN
      BEGIN
        MERGE INTO TB_ACCOUNT t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
--        AND ROWNUM               =1
        ) s1 ON (t1.ACCOUNT_NO = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.ALLOW_DR       = 'N'          
        WHERE t1.ACCOUNT_NO = s1.ORIGINAL_ID
        AND t1.ACCOUNT_CLASS = JSON_VALUE(s1.DATA,'$.account_class');
--        AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;
      ---lets handle Un-Block DR on wallet  /saving acc
      WHEN V_destination_address = 'unblock_dr' THEN
      BEGIN
        MERGE INTO TB_ACCOUNT t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
--        AND ROWNUM               =1
        ) s1 ON (t1.ACCOUNT_NO = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.ALLOW_DR       = 'Y'          
        WHERE t1.ACCOUNT_NO = s1.ORIGINAL_ID
        AND t1.ACCOUNT_CLASS = JSON_VALUE(s1.DATA,'$.account_class');
  --      AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;

      ---lets handle Block CR on wallet  /saving accc
      WHEN V_destination_address = 'block_cr' THEN
      BEGIN
        MERGE INTO TB_ACCOUNT t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
        AND ROWNUM               =1
        ) s1 ON (t1.ACCOUNT_NO = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.ALLOW_CR       = 'N'          
        WHERE t1.ACCOUNT_NO = s1.ORIGINAL_ID
        AND t1.ACCOUNT_CLASS = JSON_VALUE(s1.DATA,'$.account_class');
    --    AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;      
      ---lets handle Un-Block CR on wallet  /saving acc
      WHEN V_destination_address = 'unblock_cr' THEN
      BEGIN
        MERGE INTO TB_ACCOUNT t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID                 = IV_staging_id
        AND IS_APPROVED          = 0
   --     AND ROWNUM               =1
        ) s1 ON (t1.ACCOUNT_NO = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.ALLOW_CR       = 'Y'          
        WHERE t1.ACCOUNT_NO = s1.ORIGINAL_ID
        AND t1.ACCOUNT_CLASS = JSON_VALUE(s1.DATA,'$.account_class');
  --      AND ROWNUM            =1;
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;

--      ---lets handle close wallet / savings account
--      WHEN V_destination_address = 'close_account' THEN
--      BEGIN 
--        SELECT ORIGINAL_ID, DATA INTO V_CUSTOMERNO, V_DATA
--        FROM TB_STAGING_ACTION
--        WHERE ID                 = IV_staging_id
--        AND IS_APPROVED          = 0
--        AND ROWNUM               =1;
--            A_SP_ARCHIVE_CLOSED_ACCOUNT(V_CUSTOMERNO , IV_approved_by, IV_staging_id);
--      EXCEPTION
--      WHEN OTHERS THEN
--      RAISE;
--        ROLLBACK;
--      END;

    ELSE
      V_count:=0;
    END CASE;
  END;
  --COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_ISSUES_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_ISSUES_MODULE" (
IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  v_issue_Id NVARCHAR2(50);

BEGIN

  BEGIN
    CASE

    WHEN V_destination_address = 'create_category' THEN
        BEGIN      
        MERGE INTO TB_ISSUES_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.CATEGORY_CODE = s1.ORIGINAL_ID)
--      WHEN MATCHED THEN
--        UPDATE  SET  
--          t1.CATEGORY_CODE = JSON_VALUE(s1.DATA,'$.category_name'),
--          t1.CATEGORY_DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
--          t1.APPROVED               = 1,
--          t1.CREATED_ON           = s1.CREATED_BY,
--          t1.APPROVED_BY           = IV_approved_by,
--          t1.APPROVED_ON           = SYSTIMESTAMP,          
--          ------------roy update-----------------
--          t1.DECLINED               = 0
--        WHERE (t1.CATEGORY_CODE         = s1.ORIGINAL_ID)
--        AND ROWNUM                 =1
--        
            WHEN NOT MATCHED THEN
            INSERT(
                CATEGORY_CODE,
                CATEGORY_DESCRIPTION,
                CREATED_BY,
                APPROVED,
                APPROVED_BY,
                APPROVED_ON,
                DECLINED)
                VALUES(
                JSON_VALUE(s1.DATA,'$.category_name'),
                JSON_VALUE(s1.DATA,'$.description'),
                s1.CREATED_BY,
                1,
                IV_approved_by,
                SYSTIMESTAMP,
                0
                );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    WHEN V_destination_address = 'edit_category' THEN
        BEGIN

        MERGE INTO TB_MERCHANT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE SET       
          t1.CATEGORY_CODE   = JSON_VALUE(s1.DATA,'$.category_name'),
          t1.ACCOUNT_PREFIX = JSON_VALUE(s1.DATA,'$.account_prefix'),
          t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
          t1.ACTIVE               = JSON_VALUE(s1.DATA,'$.status'),
          t1.CREATED_BY           = s1.CREATED_ON,
          t1.CREATED_ON           = s1.CREATED_BY,
          t1.APPROVED              = 1,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE (t1.CATEGORY_CODE    = s1.ORIGINAL_ID)
        AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    WHEN V_destination_address = 'create_issue' THEN       
        BEGIN          
        v_issue_Id := FN_Get_Series('M',1);

        MERGE INTO TB_ISSUES t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.ISSUE_ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
            t1.CATEGORY_CODE    = JSON_VALUE(s1.DATA,'$.category_id'),
            t1.CUSTOMER_NAME    = JSON_VALUE(s1.DATA,'$.merchant_name'),
            t1.CUSTOMER_NAME    = JSON_VALUE(s1.DATA,'$.mobile_number'),
            t1.CREATED_BY           = s1.CREATED_ON,
            t1.CREATED_ON           = s1.CREATED_BY,
            t1.RESOLVED              = '1',
            t1.RESOLVED_BY           = IV_approved_by,
            t1.RESOLVED_ON           = SYSTIMESTAMP
        WHERE (t1.CATEGORY_CODE         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1

        WHEN NOT MATCHED THEN
        INSERT (        
        ISSUE_ID,
        CATEGORY_CODE,
        CUSTOMER_NAME,
        ACCOUNT_NUMBER,
        RESOLVED,
        CREATED_BY,
         EMAIL
        )
        VALUES(
            v_issue_Id,
            JSON_VALUE(s1.DATA,'$.category_id'),
            JSON_VALUE(s1.DATA,'$.merchant_name'),
            JSON_VALUE(s1.DATA,'$.mobile_number'),
            1,
            s1.CREATED_BY,
            JSON_VALUE(s1.DATA,'$.email')
        );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'edit_merchant' THEN
                BEGIN      
                MERGE INTO TB_MERCHANTS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                --AND ROWNUM           =1
                ) s1 ON (t1.ID = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.CATEGORY_ID    = JSON_VALUE(s1.DATA,'$.category_id'),
                    t1.SERVICE_ID    = JSON_VALUE(s1.DATA,'$.service_id'),
                    t1.MERCHANT_NAME    = JSON_VALUE(s1.DATA,'$.merchant_name'),
                    t1.MOBILE_NUMBER    = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    t1.BIO    = JSON_VALUE(s1.DATA,'$.bio'),
                    t1.DESCRIPTION    = JSON_VALUE(s1.DATA,'$.description'),
                    t1.STATUS     = 1,
                    t1.CREATED_BY           = s1.CREATED_ON,
                    t1.CREATED_ON           = s1.CREATED_BY,
                    t1.CONTACT_PERSON_NAME    = JSON_VALUE(s1.DATA,'$.contact_person_name'),
                    t1.CONTACT_PERSON_MOBILE    = JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
                    t1.PHYSICAL_ADDRESS    = JSON_VALUE(s1.DATA,'$.physical_address'),
                    t1.APPROVED              = 1,
                    t1.APPROVED_BY           = IV_approved_by,
                    t1.APPROVED_ON           = SYSTIMESTAMP
                WHERE (t1.ID         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'delete_merchant' THEN
                BEGIN      
                MERGE INTO TB_MERCHANTS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_ID = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),
                    t1.DELETED              = 1,
                    t1.DELETED_BY           = IV_approved_by,
                    t1.DELETED_ON           = SYSTIMESTAMP
                WHERE (t1.MERCHANT_ID         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;


    ELSE
      V_count:=0;
    END CASE;
  END;   


END A_SP_STAGING_APRV_ISSUES_MODULE;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_LYT_PNTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_LYT_PNTS" (
    IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  v_Merchant_Id NVARCHAR2(50);
  v_Merchant_outlet_id NVARCHAR2(50);
  V_DEAL_CODE NVARCHAR2(50);
BEGIN

  BEGIN
    CASE

    WHEN V_destination_address = 'create_loyality_points' THEN
        BEGIN      
        MERGE INTO TB_LOYALITY_POINTS_MAPPING t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE  SET  
          t1.FIELD100   = JSON_VALUE(s1.DATA,'$.field100'),
          t1.FIELD3 = JSON_VALUE(s1.DATA,'$.field3'),
          t1.AMOUNT_PER_POINT = JSON_VALUE(s1.DATA,'$.amount_per_point'),
          t1.STATUS               = 1,
          t1.CREATED_BY           = s1.CREATED_BY,
          t1.CREATED_ON           = s1.CREATED_ON,
          t1.APPROVED              = 1,
          t1.APPROVED_BY           = IV_approved_by
      --    t1.APPROVED_ON           = SYSTIMESTAMP,
          
          ------------roy update-----------------
    --      t1.DELETED               = 0
        WHERE (t1.ID         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1
        
            WHEN NOT MATCHED THEN
            INSERT(
                FIELD100,
                FIELD3,
                AMOUNT_PER_POINT,
                STATUS,
                CREATED_BY,
                CREATED_ON,
                APPROVED,
                APPROVED_BY
                )
                VALUES(
                JSON_VALUE(s1.DATA,'$.field100'),
                JSON_VALUE(s1.DATA,'$.field3'),
                JSON_VALUE(s1.DATA,'$.amount_per_point'),
                1,
                s1.CREATED_BY,
                s1.CREATED_ON,
                1,
                IV_approved_by
                );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    WHEN V_destination_address = 'update_loyality_points' THEN
        BEGIN
      
        MERGE INTO TB_LOYALITY_POINTS_MAPPING t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE  SET  
          t1.FIELD100   = JSON_VALUE(s1.DATA,'$.field100'),
          t1.FIELD3 = JSON_VALUE(s1.DATA,'$.field3'),
          t1.AMOUNT_PER_POINT = JSON_VALUE(s1.DATA,'$.amount_per_point'),
          t1.STATUS               = 1,
          t1.CREATED_BY           = s1.CREATED_BY,
          t1.CREATED_ON           = s1.CREATED_ON,
          t1.APPROVED              = 1,
          t1.APPROVED_BY           = IV_approved_by
      --    t1.APPROVED_ON           = SYSTIMESTAMP,
          
          ------------roy update-----------------
    --      t1.DELETED               = 0
        WHERE (t1.ID         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1;
        
     
        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;
    END CASE;
  END;   


END A_SP_STAGING_APRV_LYT_PNTS;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_MERCHANTS_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_MERCHANTS_MODULE" (
    IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  v_Merchant_Id NVARCHAR2(50);
  v_Merchant_outlet_id NVARCHAR2(50);
  V_DEAL_CODE NVARCHAR2(50);
BEGIN

  BEGIN
    CASE

    WHEN V_destination_address = 'create_category' THEN
        BEGIN      
        MERGE INTO TB_MERCHANT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.CATEGORY_CODE = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE  SET  
          t1.CATEGORY_NAME   = JSON_VALUE(s1.DATA,'$.category_name'),
          t1.ACCOUNT_PREFIX = JSON_VALUE(s1.DATA,'$.account_prefix'),
          t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
          t1.ACTIVE               = 1,
          t1.CREATED_BY           = s1.CREATED_ON,
          t1.CREATED_ON           = s1.CREATED_BY,
          t1.APPROVED              = 1,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP,

          ------------roy update-----------------
          t1.DELETED               = 0
        WHERE (t1.CATEGORY_CODE         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1

            WHEN NOT MATCHED THEN
            INSERT(
                CATEGORY_CODE,
                CATEGORY_NAME,
                ACCOUNT_PREFIX,
                DESCRIPTION,
                CREATED_BY,
                CREATED_ON,
                ACTIVE,
                APPROVED,
                APPROVED_BY,
                APPROVED_ON)
                VALUES(
                JSON_VALUE(s1.DATA,'$.category_code'),
                JSON_VALUE(s1.DATA,'$.category_name'),
                JSON_VALUE(s1.DATA,'$.account_prefix'),
                JSON_VALUE(s1.DATA,'$.description'),
                s1.CREATED_BY,
                s1.CREATED_ON,
                1,
                1,
                IV_approved_by,
                SYSTIMESTAMP
                );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    WHEN V_destination_address = 'edit_category' THEN
        BEGIN

        MERGE INTO TB_MERCHANT_CATEGORY t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.CATEGORY_CODE = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE SET       
          t1.CATEGORY_NAME   = JSON_VALUE(s1.DATA,'$.category_name'),
          t1.ACCOUNT_PREFIX = JSON_VALUE(s1.DATA,'$.account_prefix'),
          t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
          t1.ACTIVE               = JSON_VALUE(s1.DATA,'$.status'),
          t1.CREATED_BY           = s1.CREATED_ON,
          t1.CREATED_ON           = s1.CREATED_BY,
          t1.APPROVED              = 1,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE (t1.CATEGORY_CODE    = s1.ORIGINAL_ID)
        AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

    WHEN V_destination_address = 'create_merchant' THEN       
        BEGIN          
        v_Merchant_Id := FN_Get_Series('M',1);

        MERGE INTO TB_MERCHANTS t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.MERCHANT_ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
            t1.CATEGORY_ID    = JSON_VALUE(s1.DATA,'$.category_id'),
            t1.SERVICE_ID    = JSON_VALUE(s1.DATA,'$.service_id'),
            t1.MERCHANT_NAME    = JSON_VALUE(s1.DATA,'$.merchant_name'),
            t1.MOBILE_NUMBER    = JSON_VALUE(s1.DATA,'$.mobile_number'),
            t1.BIO    = JSON_VALUE(s1.DATA,'$.bio'),
            t1.DESCRIPTION    = JSON_VALUE(s1.DATA,'$.description'),
            t1.STATUS     = 1,
            t1.CREATED_BY           = s1.CREATED_ON,
            t1.CREATED_ON           = s1.CREATED_BY,
            t1.CONTACT_PERSON_NAME    = JSON_VALUE(s1.DATA,'$.contact_person_name'),
            t1.CONTACT_PERSON_MOBILE    = JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
            t1.PHYSICAL_ADDRESS    = JSON_VALUE(s1.DATA,'$.physical_address'),
            t1.APPROVED              = '1',
            t1.APPROVED_BY           = IV_approved_by,
            t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE (t1.MERCHANT_ID         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1

        WHEN NOT MATCHED THEN
        INSERT (        
        MERCHANT_ID,
        CATEGORY_ID,
        SERVICE_ID,
        MERCHANT_NAME,
        MOBILE_NUMBER,
        WEBSITE,
        BIO,
        DESCRIPTION,
        STATUS,
        CREATED_BY,
        CREATED_ON,
        CONTACT_PERSON_NAME,
        CONTACT_PERSON_MOBILE,
        PHYSICAL_ADDRESS,
        EMAIL_ADDRESS
        )
        VALUES(
            v_Merchant_Id,
            JSON_VALUE(s1.DATA,'$.category_id'),
            JSON_VALUE(s1.DATA,'$.service_id'),
            JSON_VALUE(s1.DATA,'$.merchant_name'),
            JSON_VALUE(s1.DATA,'$.mobile_number'),
            '',
            JSON_VALUE(s1.DATA,'$.bio'),
            JSON_VALUE(s1.DATA,'$.description'),
            1,
            s1.CREATED_BY,
            s1.CREATED_ON,
            JSON_VALUE(s1.DATA,'$.contact_person_name'),
            JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
            JSON_VALUE(s1.DATA,'$.physical_address'),
            JSON_VALUE(s1.DATA,'$.email')
        );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'edit_merchant' THEN
                BEGIN      
                MERGE INTO TB_MERCHANTS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                --AND ROWNUM           =1
                ) s1 ON (t1.ID = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.CATEGORY_ID    = JSON_VALUE(s1.DATA,'$.category_id'),
                    t1.SERVICE_ID    = JSON_VALUE(s1.DATA,'$.service_id'),
                    t1.MERCHANT_NAME    = JSON_VALUE(s1.DATA,'$.merchant_name'),
                    t1.MOBILE_NUMBER    = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    t1.BIO    = JSON_VALUE(s1.DATA,'$.bio'),
                    t1.DESCRIPTION    = JSON_VALUE(s1.DATA,'$.description'),
                    t1.STATUS     = 1,
                    t1.CREATED_BY           = s1.CREATED_ON,
                    t1.CREATED_ON           = s1.CREATED_BY,
                    t1.CONTACT_PERSON_NAME    = JSON_VALUE(s1.DATA,'$.contact_person_name'),
                    t1.CONTACT_PERSON_MOBILE    = JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
                    t1.PHYSICAL_ADDRESS    = JSON_VALUE(s1.DATA,'$.physical_address'),
                    t1.APPROVED              = 1,
                    t1.APPROVED_BY           = IV_approved_by,
                    t1.APPROVED_ON           = SYSTIMESTAMP
                WHERE (t1.ID         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'delete_merchant' THEN
                BEGIN      
                MERGE INTO TB_MERCHANTS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_ID = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),
                    t1.DELETED              = 1,
                    t1.DELETED_BY           = IV_approved_by,
                    t1.DELETED_ON           = SYSTIMESTAMP
                WHERE (t1.MERCHANT_ID         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'create_merchant_outlet' THEN
          BEGIN  
           v_Merchant_outlet_id := FN_Get_Series('MO',1);

                MERGE INTO TB_MERCHANT_OUTLET t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    OUTLET_NAME = JSON_VALUE(s1.DATA,'$.outlet_name'),
                    LOCATION_NAME = JSON_VALUE(s1.DATA,'$.location_name'),
                    ACCOUNT_NUMBER = JSON_VALUE(s1.DATA,'$.outlet_account'),
                    MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    ALT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    EMAIL_ADDRESS = JSON_VALUE(s1.DATA,'$.email_address'),
                    INTEREST_RATE_TYPE  = JSON_VALUE(s1.DATA,'$.interest_rate_type'),
                    INTEREST_RATE  = JSON_VALUE(s1.DATA,'$.interest_rate'),
                    LOGIN_TRIALS   = LOGIN_TRIALS + 1
                WHERE (t1.MERCHANT_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1

                WHEN NOT MATCHED THEN

                INSERT (
                    MERCHANT_ID,
                    MERCHANT_CODE,
                    OUTLET_NAME,
                    LOCATION_NAME,
                    ACCOUNT_NUMBER,
                    MOBILE_NUMBER,
                    ALT_MOBILE_NUMBER,
                    EMAIL_ADDRESS,
                    IS_MAIN,
                    STATUS,
                    CREATED_BY,
                    CREATED_ON,
                    INTEREST_RATE_TYPE,
                    INTEREST_RATE,
                    BLOCKED,
                    PASSWORD_HASH,
                    LOGIN_TRIALS,
                    APPROVED,
                    APPROVED_BY,
                    APPROVED_ON,
                    APPROVE_REMARKS,
                    QR_CODE
                )
                VALUES(
                        JSON_VALUE(s1.DATA,'$.merchant_id'),
                        v_Merchant_outlet_id,
                        JSON_VALUE(s1.DATA,'$.outlet_name'),
                        JSON_VALUE(s1.DATA,'$.location_name'),
                        JSON_VALUE(s1.DATA,'$.outlet_account'),
                        JSON_VALUE(s1.DATA,'$.mobile_number'),
                        JSON_VALUE(s1.DATA,'$.mobile_number'),
                        JSON_VALUE(s1.DATA,'$.email_address'),
                        0,
                        1,
						s1.CREATED_BY,
						s1.CREATED_ON,
                        JSON_VALUE(s1.DATA,'$.interest_rate_type'),
                        JSON_VALUE(s1.DATA,'$.interest_rate'),
                        0,
                        JSON_VALUE(s1.DATA,'$.IV_additiona_info'),
                        0,
                         1,
                         IV_approved_by,
                         SYSTIMESTAMP,
                         JSON_VALUE(s1.DATA,'$.remarks'),
                         JSON_VALUE(s1.DATA,'$.qr_code')
                );

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'edit_merchant_outlet' THEN
          BEGIN             
                MERGE INTO TB_MERCHANT_OUTLET t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.OUTLET_NAME = JSON_VALUE(s1.DATA,'$.outlet_name'),
                    t1.LOCATION_NAME = JSON_VALUE(s1.DATA,'$.location_name'),
                    t1.ACCOUNT_NUMBER = JSON_VALUE(s1.DATA,'$.outlet_account'),
                    t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    t1.ALT_MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.mobile_number'),
                    t1.EMAIL_ADDRESS = JSON_VALUE(s1.DATA,'$.email_address'),
                    t1.INTEREST_RATE_TYPE  = JSON_VALUE(s1.DATA,'$.interest_rate_type'),
                    t1.INTEREST_RATE  = JSON_VALUE(s1.DATA,'$.interest_rate'),
                    t1.LOGIN_TRIALS   = LOGIN_TRIALS + 1
                WHERE (t1.MERCHANT_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END; 

        WHEN V_destination_address = 'delete_merchant_outlet' THEN
          BEGIN             
                MERGE INTO TB_MERCHANT_OUTLET t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),
                    t1.DELETED              = 1,
                    t1.DELETED_BY           = IV_approved_by,
                    t1.DELETED_ON           = SYSTIMESTAMP,
                    t1.BLOCKED           = 1
                WHERE (t1.MERCHANT_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END; 

         WHEN V_destination_address = 'reset_merchant_pwd' THEN        
            BEGIN      
                MERGE INTO TB_MERCHANT_OUTLET t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.MERCHANT_ID = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET 
                    BLOCKED = 0,
                    PASSWORD_HASH  = IV_additiona_info,
                    LOGIN_TRIALS   = 0,
                    t1.APPROVE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),
                    t1.APPROVED              = 1,
                    t1.APPROVED_BY           = IV_approved_by,
                    t1.APPROVED_ON           = SYSTIMESTAMP
                WHERE (t1.MERCHANT_ID         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END;

        WHEN V_destination_address = 'create_merchant_deals' THEN
          BEGIN    
            V_DEAL_CODE := FN_Get_Series('DL',1);

                MERGE INTO TB_MERCHANT_DEALS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.DEAL_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET  t1.ORIGINAL_PRICE = JSON_VALUE(s1.DATA,'$.original_price'),
                    t1.CATEGORY_NAME = JSON_VALUE(s1.DATA,'$.category_name'),
                    t1.DURATION_DAYS = JSON_VALUE(s1.DATA,'$.duration_days'),
                    t1.DISCOUNT_VALUE = JSON_VALUE(s1.DATA,'$.discount_value'),
                    t1.DISCOUNT_TYPE = JSON_VALUE(s1.DATA,'$.discount_type'),
                    t1.AMOUNT_REQUIRED = JSON_VALUE(s1.DATA,'$.amount_required'),
                    t1.MIN_AMOUNT = JSON_VALUE(s1.DATA,'$.min_amount'),
                    t1.DEAL_TITLE = JSON_VALUE(s1.DATA,'$.deal_title'),
                    t1.DEAL_DESCRIPTION = JSON_VALUE(s1.DATA,'$.deal_description'),
                    t1.DEAL_START_DATE = JSON_VALUE(s1.DATA,'$.deal_start_date'),
                    t1.START_DATE = JSON_VALUE(s1.DATA,'$.deal_start_date'),
                    t1.END_DATE = JSON_VALUE(s1.DATA,'$.deal_start_date'),
                    t1.APPROVED              = 1,
                    t1.APPROVED_BY           = IV_approved_by,
                    t1.APPROVED_ON           = SYSTIMESTAMP
                WHERE (t1.DEAL_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1

                WHEN NOT MATCHED THEN
                    INSERT (
                        DEAL_CODE,
                        MERCHANT_ID,
                        ORIGINAL_PRICE,
                        DURATION_DAYS,
                        DISCOUNT_VALUE,
                        DISCOUNT_TYPE,
                        AMOUNT_REQUIRED,
                        MIN_AMOUNT,
                        DEAL_TITLE,
                        DEAL_DESCRIPTION,
                        DEAL_START_DATE,
                        START_DATE,
                        END_DATE,
                        ACTIVE,
                        CATEGORY_NAME,
                        CREATED_BY,
                        CREATED_ON                   
                    )
                    VALUES(
                        V_DEAL_CODE,
                        JSON_VALUE(s1.DATA,'$.merchant_id'),
                        JSON_VALUE(s1.DATA,'$.original_price'),
                        JSON_VALUE(s1.DATA,'$.duration_days'),
                        JSON_VALUE(s1.DATA,'$.discount_value'),
                        JSON_VALUE(s1.DATA,'$.discount_type'),
                        JSON_VALUE(s1.DATA,'$.amount_required'),
                        JSON_VALUE(s1.DATA,'$.min_amount'),
                        JSON_VALUE(s1.DATA,'$.deal_title'),
                        JSON_VALUE(s1.DATA,'$.deal_description'),
                        JSON_VALUE(s1.DATA,'$.deal_start_date'),
                        SYSTIMESTAMP,
                        JSON_VALUE(s1.DATA,'$.deal_start_date'),
                        1,
                        JSON_VALUE(s1.DATA,'$.category_name'),                        
                        s1.CREATED_BY,
						s1.CREATED_ON
                    );

            --  + CAST (JSON_VALUE(s1.DATA,'$.duration_days') as NUMBER) 

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END; 

        WHEN V_destination_address = 'edit_merchant_outlet' THEN
          BEGIN                
                MERGE INTO TB_MERCHANT_DEALS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.DEAL_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET  t1.ORIGINAL_PRICE = JSON_VALUE(s1.DATA,'$.original_price'),
                    t1.CATEGORY_NAME = JSON_VALUE(s1.DATA,'$.category_name'),
                    t1.DURATION_DAYS = JSON_VALUE(s1.DATA,'$.duration_days'),
                    t1.DISCOUNT_VALUE = JSON_VALUE(s1.DATA,'$.discount_value'),
                    t1.DISCOUNT_TYPE = JSON_VALUE(s1.DATA,'$.discount_type'),
                    t1.AMOUNT_REQUIRED = JSON_VALUE(s1.DATA,'$.amount_required'),
                    t1.MIN_AMOUNT = JSON_VALUE(s1.DATA,'$.min_amount'),
                    t1.DEAL_TITLE = JSON_VALUE(s1.DATA,'$.deal_title'),
                    t1.DEAL_DESCRIPTION = JSON_VALUE(s1.DATA,'$.deal_description'),
                    t1.DEAL_START_DATE = JSON_VALUE(s1.DATA,'$.deal_start_date'),
                    t1.START_DATE = JSON_VALUE(s1.DATA,'$.deal_start_date'),
                    t1.END_DATE = JSON_VALUE(s1.DATA,'$.end_start_date'), 
                    t1.APPROVED              = 1,
                    t1.APPROVED_BY           = IV_approved_by,
                    t1.APPROVED_ON           = SYSTIMESTAMP
                WHERE (t1.DEAL_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END; 

        WHEN V_destination_address = 'delete_merchant_outlet' THEN
          BEGIN                
                MERGE INTO TB_MERCHANT_DEALS t1 USING
                (SELECT ORIGINAL_ID,
                  DATA,
                  CREATED_BY,
                  CREATED_ON
                FROM TB_STAGING_ACTION
                WHERE ID             = IV_staging_id
                AND IS_APPROVED      = 0
                AND ROWNUM           =1
                ) s1 ON (t1.DEAL_CODE = s1.ORIGINAL_ID)
              WHEN MATCHED THEN
                UPDATE
                SET  
                    t1.DELETE_REMARKS = JSON_VALUE(s1.DATA,'$.remarks'), 
                    t1.DELETED              = 1,
                    t1.DELETED_BY           = IV_approved_by,
                    t1.DELETED_ON           = SYSTIMESTAMP
                WHERE (t1.DEAL_CODE         = s1.ORIGINAL_ID)
                AND ROWNUM                 =1;

        EXCEPTION
            WHEN OTHERS THEN
             RAISE;
           ROLLBACK;
        END; 

    ELSE
      V_count:=0;
    END CASE;
  END;   


END A_SP_STAGING_APRV_MERCHANTS_MODULE;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_REV_REQ
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_REV_REQ" (
 IV_staging_id          IN VARCHAR2,
 IV_approved_by         IN VARCHAR2,
 IV_remarks             IN VARCHAR2,
 IV_type_request IN VARCHAR,
 IV_additiona_info      IN VARCHAR2 DEFAULT '') AS 
 
 
BEGIN
null;
END A_SP_STAGING_APRV_REV_REQ;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_SACCO_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_SACCO_MODULE" (
IV_staging_id          IN VARCHAR2,
 IV_approved_by         IN VARCHAR2,
 IV_remarks             IN VARCHAR2,
 IV_type_request IN VARCHAR,
 IV_additiona_info      IN VARCHAR2 DEFAULT '') AS 
 
V_ID NUMBER                    :=NULL;
V_SACCO_ID NVARCHAR2(20)       :=''; 
V_INSTITUTION_CODE NVARCHAR2(50):= '';
V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
CV_1 SYS_REFCURSOR;
BEGIN
  CASE
    WHEN V_destination_address = 'create_sacco' THEN

    BEGIN
   SELECT TB_SACCOS_ID_SEQ.nextval INTO V_ID FROM dual;
   SELECT 'SAC'||LPAD(V_ID,5,0) INTO V_SACCO_ID FROM dual;
       MERGE INTO TB_SACCOS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 

            ) s1 ON (t1.SACCO_ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
            --{"sacco_names":"asd",

            --  t1.SACCO_ID = V_SACCO_ID,
              t1.SACCO_NAMES = JSON_VALUE(s1.DATA,'$.sacco_names'),
             -- t1.INSTITUTION_ACCOUNT = JSON_VALUE(s1.DATA,'$.institution_account'),
              t1.CONTACT_PERSON_MOBILE = JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
              t1.CONTACT_PERSON_EMAIL = JSON_VALUE(s1.DATA,'$.contact_person_email'),
              t1.SACCO_TYPE = 'BOSA',
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.CREATED_ON  = s1.CREATED_ON,
              t1.CREATED_BY  = s1.CREATED_BY
              WHERE t1.SACCO_ID = s1.ORIGINAL_ID 
              --AND  ROWNUM = 1

        WHEN NOT MATCHED   THEN
            INSERT (SACCO_ID,SACCO_NAMES,CONTACT_PERSON_NAME,CONTACT_PERSON_MOBILE, CONTACT_PERSON_EMAIL,BUSINESS_MOBILE, PHYSICAL_ADDRESS,SACCO_TYPE, 
            BRANCHES, MEMBERS,CREATED_BY, CREATED_ON,APPROVED, APPROVED_BY, APPROVED_ON) 
            VALUES(
            V_SACCO_ID,
            JSON_VALUE(s1.DATA,'$.sacco_names'),
            JSON_VALUE(s1.DATA,'$.contact_person_name'),
            JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
            JSON_VALUE(s1.DATA,'$.contact_person_email'),
            JSON_VALUE(s1.DATA,'$.business_mobile'),
            JSON_VALUE(s1.DATA,'$.physical_address'),
            JSON_VALUE(s1.DATA,'$.account_type'),
            JSON_VALUE(s1.DATA,'$.branches'),
            JSON_VALUE(s1.DATA,'$.members'),
            s1.CREATED_BY,
            s1.CREATED_ON,
              1,
              IV_approved_by,
            SYSTIMESTAMP            
            );
           A_SP_CREATE_SACCO_ACC(V_SACCO_ID,CV_1);
           EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'edit_SACCO' THEN
    BEGIN
        MERGE INTO TB_SACCOS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET     
            SACCO_NAMES = JSON_VALUE(s1.DATA,'$.sacco_names'),
            CONTACT_PERSON_NAME = JSON_VALUE(s1.DATA,'$.contact_person_name'),
            CONTACT_PERSON_MOBILE = JSON_VALUE(s1.DATA,'$.contact_person_mobile'),
            CONTACT_PERSON_EMAIL = JSON_VALUE(s1.DATA,'$.contact_person_email'),
            BUSINESS_MOBILE = JSON_VALUE(s1.DATA,'$.business_mobile'),
            PHYSICAL_ADDRESS = JSON_VALUE(s1.DATA,'$.physical_address'),
            SACCO_TYPE = JSON_VALUE(s1.DATA,'$.account_type'),
            BRANCHES = JSON_VALUE(s1.DATA,'$.branches'),
            MEMBERS = JSON_VALUE(s1.DATA,'$.members'),
              t1.APPROVED = 1,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

      WHEN V_destination_address = 'delete_sacco' THEN
    BEGIN
        MERGE INTO TB_INSTITUTIONS t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.APPROVED = 1,
              t1.DELETED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.DELETED_ON  = s1.CREATED_ON,
              t1.DELETED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID ;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

      WHEN V_destination_address = 'create_institution_type' THEN

      BEGIN
      V_INSTITUTION_CODE := FN_Get_Series('INST',1);
       MERGE INTO TB_INSTITUTION_TYPES t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.INSTITUTION_TYPES = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 

              t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.INSTITUTION_TYPES = s1.ORIGINAL_ID AND  ROWNUM = 1

        WHEN NOT MATCHED   THEN
            INSERT (INSTITUTION_TYPES,DESCRIPTION, 
            CREATED_BY, CREATED_ON,APPROVED, APPROVED_BY, APPROVED_ON) 
            VALUES(
            JSON_VALUE(s1.DATA,'$.institution_type'),
            JSON_VALUE(s1.DATA,'$.description'),
            s1.CREATED_BY,
            s1.CREATED_ON,
            1,
            IV_approved_by,
            SYSTIMESTAMP
            );
           EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'edit_institution_type' THEN
    BEGIN
        MERGE INTO TB_INSTITUTION_TYPES t1 USING (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id AND
            IS_APPROVED = 0 AND
            ROWNUM = 1
            ) s1 ON (t1.ID = s1.ORIGINAL_ID)
         WHEN MATCHED THEN
            UPDATE
            SET 
              t1.INSTITUTION_TYPES = JSON_VALUE(s1.DATA,'$.institution_type'),
              t1.DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
              t1.APPROVED = 1,
              t1.APPROVED_BY  = IV_approved_by,
              t1.APPROVED_ON  = SYSTIMESTAMP,
              t1.REWORKED_ON  = s1.CREATED_ON,
              t1.REWORKED_BY  = s1.CREATED_BY
              WHERE t1.ID = s1.ORIGINAL_ID ;
         EXCEPTION      
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

  END CASE;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_TRXNS_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_TRXNS_MODULE" (
     IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  
  C_1  SYS_REFCURSOR ;
  V_DATA NVARCHAR2(1000) :='';
  V_CREATED_BY NVARCHAR2(50) :='';
BEGIN
  BEGIN
    CASE
    WHEN V_destination_address = 'create_services' THEN
      BEGIN
        MERGE INTO TB_SERVICES t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.FIELD100 = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.FIELD3              = JSON_VALUE(s1.DATA,'$.service_code'),
          t1.SERVICE_DESCRIPTION   = JSON_VALUE(s1.DATA,'$.description'),
          t1.TRANSACTION_LIMIT_MIN = JSON_VALUE(s1.DATA,'$.translimit_min'),
          t1.TRANSACTION_LIMIT_MAX = JSON_VALUE(s1.DATA,'$.translimit_max'),
          t1.ENABLED               = JSON_VALUE(s1.DATA,'$.enabled'),
          --t1.FIELD100              = JSON_VALUE(s1.DATA,'$.service_id'),
          t1.SERVICEID             = JSON_VALUE(s1.DATA,'$.pg_service_id'),
          t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON           = s1.CREATED_ON,
          t1.REWORKED_BY           = s1.CREATED_BY,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE (t1.FIELD100         = s1.ORIGINAL_ID)
        AND ROWNUM                 =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            FIELD3,
            SERVICE_DESCRIPTION,
            TRANSACTION_LIMIT_MIN,
            TRANSACTION_LIMIT_MAX,
            ENABLED,
            FIELD100,
            SERVICEID,
            REMARKS,
            CREATED_ON,
            CREATED_BY,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.service_code'),
            JSON_VALUE(s1.DATA,'$.description'),
            JSON_VALUE(s1.DATA,'$.translimit_min'),
            JSON_VALUE(s1.DATA,'$.translimit_max'),
            JSON_VALUE(s1.DATA,'$.enabled'),
            JSON_VALUE(s1.DATA,'$.service_id'),
            JSON_VALUE(s1.DATA,'$.pg_service_id'),
            JSON_VALUE(s1.DATA,'$.remark'),
            s1.CREATED_ON,
            s1.CREATED_BY,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    ------ START DELETE SERVICE -------------------------
    ------- CREATED BY ROY -------------------------------
     WHEN V_destination_address = 'delete_service' THEN
        BEGIN
        MERGE INTO TB_SERVICES t1 USING
        (SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON
         FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN
            UPDATE SET
             t1.DELETED = 1,
             t1.ENABLED = 0,
             t1.DELETED_BY = s1.CREATED_BY,
             t1.DELETED_ON = SYSTIMESTAMP
             WHERE (t1.ID  = s1.ORIGINAL_ID);

             EXCEPTION
             WHEN OTHERS THEN
                RAISE;
                ROLLBACK ;
        END;
    ------ END DELETE SERVICE ------------------------
    
     -------CREATE EDIT SERVICE -------------------------
     ------- CREATED BY ROY ------------------------------

    WHEN  V_destination_address = 'edit_services' THEN
        BEGIN
             MERGE INTO TB_SERVICES t1 USING
        (SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON
         FROM TB_STAGING_ACTION WHERE
            ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN
            UPDATE SET
             t1.ENABLED = JSON_VALUE(s1.DATA,'$.enabled'),
             t1.TRANSACTION_LIMIT_MIN = JSON_VALUE(s1.DATA,'$.translimit_min'),
             t1.TRANSACTION_LIMIT_MAX = JSON_VALUE(s1.DATA,'$.translimit_max'),
             t1.SERVICE_DESCRIPTION = JSON_VALUE(s1.DATA,'$.description'),
             t1.SERVICEID = JSON_VALUE(s1.DATA,'$.pg_service_id'),
             t1.FIELD3 = JSON_VALUE(s1.DATA,'$.service_code'),
             t1.REMARKS = JSON_VALUE(s1.DATA,'$.remarks'),
             t1.FIELD100 = JSON_VALUE(s1.DATA,'$.service_id'),
             t1.REWORKED_ON  = s1.CREATED_ON,
             t1.REWORKED_BY = s1.CREATED_BY,
             t1.APPROVED_BY = IV_approved_by,
             t1.APPROVED_ON = SYSTIMESTAMP
             WHERE (t1.ID  = s1.ORIGINAL_ID);

             EXCEPTION
             WHEN OTHERS THEN
                RAISE;
                ROLLBACK ;

        END;
    ------- END OF EDIT SERVICE ------------------------
    
     WHEN V_destination_address = 'enable_disable_service' THEN
      BEGIN
        MERGE INTO TB_SERVICES t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID             = IV_staging_id
        AND IS_APPROVED      = 0
        AND ROWNUM           =1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET
          t1.ENABLED               = JSON_VALUE(s1.DATA,'$.enabled'),
          t1.REMARKS               = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON           = s1.CREATED_ON,
          t1.REWORKED_BY           = s1.CREATED_BY,
          t1.APPROVED_BY           = IV_approved_by,
          t1.APPROVED_ON           = SYSTIMESTAMP
        WHERE t1.ID         = s1.ORIGINAL_ID;
        --AND ROWNUM                 =1;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'create_charge' THEN
      BEGIN
        MERGE INTO TB_TRANS_COMMISSION_CHARGES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.TRXCODE = s1.ORIGINAL_ID AND t1.CHANNEL = JSON_VALUE(s1.DATA,'$.channel'))
      WHEN MATCHED THEN
        UPDATE
        SET
        -- t1.TRXCODE    = JSON_VALUE(s1.DATA,'$.unique_id'),
          t1.PROCODE      = JSON_VALUE(s1.DATA,'$.service_id'),
  --        t1.CHANNEL      = JSON_VALUE(s1.DATA,'$.channel'),
          t1.AMOUNT       = JSON_VALUE(s1.DATA,'$.charge_value'),
          t1.FVR          = JSON_VALUE(s1.DATA,'$.value_type'),
          t1.MINAMOUNT    = JSON_VALUE(s1.DATA,'$.min_amount'),
          t1.MAXAMOUNT    = JSON_VALUE(s1.DATA,'$.max_amount'),
          t1.REMARKS      = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON  = s1.CREATED_ON,
          t1.REWORKED_BY  = s1.CREATED_BY,
          t1.APPROVEDBY   = IV_approved_by,
          t1.APPROVEDON   = SYSTIMESTAMP,
          t1.APPROVED     =1
        WHERE (t1.TRXCODE = s1.ORIGINAL_ID AND t1.CHANNEL = JSON_VALUE(s1.DATA,'$.channel'))
       -- AND ROWNUM        =1
        WHEN NOT MATCHED  THEN
        INSERT
          (TRXCODE,
            PROCODE,
            CHANNEL,
            AMOUNT,
            FVR,
            MINAMOUNT,
            MAXAMOUNT,
            REMARKS,
            CREATEDON,
            CREATEDBY,
            APPROVED,
            APPROVEDBY,
            APPROVEDON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.unique_id'),
            JSON_VALUE(s1.DATA,'$.service_id'),
            JSON_VALUE(s1.DATA,'$.channel'),
            JSON_VALUE(s1.DATA,'$.charge_value'),
            JSON_VALUE(s1.DATA,'$.value_type'),
            JSON_VALUE(s1.DATA,'$.min_amount'),
            JSON_VALUE(s1.DATA,'$.max_amount'),
            JSON_VALUE(s1.DATA,'$.remarks'),
            s1.CREATED_ON,
            s1.CREATED_BY,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'edit_charge' THEN
      BEGIN
        MERGE INTO TB_TRANS_COMMISSION_CHARGES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.TRXCODE    = JSON_VALUE(s1.DATA,'$.service_code'),
          t1.PROCODE      = JSON_VALUE(s1.DATA,'$.service_id'),
          t1.CHANNEL      = JSON_VALUE(s1.DATA,'$.channel'),
          t1.AMOUNT       = JSON_VALUE(s1.DATA,'$.charge_value'),
          t1.FVR          = JSON_VALUE(s1.DATA,'$.value_type'),
          t1.MINAMOUNT    = JSON_VALUE(s1.DATA,'$.min_amount'),
          t1.MAXAMOUNT    = JSON_VALUE(s1.DATA,'$.max_amount'),
          t1.REMARKS      = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON  = s1.CREATED_ON,
          t1.REWORKED_BY  = s1.CREATED_BY,
          t1.APPROVEDBY   = IV_approved_by,
          t1.APPROVEDON   = SYSTIMESTAMP,
          t1.APPROVED     =1
        WHERE (t1.ID = s1.ORIGINAL_ID);
       -- AND ROWNUM        =1
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'create_gl_definition' THEN
      BEGIN
        MERGE INTO TB_GL_DEFINITION t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.PREFIX = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DESCRIPTION      = JSON_VALUE(s1.DATA,'$.prefix_description'),
          t1.GL_PARENT      = RPAD(JSON_VALUE(s1.DATA,'$.prefix'), 8, '0'),
          t1.REMARKS      = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON  = s1.CREATED_ON,
          t1.REWORKED_BY  = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP,
          t1.APPROVED     =1
        WHERE (t1.PREFIX = s1.ORIGINAL_ID)
        --AND ROWNUM        =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            PREFIX,
            DESCRIPTION ,
            GL_PARENT,
            REMARKS,
            CREATED_ON,
            CREATED_BY,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.prefix'),
            JSON_VALUE(s1.DATA,'$.prefix_description'),
            RPAD(JSON_VALUE(s1.DATA,'$.prefix'), 8, '0'),
            JSON_VALUE(s1.DATA,'$.remarks'),
            s1.CREATED_ON,
            s1.CREATED_BY,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'edit_gl_definition' THEN
      BEGIN
        MERGE INTO TB_GL_DEFINITION t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.PREFIX = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DESCRIPTION      = JSON_VALUE(s1.DATA,'$.prefix_description'),
          t1.GL_PARENT      = RPAD(JSON_VALUE(s1.DATA,'$.prefix'), 8, '0'),
          t1.REMARKS      = JSON_VALUE(s1.DATA,'$.remarks'),
          t1.REWORKED_ON  = s1.CREATED_ON,
          t1.REWORKED_BY  = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP,
          t1.APPROVED     =1
        WHERE (t1.PREFIX = s1.ORIGINAL_ID);        
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address ='create_gl' THEN
      
      BEGIN
          SELECT  DATA , CREATED_BY INTO V_DATA,V_CREATED_BY FROM TB_STAGING_ACTION WHERE ID = IV_staging_id;
          
          A_SP_CREATE_GL(JSON_VALUE(V_DATA,'$.prefix'),JSON_VALUE(V_DATA,'$.prefix_description'),V_CREATED_BY, 0, C_1);
      END;
      
      WHEN V_destination_address = 'delete_gl_definition' THEN
      BEGIN
        MERGE INTO TB_GL_DEFINITION t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY,
            CREATED_ON
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.PREFIX = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),          
          t1.REWORKED_ON  = s1.CREATED_ON,
          t1.REWORKED_BY  = s1.CREATED_BY,
          t1.DELETED_BY   = IV_approved_by,
          t1.DELETED_ON   = SYSTIMESTAMP,
          t1.DELETED     =1
        WHERE (t1.PREFIX = s1.ORIGINAL_ID);        
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'create_biller_mapping' THEN
        BEGIN
            MERGE INTO TB_BILLERS_MAPPINGS t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.FIELD100 = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
                DESCRIPTION  = JSON_VALUE(s1.DATA,'$.description'),
                BILLER_CURRENCY  = JSON_VALUE(s1.DATA,'$.biller_currency'),
                ACTIVE  = JSON_VALUE(s1.DATA,'$.active'),
                APPROVE_REMARKS = JSON_VALUE(s1.DATA,'$.remarks')
                WHERE (t1.FIELD100 = s1.ORIGINAL_ID)
            
            WHEN NOT MATCHED THEN
            --INSERT
            INSERT (PROCODE,FIELD100,DESCRIPTION,BILLER_CURRENCY,ACTIVE,CREATED_BY,CREATED_ON,MAKER_REMARKS,APPROVED_BY,APPROVED_ON,APPROVE_REMARKS)
            VALUES(
                JSON_VALUE(s1.DATA,'$.procode'),
                JSON_VALUE(s1.DATA,'$.field100'),
                JSON_VALUE(s1.DATA,'$.description'),
                JSON_VALUE(s1.DATA,'$.biller_currency'),
                JSON_VALUE(s1.DATA,'$.active'),
                s1.CREATED_BY,
                s1.CREATED_ON,
                '',
                IV_approved_by,
                SYSTIMESTAMP,
                JSON_VALUE(s1.DATA,'$.remarks')
            );
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'edit_biller_mapping' THEN
        BEGIN
            MERGE INTO TB_BILLERS_MAPPINGS t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.ID = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
                DESCRIPTION  = JSON_VALUE(s1.DATA,'$.description'),
                BILLER_CURRENCY  = JSON_VALUE(s1.DATA,'$.biller_currency'),
                ACTIVE  = JSON_VALUE(s1.DATA,'$.active'),
                APPROVE_REMARKS = JSON_VALUE(s1.DATA,'$.remarks')
                WHERE (t1.ID = s1.ORIGINAL_ID)
            
            WHEN NOT MATCHED THEN
            --INSERT
            INSERT (PROCODE,FIELD100,DESCRIPTION,BILLER_CURRENCY,ACTIVE,CREATED_BY,CREATED_ON,MAKER_REMARKS,APPROVED_BY,APPROVED_ON,APPROVE_REMARKS)
            VALUES(
                JSON_VALUE(s1.DATA,'$.procode'),
                JSON_VALUE(s1.DATA,'$.field100'),
                JSON_VALUE(s1.DATA,'$.description'),
                JSON_VALUE(s1.DATA,'$.biller_currency'),
                JSON_VALUE(s1.DATA,'$.active'),
                s1.CREATED_BY,
                s1.CREATED_ON,
                '',
                IV_approved_by,
                SYSTIMESTAMP,
                JSON_VALUE(s1.DATA,'$.remarks')
            );
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'create_gl_mapping' THEN
        BEGIN
            MERGE INTO TB_GL_MAPPING t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.TXNIDENTIFIER = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
                MWALLETCONTRA  = JSON_VALUE(s1.DATA,'$.mwallet_gl'),
                CBS_GL_DR  = JSON_VALUE(s1.DATA,'$.cbs_gl_dr'),
                CBS_GL_CR  = JSON_VALUE(s1.DATA,'$.cbs_gl_cr'),
                REWORKEDBY = s1.CREATED_BY,
                REWORKEDON = s1.CREATED_ON,
                APPROVED = 1,
                CHECKERREMARKS = JSON_VALUE(s1.DATA,'$.remarks')
                WHERE (t1.TXNIDENTIFIER = s1.ORIGINAL_ID)
            
            WHEN NOT MATCHED THEN
            --INSERT
            INSERT (PROCODE,
            TXNIDENTIFIER,
            MWALLETCONTRA,
            CBS_GL_DR,
            CBS_GL_CR,
            CREATEDON,CREATEDBY,APPROVED,APPROVEDBY,APPROVEDON,CHECKERREMARKS)
            VALUES(
                JSON_VALUE(s1.DATA,'$.procode'),
                JSON_VALUE(s1.DATA,'$.txnidentifier'),
                JSON_VALUE(s1.DATA,'$.mwalletcontra'),
                JSON_VALUE(s1.DATA,'$.cbs_gl_dr'),
                JSON_VALUE(s1.DATA,'$.cbs_gl_cr'),                
                s1.CREATED_ON,
                s1.CREATED_BY,
                1,
                IV_approved_by,
                SYSTIMESTAMP,
                JSON_VALUE(s1.DATA,'$.remarks')
            );
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'edit_gl_mapping' THEN
        BEGIN
            MERGE INTO TB_GL_MAPPING t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.ID = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                t1.PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
                t1.MWALLETCONTRA  = JSON_VALUE(s1.DATA,'$.mwalletcontra'),
                t1.CBS_GL_DR  = JSON_VALUE(s1.DATA,'$.cbs_gl_dr'),
                CBS_GL_CR  = JSON_VALUE(s1.DATA,'$.cbs_gl_cr'),
                t1.TXNIDENTIFIER = JSON_VALUE(s1.DATA,'$.txnidentifier'),
                t1.REWORKEDBY = s1.CREATED_BY,
                t1.REWORKEDON = s1.CREATED_ON,
                t1.APPROVED = 1,
                t1.CHECKERREMARKS = JSON_VALUE(s1.DATA,'$.remarks')
                WHERE (t1.ID = s1.ORIGINAL_ID);
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'delete_gl_mapping' THEN
        BEGIN
            MERGE INTO TB_GL_MAPPING t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.TXNIDENTIFIER = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                  t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),          
                  t1.REWORKEDON  = s1.CREATED_ON,
                  t1.REWORKEDBY  = s1.CREATED_BY,
                  t1.DELETED_BY   = IV_approved_by,
                  t1.DELETED_ON   = SYSTIMESTAMP,
                  t1.DELETED     =1
                WHERE (t1.TXNIDENTIFIER = s1.ORIGINAL_ID);
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      WHEN V_destination_address = 'delete_gl' THEN
        BEGIN
            MERGE INTO TB_GL t1 USING 
            (
                SELECT ORIGINAL_ID,
                DATA,
                CREATED_BY,
                CREATED_ON
              FROM TB_STAGING_ACTION
              WHERE ID        = IV_staging_id
              AND IS_APPROVED = 0
              AND ROWNUM      =1
                
            )s1 ON (t1.GL_CODE = s1.ORIGINAL_ID)
            WHEN MATCHED THEN
            --update 
                UPDATE SET 
                  t1.DELETE_REMARKS    = JSON_VALUE(s1.DATA,'$.remarks'),          
                  t1.REWORKED_DATE  = s1.CREATED_ON,
                  t1.REWORKED_BY  = s1.CREATED_BY,
                  t1.DELETED_BY   = IV_approved_by,
                  t1.DELETED_ON   = SYSTIMESTAMP,
                  t1.DELETED     =1
                WHERE (t1.GL_CODE = s1.ORIGINAL_ID);
        
        EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
   ------------------------------- CREATE GENERAL PARAMETER ------------------

    WHEN V_destination_address = 'create_general_parameter' THEN
    BEGIN
      
        MERGE INTO TB_GENERAL_PARAMS t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (CAST(t1.ID AS NVARCHAR2(20)) = s1.ORIGINAL_ID)

        WHEN MATCHED THEN
            UPDATE SET
            t1.ITEMNAME      = JSON_VALUE(s1.DATA,'$.name'),
            t1.ITEMVALUE     = JSON_VALUE(s1.DATA,'$.value'),
            t1.REWORKED_ON   = s1.CREATED_ON,
            t1.REWORKED_BY   = s1.CREATED_BY,
            t1.APPROVED_BY   = IV_approved_by,
            t1.APPROVED_ON   = SYSTIMESTAMP

            WHERE (t1.ID = s1.ORIGINAL_ID)

        WHEN NOT MATCHED THEN
            INSERT (ITEMNAME, ITEMVALUE, CREATED_BY, APPROVED, APPROVED_BY, APPROVED_ON)

            VALUES  (JSON_VALUE(s1.DATA,'$.name'), JSON_VALUE(s1.DATA,'$.value'), s1.CREATED_BY, 1, IV_approved_by,
             SYSTIMESTAMP);
             
        EXCEPTION
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;

    END ;

    -------------------- END CREATE GENERAL PARAMETER ---------------
    
    ------------------------ EDIT GENERAL PARAMETER -------------------------
    
    
    WHEN V_destination_address = 'edit_general_parameter' THEN 
    BEGIN
    
         MERGE INTO TB_GENERAL_PARAMS t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN
            UPDATE SET
            t1.ITEMNAME      = JSON_VALUE(s1.DATA,'$.name'),
            t1.ITEMVALUE     = JSON_VALUE(s1.DATA,'$.value'),
            t1.REWORKED_ON   = s1.CREATED_ON,
            t1.REWORKED_BY   = s1.CREATED_BY,
            t1.APPROVED_BY   = IV_approved_by,
            t1.APPROVED_ON   = SYSTIMESTAMP

            WHERE (t1.ID = s1.ORIGINAL_ID);
          EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
    END ;
    
    ----------------------- END EDIT GENERAL PARAMETER --------------------------
    
    ------------------------- DELETE GENERAL PARAMETER -------------------------


    WHEN V_destination_address = 'delete_general_parameter' THEN
    BEGIN

         MERGE INTO TB_GENERAL_PARAMS t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN
          
            UPDATE SET
            t1.DELETED       = 1,
            t1.DELETED_BY    = s1.CREATED_ON,
            t1.REWORKED_BY   = s1.CREATED_BY,
            t1.APPROVED_BY   = IV_approved_by,
            t1.APPROVED_ON   = SYSTIMESTAMP

            WHERE (t1.ID = s1.ORIGINAL_ID);
          EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
    END ;

    ----------------------- END DELETE GENERAL PARAMETER --------------------------
    
     ---------------------------CREATE CHARGE RANGE ------------------------------
    WHEN V_destination_address = 'create_charge_range' THEN
        
        BEGIN
        
         MERGE INTO TB_CHARGE_RANGE t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = 0)

        WHEN MATCHED THEN

        UPDATE SET 
        t1.PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
        t1.TRX_CODE = JSON_VALUE(s1.DATA,'$.trx_code'),
        t1.RANGE_FROM = JSON_VALUE(s1.DATA,'$.range_from'),
        t1.RANGE_TO = JSON_VALUE(s1.DATA,'$.range_to'),
        t1.AMOUNT = JSON_VALUE(s1.DATA,'$.amount'),
        t1.CURRENCY = JSON_VALUE(s1.DATA,'$.currency'),
         t1.CHANNEL = JSON_VALUE(s1.DATA,'$.channel'),        
        t1.APPROVED_BY   = IV_approved_by,
        t1.APPROVED_ON   = SYSTIMESTAMP,
        t1.CREATED_BY = s1.CREATED_BY,
        t1.CREATED_ON = SYSTIMESTAMP,
        t1.APPROVED = 1

        WHERE (t1.ID = s1.ORIGINAL_ID)

         WHEN NOT MATCHED THEN

         INSERT (
         PROCODE,
         TRX_CODE, 
         RANGE_FROM, 
         RANGE_TO, 
         AMOUNT, 
         CURRENCY, 
         CHANNEL, 
         APPROVED, 
         APPROVED_BY, 
         APPROVED_ON,
         CREATED_BY, 
         CREATED_ON) VALUES (
             JSON_VALUE(s1.DATA,'$.procode'),
             JSON_VALUE(s1.DATA,'$.trx_code'),
             JSON_VALUE(s1.DATA,'$.range_from'),
             JSON_VALUE(s1.DATA,'$.range_to'),
             JSON_VALUE(s1.DATA,'$.amount'),
             JSON_VALUE(s1.DATA,'$.currency'),
             JSON_VALUE(s1.DATA,'$.channel'),             
             1,
             IV_approved_by,
             SYSTIMESTAMP,
             s1.CREATED_BY , 
             SYSTIMESTAMP);    
             
      EXCEPTION
      WHEN OTHERS THEN
      RAISE ;

    END;
    -------------------------- END CREATE CHARGE RANGE ----------------------------------
      ---------------------------- EDIT CHARGE RANGE -------------------------------------
      WHEN V_destination_address = 'edit_charge_range' THEN
        
        BEGIN
        
         MERGE INTO TB_CHARGE_RANGE t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN

        UPDATE SET 
        t1.PROCODE = JSON_VALUE(s1.DATA,'$.procode'),
        t1.TRX_CODE = JSON_VALUE(s1.DATA,'$.trx_code'),
        t1.RANGE_FROM = JSON_VALUE(s1.DATA,'$.range_from'),
        t1.RANGE_TO = JSON_VALUE(s1.DATA,'$.range_to'),
        t1.AMOUNT = JSON_VALUE(s1.DATA,'$.amount'),
        t1.CURRENCY = JSON_VALUE(s1.DATA,'$.currency'),
        t1.APPROVED_BY   = IV_approved_by,
        t1.APPROVED_ON   = SYSTIMESTAMP,
        t1.CREATED_BY = s1.CREATED_BY,
        t1.CREATED_ON = SYSTIMESTAMP,
        t1.APPROVED = 1

        WHERE (t1.ID = s1.ORIGINAL_ID);
        EXCEPTION
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;

    END;
    ---------------------------- END EDIT CHARGE RANGE ----------------------------------
    ---------------------------- DELETE CHARGE RANGE -------------------------------------
      WHEN V_destination_address = 'delete_charge_range' THEN
        
        BEGIN
        
         MERGE INTO TB_CHARGE_RANGE t1 USING
        (
            SELECT ORIGINAL_ID, DATA , CREATED_BY, CREATED_ON FROM TB_STAGING_ACTION
            WHERE ID = IV_staging_id
            AND IS_APPROVED = 0
            AND ROWNUM = 1
        ) s1 ON (t1.ID = s1.ORIGINAL_ID)

        WHEN MATCHED THEN

        UPDATE SET 
        t1.DELETED = 1,
        t1.APPROVED_BY   = IV_approved_by,
        t1.APPROVED_ON   = SYSTIMESTAMP,
        t1.CREATED_BY = s1.CREATED_BY,
        t1.CREATED_ON = SYSTIMESTAMP,
        t1.APPROVED = 1

        WHERE (t1.ID = s1.ORIGINAL_ID);
        EXCEPTION
        WHEN OTHERS THEN
        RAISE;
        ROLLBACK;

    END;


    ---------------------------- DELETE CHARGE RANGE ----------------------------------


      
    ELSE
      V_count:=0;
    END CASE;
  END;
  --COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_USR_INST
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_USR_INST" (
    IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
BEGIN
  BEGIN
    CASE
--    WHEN V_destination_address = 'create_user' THEN
--      BEGIN
--        MERGE INTO TB_USER t1 USING
--        (SELECT ORIGINAL_ID,
--          DATA,
--          CREATED_BY,
--          CREATED_ON
--        FROM TB_STAGING_ACTION
--        WHERE ID              = IV_staging_id
--        AND IS_APPROVED       = 0
--        AND ROWNUM            =1
--        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
--      WHEN MATCHED THEN
--        UPDATE
--        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'),
--          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
--          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
--          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
--          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
--          t1.REWORKED_BY   = s1.CREATED_BY,
--          t1.APPROVED_BY   = IV_approved_by,
--          t1.APPROVED_ON   = SYSTIMESTAMP
--        WHERE t1.USER_NAME = s1.ORIGINAL_ID
--        AND ROWNUM         =1
--        WHEN NOT MATCHED
--        THEN
--        INSERT
--          (
--            USER_NAME,
--            PASSWORD_HASH,
--            EMAIL,
--            FIRST_NAME,
--            LAST_NAME,
--            MIDDLE_NAME,
--            MOBILE_NUMBER,
--            CREATED_BY,
--            CREATE_REMARKS,
--            APPROVED,
--            APPROVED_BY,
--            APPROVED_ON,
--            CREATED_ON
--          )
--          VALUES
--          (
--            JSON_VALUE(s1.DATA,'$.username'),
--            JSON_VALUE(s1.DATA,'$.username'), --JSON_VALUE(s1.DATA,'$.password'),
--            JSON_VALUE(s1.DATA,'$.email_address'),
--            JSON_VALUE(s1.DATA,'$.first_name'),
--            JSON_VALUE(s1.DATA,'$.last_name'),
--            JSON_VALUE(s1.DATA,'$.middle_name'),
--            JSON_VALUE(s1.DATA,'$.phone_number'),
--            s1.CREATED_BY,
--            IV_remarks,
--            1,
--            IV_approved_by,
--            SYSTIMESTAMP,
--            s1.CREATED_ON
--          );
--      EXCEPTION
--      WHEN OTHERS THEN
--        ROLLBACK;
--      END;
--      
--      
      ---------------- create user institution -----------------------------------
          WHEN V_destination_address = 'create_user_institution' THEN
      BEGIN
        DBMS_OUTPUT.put_line('EXECUTING CREATE USERS');
        MERGE INTO TB_USER_INSTITUTION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
  --      AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'),
          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.USER_NAME = s1.ORIGINAL_ID
  --      AND ROWNUM         =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            USER_NAME,
            PASSWORD_HASH,
            EMAIL,
            FIRST_NAME,
            LAST_NAME,
            MIDDLE_NAME,
            INSTITUTION_TYPE,
            PROFILE_ID,
            OTP,
            MOBILE_NUMBER,
            CREATED_BY,
            CREATE_REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON,
            CREATED_ON,
            INSTITUTION_CODE
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.username'),
            IV_additiona_info, --JSON_VALUE(s1.DATA,'$.password'),
            JSON_VALUE(s1.DATA,'$.email_address'),
            JSON_VALUE(s1.DATA,'$.first_name'),
            JSON_VALUE(s1.DATA,'$.last_name'),
            JSON_VALUE(s1.DATA,'$.middle_name'),
            JSON_VALUE(s1.DATA,'$.institution_type'),
            JSON_VALUE(s1.DATA,'$.profile_id'),
            JSON_VALUE(s1.DATA,'$.otp'),
            JSON_VALUE(s1.DATA,'$.phone_number'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP,
            s1.CREATED_ON,
            JSON_VALUE(s1.DATA,'$.institution_code')
          );

      EXCEPTION
      WHEN OTHERS THEN
      DBMS_OUTPUT.put_line('error while doing the user creation');
        RAISE;
      END;

      ---------------------- EDIT USER  -------------------------------------------]]]


    WHEN V_destination_address = 'edit_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (LOWER(t1.user_name) = LOWER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'),
          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE LOWER(t1.USER_NAME) = LOWER(s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    ------------------------ END EDIT USER -------------------------------------------

      ---------------------- EDIT USER INSTITUTION -------------------------------------------]]]


    WHEN V_destination_address = 'edit_user_institution' THEN
      BEGIN
        MERGE INTO TB_USER_INSTITUTION t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (LOWER(t1.user_name) = LOWER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'),
          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE LOWER(t1.USER_NAME) = LOWER(s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    ------------------------ END EDIT USER INSTITUTION-------------------------------------------

      ---------------------- DELETE USER  -------------------------------------------]]]


    WHEN V_destination_address = 'delete_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (LOWER(t1.user_name) = LOWER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DELETED = 1,
          t1.DELETED_BY   = IV_approved_by,
          t1.DELETED_ON   = SYSTIMESTAMP
        WHERE LOWER(t1.USER_NAME) = LOWER(s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    ------------------------ END EDIT USER -------------------------------------------


    WHEN V_destination_address = 'create_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.PROFILE_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED       = 1,
          REWORKED_ON         = SYSTIMESTAMP,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE t1.PROFILE_NAME = s1.ORIGINAL_ID
        AND ROWNUM            =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            PROFILE_NAME,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.profile_name'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    ---------------------- edit-profile --------------------------- 
    WHEN V_destination_address = 'edit_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.PROFILE_NAME = JSON_VALUE(s1.DATA,'$.profile_name'),
          t1.REWORKED    = 1,
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ID = s1.ORIGINAL_ID;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;    
    ----------------------delete-profile ---------------------------
    WHEN V_destination_address = 'delete_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED    = 1,
          t1.DELETED_ON   = SYSTIMESTAMP,
          t1.DELETED_BY   = s1.CREATED_BY
        WHERE t1.ID = s1.ORIGINAL_ID;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    -------------------- create-role --------------------------
    WHEN V_destination_address = 'create_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
            --AND IS_APPROVED = 0
          AND ROWNUM =1
        )
        s1 ON (t1.ROLE_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED    = 1,
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ROLE_NAME = s1.ORIGINAL_ID
        AND ROWNUM         =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            ROLE_NAME,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.role_name'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;


      ---------------------edit role ------------------------------------------

       WHEN V_destination_address = 'edit_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
          AND ROWNUM =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.ROLE_NAME = JSON_VALUE(s1.DATA,'$.role_name'),
          t1.REWORKED    = 1,
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ID = s1.ORIGINAL_ID;

      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      ---------------------end edit role --------------------------------------

      WHEN V_destination_address = 'delete_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
            --AND IS_APPROVED = 0
         AND ROWNUM =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED    = 1,
          t1.DELETED_ON   = SYSTIMESTAMP,
          t1.DELETED_BY   = s1.CREATED_BY
        WHERE t1.ID = s1.ORIGINAL_ID;
--        AND ROWNUM         = 1;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;

    WHEN V_destination_address = 'assign_profile' THEN
      BEGIN
        MERGE INTO TB_USER_IN_PROFILE t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.user_id||'_'||t1.profile_id = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED  = 1,
          t1.REWORKED_ON = SYSTIMESTAMP,
          t1.REWORKED_BY = s1.CREATED_BY,
          t1.APPROVED_BY = IV_approved_by,
          t1.APPROVED_ON = SYSTIMESTAMP
        WHERE (t1.user_id
          ||'_'
          ||t1.profile_id = s1.ORIGINAL_ID)
          --AND ROWNUM         =1 --Sometimes this condition while updating can screw you, bugs za oracle
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            USER_ID,
            PROFILE_ID,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.account'),
            JSON_VALUE(s1.DATA,'$.profile_id'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    WHEN V_destination_address = 'revoke_profile' THEN
      BEGIN
        MERGE INTO TB_USER_IN_PROFILE t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.user_id||'_'||t1.profile_id = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED_ON = SYSTIMESTAMP,
          t1.DELETED_BY   =IV_approved_by,
          t1.DELETED      =1,
          t1.ENABLED      = 0
        WHERE (t1.user_id
          ||'_'
          ||t1.profile_id = s1.ORIGINAL_ID);
        --AND ROWNUM         =1 --Sometimes this condition while updating can screw you, bugs za oracle
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    WHEN V_destination_address = 'block_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.BLOCKED_BY      = s1.CREATED_BY,
          t1.BLOCK_APPROVED_BY = IV_approved_by,
          t1.BLOCKED_ON        = SYSTIMESTAMP,
          t1.LOCKED            = 1
        WHERE t1.USER_NAME     = s1.ORIGINAL_ID
        AND t1.LOCKED          =0;
        --AND ROWNUM             =1; --2nd time i've been screwed by this condition
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'unblock_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (UPPER(t1.user_name) = UPPER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET t1.UN_BLOCKED_BY      = s1.CREATED_BY,
          t1.UN_BLOCK_APPROVED_BY = IV_approved_by,
          t1.UN_BLOCK_APPROVED_ON = SYSTIMESTAMP,
          t1.LOCKED               = 0,
          t1.TRIALS = 0
        WHERE (UPPER(t1.user_name) = UPPER(s1.ORIGINAL_ID));
   --     AND t1.LOCKED             =1;
        --AND ROWNUM                =1;
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'reset_password' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        --AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.PIN_RESET_BY        = s1.CREATED_BY,
          t1.PIN_RESET_APPROVED_BY = IV_approved_by,
          t1.PIN_RESET_ON          = SYSTIMESTAMP,
          t1.PASSWORD_HASH         = IV_additiona_info
        WHERE t1.USER_NAME         = s1.ORIGINAL_ID;
        --AND t1.LOCKED              =1;
        --AND ROWNUM                =1;
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    ELSE
      V_count:=0;
    END CASE;
  END;
  --COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_APRV_USR_MODULE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_APRV_USR_MODULE" (
   IV_staging_id     IN VARCHAR2,
    IV_approved_by    IN VARCHAR2,
    IV_remarks        IN VARCHAR2,
    IV_type_request   IN VARCHAR,
    IV_additiona_info IN VARCHAR2 DEFAULT '')
AS
  V_destination_address NVARCHAR2(50):= LOWER(TRIM(IV_type_request));
  V_count NUMBER                     :=0;
  
  V_USERNAME NVARCHAR2(50) := '';
BEGIN
  BEGIN
    CASE
    WHEN V_destination_address = 'create_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'),
          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.USER_NAME = s1.ORIGINAL_ID
        AND ROWNUM         =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            USER_NAME,
            PASSWORD_HASH,
            EMAIL,
            FIRST_NAME,
            LAST_NAME,
            MIDDLE_NAME,
            MOBILE_NUMBER,
            CREATED_BY,
            CREATE_REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON,
            CREATED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.username'),
            IV_additiona_info, --JSON_VALUE(s1.DATA,'$.password'),
            JSON_VALUE(s1.DATA,'$.email_address'),
            JSON_VALUE(s1.DATA,'$.first_name'),
            JSON_VALUE(s1.DATA,'$.last_name'),
            JSON_VALUE(s1.DATA,'$.middle_name'),
            JSON_VALUE(s1.DATA,'$.phone_number'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP,
            s1.CREATED_ON
          );
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
      
      ---------------------- EDIT USER  -------------------------------------------]]]


    WHEN V_destination_address = 'edit_user' THEN
    
    dbms_output.put_line('editing user..');
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (UPPER(t1.user_name) = UPPER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET t1.EMAIL       = JSON_VALUE(s1.DATA,'$.email_address'), -- email_address
          t1.FIRST_NAME    = JSON_VALUE(s1.DATA,'$.first_name'),
          t1.LAST_NAME     = JSON_VALUE(s1.DATA,'$.last_name'),
          t1.MOBILE_NUMBER = JSON_VALUE(s1.DATA,'$.phone_number'),
          t1.MIDDLE_NAME  = JSON_VALUE(s1.DATA,'$.middle_name'),
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE UPPER( t1.USER_NAME ) = UPPER( s1.ORIGINAL_ID);
      EXCEPTION
      WHEN OTHERS THEN
      dbms_output.put_line('failing editing user..');
        RAISE;
        ROLLBACK;
      END;
    ------------------------ END EDIT USER -------------------------------------------
    
      ---------------------- DELETE USER  -------------------------------------------]]]


    WHEN V_destination_address = 'delete_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (UPPER(t1.user_name) =UPPER( s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.DELETED = 1,
          t1.DELETED_BY   = IV_approved_by,
          t1.DELETED_ON   = SYSTIMESTAMP
        WHERE UPPER(t1.USER_NAME) =UPPER( s1.ORIGINAL_ID);
        
          SELECT ORIGINAL_ID INTO V_USERNAME FROM TB_STAGING_ACTION WHERE
        ID = IV_staging_id AND IS_APPROVED = 0 AND ROWNUM = 1;
        
        DBMS_OUTPUT.PUT_LINE('USERNAME '||V_USERNAME);
        A_SP_ARCHIVE_USER(V_USERNAME);
      EXCEPTION
      WHEN OTHERS THEN
      RAISE;
        ROLLBACK;
      END;
    ------------------------ END EDIT USER -------------------------------------------


    WHEN V_destination_address = 'create_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.PROFILE_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED       = 1,
          REWORKED_ON         = SYSTIMESTAMP,
          t1.REWORKED_BY      = s1.CREATED_BY,
          t1.APPROVED_BY      = IV_approved_by,
          t1.APPROVED_ON      = SYSTIMESTAMP
        WHERE t1.PROFILE_NAME = s1.ORIGINAL_ID
        AND ROWNUM            =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            PROFILE_NAME,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.profile_name'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    ---------------------- edit-profile --------------------------- 
    WHEN V_destination_address = 'edit_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.PROFILE_NAME = JSON_VALUE(s1.DATA,'$.profile_name'),
          t1.REWORKED    = 1,
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ID = s1.ORIGINAL_ID;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;    
    ----------------------delete-profile ---------------------------
    WHEN V_destination_address = 'delete_profile' THEN
      BEGIN
        MERGE INTO TB_PROFILES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
         AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED    = 1,
          t1.DELETED_ON   = SYSTIMESTAMP,
          t1.DELETED_BY   = s1.CREATED_BY
        WHERE t1.ID = s1.ORIGINAL_ID;
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    -------------------- create-role --------------------------
    WHEN V_destination_address = 'create_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
            --AND IS_APPROVED = 0
          AND ROWNUM =1
        )
        s1 ON (t1.ROLE_NAME = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED    = 1,
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ROLE_NAME = s1.ORIGINAL_ID
        AND ROWNUM         =1
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            ROLE_NAME,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON,
            DESCRIPTION
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.role_name'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP,
            JSON_VALUE(s1.DATA,'$.remarks')

          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
      
      ---------------------edit role ------------------------------------------
      
       WHEN V_destination_address = 'edit_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
          AND ROWNUM =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET 
          t1.ROLE_NAME = JSON_VALUE(s1.DATA,'$.role_name'),
          t1.REWORKED    = 1,
          t1.DESCRIPTION = JSON_VALUE(s1.DATA, '$.description'),
          t1.REWORKED_ON   = SYSTIMESTAMP,
          t1.REWORKED_BY   = s1.CREATED_BY,
          t1.APPROVED_BY   = IV_approved_by,
          t1.APPROVED_ON   = SYSTIMESTAMP
        WHERE t1.ID = s1.ORIGINAL_ID;
    
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      ---------------------end edit role --------------------------------------
      
      WHEN V_destination_address = 'delete_role' THEN
      BEGIN
        MERGE INTO TB_ROLES t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID = IV_staging_id
            --AND IS_APPROVED = 0
         AND ROWNUM =1
        )
        s1 ON (t1.ID = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED    = 1,
          t1.DELETED_ON   = SYSTIMESTAMP,
          t1.DELETED_BY   = s1.CREATED_BY
        WHERE t1.ID = s1.ORIGINAL_ID;
--        AND ROWNUM         = 1;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
      
    WHEN V_destination_address = 'assign_profile' THEN
      BEGIN
        MERGE INTO TB_USER_IN_PROFILE t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.user_id||'_'||t1.profile_id = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.REWORKED  = 1,
          t1.REWORKED_ON = SYSTIMESTAMP,
          t1.REWORKED_BY = s1.CREATED_BY,
          t1.APPROVED_BY = IV_approved_by,
          t1.APPROVED_ON = SYSTIMESTAMP
        WHERE (t1.user_id
          ||'_'
          ||t1.profile_id = s1.ORIGINAL_ID)
          --AND ROWNUM         =1 --Sometimes this condition while updating can screw you, bugs za oracle
        WHEN NOT MATCHED
        THEN
        INSERT
          (
            USER_ID,
            PROFILE_ID,
            CREATED_BY,
            REMARKS,
            APPROVED,
            APPROVED_BY,
            APPROVED_ON
          )
          VALUES
          (
            JSON_VALUE(s1.DATA,'$.account'),
            JSON_VALUE(s1.DATA,'$.profile_id'),
            s1.CREATED_BY,
            IV_remarks,
            1,
            IV_approved_by,
            SYSTIMESTAMP
          );
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    WHEN V_destination_address = 'revoke_profile' THEN
      BEGIN
        MERGE INTO TB_USER_IN_PROFILE t1 USING
        (SELECT ORIGINAL_ID,
            DATA,
            CREATED_BY
          FROM TB_STAGING_ACTION
          WHERE ID        = IV_staging_id
          AND IS_APPROVED = 0
          AND ROWNUM      =1
        )
        s1 ON (t1.user_id||'_'||t1.profile_id = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.DELETED_ON = SYSTIMESTAMP,
          t1.DELETED_BY   =IV_approved_by,
          t1.DELETED      =1,
          t1.ENABLED      = 0
        WHERE (t1.user_id
          ||'_'
          ||t1.profile_id = s1.ORIGINAL_ID);
        --AND ROWNUM         =1 --Sometimes this condition while updating can screw you, bugs za oracle
      EXCEPTION
      WHEN OTHERS THEN
        RAISE;
        ROLLBACK;
      END;
    WHEN V_destination_address = 'block_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.BLOCKED_BY      = s1.CREATED_BY,
          t1.BLOCK_APPROVED_BY = IV_approved_by,
          t1.BLOCKED_ON        = SYSTIMESTAMP,
          t1.LOCKED            = 1
        WHERE t1.USER_NAME     = s1.ORIGINAL_ID
        AND t1.LOCKED          =0;
        --AND ROWNUM             =1; --2nd time i've been screwed by this condition
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'unblock_user' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (UPPER(t1.user_name) = UPPER(s1.ORIGINAL_ID))
      WHEN MATCHED THEN
        UPDATE
        SET t1.UN_BLOCKED_BY      = s1.CREATED_BY,
          t1.UN_BLOCK_APPROVED_BY = IV_approved_by,
          t1.UN_BLOCK_APPROVED_ON = SYSTIMESTAMP,
          t1.LOCKED               = 0,
          t1.TRIALS = 0
        WHERE (UPPER(t1.user_name) = UPPER(s1.ORIGINAL_ID));
   --     AND t1.LOCKED             =1;
        --AND ROWNUM                =1;
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    WHEN V_destination_address = 'reset_password' THEN
      BEGIN
        MERGE INTO TB_USER t1 USING
        (SELECT ORIGINAL_ID,
          DATA,
          CREATED_BY,
          CREATED_ON
        FROM TB_STAGING_ACTION
        WHERE ID              = IV_staging_id
        --AND IS_APPROVED       = 0
        AND ROWNUM            =1
        ) s1 ON (t1.user_name = s1.ORIGINAL_ID)
      WHEN MATCHED THEN
        UPDATE
        SET t1.PIN_RESET_BY        = s1.CREATED_BY,
          t1.PIN_RESET_APPROVED_BY = IV_approved_by,
          t1.PIN_RESET_ON          = SYSTIMESTAMP,
          t1.PASSWORD_HASH         = IV_additiona_info
        WHERE t1.USER_NAME         = s1.ORIGINAL_ID;
        --AND t1.LOCKED              =1;
        --AND ROWNUM                =1;
      EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
      END;
    ELSE
      V_count:=0;
    END CASE;
  END;
  --COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_STAGING_CUST_COMP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_STAGING_CUST_COMP" (
  IV_CUSTOMER_NO NUMBER,
  PAYLOAD nvarchar2,
  C_1 IN OUT SYS_REFCURSOR
) AS 

json_payload json_object_t;

address varchar2(3000) :='';

v_cra_completed varchar2(10) := '';
v_nin_verification_completed varchar2(10) := '';
v_pep_completed varchar2(10) := '';
v_updated_by varchar2(10) := '';
v_rejected varchar2(10) := '';
v_rejected_remarks varchar2(200) := '';
v_rejected_by varchar2(10) := '';
v_ss_completed varchar(10) :='';
BEGIN

 DBMS_OUTPUT.PUT_LINE('original value | '||PAYLOAD);

  json_payload := json_object_t(PAYLOAD);
  
  v_cra_completed := json_payload.get_string('cra_completed');
  v_nin_verification_completed := json_payload.get_string('nin_verification_completed');
  v_pep_completed := json_payload.get_string('pep_completed');
  v_updated_by := json_payload.get_string('updated_by');
  v_rejected_remarks := json_payload.get_string('rejected_remarks') ;
  v_rejected_by := json_payload.get_string('rejected_by');
  v_ss_completed := json_payload.get_string('ss_completed');
  v_rejected := json_payload.get_string('rejected');
 -- address := json_payload.to_string;
  
 --  OPEN C_1 FOR SELECT '01' AS RESP_CODE , address as RESP_DESC FROM DUAL;
   DBMS_OUTPUT.PUT_LINE(json_payload.to_string);
  
 -- RETURN;
  dbms_output.put_line('REJECTED | '||v_rejected);
    IF v_rejected = '1' THEN
    dbms_output.put_line('REJECTED | '||v_rejected);
    
    UPDATE TB_CUSTOMER_COMPLIANCE SET REJECTED = 1, REJECTED_BY = v_rejected_by,
    REJECTED_ON = SYSTIMESTAMP , REJECTED_REMARKS =  v_rejected_remarks
    where CUSTOMER_ID = IV_CUSTOMER_NO;
    
    OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Compliance information rejected successfully' as RESP_DESC FROM DUAL;
    RETURN;
  END IF; 
  
  update TB_CUSTOMER_COMPLIANCE set NIN_VERIFICATION_COMPLETED = v_nin_verification_completed,
  CRA_COMPLETED = v_cra_completed, IS_PEP = v_pep_completed , 
  UPDATED_BY = v_updated_by , UPDATED_ON = SYSTIMESTAMP 
  where 
  CUSTOMER_ID = IV_CUSTOMER_NO;
  
  -- check for the prerequistes
  
  dbms_output.put_line('nin_verification | '||v_nin_verification_completed);
  IF v_nin_verification_completed = '1' THEN
    UPDATE TB_CUSTOMER_COMPLIANCE SET NIN_COMPLETED_DATE = SYSTIMESTAMP where CUSTOMER_ID = IV_CUSTOMER_NO;
    
    -- update the customer details information to fully registered
    
    UPDATE TB_CUSTOMER_VALIDATION SET PARTIAL_REGISTRATION = '0' WHERE ID = (
      SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE PHONE_NUMBER = (
        SELECT CUSTOMER_NO FROM TB_CUSTOMER WHERE ID = IV_CUSTOMER_NO AND ROWNUM = 1
      ) AND ROWNUM = 1
    );
    
    UPDATE TB_ACCOUNT SET PARTIAL_REG_BLOCK = '0' WHERE ACCOUNT_NO IN (SELECT ACCOUNT_NO FROM TB_ACCOUNT WHERE 
    CUSTOMER_NO = (
        SELECT CUSTOMER_NO FROM TB_CUSTOMER WHERE ID = IV_CUSTOMER_NO AND ROWNUM = 1
      ) FETCH NEXT 2 ROWS ONLY );
    
  ELSE
  dbms_output.put_line('nin_verification | '||v_nin_verification_completed );
        UPDATE TB_CUSTOMER_VALIDATION SET PARTIAL_REGISTRATION = '1' WHERE ID = (
      SELECT ID FROM TB_CUSTOMER_VALIDATION WHERE PHONE_NUMBER = (
        SELECT CUSTOMER_NO FROM TB_CUSTOMER WHERE ID = IV_CUSTOMER_NO AND ROWNUM = 1
      ) AND ROWNUM = 1
    );
    
    UPDATE TB_ACCOUNT SET PARTIAL_REG_BLOCK = '1' WHERE ACCOUNT_NO IN (SELECT ACCOUNT_NO FROM TB_ACCOUNT WHERE 
    CUSTOMER_NO = (
        SELECT CUSTOMER_NO FROM TB_CUSTOMER WHERE ID = IV_CUSTOMER_NO AND ROWNUM = 1
      ) FETCH NEXT 2 ROWS ONLY );
    
  END IF;
  
  IF v_pep_completed = '1' THEN
    UPDATE TB_CUSTOMER_COMPLIANCE SET PEP_UPDATED_ON = SYSTIMESTAMP where CUSTOMER_ID = IV_CUSTOMER_NO;
  END IF; 
  
  IF v_ss_completed = '1' THEN
    UPDATE TB_CUSTOMER_COMPLIANCE SET SS_COMPLETED_DATE = SYSTIMESTAMP where CUSTOMER_ID = IV_CUSTOMER_NO;
  END IF; 
  
   IF v_cra_completed  = '1' THEN
    UPDATE TB_CUSTOMER_COMPLIANCE SET CRA_COMPLETED_DATE = SYSTIMESTAMP where CUSTOMER_ID = IV_CUSTOMER_NO;
  END IF;
  
  
  OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Compliance information updated successfully' as RESP_DESC FROM DUAL;

  
  exception when others then
    rollback;
    raise;
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'An error occured while processing compliance request' as RESP_DESC FROM DUAL;
END A_SP_STAGING_CUST_COMP;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_TEMP_CREATE_WORKFLOW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_TEMP_CREATE_WORKFLOW" (
    IV_CATEGORY_ID   IN VARCHAR2,
    IV_ADDRESS_NAME  IN VARCHAR2,
    IV_WORKFLOW_NAME IN VARCHAR2)
AS
  V_WORKFLOW_ID NUMBER:=0;
BEGIN
  INSERT
  INTO TB_DATA_WORKFLOW
    (
      CATEGORY_ID,
      ADDRESS_NAME,
      WORKFLOW_NAME,
      DESCRIPTION,
      ACTIVE,
      CREATED_BY
    )
    VALUES
    (
      IV_CATEGORY_ID,
      IV_ADDRESS_NAME,
      IV_WORKFLOW_NAME,
      IV_WORKFLOW_NAME,
      1,
      'ken.karue'
    );
  SELECT ID
  INTO V_WORKFLOW_ID
  FROM TB_DATA_WORKFLOW
  WHERE ROWNUM=1
  ORDER BY ID DESC;
  INSERT
  INTO TB_DATA_WORKFLOW_ACTION
    (
      DESCRIPTION,
      WORKFLOW_ID,
      STATUS_CODE,
      ORDER_NUMBER,
      ENABLED,
      REQUIRE_ROLE,
      REQUIRE_USERNAME,
      ACTION_NAME,
      IS_FINAL,
      CREATED_BY
    )
    VALUES
    (
      'Level 1 approval',
      V_WORKFLOW_ID,
      1,
      1,
      1,
      IV_ADDRESS_NAME
      ||'_level_1_approval',
      0,
      'Step 1',
      0,
      'ken.karue'
    );
  INSERT
  INTO TB_DATA_WORKFLOW_ACTION
    (
      DESCRIPTION,
      WORKFLOW_ID,
      STATUS_CODE,
      ORDER_NUMBER,
      ENABLED,
      REQUIRE_ROLE,
      REQUIRE_USERNAME,
      ACTION_NAME,
      IS_FINAL,
      CREATED_BY
    )
    VALUES
    (
      'Level 1 approval',
      V_WORKFLOW_ID,
      1,
      1,
      1,
      IV_ADDRESS_NAME
      ||'_level_1_approval',
      0,
      'Step 2',
      1,
      'ken.karue'
    );
    COMMIT;
END A_SP_TEMP_CREATE_WORKFLOW;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_TOKEN_FULLFILLMENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_TOKEN_FULLFILLMENT" 
(
  IV_TOKEN IN NVARCHAR2 ,
  IV_PHONE_NUMBER IN NVARCHAR2 ,
  IV_AMOUNT IN NUMBER,
  C_1 OUT SYS_REFCURSOR
) AS 

V_COUNT NUMBER := 0;
V_TRANSACTION_DATE NVARCHAR2(20) :='';
V_ID NUMBER(20) :=0;
V_STORED_PHONENUMBER NVARCHAR2(50) :='';
V_STORED_AMOUNT NUMBER(18,5) :=0;
V_EXPIRED_FLAG NUMBER(4) :=0;
V_REVERSAL_FLAG NUMBER (1) :=0;
V_TRX_CHARGE NUMBER(18) :=0;
BEGIN

    SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (
        SELECT ID FROM TB_CARDLESS_TRANSACTIONS
         WHERE TOKEN_HASH = IV_TOKEN AND CASHED_OUT = 0 
         ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY);
 
    
    IF V_COUNT < 1 THEN
        OPEN C_1 FOR SELECT '61|0|0|0|0|Expired token' AS RESP_DESC FROM DUAL;
        RETURN;
    END IF;

    SELECT ID , PHONE_NUMBER,AMOUNT ,EXPIRED ,TRX_CHARGE INTO  V_ID , V_STORED_PHONENUMBER, 
    V_STORED_AMOUNT,V_EXPIRED_FLAG,V_TRX_CHARGE
    FROM TB_CARDLESS_TRANSACTIONS WHERE TOKEN_HASH = IV_TOKEN
    AND CASHED_OUT = 0 
         ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
         
         --the first expired flag is used to check whether the job had already processed it or not
         -- the job will has already unblocked the amount has no reason to use it again. 
    IF  V_EXPIRED_FLAG  = 1 THEN
       OPEN C_1 FOR SELECT( '66|0|0|0|0|Expired token' )AS RESP_DESC FROM DUAL;     
      return;
    END IF;

    -- check if the token has expired or not;
    V_EXPIRED_FLAG := FN_CHECK_VALIDITY(V_ID);
    
    DBMS_OUTPUT.PUT_LINE('expiry flag | '||V_EXPIRED_FLAG);
    IF V_EXPIRED_FLAG = 0 THEN --expired token
        OPEN C_1 FOR SELECT( '62|Expired token|'||V_STORED_AMOUNT||'_'||V_TRX_CHARGE )AS RESP_DESC FROM DUAL;     
        return;
    END IF;
     

    IF IV_PHONE_NUMBER <> V_STORED_PHONENUMBER THEN
        OPEN C_1 FOR SELECT '63|0|0|0|0|Phone number not linked to the token' AS RESP_DESC FROM DUAL;
        RETURN;
    END IF;   
    
    IF IV_AMOUNT <> V_STORED_AMOUNT THEN
      OPEN C_1 FOR SELECT '64|0|0|0|0|Incorrect amount' AS RESP_DESC FROM DUAL;
        RETURN;
    END IF;


    UPDATE TB_CARDLESS_TRANSACTIONS SET CASHED_OUT = 1, CASHED_OUT_TIME = SYSTIMESTAMP WHERE ID = V_ID;

    OPEN C_1 FOR SELECT '00|Cashed out is successful|'||V_STORED_AMOUNT||'_'||V_TRX_CHARGE AS RESP_DESC FROM DUAL;
    RETURN;

END A_SP_TOKEN_FULLFILLMENT;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_TRIAL_BALANCE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_TRIAL_BALANCE" (
	 p_WorkingDate NVARCHAR2,
     c_1 OUT SYS_REFCURSOR
)
AS
 v_CrAmt number(18,5);
 v_DrAmt number(18,5);
 v_GLBalance number(18,5);
 v_OpeningGLBal number(18,5);
 v_GLCode nvarchar2(20);
 v_GLType char(1);
 v_PrevWorkingDate TIMESTAMP(6);
 v_FirstYearDate TIMESTAMP(6);
 v_WorkingDate date;
 v_TodayCrAmt number(18,5);
 v_TodayDrAmt number(18,5);
 v_OpeningBal number(18,5);
 v_ClosingBal number(18,5);
 V_COUNT INT := 0;
 v_cnt int :=0;
 
 v_first_date_of_yr NVARCHAR2(50) :=0;

BEGIN

SAVEPOINT V_SAFEPOINT;

SELECT PreviousWorkingDate INTO v_PrevWorkingDate FROM tb_Date_Settings;

  v_WorkingDate := TO_DATE(p_WorkingDate,'yyyy-MM-dd');

  v_first_date_of_yr :=to_char(extract(year from v_WorkingDate))||'-01-01';
  dbms_output.put_line(v_first_date_of_yr); --to_char(extract(year from p_WorkingDate))

 SELECT CAST (to_date(v_first_date_of_yr,'yyyy-MM-dd') AS TIMESTAMP) INTO v_FirstYearDate FROM dual;
 ---  SELECT TRUNC (v_PrevWorkingDate , 'YEAR') FROM DUAL; -- RETURNS FIRST DAY OF THE YEAR
----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
	(SELECT * FROM tb_Holiday WHERE Holiday_Date = p_WorkingDate AND rownum <= 1) ;
	IF(V_COUNT > 0) THEN
		v_WorkingDate := v_PrevWorkingDate;

	END IF;
  
  
  
  
  --- because we are running a real time trial balance , any other code after this block is uneccessary 
  
  BEGIN
  
--    OPEN c_1 FOR SELECT g.GL_PARENT AS GLPARENT , a.GL_CODE AS GLCode ,a.OPENING_BAL AS OPENINGBAL,  
--    a.DR_BAL_LCY AS DRBalLCY, a.CR_BAL_LCY  AS CRBalLCY, a.GL_BALANCE AS GLBalance , 
--    (a.OPENING_BAL + a.CR_BAL_LCY - a.DR_BAL_LCY) AS ClosingBal,WORKING_DATE AS WorkingDate ,g.GL_DESCRIPTION AS GLDescription
--    ,g.GL_TYPE AS GLType , g.CURRENCY AS Currency  from 
--    TB_GL_BALANCE_ARCHIVE a inner join TB_GL g ON a.GL_CODE = g.GL_CODE 
--    -- INNER JOIN TB_PRODUCTS p ON p.LEAF_GL = g.GL_CODE
--    WHERE a.WORKING_DATE = v_WorkingDate AND  g.ALLOW_BACK_POSTING = 1 and a.WORKING_DATE>=v_FirstYearDate;

    OPEN c_1 FOR SELECT  g.GL_PARENT AS GLPARENT , 
    g.GL_DESCRIPTION AS GLDescription,
    g.GL_TYPE AS GLType,
    SUM (a.OPENING_BAL ) AS OPENINGBAL,
    SUM(a.DR_BAL_LCY) AS DRBalLCY,SUM( a.CR_BAL_LCY )  
    AS CRBalLCY ,SUM( a.GL_BALANCE) AS GLBalance, 
    SUM( (a.OPENING_BAL + a.CR_BAL_LCY - a.DR_BAL_LCY)) AS ClosingBal,
    a.WORKING_DATE as WorkingDate,
    g.CURRENCY AS Currency
    
    FROM TB_GL_BALANCE_ARCHIVE a inner join TB_GL g ON a.GL_CODE = g.GL_CODE 
     WHERE a.WORKING_DATE =v_WorkingDate AND 
    g.ALLOW_BACK_POSTING = 1 and a.WORKING_DATE>=v_FirstYearDate
    GROUP BY g.GL_PARENT,a.WORKING_DATE,g.GL_DESCRIPTION, g.GL_TYPE,g.CURRENCY;
    
    RETURN;
    
    EXCEPTION
  WHEN OTHERS THEN
  RAISE;
	OPEN c_1 FOR SELECT '' AS GLDescription,  '' AS GLParent, '' AS Currency, '' AS GLType, '' AS GLCode, 0 AS DRBalLCY,0 AS CRBalLCY,
    0 AS GLBalance,0 AS OPENINGBAL,0 AS WorkingDate,0 AS ClosingBal FROM TB_TEMP_TRIAL_DATA;
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
  END;



-- this code is below is not needed but its good for understanding the trial balance :)
BEGIN
  EXECUTE IMMEDIATE ' TRUNCATE TABLE TB_TEMP_TRIAL_DATA';
  
  dbms_output.put_line ('temp balance truncated successfully');
  commit;
  exception when others then
    raise;
END;



BEGIN
-- TB_TEMP_TRIAL_DATA
-- TB_TEMP_TRIAL_DATAANCE

delete from TB_TEMP_TRIAL_DATA;

SELECT COUNT(id) INTO V_COUNT FROM tb_GL_Balance_Archive where WORKING_DATE = v_WorkingDate ; 
 dbms_output.put_line('total temp data | '||V_COUNT);

INSERT INTO TB_TEMP_TRIAL_DATA ----(GLDescription,GLParent,Currency,GLType,GLCode,DRBalLCY,CRBalLCY,GLBalance,OPENINGBAL,WorkingDate,ClosingBal) 
SELECT UPPER(A.GL_Description) GLDescription,A.GL_Parent,A.Currency,A.GL_TYPE,
A.GL_Code, NVL(B.DR_Bal_LCY,0) DRBalLCY, NVL(B.CR_Bal_LCY,0) CRBalLCY, 
NVL(B.GL_Balance,0) GLBalance,NVL(OPENING_BAL,0) OPENINGBAL,0,v_WorkingDate
FROM tb_GL A LEFT JOIN tb_GL_Balance_Archive B 
ON A.GL_Code=B.GL_Code where B.Working_Date = v_WorkingDate ;


  
  select count(glcode) into V_COUNT from TB_TEMP_TRIAL_DATA ;
 dbms_output.put_line('total temp data | '||V_COUNT ||' | working_date | '||v_WorkingDate); --v_WorkingDate
 
END;

    MERGE INTO TB_TEMP_TRIAL_DATA t1
        USING
        (
            -- For more complicated queries you can use WITH clause here
                WITH AEGLCTE AS
                (
                      SELECT SUM(NVL(A.CR_Bal_LCY,0)) AS CRBalLCY, SUM(NVL(A.DR_Bal_LCY,0)) AS DRBalLCY,A.GL_Code AS GL_Code
                       FROM VW_GLBALANCE A  INNER JOIN  TB_TEMP_TRIAL_DATA B ON A.GL_Code  = B.GLCode 
                       WHERE B.GLCode <> B.GLParent AND
                       A.Working_Date >= v_FirstYearDate AND A.Working_Date = v_WorkingDate
                       GROUP BY A.GL_Code
                )
                SELECT * FROM AEGLCTE
        )t2
        ON(t1.GLCode = t2.Gl_Code AND t1.WorkingDate = v_WorkingDate )
        WHEN MATCHED THEN UPDATE SET
         t1.DRBalLCY= t2.DRBalLCY,t1.CRBalLCY= t2.CRBalLCY;




----HANDLE PARENT GLs
DECLARE
	CURSOR CUR_TB IS
	SELECT GLCode,GLType ,OPENINGBAL FROM TB_TEMP_TRIAL_DATA WHERE GLCode=GLParent ;	
	V_CUR_TB_DATA CUR_TB%ROWTYPE;

	BEGIN
	  -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
	  OPEN CUR_TB;
	  -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
	  FETCH CUR_TB
	  INTO V_CUR_TB_DATA;
	  -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
	  WHILE CUR_TB%FOUND
	  LOOP

		v_GLCode := V_CUR_TB_DATA.GLCode; 
		v_GLType := V_CUR_TB_DATA.GLType; 
		v_OpeningBal := V_CUR_TB_DATA.OPENINGBAL;
		v_cnt  :=0;
		v_OpeningGLBal:=0;
		v_CrAmt:=0;
		v_DrAmt:=0;

    dbms_output.put_line('parent gl |'||v_GLCode);
	  SELECT COUNT(*) INTO v_cnt FROM VW_GLBALANCE WHERE GL_Parent=v_GLCode AND Working_Date=v_WorkingDate;
	 -- SELECT @OpeningGLBal=ISNULL(OpeningBal,0) FROM tbGLBalance_Archive WHERE GLCode=@GLCode and  WorkingDate=@FirstYearDate
	  --UPDATE TB_TEMP_TRIAL_DATA SET OPENINGBAL=@OpeningGLBal WHERE GLCode=@GLCode 

    dbms_output.put_line('total count in view |'||v_cnt);
	  IF(v_cnt = 1)
	  THEN

			SELECT SUM(NVL(CR_Bal_LCY,0)), SUM(NVL(DR_Bal_LCY,0)), SUM(NVL(OPENING_BAL,0)) INTO v_CrAmt, v_DrAmt, v_OpeningBal
      FROM VW_GLBALANCE 
			WHERE GL_Parent=v_GLCode AND Working_Date>=v_FirstYearDate AND Working_Date = v_WorkingDate; 

			 SELECT SUM(NVL(GL_Balance,0)) INTO v_GLBalance FROM VW_GLBALANCE WHERE GL_Parent=v_GLCode 
       AND GL_Code<>v_GLCode AND Working_Date=v_WorkingDate;

            ----Opening Balance (what you have in the GL at the start) plus Total Income (what money comes in) 
            ----minus Total Expenses (what money goes out) equals Closing Balance (what money you have left).
				 v_ClosingBal := v_OpeningBal + v_CrAmt - v_DrAmt;
				 UPDATE TB_TEMP_TRIAL_DATA SET ClosingBal = v_ClosingBal, OPENINGBAL = v_OpeningBal WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

				 IF(v_GLType IN ('A','E')) THEN
         
           UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=NVL(v_DrAmt,0), CRBalLCY=NVL(v_CrAmt,0), 
                  GLBalance=(NVL(OPENINGBAL,0)+NVL(v_DrAmt,0)-NVL(v_CrAmt,0)) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;
	
--				  UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=DRBalLCY+NVL(v_DrAmt,0), CRBalLCY=CRBalLCY+NVL(v_CrAmt,0), 
--                  GLBalance=(NVL(OPENINGBAL,0)+NVL(v_DrAmt,0)-NVL(v_CrAmt,0)) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;
  			 ELSE
            UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=NVL(v_DrAmt,0), CRBalLCY=NVL(v_CrAmt,0), 
                   GLBalance=(NVL(OPENINGBAL,0)+NVL(v_CrAmt,0)-NVL(v_DrAmt,0)) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

				   UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=DRBalLCY+NVL(v_DrAmt,0), CRBalLCY=CRBalLCY+NVL(v_CrAmt,0), 
                   GLBalance=(NVL(OPENINGBAL,0)+NVL(v_CrAmt,0)-NVL(v_DrAmt,0)) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

			  END IF;
            END IF;

		IF(v_cnt > 1)
			THEN

				 SELECT SUM(NVL(CR_Bal_LCY,0)), SUM(NVL(DR_Bal_LCY,0)), SUM(NVL(OPENING_BAL,0)) INTO v_CrAmt, v_DrAmt, v_OpeningBal FROM VW_GLBALANCE 
				 WHERE GL_Parent=v_GLCode AND GL_Code<>v_GLCode AND Working_Date >=v_FirstYearDate AND Working_Date = v_WorkingDate; 

				 SELECT SUM(NVL(GL_Balance,0)) INTO v_GLBalance FROM VW_GLBALANCE WHERE GL_Parent=v_GLCode AND GL_Code<>v_GLCode AND Working_Date=v_WorkingDate;

            ----Opening Balance (what you have in the GL at the start) plus Total Income (what money comes in) 
            ----minus Total Expenses (what money goes out) equals Closing Balance (what money you have left).
				 v_ClosingBal := v_OpeningBal + v_CrAmt - v_DrAmt;
				 UPDATE TB_TEMP_TRIAL_DATA SET ClosingBal = v_ClosingBal, OPENINGBAL = v_OpeningBal WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

				 IF(v_GLType IN ('A','E')) THEN
          UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=NVL(v_DrAmt,0), CRBalLCY=NVL(v_CrAmt,0), 
                  GLBalance= v_GLBalance WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;
--				  UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=DRBalLCY+NVL(v_DrAmt,0), CRBalLCY=CRBalLCY+NVL(v_CrAmt,0), 
--                  GLBalance=(NVL(GLBalance,0) + v_GLBalance) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;
				 ELSE
         			   UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=NVL(v_DrAmt,0), CRBalLCY=NVL(v_CrAmt,0), 
                   GLBalance= v_GLBalance WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;
                   
--				   UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=DRBalLCY+NVL(v_DrAmt,0), CRBalLCY=CRBalLCY+NVL(v_CrAmt,0), 
--                   GLBalance=(NVL(GLBalance,0) + v_GLBalance) WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

			  END IF;              
            END IF;

	  FETCH CUR_TB  INTO  V_CUR_TB_DATA;
	 END LOOP;
	 -- FREE RESOURCES USED BY THE CURSOR
 	CLOSE CUR_TB;
END;

IF(v_WorkingDate = v_FirstYearDate) THEN
   UPDATE TB_TEMP_TRIAL_DATA SET DRBalLCY=0,CRBalLCY=0, OPENINGBAL=0 WHERE GLType IN ('E','I');
   END IF;

OPEN c_1 FOR 
SELECT  GLDescription,GLParent,Currency, GLType, GLCode,NVL(DRBalLCY,0) DRBalLCY,NVL(CRBalLCY,0) CRBalLCY,
	 CASE GLType
--		   WHEN 'L' THEN (-1 * GLBalance)
--		   WHEN 'I' THEN (-1 * GLBalance)
           WHEN 'L' THEN GLBalance
		   WHEN 'I' THEN GLBalance
		 ELSE GLBalance
		 END  GLBalance,
	 CASE GLType
	   WHEN 'L' THEN  GLBalance
	   WHEN 'I' THEN  GLBalance
	 ELSE 0
	 END  CRGLBalance,
	 CASE GLType
	   WHEN 'A' THEN GLBalance
	   WHEN 'E' THEN GLBalance
	 ELSE 0
	 END  DRGLBalance,
	   CASE GLType
	   WHEN 'L' THEN  OPENINGBAL
	   WHEN 'I' THEN  OPENINGBAL
	 ELSE OPENINGBAL
	 END  OPENINGBAL,
	  CASE GLType
	   WHEN 'L' THEN OPENINGBAL
	   WHEN 'I' THEN OPENINGBAL
	 ELSE 0
	 END  CROPENINGBAL,
	 CASE GLType
	   WHEN 'A' THEN OPENINGBAL
	   WHEN 'E' THEN OPENINGBAL
	 ELSE 0
	 END  DROPENINGBAL, ClosingBal, WorkingDate  FROM TB_TEMP_TRIAL_DATA
	 WHERE GLParent = GLCode
	 ORDER BY GLParent, GLCode ASC;


--OPEN c_1 FOR SELECT GLDescription,GLParent,Currency,GLType,GLCode,
--DRBalLCY,CRBalLCY,GLBalance,OPENINGBAL,WorkingDate,ClosingBal FROM TB_TEMP_TRIAL_DATA;
COMMIT;



EXCEPTION
  WHEN OTHERS THEN
  RAISE;
	OPEN c_1 FOR SELECT '' AS GLDescription,  '' AS GLParent, '' AS Currency, '' AS GLType, '' AS GLCode, 0 AS DRBalLCY,0 AS CRBalLCY,
    0 AS GLBalance,0 AS OPENINGBAL,0 AS WorkingDate,0 AS ClosingBal FROM TB_TEMP_TRIAL_DATA;
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_TRIAL_BALANCE_DRILL_DOWN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_TRIAL_BALANCE_DRILL_DOWN" (
	 p_WorkingDate DATE,
     p_GL_Code NVARCHAR2,
     c_1 OUT SYS_REFCURSOR
)
AS
 v_CrAmt number(18,5);
 v_DrAmt number(18,5);
 v_GLBalance number(18,5);
 v_OpeningGLBal number(18,5);
 v_GLCode nvarchar2(10);
 v_GLType char(1);
 v_PrevWorkingDate TIMESTAMP(3);
 v_FirstYearDate TIMESTAMP(3);
 v_WorkingDate date := p_WorkingDate;
 v_TodayCrAmt number(18,5);
 v_TodayDrAmt number(18,5);
 v_OpeningBal number(18,5);
 v_ClosingBal number(18,5);
 V_COUNT INT := 0;
 v_cnt int :=0;

BEGIN

SAVEPOINT V_SAFEPOINT;

SELECT PreviousWorkingDate INTO v_PrevWorkingDate FROM tb_Date_Settings;

 SELECT '01 JAN '||to_char(extract(year from p_WorkingDate) ) INTO v_FirstYearDate FROM dual;
 ---  SELECT TRUNC (v_PrevWorkingDate , 'YEAR') FROM DUAL; -- RETURNS FIRST DAY OF THE YEAR
----Reset count
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
	(SELECT * FROM tb_Holiday WHERE Holiday_Date = p_WorkingDate AND rownum <= 1) ;
	IF(V_COUNT > 0) THEN
		v_WorkingDate := v_PrevWorkingDate;

	END IF;


---TRUNCATE TABLE tb_temp_Trial_Balance;
BEGIN

INSERT INTO tb_temp_Trial_Bal_Drill ----(GLDescription,GLParent,Currency,GLType,GLCode,DRBalLCY,CRBalLCY,GLBalance,OPENINGBAL,WorkingDate,ClosingBal) 
SELECT UPPER(A.GL_Description) GLDescription,A.GL_Parent,A.Currency,A.GL_TYPE,
A.GL_Code, NVL(B.DR_Bal_LCY,0) DRBalLCY, NVL(B.CR_Bal_LCY,0) CRBalLCY, 
NVL(B.GL_Balance,0) GLBalance,NVL(OPENING_BAL,0) OPENINGBAL,0,v_WorkingDate
FROM tb_GL A LEFT JOIN tb_GL_Balance_Archive B 
ON A.GL_Code=B.GL_Code WHERE TO_DATE(B.Working_Date) = v_WorkingDate ;

END;

    MERGE INTO tb_temp_Trial_Bal_Drill t1
        USING
        (
            -- For more complicated queries you can use WITH clause here
                WITH AEGLCTE AS
                (
                      SELECT SUM(NVL(A.CR_Bal_LCY,0)) AS CRBalLCY, SUM(NVL(A.DR_Bal_LCY,0)) AS DRBalLCY,A.GL_Code AS GL_Code
                       FROM VW_GLBALANCE A  INNER JOIN  tb_temp_Trial_Bal_Drill B ON A.GL_Code  = B.GLCode 
                       WHERE B.GLCode <> B.GLParent AND
                       A.Working_Date >= v_FirstYearDate AND A.Working_Date = v_WorkingDate
                       GROUP BY A.GL_Code

                )
                SELECT * FROM AEGLCTE
        )t2
        ON(t1.GLCode = t2.Gl_Code AND t1.WorkingDate = v_WorkingDate )
        WHEN MATCHED THEN UPDATE SET
         t1.DRBalLCY= t2.DRBalLCY,t1.CRBalLCY= t2.CRBalLCY;




----HANDLE PARENT GLs
DECLARE
	CURSOR CUR_TB_DRILL IS
	SELECT GLCode,GLType ,OPENINGBAL FROM tb_temp_Trial_Bal_Drill WHERE GLCode <> GLParent ;	
	V_CUR_TB_DRILL_DATA CUR_TB_DRILL%ROWTYPE;

	BEGIN
	  -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
	  OPEN CUR_TB_DRILL;
	  -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
	  FETCH CUR_TB_DRILL
	  INTO V_CUR_TB_DRILL_DATA;
	  -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH
	  WHILE CUR_TB_DRILL%FOUND
	  LOOP

		v_GLCode := V_CUR_TB_DRILL_DATA.GLCode; 
		v_GLType := V_CUR_TB_DRILL_DATA.GLType; 
		v_OpeningBal := V_CUR_TB_DRILL_DATA.OPENINGBAL;
		v_cnt  :=0;
		v_OpeningGLBal:=0;
		v_CrAmt:=0;
		v_DrAmt:=0;

        SELECT COUNT(*) INTO v_cnt FROM VW_GLBALANCE WHERE GL_Code=v_GLCode AND Working_Date=v_WorkingDate;

	  IF(v_cnt = 1)
	  THEN

		 SELECT SUM(NVL(CR_Bal_LCY,0)), SUM(NVL(DR_Bal_LCY,0)) INTO v_CrAmt, v_DrAmt FROM VW_GLBALANCE 
		 WHERE GL_Code = v_GLCode AND Working_Date >= v_FirstYearDate AND Working_Date = v_WorkingDate; 

		 SELECT SUM(NVL(GL_Balance,0)), SUM(NVL(OPENING_BAL,0)) INTO v_GLBalance, v_OpeningBal FROM VW_GLBALANCE 
		 WHERE  GL_Code = v_GLCode AND Working_Date=v_WorkingDate; 

		 v_ClosingBal := v_OpeningBal + v_DrAmt - v_CrAmt;
		 UPDATE tb_temp_Trial_Bal_Drill SET ClosingBal = v_ClosingBal, OPENINGBAL = v_OpeningBal WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

	  END IF;

	  IF(v_cnt > 1)
	  THEN

	     SELECT SUM(NVL(CR_Bal_LCY,0)), SUM(NVL(DR_Bal_LCY,0)) INTO v_CrAmt, v_DrAmt FROM VW_GLBALANCE 
		 WHERE GL_Code = v_GLCode AND Working_Date >= v_FirstYearDate AND Working_Date = v_WorkingDate; 

		 SELECT SUM(NVL(GL_Balance,0)), SUM(NVL(OPENING_BAL,0)) INTO v_GLBalance, v_OpeningBal FROM VW_GLBALANCE 
		 WHERE  GL_Code = v_GLCode AND Working_Date=v_WorkingDate; 

		 v_ClosingBal := v_OpeningBal + v_DrAmt - v_CrAmt;
		 UPDATE tb_temp_Trial_Bal_Drill SET ClosingBal = v_ClosingBal, OPENINGBAL = v_OpeningBal WHERE GLCode=v_GLCode AND WorkingDate=v_WorkingDate;

	  END IF;


	  FETCH CUR_TB_DRILL  INTO  V_CUR_TB_DRILL_DATA;
	 END LOOP;
	 -- FREE RESOURCES USED BY THE CURSOR
 	CLOSE CUR_TB_DRILL;
END;

IF(v_WorkingDate = v_FirstYearDate) THEN
   UPDATE tb_temp_Trial_Bal_Drill SET DRBalLCY=0,CRBalLCY=0, OPENINGBAL=0 WHERE GLType IN ('E','I');
   END IF;

OPEN c_1 FOR      
SELECT  GLDescription,GLParent,Currency, GLType, GLCode,NVL(DRBalLCY,0) DRBalLCY,NVL(CRBalLCY,0) CRBalLCY,
	 CASE GLType
		   WHEN 'L' THEN (-1 * GLBalance)
		   WHEN 'I' THEN (-1 * GLBalance)
		 ELSE GLBalance
		 END  GLBalance,
	 CASE GLType
	   WHEN 'L' THEN  GLBalance
	   WHEN 'I' THEN  GLBalance
	 ELSE 0
	 END  CRGLBalance,
	 CASE GLType
	   WHEN 'A' THEN GLBalance
	   WHEN 'E' THEN GLBalance
	 ELSE 0
	 END  DRGLBalance,
	   CASE GLType
	   WHEN 'L' THEN  OPENINGBAL
	   WHEN 'I' THEN  OPENINGBAL
	 ELSE OPENINGBAL
	 END  OPENINGBAL,
	  CASE GLType
	   WHEN 'L' THEN OPENINGBAL
	   WHEN 'I' THEN OPENINGBAL
	 ELSE 0
	 END  CROPENINGBAL,
	 CASE GLType
	   WHEN 'A' THEN OPENINGBAL
	   WHEN 'E' THEN OPENINGBAL
	 ELSE 0
	 END  DROPENINGBAL, ClosingBal, WorkingDate  FROM tb_temp_Trial_Bal_Drill 
	 WHERE GLParent <> GLCode AND GLParent = p_GL_Code
	 ORDER BY GLParent, GLCode ASC;


--OPEN c_1 FOR SELECT GLDescription,GLParent,Currency,GLType,GLCode,DRBalLCY,CRBalLCY,GLBalance,OPENINGBAL,WorkingDate,ClosingBal FROM tb_temp_Trial_Bal_Drill;
COMMIT;



EXCEPTION
  WHEN OTHERS THEN
  RAISE;
	OPEN c_1 FOR SELECT '' AS GLDescription,  '' AS GLParent, '' AS Currency, '' AS GLType, '' AS GLCode, 0 AS DRBalLCY,0 AS CRBalLCY,
    0 AS GLBalance,0 AS OPENINGBAL,0 AS WorkingDate,0 AS ClosingBal FROM tb_temp_Trial_Bal_Drill;
	ROLLBACK TO SAVEPOINT V_SAFEPOINT;
	RETURN;
END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_UPDATE_REQUESTS_RESPONSE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_UPDATE_REQUESTS_RESPONSE" (
    IV_THEIR_REF_NO     IN VARCHAR2,
    IV_RESP_CODE        IN VARCHAR2,
    IV_RESP_DESCRIPTION IN VARCHAR2,
    IV_TRN_REF_NO       IN VARCHAR2,
    C_1 OUT SYS_REFCURSOR)
AS
BEGIN
  BEGIN
    UPDATE TB_REQUESTS
    SET THEIR_REF_NO   = IV_THEIR_REF_NO,
      RESP_CODE        = IV_RESP_CODE,
      RESP_DESCRIPTION = IV_RESP_DESCRIPTION
    WHERE TRN_REF_NO   = IV_TRN_REF_NO
    AND ROWNUM         =1;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
   OPEN C_1 FOR SELECT '57'  AS Resp_Code, 'Update Failed'  AS Resp_Desc FROM DUAL;
    RETURN;
  END;
  COMMIT;
    OPEN C_1 FOR SELECT '00' as Resp_Code,'Success' as Resp_Desc FROM DUAL;
  RETURN;
END A_SP_UPDATE_REQUESTS_RESPONSE;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_UPDATE_SMS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_UPDATE_SMS" (
	-- Add the parameters for the stored procedure here
	iv_Update_Flag IN nvarchar2,
	iv_Narration IN nvarchar2,
	iv_responseCode IN nvarchar2,
	iv_trx_id IN nvarchar2,
	iv_response OUT nvarchar2 

)

AS

v_count integer;

BEGIN

	v_count := 0;

	update TB_MESSAGES_SMS set SENT = iv_Update_Flag,RESPONSE_MSG = iv_Narration,RESPONSE_CODE = iv_responseCode,DELIVERED=1 where id = iv_trx_id;	

	v_count:= v_count+ sql%Rowcount;
	SELECT v_count INTO iv_response FROM dual;

COMMIT;

END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_UPLOAD_BATCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_UPLOAD_BATCH" 
(
  IV_INSITUTION_CODE IN VARCHAR2 
, IV_NO_OF_RECORDS IN VARCHAR2 
, IV_FILE_NAME IN VARCHAR2 
, IV_TOTAL_AMOUNT IN VARCHAR2 
, IV_PAYMENT_DETAILS IN VARCHAR2 
, IV_PAYMENT_TYPE IN VARCHAR2 
, IV_CREATED_BY IN VARCHAR2 
, IV_REMARKS IN VARCHAR2 
, IV_COUNTRY IN VARCHAR2 
, IV_CURRENCY IN VARCHAR2 
, IV_FILE_DESCRIPTION IN VARCHAR2
,C_1 IN OUT SYS_REFCURSOR
) AS

V_BATCH_NO NVARCHAR2(50) :='';

BEGIN
    -- GET THE BATCH NO
    V_BATCH_NO := FN_GET_SERIES('B','1');

    INSERT INTO TB_INSTITUTION_UPLOADS(
      INSTITUTION_CODE,
      BATCH_NO,
      NO_OF_RECORDS,
      FILE_NAME,
      TOTAL_AMOUNT,
      UPLOAD_DATE,
      PAYMENT_DETAILS,
      PAYMENT_TYPE,
      CREATED_BY,
      REMARKS,
      COUNTRY,
      CURRENCY,
      FILE_DESCRIPTION
    ) VALUES(
      IV_INSITUTION_CODE,
      V_BATCH_NO,
      IV_NO_OF_RECORDS,
      IV_FILE_NAME,
      IV_TOTAL_AMOUNT,
      SYSTIMESTAMP,
      IV_PAYMENT_DETAILS,
      IV_PAYMENT_TYPE,
      IV_CREATED_BY,
      IV_REMARKS,
      IV_COUNTRY,
      IV_CURRENCY,
      IV_FILE_DESCRIPTION
    );

    OPEN C_1 FOR SELECT '00' AS RESP_CODE, 'File data stored successfully' AS RESP_DESC, V_BATCH_NO AS BATCH_NO FROM DUAL;

END A_SP_UPLOAD_BATCH;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_USER_LOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_USER_LOGIN" (
    IV_USERNAME VARCHAR2,
    IV_PASSWORD IN VARCHAR2,
    C_1         IN OUT SYS_REFCURSOR)
AS
  V_count  NUMBER         :=0;
  V_TRIALS NUMBER         :=0;
  V_USERID NVARCHAR2(80)         :='';
  V_PASSWORD NVARCHAR2(80):='';
  V_LOCKED NUMBER :=0;
BEGIN
  SELECT COUNT(ID)
   INTO V_count
   FROM TB_USER
  WHERE USER_NAME = IV_USERNAME AND DELETED = 0
  AND ROWNUM      =1;
  IF V_count      < 1 THEN
    OPEN C_1 FOR SELECT '01' "RESP_CODE",'User Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;

    SELECT PASSWORD_HASH,
    TRIALS,ID, LOCKED
  INTO V_PASSWORD,
    V_TRIALS,V_USERID, V_LOCKED
  FROM TB_USER
  WHERE USER_NAME = IV_USERNAME
  AND ROWNUM      =1;
  IF trim(V_PASSWORD) <> trim(IV_PASSWORD) THEN
    UPDATE TB_USER
    SET TRIALS      = TRIALS +1
    WHERE UPPER(USER_NAME) = UPPER(IV_USERNAME)
    AND ROWNUM      =1;
    OPEN C_1 FOR SELECT '02' "RESP_CODE",'Invalid Password' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    COMMIT;
    RETURN;
  END IF;
  
  IF V_LOCKED = 1 THEN
    OPEN C_1 FOR SELECT '02' "RESP_CODE",'Invalid Password' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;
  IF V_TRIALS >=3 THEN
    UPDATE TB_USER
    SET TRIALS      = TRIALS +1,
    LOCKED        =1,
    BLOCKED_ON    = SYSTIMESTAMP,
    BLOCKED_BY    = '3-WRONG-PASSWORDS'
    WHERE USER_NAME = IV_USERNAME
    AND ROWNUM      =1;
    COMMIT;
    OPEN C_1 FOR SELECT '03' "RESP_CODE",'User Blocked - 3 wrong Attempts' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;

  OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC",V_USERID  USERID FROM "SYS"."DUAL" "A1";
  RETURN;
END A_SP_USER_LOGIN;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_USER_OPERATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_USER_OPERATIONS" (
    IV_req_type         IN VARCHAR2,
    IV_username         IN VARCHAR,
    IV_account_type     IN VARCHAR DEFAULT '',
    IV_phone_number     IN VARCHAR DEFAULT '',
    IV_email_address    IN VARCHAR DEFAULT '',
    IV_transaction_type IN VARCHAR2 DEFAULT '',
    IV_profile_id IN VARCHAR2 DEFAULT '',
    IV_remarks IN VARCHAR2 DEFAULT '',
    C_1                 IN OUT SYS_REFCURSOR)
AS
  V_COUNT NUMBER;
BEGIN
  BEGIN
    SELECT COUNT(ID)
    INTO V_COUNT
    FROM TB_USER
    WHERE USER_NAME =IV_USERNAME
    AND ID          = IV_username;
  END;
  CASE
  WHEN IV_req_type = 'create_user' THEN

  IF V_COUNT = 0 THEN 
    SELECT 1 INTO V_COUNT FROM dual;
  END IF;
  WHEN IV_req_type = 'approve_user' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  WHEN IV_req_type = 'edit_user' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  WHEN IV_req_type = 'delete_user' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  WHEN IV_req_type = 'block_user' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  WHEN IV_req_type = 'unblock_user' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  WHEN IV_req_type = 'reset_password' THEN
    SELECT 1 INTO V_COUNT FROM dual;
  ELSE --unknown operation or invalid request
    SELECT 1 INTO V_COUNT FROM dual;
  END CASE;
  OPEN C_1 FOR SELECT '00'
AS
  RESP_CODE,
  IV_req_type||' Successful'
AS
  RESP_DESC FROM dual;
END;


/
--------------------------------------------------------
--  DDL for Procedure A_SP_VERIFY_BATCH_DATA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_VERIFY_BATCH_DATA" 
(
  IV_BATCH_NO IN NVARCHAR2,
  C_1 IN OUT SYS_REFCURSOR
) AS 

V_VERIFIED NUMBER := 0;
V_VERIFIED_UPLOAD NUMBER :=0;
V_COUNT NUMBER :=0;
V_VALIDATION_REASON NVARCHAR2(200) :='';
V_HAS_WALLET_ACCOUNT NUMBER :=0;
V_COUNT_CUSTOMER NUMBER :=0;

BEGIN

  BEGIN DECLARE CURSOR C_1 IS SELECT FIRST_NAME,MIDDLE_NAME,LAST_NAME,ID_NO,MNO,MOBILE_NUMBER, AMOUNT,ID,ID_TYPE
  --INTO 
  --V_FIRST_NAME,V_MIDDLE_NAME,V_LAST_NAME,V_ID_NO,V_MNO,V_MOBILE_NUMBER,V_AMOUNT
   FROM TB_INSTITUTION_BATCH_PAYOUT WHERE BATCH_NO = IV_BATCH_NO;

  V_TRXMATRIXDATA C_1%ROWTYPE;

  BEGIN 

 	  -- OPEN THE CURSOR AND INITIALIZE THE ACTIVE SET
      OPEN C_1;
      -- RETRIEVE THE FIRST ROW, TO SET UP FOR THE WHILE LOOP
      FETCH C_1  INTO V_TRXMATRIXDATA;
      -- CONTINUE LOOPING WHILE THERE ARE MORE ROWS TO FETCH

  	WHILE C_1%FOUND

  		LOOP
        V_VALIDATION_REASON :='';
        V_VERIFIED :=1;
        V_COUNT_CUSTOMER :=0;

         IF V_TRXMATRIXDATA.FIRST_NAME IS NULL THEN
             V_VALIDATION_REASON := ' | First Name invalid';
             V_VERIFIED :=2;
         END IF;    
         IF V_TRXMATRIXDATA.LAST_NAME IS NULL THEN 
            V_VALIDATION_REASON :=V_VALIDATION_REASON||' | Last Name is invalid';
            V_VERIFIED :=2;

         END IF;   
         IF V_TRXMATRIXDATA.ID_NO IS NULL THEN 
              V_VALIDATION_REASON :=V_VALIDATION_REASON||' | ID No is invalid';
              V_VERIFIED :=2;
         END IF;     
         IF V_TRXMATRIXDATA.MNO IS NULL THEN
               V_VALIDATION_REASON :=V_VALIDATION_REASON||' | MNO is invalid';
               V_VERIFIED :=2;
         END IF;      
         IF V_TRXMATRIXDATA.AMOUNT IS NULL THEN 
              V_VALIDATION_REASON :=V_VALIDATION_REASON||' | AMOUNT is invalid';
              V_VERIFIED :=2;
         END IF;     
         IF V_TRXMATRIXDATA.MOBILE_NUMBER IS NULL THEN 
              V_VALIDATION_REASON :=V_VALIDATION_REASON||' | Mobile Number is invalid';
        	V_VERIFIED :=2;
          END IF;
           IF V_TRXMATRIXDATA.ID_TYPE IS NULL THEN 
              V_VALIDATION_REASON :=V_VALIDATION_REASON||' | ID TYPE is invalid';
            	V_VERIFIED :=2;

          END IF;

        IF LENGTH(V_TRXMATRIXDATA.MOBILE_NUMBER) <> 12 THEN 
          V_VALIDATION_REASON :=V_VALIDATION_REASON||' | Mobile number length is invalid';
        	V_VERIFIED :=2;	

        END IF ; 

        -- check if the phone number provided is linked to an account
          SELECT COUNT(ID) INTO V_COUNT_CUSTOMER FROM VW_ALLCUSTOMERS WHERE PHONE_NUMBER = V_TRXMATRIXDATA.MOBILE_NUMBER AND ROWNUM = 1;

          IF V_COUNT_CUSTOMER > 1 THEN
            V_HAS_WALLET_ACCOUNT := 1;
          END IF;  

        IF V_VERIFIED = 2 THEN 
          V_COUNT := V_COUNT+1;
        END IF;  

        	UPDATE TB_INSTITUTION_BATCH_PAYOUT SET VERIFIED	= V_VERIFIED,
          VALIDATION_REASON=V_VALIDATION_REASON,
          HAS_WALLET_ACCOUNT = V_HAS_WALLET_ACCOUNT
          WHERE ID = V_TRXMATRIXDATA.ID ;

        	IF V_VERIFIED = 2 AND V_VERIFIED_UPLOAD = 0 THEN 
        		UPDATE TB_INSTITUTION_UPLOADS SET VERIFIED = V_VERIFIED WHERE BATCH_NO = IV_BATCH_NO;
        		V_VERIFIED_UPLOAD :=1;
        	END IF;		

  			FETCH C_1 INTO V_TRXMATRIXDATA;

  	END LOOP;
     EXCEPTION
   WHEN OTHERS THEN
   RETURN;
 	END;

  IF V_VERIFIED_UPLOAD = 0 THEN
    UPDATE TB_INSTITUTION_UPLOADS SET VERIFIED = 1 WHERE BATCH_NO = IV_BATCH_NO;
    OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'All data is verified' AS RESP_DESC FROM DUAL;
    RETURN;
  ELSE 
     OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Verification needed' AS RESP_DESC,V_COUNT AS TOTAL_UNVERIFIED FROM DUAL;
     RETURN;
  END IF;

  END;

END;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_VERIFY_OTP
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_SP_VERIFY_OTP" (
    IV_USERNAME VARCHAR2,
    IV_OTP IN VARCHAR2,
    C_1         IN OUT SYS_REFCURSOR)
AS
  V_count  NUMBER         :=0;
  V_TRIALS NUMBER         :=0;
  V_USERID NVARCHAR2(50)         :='';
  V_OTP NVARCHAR2(50):='';
BEGIN
  SELECT COUNT(ID)
   INTO V_count
   FROM TB_USER
  WHERE USER_NAME = IV_USERNAME AND DELETED = 0
  AND ROWNUM      =1;
  IF V_count      < 1 THEN
    OPEN C_1 FOR SELECT '01' "RESP_CODE",'User Not Found' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;
      SELECT OTP,
    TRIALS,ID
  INTO V_OTP,
    V_TRIALS,V_USERID
  FROM TB_USER
  WHERE USER_NAME = IV_USERNAME
  AND ROWNUM      =1;
  IF trim(V_OTP) <> trim(IV_OTP) THEN
    UPDATE TB_USER
    SET TRIALS      = TRIALS +1
    WHERE UPPER(USER_NAME) = UPPER(IV_USERNAME)
    AND ROWNUM      =1;
    OPEN C_1 FOR SELECT '02' "RESP_CODE",'Invalid OTP' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    COMMIT;
    RETURN;
  END IF;
  IF V_TRIALS >=5 THEN
    UPDATE TB_USER
    SET TRIALS      = TRIALS +1,
      LOCKED        =1,
      BLOCKED_ON    = SYSTIMESTAMP,
      BLOCKED_BY    = '5-WRONG-OTPS'
    WHERE USER_NAME = IV_USERNAME
    AND ROWNUM      =1;
    COMMIT;
    OPEN C_1 FOR SELECT '03' "RESP_CODE",'User Blocked - 5 wrong Attempts' "RESP_DESC" FROM "SYS"."DUAL" "A1";
    RETURN;
  END IF;

  if V_TRIALS > 0 THEN 
     UPDATE TB_USER SET TRIALS = 0 WHERE USER_NAME = IV_USERNAME AND ROWNUM  =1; 
  end if ;

  OPEN C_1 FOR SELECT '00' "RESP_CODE",'Success' "RESP_DESC",V_USERID  USERID FROM "SYS"."DUAL" "A1";
  RETURN;
END A_SP_VERIFY_OTP;

/
--------------------------------------------------------
--  DDL for Procedure A_SP_VERIFY_SECURITY_QTNS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."A_SP_VERIFY_SECURITY_QTNS" 
(ANSWERS_ARRAY IN NVARCHAR2,
IV_CUSTOMER_ID IN NUMBER,
 C_1 IN OUT SYS_REFCURSOR
) AS 

CUSTOMER_ANS JSON_ARRAY_T;
ASNWERS JSON_ARRAY_T;
V_TOTAL_CORRECT NUMBER :=0 ; -- this value counts the value of correct answers by the customer
V_CUSTOMER_OBJECT JSON_OBJECT_T;
V_ANSWER_OBJECT JSON_OBJECT_T;
BEGIN

  -- check for the provided question if its 3
  ASNWERS :=json_array_t( ANSWERS_ARRAY );
  
  IF ASNWERS.get_size < 3 THEN 
    OPEN C_1 FOR SELECT '01' AS RESP_CODE , 'Provide all 3 security questions' AS RESP_DESC FROM DUAL;
    RETURN ;
  END IF ;
  
  -- get customer answers 
  CUSTOMER_ANS := json_array_t( FN_GET_CUSTOMER_QTNS(IV_CUSTOMER_ID));
  
  IF CUSTOMER_ANS.get_size < 1 THEN 
    OPEN C_1 FOR SELECT '02' AS RESP_CODE , 'Customer answers not found' AS RESP_DESC FROM DUAL;
    RETURN ;
  END IF;
  
  FOR indx in 0 .. ASNWERS.get_size - 1 
    LOOP
      -- get the answer you need to process for the request
      V_ANSWER_OBJECT := TREAT(ASNWERS.get(indx) AS JSON_OBJECT_T);
      
      FOR indx_2 in 0 .. CUSTOMER_ANS.get_size - 1
        LOOP
          V_CUSTOMER_OBJECT := TREAT(CUSTOMER_ANS.get(indx) AS JSON_OBJECT_T);
          
          IF V_ANSWER_OBJECT.get_string('question') = V_CUSTOMER_OBJECT.get_string('QTN_ID') THEN
            
            -- check if the answers are properly sent 
            IF V_ANSWER_OBJECT.get_string('answer') = V_CUSTOMER_OBJECT.get_string('ANS') THEN 
                V_TOTAL_CORRECT := V_TOTAL_CORRECT+1;
            END IF;  
          END IF;
        END LOOP;
    
    END LOOP;
    
    --pass is more than 2
    IF V_TOTAL_CORRECT > 1 THEN
      OPEN C_1 FOR SELECT '00' AS RESP_CODE , 'Success' AS RESP_DESC FROM DUAL;
      RETURN ;
    ELSE
      OPEN C_1 FOR SELECT '03' AS RESP_CODE , 'Failed' AS RESP_DESC FROM DUAL;
      RETURN ;
    END IF;

  
END A_SP_VERIFY_SECURITY_QTNS;

/
--------------------------------------------------------
--  DDL for Procedure A_UPDATE_OTHER_GL_BALANCE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."A_UPDATE_OTHER_GL_BALANCE" 
(
  p_WorkingDate DATE,
  p_EndWorkingDate DATE
)
AS

 v_GLCode   NVARCHAR2(10); 
 v_TodayWorkingDate TIMESTAMP(3);
 v_FirstYearDate TIMESTAMP(3);
 v_CrAmt number(18,5);
 v_DrAmt number(18,5);
 v_TodayCrAmt number(18,5);
 v_TodayDrAmt number(18,5);
 v_SumCrAmt number(18,5);
 v_SumDrAmt number(18,5);
 v_GLCrAmt number(18,5);
 v_GLDrAmt number(18,5);
 v_ProductCode NVARCHAR2(5);
 v_LeafGL NVARCHAR2(10);
 v_GLAmount number(18,5);
 v_totSum number(18,5);
 v_GLType char(1);
 v_AMT  NUMBER(18,0);
 v_WorkingDate DATE;
BEGIN



SELECT WorkingDate INTO v_TodayWorkingDate FROM tb_Date_Settings;

SELECT '01 JAN '||to_char( extract(year from p_WorkingDate) ) INTO v_FirstYearDate FROM dual;

IF(v_FirstYearDate = p_WorkingDate) THEN
 v_WorkingDate := TO_DATE(p_WorkingDate) + 1;

END IF;

 -----------------------------------------------------------------------------------------------------------------------------------
 --ALL GL'S

 --DEAL WITH CR A/E
 MERGE INTO tb_GL_Balance_Archive t1
USING
(
    -- For more complicated queries you can use WITH clause here
        WITH CrCTE AS
        (
              SELECT NVL(SUM(AMOUNT),0) as Bal, Account_No as GLCode FROM VW_TRANSACTIONS WHERE DRCR='C' AND  Value_Date=v_WorkingDate
              AND Account_No IN (select GL_Code from tb_GL where GL_TYPE in ('A','E'))
              group by Account_No
        )
        SELECT * FROM CrCTE
)t2
ON(t1.GL_Code = t2.GlCode AND t1.Working_Date = v_WorkingDate)
WHEN MATCHED THEN UPDATE SET
t1.CR_Bal_LCY = t2.Bal,
t1.Gl_Balance = NVL(t1.Opening_Bal,0) - t2.Bal;

 -----------------------------------------------------------------------------------------------------------------------------------
 --NORMAL ACCOUNTS EXCLUDING LOANS

 --DEAL WITH CR 
MERGE INTO tb_GL_Balance_Archive t1
USING
(
    -- For more complicated queries you can use WITH clause here
        WITH CrCTE AS
        (
              SELECT NVL(SUM(A.AMOUNT),0) Bal, B.Leaf_GL GLCode FROM VW_TRANSACTIONS A
                INNER JOIN tb_Products B ON SUBSTR(A.Account_No,1,3) = B.Product_Code
                WHERE SUBSTR(Account_No,1,3)=B.Product_Code AND DRCR='C' AND IsCustomerGL='C' 
                AND Value_Date=v_WorkingDate  
                AND NVL(B.Loan_Product,0)=0 
                GROUP BY B.Leaf_GL
        )
        SELECT * FROM CrCTE
)t2
ON(t1.GL_Code = t2.GlCode AND t1.Working_Date = v_WorkingDate)
WHEN MATCHED THEN UPDATE SET
t1.CR_Bal_LCY = NVL(t1.CR_Bal_LCY,0) + NVL(t2.Bal,0) ,
t1.Gl_Balance = NVL(t1.Gl_Balance,0)+ t2.Bal, t1.CLOSING_BAL = NVL(t1.Gl_Balance,0)+ t2.Bal;



 --DEAL WITH DR  
MERGE INTO tb_GL_Balance_Archive t1
USING
(
    -- For more complicated queries you can use WITH clause here
        WITH DrCTE AS
        (
              SELECT NVL(SUM(A.AMOUNT),0) Bal, B.Leaf_GL GLCode FROM VW_TRANSACTIONS A
                INNER JOIN tb_Products B ON SUBSTR(A.Account_No,1,3) = B.Product_Code
                WHERE SUBSTR(Account_No,1,3)=B.Product_Code AND DRCR='D' AND IsCustomerGL='C' 
                AND Value_Date=v_WorkingDate  
                AND NVL(B.Loan_Product,0)=0 
                GROUP BY B.Leaf_GL
        )
        SELECT * FROM DrCTE
)t2
ON(t1.GL_Code = t2.GlCode AND t1.Working_Date = v_WorkingDate)
WHEN MATCHED THEN UPDATE SET
t1.DR_Bal_LCY = NVL(t1.DR_Bal_LCY,0) + NVL(t2.Bal,0) ,
t1.Gl_Balance = NVL(t1.Gl_Balance,0) - t2.Bal, t1.CLOSING_BAL = NVL(t1.Gl_Balance,0) - t2.Bal;

 -----------------------------------------------------------------------------------------------------------------------------------
 ---LOAN GLs
 ---DEAL WITH CR 
MERGE INTO tb_GL_Balance_Archive t1
USING
(
    -- For more complicated queries you can use WITH clause here
        WITH CrCTE AS
        (
              SELECT NVL(SUM(A.AMOUNT),0) Bal, B.Leaf_GL GlCode FROM VW_TRANSACTIONS A
                INNER JOIN tb_Products B ON SUBSTR(A.Account_No,1,4) = B.Product_Code
                WHERE SUBSTR(Account_No,1,4)=B.Product_Code AND DRCR='C' AND IsCustomerGL='C' 
                AND Value_Date=v_WorkingDate  AND NVL(B.Loan_Product,0)=1 
                GROUP BY B.Leaf_GL
        )
        SELECT * FROM CrCTE
)t2
ON(t1.GL_Code = t2.GlCode AND t1.Working_Date = v_WorkingDate)
WHEN MATCHED THEN UPDATE SET
t1.CR_Bal_LCY = NVL(t1.CR_Bal_LCY,0) + NVL(t2.Bal,0) ,
t1.Gl_Balance = NVL(t1.Gl_Balance,0)- t2.Bal, t1.CLOSING_BAL = NVL(t1.Gl_Balance,0) - t2.Bal;

---DEAL WITH DR 
MERGE INTO tb_GL_Balance_Archive t1
USING
(
    -- For more complicated queries you can use WITH clause here
        WITH DrCTE AS
        (
              SELECT NVL(SUM(A.AMOUNT),0) Bal, B.Leaf_GL GlCode FROM VW_TRANSACTIONS A
                INNER JOIN tb_Products B ON SUBSTR(A.Account_No,1,4) = B.Product_Code
                WHERE SUBSTR(Account_No,1,4)=B.Product_Code AND DRCR='D' AND IsCustomerGL='C' 
                AND Value_Date=v_WorkingDate  AND NVL(B.Loan_Product,0)=1 
                GROUP BY B.Leaf_GL
        )
        SELECT * FROM DrCTE
)t2
ON(t1.GL_Code = t2.GlCode AND t1.Working_Date = v_WorkingDate)
WHEN MATCHED THEN UPDATE SET
t1.DR_Bal_LCY = NVL(t1.DR_Bal_LCY,0) + NVL(t2.Bal,0) ,
t1.Gl_Balance = NVL(t1.Gl_Balance,0)+ t2.Bal, t1.CLOSING_BAL = NVL(t1.Gl_Balance,0)+ t2.Bal;

--END LOANS
 -----------------------------------------------------------------------------------------------------------------------------------
COMMIT;

END;

/
--------------------------------------------------------
--  DDL for Procedure SP_CALL_WEBSERVICE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."SP_CALL_WEBSERVICE" (
endpoint IN VARCHAR2 DEFAULT ' ',
message IN VARCHAR2 DEFAULT ' '
 )
AS
  req utl_http.req;
  res utl_http.resp;
  url varchar2(4000) := endpoint;
  name varchar2(4000);
  buffer varchar2(4000); 
  content varchar2(4000) := message;

begin
  req := utl_http.begin_request(url, 'POST',' HTTP/1.1');
  utl_http.set_header(req, 'user-agent', 'mozilla/4.0'); 
  utl_http.set_header(req, 'content-type', 'application/json'); 
  utl_http.set_header(req, 'Content-Length', length(content));

  utl_http.write_text(req, content);
  res := utl_http.get_response(req);
  -- process the response from the HTTP call
  begin
  dbms_output.put_line(message);
    loop
      utl_http.read_line(res, buffer);
      dbms_output.put_line(buffer);
    end loop;
    utl_http.end_response(res);
    exception
    when utl_http.end_of_body 
    then
      utl_http.end_response(res);
  end;
end SP_CALL_WEBSERVICE;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTDSSTXN_PERSONAL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."SP_INSERTDSSTXN_PERSONAL" (
v_ACCOUNTNUMBER IN	VARCHAR2,
v_FIRSTNAME IN	VARCHAR2,
v_MIDDLENAME IN	VARCHAR2,
v_SURNAME IN	VARCHAR2,
v_GENDER IN	VARCHAR2,
v_DOB IN	VARCHAR2,
v_PLACEOFBIRTH IN	VARCHAR2,
v_IDTYPE IN	VARCHAR2,
v_IDNUMBER IN	VARCHAR2,
v_MOBILENUMBER IN	VARCHAR2,
v_PROFESSION IN	VARCHAR2,
v_BRANCH IN	VARCHAR2,
v_EMAIL IN	VARCHAR2,
v_BRANCHNAME IN	VARCHAR2,
v_DSSFLEXID IN	VARCHAR2,
v_DSSACCOUNTNUMBER IN	VARCHAR2,
v_IMGPASSPORT	 IN	CLOB,
v_IMGID	 		IN	CLOB,
v_IMGSIGNATURE	IN	CLOB,
v_ACC_CLS IN	VARCHAR2,
v_CUSTOMER_CATEGORY IN	VARCHAR2,
v_CARD_NUMBER IN	VARCHAR2,
v_DSSMOBILENUMBER IN	VARCHAR2,
v_PERMANENT_REGION IN	VARCHAR2,
v_PERMANENT_DISTRICT IN	VARCHAR2,
v_PERMANENT_WARD IN	VARCHAR2,
v_PERMANENT_STREET IN	VARCHAR2,
v_RES_DISTRICT IN	VARCHAR2,
v_RES_WARD IN	VARCHAR2,
v_RES_STREET IN	VARCHAR2,
v_RES_REGION IN	VARCHAR2,
v_POSTALADDRESS IN	VARCHAR2,
v_PLOTNUMBER IN	VARCHAR2,
v_INTRODUCTORY_LETTER	IN	CLOB,
v_TERMS_AND_CONDITIONS	IN	CLOB,
v_MANDATE_DECLARATION	IN	CLOB,
v_MARITAL_STATUS IN	VARCHAR2,
v_CITIZENSHIP IN	VARCHAR2,
v_CURRENCY IN	VARCHAR2,
v_APP_USER_STATUS IN	VARCHAR2,
v_TIN IN	VARCHAR2,
v_CHECK_NUMBER IN	VARCHAR2,
v_TELEPHONE IN VARCHAR2,
v_TITLE_PREFIX1  IN VARCHAR2,
v_TITLE_PREFIX2  IN VARCHAR2,
v_TITLE_PREFIX3  IN VARCHAR2,
v_MAIDEN_NAME  IN VARCHAR2,
v_LANDMARKS  IN VARCHAR2,
v_ID_ISSUEDATE  IN VARCHAR2,
v_ID_EXPIRYDATE  IN VARCHAR2,
v_MONTHLY_INCOME  IN VARCHAR2,
v_INCOME_SOURCE  IN VARCHAR2,
v_KYCREF   IN VARCHAR2,
cv_1 IN OUT SYS_REFCURSOR)
    AS
    v_APP_USERREG NUMBER:=0;
    v_APP_USERREGNARATIVE VARCHAR2(200):='';
    v_RECLASSIFY NUMBER:=0;
BEGIN
IF SUBSTR(v_ACCOUNTNUMBER,0,3) = '123' THEN
    v_APP_USERREG  :='3';
    v_RECLASSIFY :=1;
    v_APP_USERREGNARATIVE :='CHAPCHAP PLUS ACCOUNT. NO MOBILE REGISTRATION';
  END IF;
IF v_APP_USER_STATUS = '0' THEN
    v_APP_USERREG  :=3;
    v_APP_USERREGNARATIVE :='NO MOBILE REGISTRATION';
  END IF;
INSERT INTO TBDSSTXN_PERSONAL (
ACCOUNTNUMBER,
FIRSTNAME,
MIDDLENAME,
SURNAME,
GENDER,
DOB,
PLACEOFBIRTH,
IDTYPE,
IDNUMBER,
MOBILENUMBER,
PROFESSION,
BRANCH,
EMAIL,
BRANCHNAME,
DSSFLEXID,
DSSACCOUNTNUMBER,
IMGPASSPORT,
IMGID,
IMGSIGNATURE,
ACC_CLS,
CUSTOMER_CATEGORY,
CARD_NUMBER,
DSSMOBILENUMBER,
PERMANENT_REGION,
PERMANENT_DISTRICT,
PERMANENT_WARD,
PERMANENT_STREET,
RES_DISTRICT,
RES_WARD,
RES_STREET,
RES_REGION,
POSTALADDRESS,
PLOTNUMBER,
INTRODUCTORY_LETTER,
TERMS_AND_CONDITIONS,
MARITAL_STATUS,
CITIZENSHIP,
CURRENCY,
APP_USER_STATUS,
TIN,
CHECK_NUMBER,
TELEPHONE,
TITLE_PREFIX1,
TITLE_PREFIX2,
TITLE_PREFIX3,
MAIDEN_NAME,
LANDMARKS,
ID_ISSUEDATE,
ID_EXPIRYDATE,
MONTHLY_INCOME,
INCOME_SOURCE,
APP_USERREG,
APP_USERREGNARATIVE,
RECLASSIFY,
MANDATE_DECLARATION,
KYCREF
    ) VALUES (
v_ACCOUNTNUMBER,
v_FIRSTNAME,
v_MIDDLENAME,
v_SURNAME,
v_GENDER,
v_DOB,
v_PLACEOFBIRTH,
v_IDTYPE,
v_IDNUMBER,
v_MOBILENUMBER,
v_PROFESSION,
v_BRANCH,
v_EMAIL,
v_BRANCHNAME,
v_DSSFLEXID,
v_DSSACCOUNTNUMBER,
v_IMGPASSPORT,
v_IMGID,
v_IMGSIGNATURE,
v_ACC_CLS,
v_CUSTOMER_CATEGORY,
v_CARD_NUMBER,
v_DSSMOBILENUMBER,
v_PERMANENT_REGION,
v_PERMANENT_DISTRICT,
v_PERMANENT_WARD,
v_PERMANENT_STREET,
v_RES_DISTRICT,
v_RES_WARD,
v_RES_STREET,
v_RES_REGION,
v_POSTALADDRESS,
v_PLOTNUMBER,
v_INTRODUCTORY_LETTER,
v_TERMS_AND_CONDITIONS,
v_MARITAL_STATUS,
v_CITIZENSHIP,
v_CURRENCY,
v_APP_USER_STATUS,
v_TIN,
v_CHECK_NUMBER,
v_TELEPHONE,
v_TITLE_PREFIX1,
v_TITLE_PREFIX2,
v_TITLE_PREFIX3,
v_MAIDEN_NAME,
v_LANDMARKS,
v_ID_ISSUEDATE,
v_ID_EXPIRYDATE,
v_MONTHLY_INCOME,
v_INCOME_SOURCE,
v_APP_USERREG,
v_APP_USERREGNARATIVE,
v_RECLASSIFY,
v_MANDATE_DECLARATION,
v_KYCREF
);
OPEN cv_1 FOR SELECT TBDSSTXN_PERSONAL_SEQ.CURRVAL FROM DUAL;

  EXCEPTION 
  WHEN OTHERS THEN  
    RAISE;
END sp_insertdsstxn_personal;

/
--------------------------------------------------------
--  DDL for Procedure SP_INSERTDSSTXN_REMIDIATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "APP_USER"."SP_INSERTDSSTXN_REMIDIATION" (
v_ACCOUNTNUMBER IN	VARCHAR2,
v_FIRSTNAME IN	VARCHAR2,
v_MIDDLENAME IN	VARCHAR2,
v_SURNAME IN	VARCHAR2,
v_GENDER IN	VARCHAR2,
v_DOB IN	VARCHAR2,
v_PLACEOFBIRTH IN	VARCHAR2,
v_IDTYPE IN	VARCHAR2,
v_IDNUMBER IN	VARCHAR2,
v_MOBILENUMBER IN	VARCHAR2,
v_PROFESSION IN	VARCHAR2,
v_BRANCH IN	VARCHAR2,
v_EMAIL IN	VARCHAR2,
v_BRANCHNAME IN	VARCHAR2,
v_DSSFLEXID IN	VARCHAR2,
v_DSSACCOUNTNUMBER IN	VARCHAR2,
v_IMGPASSPORT	 IN	CLOB,
v_IMGID	 		IN	CLOB,
v_IMGSIGNATURE	IN	CLOB,
v_ACC_CLS IN	VARCHAR2,
v_CUSTOMER_CATEGORY IN	VARCHAR2,
v_CARD_NUMBER IN	VARCHAR2,
v_DSSMOBILENUMBER IN	VARCHAR2,
v_PERMANENT_REGION IN	VARCHAR2,
v_PERMANENT_DISTRICT IN	VARCHAR2,
v_PERMANENT_WARD IN	VARCHAR2,
v_PERMANENT_STREET IN	VARCHAR2,
v_RES_DISTRICT IN	VARCHAR2,
v_RES_WARD IN	VARCHAR2,
v_RES_STREET IN	VARCHAR2,
v_RES_REGION IN	VARCHAR2,
v_POSTALADDRESS IN	VARCHAR2,
v_PLOTNUMBER IN	VARCHAR2,
v_INTRODUCTORY_LETTER	IN	CLOB,
v_TERMS_AND_CONDITIONS	IN	CLOB,
v_MANDATE_DECLARATION	IN	CLOB,
v_MARITAL_STATUS IN	VARCHAR2,
v_CITIZENSHIP IN	VARCHAR2,
v_CURRENCY IN	VARCHAR2,
v_NMBMOBILE_STATUS IN	VARCHAR2,
v_TIN IN	VARCHAR2,
v_CHECK_NUMBER IN	VARCHAR2,
v_TELEPHONE IN VARCHAR2,
v_TITLE_PREFIX1  IN VARCHAR2,
v_TITLE_PREFIX2  IN VARCHAR2,
v_TITLE_PREFIX3  IN VARCHAR2,
v_MAIDEN_NAME  IN VARCHAR2,
v_LANDMARKS  IN VARCHAR2,
v_ID_ISSUEDATE  IN VARCHAR2,
v_ID_EXPIRYDATE  IN VARCHAR2,
v_MONTHLY_INCOME  IN VARCHAR2,
v_INCOME_SOURCE  IN VARCHAR2,
v_KYCREF   IN VARCHAR2,
cv_1 IN OUT SYS_REFCURSOR)
    AS
    v_NMBMOBILEREG NUMBER:=0;
    v_NMBMOBILEREGNARATIVE VARCHAR2(200):='';
    v_RECLASSIFY NUMBER:=0;
BEGIN
IF SUBSTR(v_ACCOUNTNUMBER,0,3) = '123' THEN
    v_NMBMOBILEREG  :='3';
    v_RECLASSIFY :=1;
    v_NMBMOBILEREGNARATIVE :='CHAPCHAP PLUS ACCOUNT. NO MOBILE REGISTRATION';
  END IF;
IF v_NMBMOBILE_STATUS = '0' THEN
    v_NMBMOBILEREG  :=3;
    v_NMBMOBILEREGNARATIVE :='NO MOBILE REGISTRATION';
  END IF;
INSERT INTO TBDSSTXN_REMIDIATION (
ACCOUNTNUMBER,
FIRSTNAME,
MIDDLENAME,
SURNAME,
GENDER,
DOB,
PLACEOFBIRTH,
IDTYPE,
IDNUMBER,
MOBILENUMBER,
PROFESSION,
BRANCH,
EMAIL,
BRANCHNAME,
DSSFLEXID,
DSSACCOUNTNUMBER,
IMGPASSPORT,
IMGID,
IMGSIGNATURE,
ACC_CLS,
CUSTOMER_CATEGORY,
CARD_NUMBER,
DSSMOBILENUMBER,
PERMANENT_REGION,
PERMANENT_DISTRICT,
PERMANENT_WARD,
PERMANENT_STREET,
RES_DISTRICT,
RES_WARD,
RES_STREET,
RES_REGION,
POSTALADDRESS,
PLOTNUMBER,
INTRODUCTORY_LETTER,
TERMS_AND_CONDITIONS,
MARITAL_STATUS,
CITIZENSHIP,
CURRENCY,
NMBMOBILE_STATUS,
TIN,
CHECK_NUMBER,
TELEPHONE,
TITLE_PREFIX1,
TITLE_PREFIX2,
TITLE_PREFIX3,
MAIDEN_NAME,
LANDMARKS,
ID_ISSUEDATE,
ID_EXPIRYDATE,
MONTHLY_INCOME,
INCOME_SOURCE,
NMBMOBILEREG,
NMBMOBILEREGNARATIVE,
RECLASSIFY,
MANDATE_DECLARATION,
KYCREF
    ) VALUES (
v_ACCOUNTNUMBER,
v_FIRSTNAME,
v_MIDDLENAME,
v_SURNAME,
v_GENDER,
v_DOB,
v_PLACEOFBIRTH,
v_IDTYPE,
v_IDNUMBER,
v_MOBILENUMBER,
v_PROFESSION,
v_BRANCH,
v_EMAIL,
v_BRANCHNAME,
v_DSSFLEXID,
v_DSSACCOUNTNUMBER,
v_IMGPASSPORT,
v_IMGID,
v_IMGSIGNATURE,
v_ACC_CLS,
v_CUSTOMER_CATEGORY,
v_CARD_NUMBER,
v_DSSMOBILENUMBER,
v_PERMANENT_REGION,
v_PERMANENT_DISTRICT,
v_PERMANENT_WARD,
v_PERMANENT_STREET,
v_RES_DISTRICT,
v_RES_WARD,
v_RES_STREET,
v_RES_REGION,
v_POSTALADDRESS,
v_PLOTNUMBER,
v_INTRODUCTORY_LETTER,
v_TERMS_AND_CONDITIONS,
v_MARITAL_STATUS,
v_CITIZENSHIP,
v_CURRENCY,
v_NMBMOBILE_STATUS,
v_TIN,
v_CHECK_NUMBER,
v_TELEPHONE,
v_TITLE_PREFIX1,
v_TITLE_PREFIX2,
v_TITLE_PREFIX3,
v_MAIDEN_NAME,
v_LANDMARKS,
v_ID_ISSUEDATE,
v_ID_EXPIRYDATE,
v_MONTHLY_INCOME,
v_INCOME_SOURCE,
v_NMBMOBILEREG,
v_NMBMOBILEREGNARATIVE,
v_RECLASSIFY,
v_MANDATE_DECLARATION,
v_KYCREF
);
UPDATE TBREMIDIATION_ACCOUNTS SET PROCESSED=1, DSSFLEXID=v_DSSFLEXID  WHERE ACCOUNTNUMBER=v_ACCOUNTNUMBER;
OPEN cv_1 FOR SELECT TBDSSTXN_REMIDIATION_SEQ.CURRVAL FROM DUAL;

  EXCEPTION 
  WHEN OTHERS THEN  
    RAISE;
END SP_INSERTDSSTXN_REMIDIATION;

/
--------------------------------------------------------
--  DDL for Procedure SP_TEST_WS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "APP_USER"."SP_TEST_WS" AS 
BEGIN
  -- push all data from eod table to the other end
  SAVEPOINT ttt;
    --SP_CALL_WEBSERVICE('http://192.168.114.227:7003/CMS/CMSAPI','{"operation":"SMS", "params":{"phonenumber":"255715785058,255787821783","message":"SP_ACHIVE_TELLERTRANSACTIONS Executed Successfullly at ' ||SYSDATE || '"}}');
    SP_CALL_WEBSERVICE('https://10.229.112.221:9080/wallet/esb/api','{"agentId":"20400071","debitAccount":"20420400071001","accountName":"MAYEGA HENRY","latitude":"0.3178459","qr_auth_code":"256752811811","deviceId":"7540F19A181170B8","reference":"614693150278","requestDest":"ABC","field68":"liquidation  FundsTransfer for - Sender : 20420400071001","field46":"","field24":"MC","field69":"liquidation ","currency":"","longitude":"32.5887539","amount":"8000","creditAccount":"9030005816881","requestType":"ft","field103":"9030005816881","requestOrigin":"MPOS","field102":"20420400071001","field100":"FT","field120":"256752811811","relativeUrl":"ft","confirmpn":"mConfirmPn","transactionType":"FT","requestTime":"2020-10-22 15:22:00","field11":"032202","charges":"false","field0":"0200","field32":"APP","field37":"165825480937","sender":"20420400071001","phone":"256752811811","cashPin":"12345","field35":"20400071","narration":"liquidation ","field7":"2222032202","jwtToken":"234234334233422","installedVersion":"v1.14.2","requestTyper":"charges","field3":"400000","field2":"256752811811","username":"256752811811","setLanguage":"ENGLISH","field4":"8000"}');
    EXCEPTION
    WHEN OTHERS THEN
    dbms_output.put_line('Failed to send email');


END SP_TEST_WS;

/
--------------------------------------------------------
--  DDL for Package Body A_SP_BEGIN_EOD
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "APP_USER"."A_SP_BEGIN_EOD" AS  

   PROCEDURE find_sal(c_id customers.id%TYPE) IS 
   c_sal customers.salary%TYPE; 
   BEGIN 
      SELECT salary INTO c_sal 
      FROM customers 
      WHERE id = c_id; 
      dbms_output.put_line('Salary: '|| c_sal); 
   END find_sal; 
END A_SP_BEGIN_EOD;


/
--------------------------------------------------------
--  DDL for Package Body CUST_SAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "APP_USER"."CUST_SAL" AS  
   
   PROCEDURE find_sal(c_id customers.id%TYPE) IS 
   c_sal customers.salary%TYPE; 
   BEGIN 
      SELECT salary INTO c_sal 
      FROM customers 
      WHERE id = c_id; 
      dbms_output.put_line('Salary: '|| c_sal); 
   END find_sal; 
END cust_sal;


/
--------------------------------------------------------
--  DDL for Package CUST_SAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "APP_USER"."CUST_SAL" AS 
   PROCEDURE A_SP_BEGIN_EOD; 
END cust_sal;


/
--------------------------------------------------------
--  DDL for Package PK_STAGING_APPROVAL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "APP_USER"."PK_STAGING_APPROVAL" 
AS
  PROCEDURE SP_STAGING_APPROVAL
  IS
    /* TODO enter package declarations (types, exceptions, methods etc) here */

    END SP_STAGING_APPROVAL;

  END PK_STAGING_APPROVAL;


/
--------------------------------------------------------
--  DDL for Function FN_AUTO_REG_BULK_PAY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_AUTO_REG_BULK_PAY" (
    iv_accountname IN VARCHAR2,
    iv_PHONENUMBER IN VARCHAR2 )
  RETURN VARCHAR2
AS
  V_COUNT NUMBER(1)              := 0;
  v_MWALLETACCOUNT NVARCHAR2(50) :='';
  iv_PIN NVARCHAR2(100)          :='1234';
  iv_LANG NVARCHAR2(5)           :='en';
  iv_IMSI NVARCHAR2(50)          :='';
  iv_IMEI NVARCHAR2(50)          :='';
  v_OpeningDate DATE             := TRUNC(SYSDATE);
  iv_Currency NVARCHAR2(50)      :='UGX';
  v_ACCOUNTCLASS NVARCHAR2(50)   :='256';
  v_accountname NVARCHAR2(50)    :=iv_accountname;
  v_first_name NVARCHAR2(50)     := FN_SPLIT_NAMES(iv_accountname,'1');
  v_second_name NVARCHAR2(50)    := FN_SPLIT_NAMES(iv_accountname,'2');
  v_last_name NVARCHAR2(50)      :=FN_SPLIT_NAMES(iv_accountname,'3');
  iv_Message NVARCHAR2(500)      :='Dear '||v_first_name|| ',Your Flexi-pay Wallet Account has been created. Your OTP is @OTP.';
BEGIN

 -- check if the wallet account exists or not
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID
    FROM TB_CUSTOMER
    WHERE CUSTOMER_NO = iv_PHONENUMBER
    AND ROWNUM        =1 -- AND identification_id = iv_identificationid
    );
  IF V_COUNT > 0 THEN -- return the wallet account that is needed
    SELECT MWALLET_ACCOUNT
    INTO v_MWALLETACCOUNT
    FROM TB_CUSTOMER
    WHERE CUSTOMER_NO = iv_PHONENUMBER
    AND ROWNUM        =1;
    RETURN v_MWALLETACCOUNT;
  END IF;
v_MWALLETACCOUNT:= FN_GET_CUST_ACCOUNT(iv_PHONENUMBER);  -- get customer account number
BEGIN
  INSERT
  INTO TB_CUSTOMER
    (
      FIRST_NAME,
      SECOND_NAME,
      LAST_NAME,
      CUSTOMER_NO,
      CATEGORY,
      MODE_OF_IDENTIFICATION_ID,
      CREATED_ON,
      CHANNEL,
      MWALLET_ACCOUNT,
      DATE_OF_BIRTH,
      GENDER
    )
    VALUES
    (
      v_first_name,
      v_second_name,
      v_last_name,
      iv_PHONENUMBER,
      'I',
      'NATIONAL ID',
      SYSTIMESTAMP,
      'ADMIN',
      v_MWALLETACCOUNT,
      SYSDATE,
      'M'
    );
  INSERT
  INTO TB_CUSTOMER_VALIDATION
    (
      CUSTOMER_NO,
      PHONE_NUMBER,
      PIN,
      FIRST_LOGIN,
      ACTIVE,
      LANG,
      IMSI,
      IMEI,
      PARTIAL_REGISTRATION
    )
    VALUES
    (
      iv_PHONENUMBER,
      iv_PHONENUMBER,
      iv_PIN,
      '1',
      '1',
      iv_LANG,
      iv_IMSI,
      iv_IMEI,
      1
    );
  ----Reset count
  V_COUNT := 0;
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  RETURN '';
END;
BEGIN
  ---create the wallet acc where customer doesnt have a core account and wallet account not yet created
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ACCOUNT_ID
    FROM TB_ACCOUNT
    WHERE ACCOUNT_NO = v_MWALLETACCOUNT
    AND ROWNUM       =1
    );
  IF(V_COUNT = 0) THEN
    INSERT
    INTO TB_ACCOUNT
      (
        CUSTOMER_NO,
        ACCOUNT_NO,
        ACCOUNT_NAME,
        ACCOUNT_CLASS,
        BRANCH_ID,
        PHONE_NUMBER,
        CURRENCY,
        CREATED_BY,
        PARTIAL_REGISTRATION,
        ALLOW_CR,
        ALLOW_DR,
        Allow_Overdraft,
        DORMANT,
        OPENING_DATE,
        BLOCKED,
        STOPPED,
        IS_FROZEN,
        CHEQUE_BOOK_FACILITY,
        ATM_FACILITY,
        APPROVED_BY,
        APPROVED_ON,
        OPENING_BAL,
        last_transaction_date
      )
      VALUES
      (
        iv_PHONENUMBER,
        v_MWALLETACCOUNT,
        v_accountname,
        v_ACCOUNTCLASS,
        '1',--iv_branchcode
        iv_PHONENUMBER,
        iv_Currency,
        'ADMIN',
        0,
        'Y',
        'Y',
        0,
        'N',
        v_OpeningDate,
        'N',
        'N',
        'N',
        'N',
        'N',
        'ADMIN',
        v_OpeningDate,
        0,
        v_OpeningDate
      );
  END IF;
  
  
  -- add points account at this point as well
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  RETURN '';
END;
BEGIN
  INSERT
  INTO TB_MESSAGES_SMS
    (
      PHONE_NUMBER,
      ACCOUNT_NUMBER,
      MESSAGE,
      CHANNEL,
      DATE_CREATED,
      TXN_TYPE,
      TRIALS,
      SENT,
      Field100
    )
    VALUES
    (
      iv_PHONENUMBER,
      v_MWALLETACCOUNT,
      iv_Message,
      'BULK',
      SYSTIMESTAMP,
      'BULK_PAYMENT',
      0,0,
      'BULK_PAYMENT'
    );
EXCEPTION
WHEN OTHERS THEN
  RAISE;
  ROLLBACK;
  RETURN '';
END;
RETURN v_MWALLETACCOUNT;
END FN_AUTO_REG_BULK_PAY;

/
--------------------------------------------------------
--  DDL for Function FN_AUTO_REVERSE_CARDLESS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_AUTO_REVERSE_CARDLESS" (
V_ID IN NUMBER
) RETURN NUMBER AS 

V_FIELD37 NVARCHAR2(100) :='';
V_FIELD90 NVARCHAR2(100) :='';
V_CHANNEL NVARCHAR2(50) :='';

V_REVERSAL_MESSAGE NVARCHAR2(100) :='';
BEGIN

  -- fetch original transaction reference that initiated the transaction
  SELECT FIELD37 INTO  V_FIELD37 FROM TB_CARDLESS_TRANSACTIONS ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
  
  -- fetch the transaction that initiated the transaction
  SELECT FIELD32 , FIELD90 INTO V_CHANNEL , V_FIELD90 FROM TB_TRANSACTIONS ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
  
  
  V_REVERSAL_MESSAGE := FN_MINI_REV(V_CHANNEL , V_FIELD37, V_FIELD90);
  
  -- let check and see if the reversal request was successful
  
   IF SUBSTR(V_REVERSAL_MESSAGE,1,Instr(V_REVERSAL_MESSAGE,'|',1,1)-1) = '00' THEN  -- successfully reversed the request 
      -- update the cardless transaction
      update TB_CARDLESS_TRANSACTIONS set CASHED_OUT = '1', REVERSED = '1', POST_MINI_VERIFICATION = '1' where FIELD37 = V_FIELD37;
      
      return 1;
   ELSE 
      update TB_CARDLESS_TRANSACTIONS set REVERSAL_ERROR = V_REVERSAL_MESSAGE
      where FIELD37 = V_FIELD37;
      
      RETURN 0;
   END IF;
  
   EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    RETURN -1;
  
END FN_AUTO_REVERSE_CARDLESS;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_ACCOUNT_LIMIT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_ACCOUNT_LIMIT" 
(
  IV_ACCOUNT_NO IN VARCHAR2 ,
  IV_TYPE IN NVARCHAR2
) RETURN NUMBER AS 

V_RETURN_TYPE NUMBER(5) :=0 ; -- 0 ok 1 blocked_dr -1 disallow negative balance
V_GET_ACCOUNT_LIMIT_MAX NUMBER(18) :=15000000; -- fetch this transaction from general params
V_GET_ACCOUNT_LIMIT_MIN NUMBER(18) :=0; -- fetch this transaction from general params

V_AVAILABLE_BALANCE NUMBER(18) :=0;
V_ACTUAL_BALANCE NUMBER(18) :=0;
V_ACCOUNT_ID  NUMBER(18) :=0;
V_ACCOUNT_CLASS NVARCHAR2(5) :='';
V_BLOCKED_AMOUNT NUMBER(18) :=0;


BEGIN



  SELECT AVAILABLE_BAL , ACCOUNT_ID, ACCOUNT_CLASS INTO V_AVAILABLE_BALANCE, 
  V_ACCOUNT_ID,V_ACCOUNT_CLASS  FROM TB_ACCOUNT WHERE ACCOUNT_NO = IV_ACCOUNT_NO AND ROWNUM = 1;
  
  
  
  DBMS_OUTPUT.PUT_LINE('ACCOUNT CLASS '||V_ACCOUNT_CLASS);
  DBMS_OUTPUT.PUT_LINE('ACCOUNT NO '||IV_ACCOUNT_NO);
  DBMS_OUTPUT.PUT_LINE('BALANCE '||V_AVAILABLE_BALANCE);
  
  SELECT MIN_BALANCE , MAX_SAVING_AMOUNT INTO V_GET_ACCOUNT_LIMIT_MIN,V_GET_ACCOUNT_LIMIT_MAX 
  FROM TB_PRODUCTS WHERE PRODUCT_CODE = V_ACCOUNT_CLASS AND ROWNUM = 1;
  
  DBMS_OUTPUT.PUT_LINE('SET LIMIT '||V_GET_ACCOUNT_LIMIT_MAX);
  DBMS_OUTPUT.PUT_LINE('TYPE '||IV_TYPE);
  
  IF IV_TYPE = 'C'  THEN
      IF V_AVAILABLE_BALANCE > V_GET_ACCOUNT_LIMIT_MAX THEN
    -- block account for dr
      --    UPDATE TB_ACCOUNT SET ALLOW_DR = 'N' WHERE ACCOUNT_NO = IV_ACCOUNT_NO AND ROWNUM =1 ;
          V_RETURN_TYPE := 1;
       ELSE 
         V_RETURN_TYPE := 0; 
    END IF; 
  
  ELSE 
   DBMS_OUTPUT.PUT_LINE('SET MINIMUM SAVINGS '||V_GET_ACCOUNT_LIMIT_MIN);
   DBMS_OUTPUT.PUT_LINE('ACTUAL BALANCE '||V_AVAILABLE_BALANCE);
   
    IF V_AVAILABLE_BALANCE  < V_GET_ACCOUNT_LIMIT_MIN THEN 
       V_RETURN_TYPE := -1;
       
    ELSE 
      V_RETURN_TYPE := 0;
    END IF;
  END IF;
  
    
  RETURN V_RETURN_TYPE;
END FN_CHECK_ACCOUNT_LIMIT;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_COMMISSION_AC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_COMMISSION_AC" (
    V_FIELD35 IN VARCHAR2 )
  RETURN NUMBER
AS
  V_COMMISSION_BANK NUMBER := 1;
BEGIN
  BEGIN
    SELECT COMMISSION_BANK
    INTO V_COMMISSION_BANK
    FROM TB_AGENTS
    WHERE AGENT_CODE               = V_FIELD35
    AND NVL(COMMISSION_ACCOUNT,'')<> ''
    AND ROWNUM                     = 1;
    EXCEPTION
  WHEN OTHERS THEN
    V_COMMISSION_BANK := 1;
  END;
RETURN V_COMMISSION_BANK;
END FN_CHECK_COMMISSION_AC;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_CHECK_CUSTOMER" (
    IV_SEARCH_PARAM IN VARCHAR2)
  RETURN NUMBER
AS
V_COUNT NUMBER :=0;
BEGIN
  SELECT COUNT(1) INTO V_COUNT
  FROM DUAL
  WHERE EXISTS
    (SELECT ID
    FROM VW_ALLCUSTOMERS
    WHERE CUSTOMER_NO = IV_SEARCH_PARAM
    or MWALLET_ACCOUNT = IV_SEARCH_PARAM
    AND ROWNUM        =1);

    RETURN V_COUNT;
  END FN_CHECK_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_LOYALITY_AC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_LOYALITY_AC" 
(
  IV_FIELD2 IN NVARCHAR2 
) RETURN NVARCHAR2 AS 

LOYALITY_POINTS_AC NVARCHAR2(50) :='0';
BEGIN

  SELECT ACCOUNT_NO INTO LOYALITY_POINTS_AC FROM TB_ACCOUNT WHERE CUSTOMER_NO = IV_FIELD2 AND ACCOUNT_CLASS = '207' AND ROWNUM = 1;
  RETURN LOYALITY_POINTS_AC;
  EXCEPTION WHEN OTHERS THEN
  -- LOYALITY POINTS ACCOUNT NOT FOUND i.e DATA NOT FOUND
    LOYALITY_POINTS_AC := '0';
    
  RETURN LOYALITY_POINTS_AC;
END FN_CHECK_LOYALITY_AC;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_PROCESS_TOKEN_GUARD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_PROCESS_TOKEN_GUARD" (
  IV_TOKEN NVARCHAR2
) RETURN VARCHAR2 AS 

V_FIELD37 NVARCHAR2(100) :='';
V_ID NUMBER(18) :='';
V_COUNT NUMBER := 0;
V_CASHED_OUT NUMBER(2) :=0;
V_POST_MINI_VERIFICATION NUMBER :=0;
V_TOKEN_VALIDATION NUMBER(2) :=0;
V_REVERSAL_FLAG number(2) :=0;
BEGIN
  SELECT COUNT(1) INTO V_COUNT  FROM DUAL  WHERE EXISTS (SELECT ID FROM TB_CARDLESS_TRANSACTIONS
  WHERE TOKEN_HASH = IV_TOKEN 
     ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
      );
      
     IF V_COUNT < 1 THEN 
      RETURN '114|0|0|0|0|Token not found'; -- token provided was not found
     END IF ;
     
     SELECT ID , FIELD37, CASHED_OUT, POST_MINI_VERIFICATION INTO V_ID ,
     V_FIELD37,V_CASHED_OUT,V_POST_MINI_VERIFICATION FROM TB_CARDLESS_TRANSACTIONS WHERE TOKEN_HASH = IV_TOKEN 
      ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
      
      -- we check if the token has been cashed out first before performing the transaction
      IF CASHED_OUT = 1 THEN 
        IF POST_MINI_VERIFICATION = 1 THEN -- meaning that this token has already been used from another transaction
           RETURN '110|0|0|0|0|Used token';
           
        ELSE 
          /*
          meaning that the token is being used for the first time , hence we update
          post_mini_verification to 1
          */
          UPDATE TB_CARDLESS_TRANSACTIONS SET POST_MINI_VERIFICATION = '1' WHERE FIELD37 = V_FIELD37;
          RETURN '110|0|0|0|0|Used token';
        END IF;
       
      ELSE
        -- token isn't cashed out, validate token before proceeding 
          V_TOKEN_VALIDATION := FN_CHECK_VALIDITY(V_ID);
          
          IF V_TOKEN_VALIDATION = 0 THEN -- token has expired
              -- initiate token reversal 
              V_REVERSAL_FLAG := FN_AUTO_REVERSE_CARDLESS(V_ID);
              
              -- check the status of the reversed transaction
              IF V_REVERSAL_FLAG = 1 THEN
                 RETURN '111|0|0|0|0|Exipired token';
              ELSIF V_REVERSAL_FLAG = 0 THEN
                 RETURN '112|0|0|0|0|Exipired token. Failed reversal';
              ELSE
                RETURN '112|0|0|0|0|Failed ';
              END IF;  
          ELSIF V_TOKEN_VALIDATION = 1 THEN -- token is still valid for transacting 
            UPDATE TB_CARDLESS_TRANSACTIONS SET CASHED_OUT = '1' , POST_MINI_VERIFICATION = '1' WHERE FIELD37 = V_FIELD37;
            RETURN '110|0|0|0|0|Token Used';
          ELSE
            -- failed to validate token
            RETURN '112|0|0|0|0|Failed';            
          END IF;
      END IF ;
  exception when others then
     RETURN '112|0|0|0|0|Failed';    
      -- validate 
  -- fetch V_ID 
END FN_CHECK_TOKEN;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_TOKEN
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_TOKEN" (
  IV_TOKEN NVARCHAR2
) RETURN VARCHAR2 AS 

V_FIELD37 NVARCHAR2(100) :='';
V_ID NUMBER(18) :='';
V_COUNT NUMBER := 0;
V_CASHED_OUT NUMBER(2) :=0;
V_POST_MINI_VERIFICATION NUMBER :=0;
V_TOKEN_VALIDATION NUMBER(2) :=0;
V_REVERSAL_FLAG number(2) :=0;
BEGIN
  SELECT COUNT(1) INTO V_COUNT  FROM DUAL  WHERE EXISTS (SELECT ID FROM TB_CARDLESS_TRANSACTIONS
  WHERE TOKEN_HASH = IV_TOKEN 
     ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY
      );
      
     IF V_COUNT < 1 THEN 
      RETURN '114|0|0|0|0|Token not found'; -- token provided was not found
     END IF ;
     
     SELECT ID , FIELD37, CASHED_OUT, POST_MINI_VERIFICATION INTO V_ID ,
     V_FIELD37,V_CASHED_OUT,V_POST_MINI_VERIFICATION FROM TB_CARDLESS_TRANSACTIONS WHERE TOKEN_HASH = IV_TOKEN 
      ORDER BY ID DESC OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY;
      
      -- we check if the token has been cashed out first before performing the transaction
      IF V_CASHED_OUT = 1 THEN 
        IF V_POST_MINI_VERIFICATION = 1 THEN -- meaning that this token has already been used from another transaction
           RETURN '110|0|0|0|0|Used token';
           
        ELSE 
          /*
          meaning that the token is being used for the first time , hence we update
          post_mini_verification to 1
          */
          UPDATE TB_CARDLESS_TRANSACTIONS SET POST_MINI_VERIFICATION = '1' WHERE FIELD37 = V_FIELD37;
          RETURN '110|0|0|0|0|Used token';
        END IF;
       
      ELSE
        -- token isn't cashed out, validate token before proceeding 
          V_TOKEN_VALIDATION := FN_CHECK_VALIDITY(V_ID);
          
          IF V_TOKEN_VALIDATION = 0 THEN -- token has expired
              -- initiate token reversal 
              V_REVERSAL_FLAG := FN_AUTO_REVERSE_CARDLESS(V_ID);
              
              -- check the status of the reversed transaction
              IF V_REVERSAL_FLAG = 1 THEN
                 RETURN '111|0|0|0|0|Exipired token';
              ELSIF V_REVERSAL_FLAG = 0 THEN
                 RETURN '112|0|0|0|0|Exipired token. Failed reversal';
              ELSE
                RETURN '112|0|0|0|0|Failed ';
              END IF;  
          ELSIF V_TOKEN_VALIDATION = 1 THEN -- token is still valid for transacting 
            UPDATE TB_CARDLESS_TRANSACTIONS SET CASHED_OUT = '1' , POST_MINI_VERIFICATION = '1' WHERE FIELD37 = V_FIELD37;
            RETURN '110|0|0|0|0|Token Used';
          ELSE
            -- failed to validate token
            RETURN '112|0|0|0|0|Failed';            
          END IF;
      END IF ;
  exception when others then
  RAISE;
     RETURN '112|0|0|0|0|Failed';    
      -- validate 
  -- fetch V_ID 
END FN_CHECK_TOKEN;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_TRANSACTION_REF
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_TRANSACTION_REF" (
  IV_FIELD37 VARCHAR2,
  IV_MSG_TYPE VARCHAR2
) RETURN NUMBER AS 

V_COUNT NUMBER := 0;
BEGIN

  SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS 
  (SELECT ID FROM TB_TRANSACTIONS 
  WHERE FIELD37 = IV_FIELD37 
  AND TB_TRANSACTIONS.MSGTYPE = IV_MSG_TYPE ORDER BY ID DESC  FETCH NEXT 1 ROWS ONLY);

  RETURN V_COUNT;
END FN_CHECK_TRANSACTION_REF;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_TRX_LIMITS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_TRX_LIMITS" (
  IV_FIELD4 IN NVARCHAR2,
  IV_FIELD100 IN NVARCHAR2
) RETURN VARCHAR2 AS 

V_MIN_LIMIT NUMBER(18) :=0;
V_MAX_LIMIT NUMBER(18) :=0;
BEGIN

  SELECT TRANSACTION_LIMIT_MAX, TRANSACTION_LIMIT_MIN INTO V_MAX_LIMIT, V_MIN_LIMIT FROM TB_SERVICES 
  WHERE FIELD100 = IV_FIELD100 AND ROWNUM = 1;
  
  IF IV_FIELD4 < V_MIN_LIMIT THEN 
    RETURN -1;
  END IF;  
 IF IV_FIELD4 > V_MAX_LIMIT THEN
    RETURN 1;
  END IF;  
  
  RETURN 0;
END FN_CHECK_TRX_LIMITS;

/
--------------------------------------------------------
--  DDL for Function FN_CHECK_VALIDITY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_CHECK_VALIDITY" (
IV_ID IN NUMBER
) RETURN NUMBER AS 

V_VALIDITY_TIME NUMBER(5) := 10; -- get from tb_general_params
V_VALIDITY_TYPE NVARCHAR2(50) :='';
EXP NVARCHAR2(50) :='';

timenow NVARCHAR2(50);

V_COUNT NUMBER :=0;
BEGIN

  V_VALIDITY_TIME :=  FN_GETGENERAL_PARAMS('TOKEN_EXPIRATION_TIME');

SELECT TRANSACTION_TIME ,TO_CHAR( TRANSACTION_TIME + (1/1440*V_VALIDITY_TIME), 'MM/DD/YYYY HH:MI:SS AM' ) 
INTO timenow, EXP FROM  TB_CARDLESS_TRANSACTIONS 
WHERE ID = IV_ID;
  -- 9/14/2020 02:12:30 PM
  
  DBMS_OUTPUT.PUT_LINE(timenow);
  
  DBMS_OUTPUT.PUT_LINE(EXP);
  V_VALIDITY_TYPE := TO_CHAR( SYSTIMESTAMP,'MM/DD/YYYY HH:MI:SS AM') ;
  DBMS_OUTPUT.PUT_LINE('NOW'||V_VALIDITY_TYPE);
  
  IF TO_DATE(EXP,'MM/DD/YYYY HH:MI:SS AM') > TO_DATE( V_VALIDITY_TYPE ,'MM/DD/YYYY HH:MI:SS AM') THEN 
    DBMS_OUTPUT.PUT_LINE('VALID TOKEN'); 
    RETURN 1;
  ELSE   
    -- update the time_with the time it exipired
    UPDATE TB_CARDLESS_TRANSACTIONS SET EXPIRED = 1, EXPIRY_DATE = EXP  WHERE ID = IV_ID;
    DBMS_OUTPUT.PUT_LINE('EXPIRED TOKEN');
    RETURN 0; -- not okay
  END IF;
  
  exception when others then
  RAISE;
    return -1;
  
  RETURN 1;
END ;

/
--------------------------------------------------------
--  DDL for Function FN_FETCH_BATCH_DATA
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_FETCH_BATCH_DATA" (
  IV_BATCH_NO IN NVARCHAR2
) RETURN CLOB AS 

batch_data clob;
v_count number :=0;
BEGIN

    select count(1) into v_count from dual where exists (select batch_no 
    from TB_INSTITUTION_BATCH_PAYOUT where batch_no = IV_BATCH_NO and rownum = 1);
    
    if v_count < 1 then 
      return '[]';
    end if;
  

      SELECT JSON_ARRAYAGG( json_object( 'id' VALUE ID,'id_type' VALUE ID_TYPE,
      'id_no' VALUE ID_NO, 'first_name' value FIRST_NAME, 'middle_name' value MIDDLE_NAME, 'last_name' VALUE LAST_NAME,
      'mobile_number' value MOBILE_NUMBER , 'email_address' value EMAIL_ADDRESS, 'amount' value AMOUNT))
    INTO batch_data
    FROM TB_INSTITUTION_BATCH_PAYOUT
    WHERE BATCH_NO = IV_BATCH_NO AND VERIFIED = '1';

  RETURN batch_data;
END FN_FETCH_BATCH_DATA;

/
--------------------------------------------------------
--  DDL for Function FN_FORMAT_DATE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_FORMAT_DATE" /*dbo.*/
(
  v_Datetime IN DATE,
  v_FormatMask IN VARCHAR2
)
RETURN VARCHAR2
AS
   v_StringDate VARCHAR2(32);
   v_TempValue varchar(10);

BEGIN
   v_StringDate := v_FormatMask ;
   if v_StringDate = 'MM' then
       select (extract(month from v_Datetime)) into v_TempValue from dual;

       if LENGTH(v_TempValue) = 1 then
       v_StringDate := 'M0'||v_TempValue;
       else
       v_StringDate := 'M'||v_TempValue;
       end if;
   end if;


   if v_StringDate = 'YYYY' then
       select (extract(year from v_Datetime)) into v_TempValue from dual;

       v_StringDate := 'FY'||v_TempValue;

   end if;
      RETURN v_StringDate;
END;


/
--------------------------------------------------------
--  DDL for Function FN_GEMIFICATION_RESPONSE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GEMIFICATION_RESPONSE" (
  IV_POINTS IN NUMBER DEFAULT 0, 
  IV_FIELD100 IN NVARCHAR2,
  IV_LOOK_UP_TYPE IN NVARCHAR2
) RETURN VARCHAR2 AS 

V_RESPONSE NVARCHAR2(50) := '';
V_FINANCLE_ACCOUNT NVARCHAR2(50) :='';
V_REDEEM_POINTS_CONVERSION_RATE NUMBER(5) :=0;
V_AMOUNT NUMBER(18) :=0;
BEGIN
  
  IF IV_POINTS = 0  THEN
    RETURN '0|0';
  END IF;
  
  --V_REDEEM_POINTS_CONVERSION_RATE := FN_GETGENERAL_PARAMS('AMOUNT_PER_POINT');
  V_AMOUNT := IV_POINTS;
  
  IF IV_LOOK_UP_TYPE = 'C' THEN 
    SELECT CBS_GL_DR INTO V_FINANCLE_ACCOUNT FROM TB_GL_MAPPING WHERE TXNIDENTIFIER = IV_FIELD100 AND ROWNUM = 1;
    RETURN V_AMOUNT ||'|'||V_FINANCLE_ACCOUNT;
  ELSE 
    SELECT CBS_GL_CR INTO V_FINANCLE_ACCOUNT FROM TB_GL_MAPPING WHERE TXNIDENTIFIER = IV_FIELD100 AND ROWNUM = 1;
    RETURN V_AMOUNT ||'|'||V_FINANCLE_ACCOUNT;
  END IF;
  
  exception when others then
    V_RESPONSE := '1|1';
  RETURN V_RESPONSE; -- if returned at this point , an error will be triggered on finacle side because because of the 
    -- invalid account number, hence we check if the configuration is okay or not
END FN_GEMIFICATION_RESPONSE;

/
--------------------------------------------------------
--  DDL for Function FN_GETBALANCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GETBALANCE" (
    V_TYPE    IN VARCHAR2 , ---cuustomer acc or GL (G/C)
    V_COB     IN NUMBER ,
    V_ACCOUNT IN VARCHAR2
  )
  RETURN VARCHAR2
AS
  V_ACTUAL    NUMBER(18,5):=0;
  V_AVAILABLE NUMBER(18,5):=0;
  V_DR        NUMBER(18,5):=0;
  V_CR        NUMBER(18,5):=0;
  V_ACCOUNT_CLASS NVARCHAR2(10);
  V_MINBAL NUMBER(18,5):=0;
BEGIN
  IF V_TYPE = 'G' THEN
    SELECT NVL(GL_BALANCE,0) ACTUALBAL,
      NVL(GL_BALANCE,0) AVAILABLEBAL
    INTO V_ACTUAL,
      V_AVAILABLE
    FROM TB_GL_BALANCE
    WHERE GL_CODE = V_ACCOUNT;
  END IF;
IF V_TYPE ='C' THEN
   SELECT ACCOUNT_CLASS,
    NVL(ACTUAL_BAL,0) ACTUAL_BAL,
    NVL(AVAILABLE_BAL,0) - NVL(BLOCKED_AMOUNT, 0) AVAILABLE_BAL
  INTO V_ACCOUNT_CLASS,
    V_ACTUAL,
    V_AVAILABLE
  FROM TB_ACCOUNT
  WHERE ACCOUNT_NO = V_ACCOUNT;
  BEGIN
    SELECT NVL(MIN_OPENING_BAL,0)
    INTO V_MINBAL
    FROM TB_PRODUCTS
    WHERE PRODUCT_CODE = V_ACCOUNT_CLASS;
  EXCEPTION
  WHEN OTHERS THEN
    V_MINBAL :=0;
  END;
  V_AVAILABLE := V_AVAILABLE -V_MINBAL;
END IF;
IF V_COB = 1 THEN
  BEGIN
    SELECT SUM(NVL(TRIM(AMOUNT),0))
    INTO V_DR
    FROM TB_TRANSACTIONS_COB
    WHERE ACCOUNT_NO = V_ACCOUNT
    AND DRCR        = 'D'
    AND POSTED      = 0;
    SELECT SUM(NVL(TRIM(AMOUNT),0))
    INTO V_CR
    FROM TB_TRANSACTIONS_COB
    WHERE ACCOUNT_NO = V_ACCOUNT
    AND DRCR        = 'C'
    AND POSTED      = 0;
    V_ACTUAL       := NVL(V_ACTUAL,0)    + NVL(V_CR,0) - NVL(V_DR,0);
    V_AVAILABLE    := NVL(V_AVAILABLE,0) + NVL(V_CR,0) - NVL(V_DR,0);
  END;
END IF;
RETURN V_AVAILABLE||'|'|| V_ACTUAL ;
EXCEPTION
WHEN OTHERS THEN
  RETURN 0 ||'|'|| 0;
END;


/
--------------------------------------------------------
--  DDL for Function FN_GETBALANCE_AVAILABLE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GETBALANCE_AVAILABLE" (
    V_TYPE    IN VARCHAR2 ,
    V_COB     IN NUMBER ,
    V_ACCOUNT IN VARCHAR2
  )
  RETURN NUMBER
AS
  V_ACTUAL    NUMBER(18,5):=0;
  V_AVAILABLE NUMBER(18,5):=0;
  V_DR        NUMBER(18,5):=0;
  V_CR        NUMBER(18,5):=0;
  V_ACCOUNT_CLASS NVARCHAR2(10);
  V_MINBAL NUMBER(18,5):=0;
BEGIN
  IF V_TYPE = 'G' THEN
    SELECT NVL(GL_BALANCE,0) ACTUALBAL,
      NVL(GL_BALANCE,0) AVAILABLEBAL
    INTO V_ACTUAL,
      V_AVAILABLE
    FROM TB_GL_BALANCE
    WHERE GL_CODE = V_ACCOUNT;
  END IF;
IF V_TYPE ='C' THEN
   SELECT ACCOUNT_CLASS,
    NVL(ACTUAL_BAL,0) ACTUAL_BAL,
    NVL(AVAILABLE_BAL,0) - NVL(BLOCKED_AMOUNT, 0) AVAILABLE_BAL
  INTO V_ACCOUNT_CLASS,
    V_ACTUAL,
    V_AVAILABLE
  FROM TB_ACCOUNT
  WHERE ACCOUNT_NO = V_ACCOUNT;
  BEGIN
    SELECT NVL(MIN_OPENING_BAL,0)
    INTO V_MINBAL
    FROM TB_PRODUCTS
    WHERE PRODUCT_CODE = V_ACCOUNT_CLASS;
  EXCEPTION
  WHEN OTHERS THEN
    V_MINBAL :=0;
  END;
  V_AVAILABLE := V_AVAILABLE -V_MINBAL;
END IF;
IF V_COB = 1 THEN
  BEGIN
    SELECT SUM(NVL(TRIM(AMOUNT),0))
    INTO V_DR
    FROM TB_TRANSACTIONS_COB
    WHERE ACCOUNT_NO = V_ACCOUNT
    AND DRCR        = 'D'
    AND POSTED      = 0;
    SELECT SUM(NVL(TRIM(AMOUNT),0))
    INTO V_CR
    FROM TB_TRANSACTIONS_COB
    WHERE ACCOUNT_NO = V_ACCOUNT
    AND DRCR        = 'C'
    AND POSTED      = 0;
    V_ACTUAL       := NVL(V_ACTUAL,0)    + NVL(V_CR,0) - NVL(V_DR,0);
    V_AVAILABLE    := NVL(V_AVAILABLE,0) + NVL(V_CR,0) - NVL(V_DR,0);
  END;
END IF;
RETURN V_AVAILABLE;
EXCEPTION
WHEN OTHERS THEN
  RETURN 0;
END;


/
--------------------------------------------------------
--  DDL for Function FN_GETGENERAL_PARAMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GETGENERAL_PARAMS" (
    V_ITEMNAME IN VARCHAR2
  )
  RETURN VARCHAR2
AS
  V_ITEMVALUE NVARCHAR2(100);
BEGIN
  SELECT ITEMVALUE
  INTO V_ITEMVALUE
  FROM TB_GENERAL_PARAMS
  WHERE ITEMNAME = trim(V_ITEMNAME) and rownum = 1;
  RETURN V_ITEMVALUE;
EXCEPTION
WHEN OTHERS THEN
  RETURN 'NOTOK';
END ;

/
--------------------------------------------------------
--  DDL for Function FN_GET_CHARGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_CHARGES" (
    V_FIELD3   IN NVARCHAR2,
    V_FIELD4   IN NVARCHAR2,
    V_CHANNEL  IN NVARCHAR2,
    V_FIELD100 IN NVARCHAR2,
    V_FIELD102 IN NVARCHAR2,
    V_FIELD103 IN NVARCHAR2)
    RETURN NUMBER
AS
  V_CHARGE     NUMBER(18,5):=0;
  V_CHARGE103  NUMBER(18,5):=0;
  V_MAX_CHARGE NUMBER(18,5);
  V_MIN_CHARGE NUMBER(18,5);
  V_ACCOUNT_CLASS NVARCHAR2(20):='256';
  V_FEE_TYPE   CHAR(6):='N';
  V_RANGE_FROM NUMBER(18,5);
  V_RANGE_TO   NUMBER(18,5);
  V_TEMP       NUMBER(5, 0) :=0;
  V_TEMP2      NUMBER(5, 0) :=0;
BEGIN
  IF (LENGTH (V_FIELD102)< 1) AND (LENGTH (V_FIELD103)< 1) THEN
    BEGIN

       RETURN 0;
    END;
  END IF;
  --V_ACCOUNT_CLASS:=SUBSTR(V_FIELD102, 1,3);
  BEGIN
    SELECT 1
    INTO V_TEMP
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
     -- AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1
      );
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END;
  IF V_TEMP = 1 THEN
    SELECT FVR
    INTO V_FEE_TYPE
    FROM TB_TRANS_COMMISSION_CHARGES
    WHERE PROCODE     = V_FIELD3
    AND TRXCODE       = V_FIELD100
    --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
    AND TRXACTIVE     = 1
    AND ROWNUM       <=1;
  END IF;
  IF V_FEE_TYPE = 'F' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'R' THEN
    BEGIN
      SELECT NVL( AMOUNT,0)
      INTO V_CHARGE
      FROM
        (SELECT AMOUNT
        FROM TB_CHARGE_RANGE
        WHERE PROCODE = V_FIELD3 AND TRX_CODE = V_FIELD100
        AND V_FIELD4 BETWEEN RANGE_FROM AND RANGE_TO
        AND ROWNUM <= 1
        ORDER BY RANGE_TO ASC
        )
      WHERE ROWNUM <= 1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'P' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'PF' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION_CHARGES
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
      SELECT NVL(RANGE_FROM,0),
        NVL( RANGE_TO,0)
      INTO V_MIN_CHARGE,
        V_MAX_CHARGE
      FROM TB_CHARGE_RANGE
      WHERE PROCODE = V_FIELD3;
      IF V_CHARGE   > V_MAX_CHARGE THEN
        V_CHARGE   := V_MAX_CHARGE;
      END IF;
      IF V_CHARGE < V_MIN_CHARGE THEN
        V_CHARGE := V_MIN_CHARGE ;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
    RAISE;
      V_CHARGE :=0;
    END;
  END IF;
   RETURN V_CHARGE;
END;

/
--------------------------------------------------------
--  DDL for Function FN_GET_COMMISSIONS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_COMMISSIONS" (
    V_FIELD3   IN NVARCHAR2,
    V_FIELD4   IN NVARCHAR2,
    V_CHANNEL  IN NVARCHAR2,
    V_FIELD100 IN NVARCHAR2,
    V_FIELD102 IN NVARCHAR2,
    V_FIELD103 IN NVARCHAR2)
    RETURN NUMBER
AS
  V_CHARGE     NUMBER(18,5):=0;
  V_CHARGE103  NUMBER(18,5):=0;
  V_MAX_CHARGE NUMBER(18,5);
  V_MIN_CHARGE NUMBER(18,5);
  V_ACCOUNT_CLASS NVARCHAR2(20):='204';
  V_FEE_TYPE   CHAR(6):='N';
  V_RANGE_FROM NUMBER(18,5);
  V_RANGE_TO   NUMBER(18,5);
  V_TEMP       NUMBER(5, 0) :=0;
  V_TEMP2      NUMBER(5, 0) :=0;
BEGIN
  IF (LENGTH (V_FIELD102)< 1) AND (LENGTH (V_FIELD103)< 1) THEN
    BEGIN
     
       RETURN 0;
    END;
  END IF;
  --V_ACCOUNT_CLASS:=SUBSTR(V_FIELD102, 1,3);
  BEGIN
    SELECT 1
    INTO V_TEMP
    FROM DUAL
    WHERE EXISTS
      (SELECT *
      FROM TB_TRANS_COMMISSION
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1
      );
  EXCEPTION
  WHEN OTHERS THEN
    NULL;
  END;
  IF V_TEMP = 1 THEN
    SELECT FVR
    INTO V_FEE_TYPE
    FROM TB_TRANS_COMMISSION
    WHERE PROCODE     = V_FIELD3
    AND TRXCODE       = V_FIELD100
    --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
    AND TRXACTIVE     = 1
    AND ROWNUM       <=1;
  END IF;
  IF V_FEE_TYPE = 'F' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      --AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'R' THEN
    BEGIN
      SELECT NVL( AMOUNT,0)
      INTO V_CHARGE
      FROM
        (SELECT AMOUNT
        FROM TB_CHARGE_RANGE
        WHERE PROCODE = V_FIELD3
        AND V_FIELD4 BETWEEN RANGE_FROM AND RANGE_TO
        AND ROWNUM <= 1
        ORDER BY RANGE_TO ASC
        )
      WHERE ROWNUM <= 1;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'P' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
    EXCEPTION
    WHEN OTHERS THEN
      V_CHARGE :=0;
    END;
  END IF;
  IF V_FEE_TYPE = 'PF' THEN
    BEGIN
      SELECT AMOUNT
      INTO V_CHARGE
      FROM TB_TRANS_COMMISSION
      WHERE PROCODE     = V_FIELD3
      AND TRXCODE       = V_FIELD100
      AND ACCOUNT_CLASS = V_ACCOUNT_CLASS
      AND TRXACTIVE     = 1
      AND ROWNUM       <=1;
      V_CHARGE         :=V_CHARGE/100 * V_FIELD4;
      SELECT NVL(RANGE_FROM,0),
        NVL( RANGE_TO,0)
      INTO V_MIN_CHARGE,
        V_MAX_CHARGE
      FROM TB_COMMISSION_RANGE
      WHERE PROCODE = V_FIELD3;
      IF V_CHARGE   > V_MAX_CHARGE THEN
        V_CHARGE   := V_MAX_CHARGE;
      END IF;
      IF V_CHARGE < V_MIN_CHARGE THEN
        V_CHARGE := V_MIN_CHARGE ;
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
   -- RAISE;
      V_CHARGE :=0;
    END;
  END IF;
   RETURN V_CHARGE;
END;

/
--------------------------------------------------------
--  DDL for Function FN_GET_COMM_ACCOUNT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_COMM_ACCOUNT" 
(
  V_FIELD35 IN VARCHAR2 
) RETURN VARCHAR2 AS
V_COMMISSION_ACCOUNT NVARCHAR2(50) := '';
BEGIN
  SELECT COMMISSION_ACCOUNT INTO V_COMMISSION_ACCOUNT 
  FROM TB_AGENTS WHERE AGENT_CODE = V_FIELD35
  AND NVL(COMMISSION_ACCOUNT,'')<> ''
  AND ROWNUM = 1;
  
  RETURN V_COMMISSION_ACCOUNT;
END FN_GET_COMM_ACCOUNT;

/
--------------------------------------------------------
--  DDL for Function FN_GET_CUSTOMER_CARDS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_CUSTOMER_CARDS" (
    IV_CUSTOMER_NO IN NVARCHAR2
) RETURN CLOB AS 

V_LINKED_CARDS VARCHAR2(4000) :='[]';
V_COUNT NUMBER(5) :=0;
BEGIN

    SELECT COUNT(ID) INTO V_COUNT FROM tb_card_linking WHERE CUSTOMER_NO = IV_CUSTOMER_NO AND ROWNUM = 1;

    DBMS_OUTPUT.PUT_LINE('COUNT -- '|| v_count);
    IF V_COUNT > 0 THEN 
            
      SELECT CAST( CARDS AS VARCHAR2(4000)) INTO V_LINKED_CARDS
      FROM VW_CUSTOMER_CARDS
      WHERE CUSTOMER_NO = IV_CUSTOMER_NO AND ROWNUM = 1;
      
      DBMS_OUTPUT.put_line(LENGTH(V_LINKED_CARDS));
      DBMS_OUTPUT.put_line(V_LINKED_CARDS);
      
    END IF;
     DBMS_OUTPUT.put_line(V_LINKED_CARDS);
  RETURN V_LINKED_CARDS;
END FN_GET_CUSTOMER_CARDS;

/
--------------------------------------------------------
--  DDL for Function FN_GET_CUSTOMER_QTNS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_CUSTOMER_QTNS" (IV_CUSTOMER_ID IN NUMBER)
RETURN VARCHAR2 AS 

CUSTOMER_ANSWERS NVARCHAR2(3000) :='[]';
V_COUNT NUMBER :=0;
BEGIN

  SELECT COUNT(ID) INTO V_COUNT FROM VW_SECURITY_ANS WHERE CUSTOMER_ID = IV_CUSTOMER_ID AND ROWNUM = 1;
  
  IF V_COUNT > 0 THEN
    
      
    
    SELECT JSON_ARRAYAGG( json_object( 'QTN_ID' VALUE CAST(QUESTION_ID AS NUMBER(18)),
    'ANS' VALUE CAST(ANSWER AS VARCHAR2(500)), 'CUST_ID' VALUE CAST(CUSTOMER_ID AS NUMBER(18))))
    INTO CUSTOMER_ANSWERS
    FROM VW_SECURITY_ANS
    WHERE CUSTOMER_ID = IV_CUSTOMER_ID;
      
  END IF;
  
  
  RETURN CUSTOMER_ANSWERS;
END FN_GET_CUSTOMER_QTNS;

/
--------------------------------------------------------
--  DDL for Function FN_GET_CUST_ACCOUNT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_CUST_ACCOUNT" (
    V_PHONE_NUMBER IN VARCHAR2 )
  RETURN VARCHAR2
AS
  iv_Count         NUMERIC(18)  :=0;
  iv_Confirm_Count NUMERIC(5)   :=0;
  iv_Return_count NVARCHAR2(20) :='';
BEGIN
  SELECT COUNT(CUSTOMER_NO)
  INTO iv_Count
  FROM tb_customer
  WHERE CUSTOMER_NO = V_PHONE_NUMBER AND ROWNUM=1;
  <<rudia>>
  iv_Count        := iv_Count+1 ;
  iv_Return_count := LPAD( iv_Count, 3 ,0 ) ;
  SELECT COUNT(ACCOUNT_ID)
  INTO iv_Confirm_Count
  FROM tb_account
  WHERE ACCOUNT_NO = V_PHONE_NUMBER
    ||iv_Return_count;
  IF iv_Confirm_Count = 0 THEN
    RETURN V_PHONE_NUMBER||iv_Return_count;
  ELSE
    GOTO rudia;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  RETURN '0';
END ;


/
--------------------------------------------------------
--  DDL for Function FN_GET_EOD_AC
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_EOD_AC" RETURN VARCHAR2 AS 

EOD_ACCOUNT NVARCHAR2(50) :='';
BEGIN

  SELECT GL_CODE INTO EOD_ACCOUNT FROM TB_GL WHERE GL_DESCRIPTION = 'EOD_PROCESS' AND ALLOW_DR = 1 AND ROWNUM = 1; 

  DBMS_OUTPUT.PUT_LINE(EOD_ACCOUNT);
  RETURN EOD_ACCOUNT;
  EXCEPTION WHEN OTHERS THEN
    EOD_ACCOUNT := '0';
  RETURN EOD_ACCOUNT;
END FN_GET_EOD_AC;

/
--------------------------------------------------------
--  DDL for Function FN_GET_GL_ACCOUNT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_GL_ACCOUNT" /*dbo.*/
(
  v_SERVICE IN VARCHAR2,
  IV_PROCODE IN VARCHAR2
)
RETURN VARCHAR2
AS
   v_Return VARCHAR2(20);

BEGIN
   SELECT MWALLETCONTRA 

     INTO v_Return
     FROM TB_GL_MAPPING 
    WHERE TXNIDENTIFIER = v_SERVICE AND PROCODE = IV_PROCODE
    AND ROWNUM =1;
   RETURN v_Return;
END;


/
--------------------------------------------------------
--  DDL for Function FN_GET_GL_AC_CHARGES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_GL_AC_CHARGES" /*dbo.*/
(
  v_SERVICE IN VARCHAR2,
 IV_PROCODE IN VARCHAR2
)
RETURN VARCHAR2
AS
   v_Return VARCHAR2(15);

BEGIN
   SELECT MWALLETCONTRA 

     INTO v_Return
     FROM TB_GL_MAPPING 
    WHERE TXNIDENTIFIER = 'BANK_INCOME_ACCOUNT' AND PROCODE = '000000'
    AND ROWNUM<=1;
   RETURN v_Return; 


END;

/
--------------------------------------------------------
--  DDL for Function FN_GET_LINKED_ACCOUNTS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_LINKED_ACCOUNTS" (
    IV_PHONENUMBER IN VARCHAR2)
  RETURN VARCHAR2
AS
  V_LINKED_ACCOUNTS VARCHAR2(2000):='';
  V_COUNT          NUMBER        :=0;
BEGIN
  SELECT COUNT(ID)
  INTO V_COUNT
  FROM TB_LINKED_ACCOUNTS
  WHERE PHONENUMBER = IV_PHONENUMBER
  AND ROWNUM        =1;
  IF V_COUNT        >0 THEN
    /*
    SELECT json_object('LINKEDACCOUNT' VALUE json_arrayagg(CAST(LINKEDACCOUNT AS VARCHAR2(50)) ) FORMAT JSON)
    INTO V_LINKED_ACCOUNTS
    FROM TB_LINKED_ACCOUNTS
    WHERE PHONENUMBER = IV_PHONENUMBER;
    */
--    SELECT JSON_ARRAYAGG( json_object( 'LINKEDACCOUNT' VALUE CAST(LINKEDACCOUNT AS VARCHAR2(2000)),
--    'CURRENCY' VALUE CAST(CURRENCY AS VARCHAR2(50)), 'ACCOUNT_TYPE' VALUE CAST(ACCOUNTTYPE AS VARCHAR2(50))))
--    INTO V_LINKED_ACCOUNTS
--    FROM TB_LINKED_ACCOUNTS
--    WHERE PHONENUMBER = '0';
    V_LINKED_ACCOUNTS := '[]';
  END IF;
RETURN V_LINKED_ACCOUNTS;
END FN_GET_LINKED_ACCOUNTS;

/
--------------------------------------------------------
--  DDL for Function FN_GET_LOYALITY_POINTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_LOYALITY_POINTS" (
IV_FIELD3 IN NVARCHAR2,
IV_FIELD100 IN NVARCHAR2,
AMOUNT IN NUMBER,
IV_FIELD2 IN NVARCHAR2,
IV_FIELD102 IN NVARCHAR2,
IV_FIELD24 IN NVARCHAR2) -- we are adding field24 just incase we have core originating transaction
RETURN NUMBER AS 

V_TOTAL_POINTS NUMBER(18) :=0;
V_POINTS_TYPE CHAR(1) :='';
V_AMOUNT_PER_POINT NUMBER(18) :=0;
V_POINTS_PER_SERVICE NUMBER(18) :=0;

V_COUNT NUMBER :=0;
BEGIN 


  -- check if field102 has a corresponding loyality points account
  
  SELECT COUNT(1) INTO V_COUNT FROM DUAL WHERE EXISTS (SELECT ACCOUNT_NO FROM TB_ACCOUNT
  WHERE CUSTOMER_NO = (SELECT CUSTOMER_NO FROM TB_ACCOUNT WHERE ACCOUNT_NO = IV_FIELD102 AND ROWNUM = 1) AND ROWNUM = 1);
  
  IF V_COUNT < 1 THEN
     v_total_points := 0;
     RETURN v_total_points;
  END IF;

  V_AMOUNT_PER_POINT := FN_GETGENERAL_PARAMS('AMOUNT_PER_POINT');

  -- check if it is referal 
   IF IV_FIELD100 = 'REFERRALS' OR AMOUNT >= fn_getgeneral_params('MINIMUM_POINT_EARN_TXN') THEN 
    
    SELECT POINTS_PER_TRANSACTION,points_type INTO V_POINTS_PER_SERVICE,V_POINTS_TYPE FROM TB_SERVICES WHERE 
    FIELD3 = IV_FIELD3 AND FIELD100 = iv_field100 AND ROWNUM = 1;
    
    IF V_POINTS_TYPE = 'F' THEN
        V_TOTAL_POINTS := V_POINTS_PER_SERVICE * V_AMOUNT_PER_POINT ;
    --    RETURN V_TOTAL_POINTS;
    ELSE 
        V_TOTAL_POINTS := V_POINTS_PER_SERVICE ;
    --    RETURN V_TOTAL_POINTS; --implementation to follow suit 
    END IF;    
    
    DBMS_OUTPUT.PUT_LINE('points earned | '||V_POINTS_PER_SERVICE ||'customer_no |'||IV_FIELD2 );
     -- check if the account is 256 
      IF SUBSTR(IV_FIELD102,1,3) = '256' OR IV_FIELD24 = 'CM' THEN
         DBMS_OUTPUT.PUT_LINE('UPDATING POINTS BALANCE ' );
        UPDATE TB_CUSTOMER SET LOYALITY_POINTS = (LOYALITY_POINTS + V_POINTS_PER_SERVICE) WHERE CUSTOMER_NO =IV_FIELD2;
      END IF;
      -- return values at this point 
      RETURN V_TOTAL_POINTS; 
    ELSE
    RETURN 0;
  END IF;
  
  
  EXCEPTION WHEN OTHERS THEN
    v_total_points := 0;

  RETURN V_TOTAL_POINTS;
END FN_GET_LOYALITY_POINTS;

/
--------------------------------------------------------
--  DDL for Function FN_GET_LOYALITY_POINTS_BK
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_LOYALITY_POINTS_BK" (
IV_FIELD3 IN NVARCHAR2,
IV_FIELD100 IN NVARCHAR2,
AMOUNT IN NUMBER)
RETURN NUMBER AS 

V_TOTAL_POINTS NUMBER :=0;
V_AMOUNT_PER_POINT NUMBER := 0;
BEGIN


  IF IV_FIELD3 = '610000' AND IV_FIELD100 = 'REFERRALS' THEN
    RETURN 100;
  END IF;  

  -- check if it is referal 
  IF AMOUNT >= 10000 THEN 
    RETURN 1;

    ELSE
    RETURN 0;
  END IF;


  EXCEPTION WHEN OTHERS THEN
    v_total_points := 0;

  RETURN V_TOTAL_POINTS;
end  FN_GET_LOYALITY_POINTS_bk;

/
--------------------------------------------------------
--  DDL for Function FN_GET_MINI
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_MINI" (
    iv_MWALLETACCOUNT IN VARCHAR2)
  RETURN VARCHAR2
AS
  V_DATA_OUT VARCHAR2(4000):='';
BEGIN
  BEGIN
    SELECT JSON_ARRAYAGG(MINI_DATA)
    INTO V_DATA_OUT
    FROM VW_TRANS_MINI_JSON
    WHERE Account_No=iv_MWALLETACCOUNT
    AND ROWNUM     <=10;
    RETURN V_DATA_OUT;
  EXCEPTION
  WHEN OTHERS THEN
    RAISE;
  END;

END FN_GET_MINI;

/
--------------------------------------------------------
--  DDL for Function FN_GET_REFERENCE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_REFERENCE" (
    v_CHANNEL IN NVARCHAR2 DEFAULT NULL )
  RETURN VARCHAR2
AS
  v_STARTSEQUENCE NVARCHAR2(20);
  V_RET_VAL NVARCHAR2(50);
  v_WORKINGDATE  DATE;
  v_CENTRECODE   VARCHAR2(3):='000';
  v_MINI_CHANNEL VARCHAR2(3);
  v_strConcat    VARCHAR2(3);
  v_DATE         VARCHAR2(10);
BEGIN
  SELECT WorkingDate INTO v_WORKINGDATE FROM TB_DATE_SETTINGS ;
  SELECT CAST(START_SEQUENCE AS NUMBER(18,0)) + 1
  INTO v_STARTSEQUENCE
  FROM TB_TXN_REF_SEQUENCE
  WHERE CHANNEL      = v_CHANNEL;
  IF v_STARTSEQUENCE = '99999999' THEN
    v_STARTSEQUENCE := '00000001';
  END IF;
v_STARTSEQUENCE :=lpad(v_STARTSEQUENCE,6,'0');
UPDATE TB_TXN_REF_SEQUENCE
SET START_SEQUENCE = v_STARTSEQUENCE
WHERE Channel      = v_CHANNEL;
v_DATE            := TO_CHAR(v_WORKINGDATE, 'YYMMDD');
V_RET_VAL         := v_CENTRECODE || v_CHANNEL || v_DATE || v_STARTSEQUENCE;
RETURN V_RET_VAL;
END FN_GET_REFERENCE;


/
--------------------------------------------------------
--  DDL for Function FN_GET_SERIES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_GET_SERIES" (
p_SeriesID IN NVARCHAR2,
p_Prefix IN number DEFAULT 0
)
RETURN NVARCHAR2
AS 

v_Series  NVARCHAR2(20);
v_Length  NUMBER;
BEGIN

    SELECT NVL(Series_Length,5) INTO v_Length FROM tb_Sequence WHERE UniqueID=p_SeriesID;

    SELECT CAST(NVL(Series,0) AS NUMBER(10))+1 INTO v_Series FROM tb_Sequence WHERE UniqueID=p_SeriesID;
    v_Series:= SUBSTR(CONCAT('0000000000',v_Series),-v_Length,v_Length);


    UPDATE tb_Sequence SET Series=v_Series WHERE UniqueID = p_SeriesID;

		IF(p_Prefix=1) THEN		  
          RETURN p_SeriesID||v_Series;
		ELSE
          RETURN v_Series;
		END IF;

END FN_Get_Series;

/
--------------------------------------------------------
--  DDL for Function FN_GET_UNEXPIRED_TOKENS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_GET_UNEXPIRED_TOKENS" RETURN CLOB AS 

expired_token_batch clob;
token_validity_period number(18) :=10; -- default value is 10 minutes

V_COUNT NUMBER :=0;
BEGIN

  token_validity_period := FN_GETGENERAL_PARAMS('TOKEN_EXPIRATION_TIME');


   select count(1) into v_count from dual where exists (select id 
    from  TB_CARDLESS_TRANSACTIONS where CASHED_OUT = 0 AND EXPIRED = 0 AND
    TO_CHAR (TRANSACTION_TIME + (1/1440*token_validity_period), 'MM/DD/YYYY HH:MI:SS AM' )
    < SYSTIMESTAMP and rownum = 1);
    
    
    IF v_count < 1 THEN 
      RETURN '[]';
    END IF;
   
      SELECT JSON_ARRAYAGG( json_object( 'id' VALUE ID,'FIELD37' VALUE FIELD37,
      'PHONE_NUMBER' VALUE PHONE_NUMBER, 'BLOCKED_AMOUNT' value (AMOUNT+TRX_CHARGE)
      ))
    INTO expired_token_batch
    FROM TB_CARDLESS_TRANSACTIONS
    WHERE CASHED_OUT = 0 AND EXPIRED = 0 AND
    TO_CHAR (TRANSACTION_TIME + (1/1440*token_validity_period), 'MM/DD/YYYY HH:MI:SS AM' ) < SYSTIMESTAMP;


  RETURN expired_token_batch;
END FN_GET_UNEXPIRED_TOKENS;

/
--------------------------------------------------------
--  DDL for Function FN_IS_WALLET
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_IS_WALLET" (
    IV_ACCOUNT IN VARCHAR2)
  RETURN NUMBER
AS
  V_COUNT NUMBER:=0;
BEGIN
  SELECT COUNT(1)
  INTO V_COUNT
  FROM TB_PRODUCTS
  WHERE PRODUCT_CODE = SUBSTR(IV_ACCOUNT,1,3)
  AND ROWNUM         =1;
  RETURN V_COUNT;
END FN_IS_WALLET;


/
--------------------------------------------------------
--  DDL for Function FN_KEY_PROCESSOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_KEY_PROCESSOR" 
(IV_CUSTOMER_NO IN NVARCHAR2,
IV_KEY IN NVARCHAR2) RETURN NUMBER AS 

-- 0 - SUCCESSFUL , 1 - KEY HISTORY , -1 FAILED ERROR
V_COUNT NUMBER(5) :=0;
LAST_12_KEYS VARCHAR(4000) :='[]';
j_array json_array_t;
V_KEY_TRACKER NUMBER(5) :=-1; --  set to -1 because arrays start from zero
j_obj json_object_t;
BEGIN
  V_KEY_TRACKER := -1;
  SAVEPOINT V_SAFEPOINT;

  SELECT COUNT(ID) INTO V_COUNT FROM TB_KEY_HISTORY WHERE CUSTOMER_NO = IV_CUSTOMER_NO;
  
  IF V_COUNT < 1 THEN
    INSERT INTO TB_KEY_HISTORY(CUSTOMER_NO, KEY_HASH) VALUES(IV_CUSTOMER_NO , IV_KEY);
    RETURN 0;
  END IF;
  
    SELECT JSON_ARRAYAGG( json_object( 'key_id' VALUE CAST(ID AS NUMBER(18)),
    'key_hash' VALUE CAST(KEY_HASH AS VARCHAR2(500))))
    INTO LAST_12_KEYS
    FROM TB_KEY_HISTORY
    WHERE CUSTOMER_NO = IV_CUSTOMER_NO OFFSET 0 ROWS FETCH NEXT 12 ROWS ONLY;
    
    j_array := json_array_t(LAST_12_KEYS);
    
    for indx in 0 .. j_array.get_size - 1
      loop
        j_obj :=  TREAT(j_array.get(indx) AS JSON_OBJECT_T );
        
        DBMS_OUTPUT.PUT_LINE(j_obj.get_string('key_hash')|| ' | '||IV_KEY);
        IF j_obj.get_string('key_hash') = IV_KEY THEN 
          V_KEY_TRACKER := indx + 2; -- we add plus 2 just incase the value of the index is 0
          exit;
        END IF;
      end loop;
      
      DBMS_OUTPUT.PUT_LINE('TRACKER '||V_KEY_TRACKER);
      IF V_KEY_TRACKER < 0 THEN -- means that the key doesnt have a match hence we delete the 1st key and replace it with the new key
        INSERT INTO TB_KEY_HISTORY(CUSTOMER_NO, KEY_HASH) VALUES(IV_CUSTOMER_NO , IV_KEY);
        RETURN 0;
      ELSE 
        RETURN 1;
      END IF;
      
    EXCEPTION WHEN OTHERS THEN
      ROLLBACK TO V_SAFEPOINT;
      RAISE;
      V_KEY_TRACKER := -1;
      RETURN -1;
      
  RETURN V_KEY_TRACKER;
END FN_KEY_PROCESSOR;

/
--------------------------------------------------------
--  DDL for Function FN_LOAN_CHECKS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_LOAN_CHECKS" (
	  p_MobileNumber IN NVARCHAR2, ---format 2547.....
	  p_LoanAmount   IN NUMBER, ----Loan amount customer applied for
	  p_LoanLimitAmount  IN  NUMBER, ----Loan amount customer qualifies for
	  p_ProductCode IN NVARCHAR2, ----Loan product code
	  p_Channel IN NVARCHAR2 ---Requesting channel    
)
RETURN NVARCHAR2

AS   
loan_validation NVARCHAR2(200) := '00'||'|'||'successful';   

v_WalletAccountNo NVARCHAR2(15) :='';
v_MaximumAmount NUMBER(18,2) :=0; 
v_MinimumAmount NUMBER(18,2) :=0; 
v_RepaymentPeriod NUMBER(10) :=0;
v_InterestRate NUMBER(18,1):=0;
v_GracePeriod NUMBER(10) := 0;
v_RepaymentFrequency CHAR(1):='M';
v_Narration NVARCHAR2(150) := 'Successfull';
v_StatusCode NVARCHAR2(4) := '00';
v_FirstName NVARCHAR2(150) :='';
v_ProductName NVARCHAR2(50) :='';
v_Reference NVARCHAR2(50) :='';
v_LAF_Rate NUMBER(18,2) :=0;  ----Loan Application Fee (LAF)
v_MinimumLAF NUMBER(18,2) :=0;  ----Loan Application Fee (LAF) minimum Amount ;
V_COUNT INT := 0;   
BEGIN

        --loan_validation := v_StatusCode||'|'||v_Narration;

        --RETURN (loan_validation);

BEGIN

    V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS(SELECT * FROM TB_ACCOUNT WHERE CUSTOMER_NO = p_MobileNumber AND ACCOUNT_CLASS='254');
    IF(V_COUNT > 0) THEN

	  SELECT ACCOUNT_NO INTO v_WalletAccountNo FROM TB_ACCOUNT WHERE CUSTOMER_NO = p_MobileNumber AND ACCOUNT_CLASS='254';

      ELSE
        v_Narration := 'Invalid Wallet Account supplied.';
        v_StatusCode := '01' ;

        select v_StatusCode||'|'||v_Narration into loan_validation from dual;
        RETURN (loan_validation);

    END IF;
END;		
	------ERROR CODES
	----1. code = 05, msg=Your account does not exist --Account no. does not exist
	----2. code = 01, msg=Invalid Product code supplied. --Loan Product does no exist
	----3. code = 02, msg=You qualify for upto KES. 2000 --when customer tries to apply an amount higher than their limit
	----4. code = 03, msg=The minimum Loan Amount is from KES. 100 --depending on product setup
	----5. code = 04, msg=The Maximum Loan Amount is KES.  ----depending on product setup
	----6. code = 06, msg=You have an active loan. --customer with existing loan thats not fully paid
	----7. code = 00, msg=Loan Successfully Disbursed. --for successfull application
	----8. code = 07, msg=Customer is listed in the internal blacklist. ---blacklisted
	----9. code = 08, msg=Customer is not listed in MOU database. ---not in MOU db
	----10. code = 09, msg= sql generated error --this is any other error resulting from other eventualities


    -----is the product valid ? lets find out
  V_COUNT := 0;
  SELECT COUNT(1)
  INTO V_COUNT
  FROM DUAL
  WHERE EXISTS (SELECT * FROM tb_Products WHERE Product_Code = p_ProductCode AND ROWNUM <= 1);
	IF(V_COUNT = 0)	THEN
            v_Narration := 'Invalid Product code supplied.';
			v_StatusCode := '01' ;

			select v_StatusCode||'|'||v_Narration into loan_validation from dual;
		    RETURN (loan_validation);

        ELSE
            SELECT  Maximum_Amount,Minimum_Amount, NVL(Repayment_Period,0),
            Repayment_Frequency, Application_Fee_Rate, Application_Fee_Min, 
            NVL(Interest_Rate,0), NVL(Grace_period,0) INTO v_MaximumAmount, v_MinimumAmount, v_RepaymentPeriod, v_RepaymentFrequency, 
            v_LAF_Rate, v_MinimumLAF, v_InterestRate, v_GracePeriod FROM tb_Loan_Products WHERE Product_Code = p_ProductCode;
		END IF;

    --CHECK CUSTOMER AMOUNT QUALIFIED FOR
		IF(p_Channel = 'ESB') ----Exclude scoring engine since the loan score is yet to be determined
		THEN		
			 IF(p_LoanAmount > p_LoanLimitAmount)
			   THEN
				    v_Narration := 'You qualify for upto KES '||p_LoanLimitAmount;
				   v_StatusCode := '02' ;

                   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
                   RETURN (loan_validation);
			   END IF;
			   --CHECK LOAN PRODUCT LOWER LIMITS
			IF(p_LoanAmount < v_MinimumAmount)
			   THEN			  
				    v_Narration := 'The minimum loan amount is KES. '||v_MinimumAmount;
				   v_StatusCode := '03' ;

				   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
                   RETURN (loan_validation);
			   END IF;

			   --CHECK LOAN PRODUCT UPPER LIMITS
			   IF(p_LoanAmount > v_MaximumAmount)
			   THEN
				   v_Narration := 'The maximum loan amount is KES. '||v_MaximumAmount;
				   v_StatusCode := '04' ;

				   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
                   RETURN (loan_validation);
			   END IF;

		 END IF;


		 V_COUNT := 0;
		  SELECT COUNT(1)
		  INTO V_COUNT
		  FROM DUAL
		  WHERE EXISTS(SELECT * FROM tb_Loan_Details A INNER JOIN TB_ACCOUNT B ON A.AccountNo=B.ACCOUNT_NO WHERE CustAccount=v_WalletAccountNo 
		 AND LoanStatus IN ('LST-011','LST-012','LST-014') AND (B.AVAILABLE_BAL*-1)  > 0 AND rownum <= 1);

		 IF(V_COUNT > 0) THEN
			   v_Narration := 'You already have a running Loan';
			   v_StatusCode := '06' ;

			   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
               RETURN (loan_validation);
		 END IF;

		 ----diff check for salary advance, since these loans are disbursed in the core system
		  V_COUNT := 0;
		  SELECT COUNT(1)
		  INTO V_COUNT
		  FROM DUAL
		  WHERE EXISTS(SELECT * FROM tb_Loan_Details WHERE CustAccount=v_WalletAccountNo AND LoanStatus IN ('LST-011','LST-012','LST-014') AND ProductCode = '302' AND rownum <= 1 );
		  IF(V_COUNT > 0) THEN
			   v_Narration := 'You already have a running Loan';
			   v_StatusCode := '06' ;

			   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
               RETURN (loan_validation);
		 END IF;

		 V_COUNT := 0;
		  SELECT COUNT(1)
		  INTO V_COUNT
		  FROM DUAL
		  WHERE EXISTS(SELECT * FROM tb_Internal_Blacklist  WHERE Mobile_Number = p_MobileNumber AND rownum <= 1 );
		  IF(V_COUNT > 0) THEN
			   v_Narration := 'You have been blacklisted';
			   v_StatusCode := '07' ;

			   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
               RETURN (loan_validation);
		 END IF;

		 IF(p_ProductCode = '302') ---SALARY ADVANCE WE MUST KNOW UR EMPLOYER
		 THEN
			V_COUNT := 0;
			  SELECT COUNT(1)
			  INTO V_COUNT
			  FROM DUAL
			  WHERE  EXISTS(SELECT * FROM tb_Loan_MOU_Customer  WHERE Mobile_Number = p_MobileNumber AND rownum <= 1 );
				IF(V_COUNT = 0)  THEN
						v_Narration := 'Your data was not found on our M.O.U table';
					   v_StatusCode := '08' ;

					   select v_StatusCode||'|'||v_Narration into loan_validation from dual;
					   RETURN (loan_validation);
				 END IF;
		 END IF;


    v_Narration := 'successfulXX';
    v_StatusCode := '00' ;
    select v_StatusCode||'|'||v_Narration into loan_validation from dual;

   RETURN (loan_validation);
END FN_LOAN_CHECKS;


/
--------------------------------------------------------
--  DDL for Function FN_MINI_GUARD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_MINI_GUARD" (
  iv_field100 in nvarchar2,
  iv_token in nvarchar2
) RETURN NVARCHAR2 AS 

v_count number(2) :=0;
v_token_check_response nvarchar2(50) :='';
v_guard_response nvarchar2(50) :='';
BEGIN

  -- creating this mini guard to perform specific checks for the application 
  
  -- 1). check on whether the cashout token has been fullfilled or not 
  
  IF iv_field100 = 'CARDLESS_WITHDRAWAL_CASHOUT' THEN 
  
  -- check if the provided token exists 
  v_token_check_response := FN_CHECK_TOKEN(iv_token);
  
   IF SUBSTR(v_token_check_response,1,Instr(v_token_check_response,'|',1,1)-1) = '110' THEN
      v_guard_response:= '00|0|0|0|0|Success ';
   ELSE 
      v_guard_response:= v_token_check_response;
   END IF;
  
  else -- we will add more guards as we go along 
    v_guard_response:= '00|0|0|0|0|Success ';
  END IF;
  RETURN v_guard_response;
END FN_MINI_GUARD;

/
--------------------------------------------------------
--  DDL for Function FN_MINI_REV
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_MINI_REV" (
    iv_Field32 IN VARCHAR2,
    iv_Field37 IN VARCHAR2 ,
    iv_Field90 IN VARCHAR2)
  RETURN VARCHAR2
AS
  --BEGIN
  V_TrxRefNo NVARCHAR2(50) := '';-- trim(iv_Field35);
  V_ReturnValue NVARCHAR2(200);
  V_NewTrxRefNo NVARCHAR2(50);
  V_Oiginal_TransType NVARCHAR2(50);
  V_AccountNo NVARCHAR2(20);
  V_Currency NVARCHAR2(3);
  V_DRCR NVARCHAR2(2);
  V_ProCode NVARCHAR2(7);
  V_TrxCode NVARCHAR2(6);
  V_Stan NVARCHAR2(6);
  V_Amount NUMBER(18,5);
  V_IsCustomerGL NVARCHAR2(2);
  V_Narration NVARCHAR2(1000);
  V_Field90 NVARCHAR2(200) :='';
  V_TransType NVARCHAR2(50);
  V_TerminalID NVARCHAR2(20);
  V_Field37 NVARCHAR2(50);
  V_Field100 NVARCHAR2(50);
  V_WORKINGDATE DATE;
  V_FINANCIALYR NVARCHAR2(6);
  V_FINANCIALPRD NVARCHAR2(3);
  V_CLEARBAL NUMBER(18,5);
  V_STARTSEQUENCE NVARCHAR2(6);
  V_UserID NVARCHAR2(30);
  V_TRXNO NVARCHAR2(50);
  V_TrxSerialNo   NUMBER := 0;
  V_DATE          VARCHAR2(6);
  V_CreatedBy     VARCHAR2(50);
  V_COB           NUMBER(10);
  V_Valid         NUMBER(10);
  V_RevesaLAmount NUMBER(18,5);
  V_RevesaDRCR NVARCHAR2(2);
  V_Tran_code NVARCHAR2(10);
  v_payment_no NVARCHAR2(50);
  V_MSGTYPE NVARCHAR2(10):= '0420';
  V_FIELD24 NVARCHAR2(10):='';
  V_FIELD41 NVARCHAR2(10):='';
  V_FIELD42 NVARCHAR2(10):='';
  
  v_str_date nvarchar2(50) :='';
  
  v_manual_id number(18) :=0;
  
  v_leaf_gl varchar2(18) :='';
  
BEGIN
  ---***************first check if this s a valid reversal*********************
  BEGIN
    SELECT COUNT(ID) INTO V_Valid FROM VW_TRANSACTIONS WHERE Field90=iv_Field90 AND ROWNUM =1;
    -- AND Channel   =iv_Field32
    -- and Field37 = iv_Field37
    --WHERE TrxRefNo = V_TrxRefNo;
    IF V_Valid = 0 THEN
      SELECT ('90'
        || '|'
        || 0
        || '|'
        || '300'
        || '|'
        || 'Invalid Reversal Request.')
      INTO V_ReturnValue
      FROM DUAL;
      RETURN V_ReturnValue;
    END IF;
  END;
------------------------************************************------------------------
--second check
---***************first check if this s a valid reversal*********************
BEGIN
  SELECT COUNT(ID)
  INTO V_Valid
  FROM VW_TRANSACTIONS
  WHERE Field90=iv_Field90
    --AND Channel   =iv_Field32
  AND Field37 = iv_Field37
  AND MSGTYPE ='0420' AND ROWNUM = 1;
  IF V_Valid  > 0 THEN
    SELECT ('91'
      || '|'
      || 0
      || '|'
      || '310'
      || '|'
      || 'Reversal Already done.')
    INTO V_ReturnValue
    FROM DUAL;
    RETURN V_ReturnValue;
  END IF;
END;
------------------------************************************------------------------
BEGIN
  SELECT WORKINGDATE,
    FinancialYear,
    FinancialPeriod ,
    COB
  INTO V_WORKINGDATE,
    V_FINANCIALYR,
    V_FINANCIALPRD,
    V_COB
  FROM TB_DATE_SETTINGS;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  SELECT ('92'
    || '|'
    || 0
    || '|'
    || '300'
    || '|'
    || 'Error Fetching CBS Settings')
  INTO V_ReturnValue
  FROM DUAL;
  RETURN V_ReturnValue;
END;
BEGIN
  BEGIN
    SELECT FIELD37,
      FIELD100,
      CREATED_BY
    INTO V_TrxRefNo,
      V_Oiginal_TransType,
      V_CreatedBy
    FROM VW_TRANSACTIONS
    WHERE Field90=iv_Field90
    AND FIELD32  = iv_Field32
    AND Field37  = iv_Field37
    AND rownum   = 1;
    --IF(V_Field90 IS NULL OR V_Field90='') THEN
    -- BEGIN
    -- V_Field90 := V_TrxRefNo;
  EXCEPTION
  WHEN OTHERS THEN
 -- RAISE;
    ROLLBACK;
    SELECT ('93'
      || '|'
      || 0
      || '|'
      || '301'
      || '|'
      || 'Error Fetching Transaction Details')
    INTO V_ReturnValue
    FROM DUAL;
    RETURN V_ReturnValue;
  END;
  -- END IF;
  BEGIN
    V_NewTrxRefNo := FN_GET_REFERENCE(IV_FIELD32);
    V_TRXNO       :=V_NewTrxRefNo;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    SELECT ('94'
      || '|'
      || 0
      || '|'
      || '302'
      || '|'
      || 'Error Generating Transaction Reference')
    INTO V_ReturnValue
    FROM DUAL;
    RETURN V_ReturnValue;
  END;
  ------the actual reversal start*******************************************************************************************
  DECLARE
    CURSOR CUR_REV
    IS
      SELECT ACCOUNT_NO,
        Currency,
        DRCR,
        FIELD3,
        TRAN_CODE,
        Stan,
        Amount,
        CREATED_BY,
        IsCustomerGL,
        Narration,
        Field90,
        Field37,
        FIELD100,
        FIELD32,
        PAYMENT_NUMBER,
        FIELD41,
        FIELD42,
        FIELD24
      FROM VW_TRANSACTIONS
      WHERE FIELD37=V_TrxRefNo
      AND FIELD32  =iv_Field32
      AND Field37  = iv_Field37;
    -- WHERE BACHNUMBER          = V_BATCHNO;
    v_REVData CUR_REV%ROWTYPE;
  BEGIN
    -- Open the cursor and initialize the active set
    OPEN CUR_REV;
    -- Retrieve the first row, to set up for the WHILE loop
    FETCH CUR_REV
    INTO v_REVData;
    -- Continue looping while there are more rows to fetch
    WHILE CUR_REV%FOUND
    LOOP
      -----begin reversal sasa ya ukweli wacha ya hapo mbele
      V_Tran_code := trim(v_REVData.TRAN_CODE);
      V_AccountNo := trim(v_REVData.ACCOUNT_NO);
      V_Currency  :=trim(v_REVData.Currency);
      V_DRCR      :=trim(v_REVData.DRCR);
      V_ProCode   :=trim(v_REVData.FIELD3) ;
      -- V_TrxCode      :=trim(v_REVData.TrxCode) ;
      V_Stan         :=trim(v_REVData.Stan) ;
      V_Amount       :=trim(v_REVData.Amount);
      V_USERID       :=trim(v_REVData.Created_By);
      V_IsCustomerGL :=trim(v_REVData.IsCustomerGL);
      V_Narration    :=trim(v_REVData.Narration);
      V_Field90      :=trim(v_REVData.Field90) ;
      V_TransType    :=trim(v_REVData.FIELD100);
      -- V_TerminalID   :=trim(v_REVData.TerminalID) ;
      V_Field37    :=trim(v_REVData.Field37);
      V_Field100   :=trim(v_REVData.Field100);
      v_payment_no := trim(v_REVData.PAYMENT_NUMBER);
      V_FIELD24    := trim(v_REVData.FIELD24);
      V_FIELD41    := trim(v_REVData.FIELD41);
      V_FIELD42    := trim(v_REVData.FIELD42);
      IF V_DRCR     ='C' THEN
        V_DRCR     :='D';
      ELSE
        V_DRCR :='C';
      END IF;
      ---start customer account
      IF V_IsCustomerGL='C' THEN               --CUSTOMER ACCOUNT
        IF V_DRCR      ='C' AND V_COB = 0 THEN --CREDIT
          BEGIN
            UPDATE TB_ACCOUNT
            SET Actual_Bal         =Actual_Bal     + V_Amount,
              AVAILABLE_BAL        =AVAILABLE_BAL  +V_Amount,
              TODAY_CR             =NVL(Today_Cr,0)+V_Amount,
              Last_Transaction_Date=cast (V_WORKINGDATE as timestamp)
            WHERE Account_No       =V_AccountNo;
            
            
            -- check if the transaction is a leaf gl
            
            IF FN_IS_WALLET (V_AccountNo) > 0 THEN
                -- get the leaf gl 
                SELECT LEAF_GL
                INTO v_leaf_gl
                FROM TB_PRODUCTS
                WHERE PRODUCT_CODE = SUBSTR(V_AccountNo,1,3)
                AND ROWNUM         =1;
                 
                 UPDATE TB_GL_BALANCE -- update the leaf gl 
                    SET Gl_Balance  = NVL(Gl_Balance,0)  + (V_Amount ),
                      Cr_Bal_Lcy    = NVL(Cr_Bal_Lcy, 0) + (V_Amount )
                 WHERE GL_CODE      = v_leaf_gl;
                 
                      A_SP_INSERT_GL_TRANSACTIONS (v_leaf_gl , iv_Field37, 'C', V_Field100, V_ProCode, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_Amount);
            ELSE
                A_SP_INSERT_GL_TRANSACTIONS (V_AccountNo , iv_Field37, 'D', V_Field100, V_ProCode, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_Amount);                                               
            END IF;
            
          EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            SELECT ('95'
              || '|'
              || 0
              || '|'
              || '303'
              || '|'
              || 'Error Reversing Credit')
            INTO V_ReturnValue
            FROM DUAL;
            RETURN V_ReturnValue;
          END ;
        END IF;
        IF V_DRCR='D' AND V_COB =0 THEN --DEBIT
          BEGIN
          v_str_date := cast (V_WORKINGDATE as timestamp);
          dbms_output.put_line('working date | '||v_str_date);
            dbms_output.put_line('account number : '||
            V_AccountNo||' | amount | '||V_Amount ||' | working date | '||
            v_str_date);
            UPDATE TB_ACCOUNT
            SET Actual_Bal         =Actual_Bal     - V_Amount,
              Available_Bal        =Available_Bal  -V_Amount,
              Today_Dr             =NVL(TODAY_DR,0)+V_Amount,
              Last_Transaction_Date=cast (V_WORKINGDATE as timestamp)
            WHERE Account_No       =V_AccountNo;
            
            
            IF FN_IS_WALLET (V_AccountNo) > 0 THEN
                -- get the leaf gl 
                SELECT LEAF_GL
                INTO v_leaf_gl
                FROM TB_PRODUCTS
                WHERE PRODUCT_CODE = SUBSTR(V_AccountNo,1,3)
                AND ROWNUM         =1;
                 
                 UPDATE TB_GL_BALANCE -- update the leaf gl 
                    SET Gl_Balance  = NVL(Gl_Balance,0)  - (V_Amount ),
                      Dr_Bal_Lcy    = NVL(Dr_Bal_Lcy, 0) + (V_Amount )
                 WHERE GL_CODE      = v_leaf_gl;
                 
                 A_SP_INSERT_GL_TRANSACTIONS (v_leaf_gl , iv_Field37, 'D', V_Field100, V_ProCode, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_Amount);
            ELSE
                A_SP_INSERT_GL_TRANSACTIONS (V_AccountNo , iv_Field37, 'D', V_Field100, V_ProCode, 
                        V_WORKINGDATE, V_TRXCODE, 0, V_Amount);
            END IF;
          EXCEPTION
          WHEN OTHERS THEN
          --  RAISE;
            ROLLBACK;
            SELECT ('96'
              || '|'
              || 0
              || '|'
              || '304'
              || '|'
              || 'Error Reversing Debit')
            INTO V_ReturnValue
            FROM DUAL;
            RETURN V_ReturnValue;
          END;
        END IF;
        
          dbms_output.put_line('account number v: '||V_AccountNo);
        SELECT Available_Bal
        INTO V_CLEARBAL
        FROM TB_ACCOUNT
        WHERE Account_No=V_AccountNo;
      END IF;
      ---end customer account
      --start the GL side of transactions
      IF V_IsCustomerGL='G' THEN
        IF V_DRCR      ='C' AND V_COB = 0 THEN --CREDIT
          BEGIN
            UPDATE TB_GL_BALANCE
            SET CR_Bal_LCY = CR_Bal_LCY + V_Amount,
              Gl_Balance   = Gl_Balance + V_Amount
            WHERE GL_Code  =V_AccountNo;
          EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            SELECT ('97'
              || '|'
              || 0
              || '|'
              || '305'
              || '|'
              || 'Error Reversing Credit GL')
            INTO V_ReturnValue
            FROM DUAL;
            RETURN V_ReturnValue;
          END ;
        END IF;
        IF V_DRCR='D' AND V_COB = 0 THEN--DEBIT
          BEGIN
            UPDATE TB_GL_BALANCE
            SET Dr_Bal_Lcy = Dr_Bal_Lcy - V_Amount,
              Gl_Balance   = Gl_Balance - V_Amount
            WHERE GL_Code  =V_AccountNo;
          EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK;
            SELECT ('98'
              || '|'
              || 0
              || '|'
              || '306'
              || '|'
              || 'Error Reversing Debit GL')
            INTO V_ReturnValue
            FROM DUAL;
            RETURN V_ReturnValue;
          END;
        END IF;
        SELECT Gl_Balance
        INTO V_CLEARBAL
        FROM TB_GL_BALANCE
        WHERE GL_Code=V_AccountNo;
      END IF;
      --end of the GL side of transactions
      -----now lets log this transactions
      V_TrxSerialNo := V_TrxSerialNo +1 ;
      BEGIN
        -- IF(iv_Field90 IS NULL OR iv_Field90='') THEN
        --  iv_Field90  := V_TrxRefNo;
        -- END IF;
        IF(NVL(V_Amount,0) > 0) THEN
          BEGIN
            A_SP_INSERT_TRANSACTIONS(V_MSGTYPE, iv_Field32, IV_FIELD37, V_TrxSerialNo + 1, V_Narration || '-REV', V_AccountNo, V_Currency, V_DRCR, V_ProCode, V_Field100, V_Stan, V_Amount, V_WORKINGDATE, V_FINANCIALYR, V_Financialprd, V_USERID, V_IsCustomerGL, V_Field90, v_payment_no, V_TRXCODE, V_FIELD41, V_FIELD42, V_FIELD24,V_COB,V_TRXNO);
            V_TrxSerialNo:=V_TrxSerialNo                                              +1;
          END;
        END IF;
      END ;
      ---now the end of logging of this transaction
      ---end reversal sasa ya ukweli wacha ya hapo mbele
      --DBMS_OUTPUT.put_line(v_REVData.BATCHNUMBER);
      FETCH CUR_REV
      INTO v_REVData;
    END LOOP;
    -- Free resources used by the cursor
    CLOSE CUR_REV;
    -- Commit our work
    -- COMMIT;
  END;
  --the actual reversal end*************************************************************elico******************************88
END ;
UPDATE TB_TRANSACTIONS
SET REVERSED  = 1
WHERE FIELD90 = V_Field90
AND ROWNUM    =1;
UPDATE TB_TRANSACTIONS_ARCHIVE
SET REVERSED  = 1
WHERE FIELD90 = V_Field90
AND ROWNUM    =1;
UPDATE TB_TRANSACTIONS_COB
SET REVERSED  = 1
WHERE FIELD90 = V_Field90
AND ROWNUM    =1;

 --update tb_messages_external original request 
 UPDATE TB_MESSAGES_EXTERNAL SET REVERSED = 1 WHERE FIELD0 ='0200' AND FIELD37 = iv_Field37;
 
 -- check where the transaction that took place was manually reversed
  SELECT COUNT(1) INTO V_Valid
  FROM DUAL
  WHERE EXISTS
    (SELECT ID
    FROM TB_REVERSAL_REQUEST
    WHERE REF_NO = iv_Field37
    AND ROWNUM        =1);

  if V_Valid > 0 then 
    update TB_REVERSAL_REQUEST SET STATUS = 1 WHERE ID = (SELECT ID  FROM TB_REVERSAL_REQUEST WHERE REF_NO = iv_Field37
    AND ROWNUM  =1);
 
  END IF;   

COMMIT;
SELECT ( '00'
  || '|'
  || 0
  || '|'
  || '0'
  || '|'
  || 'Successful' )
INTO V_ReturnValue
FROM DUAL;
RETURN V_ReturnValue;
EXCEPTION
WHEN OTHERS THEN
 -- RAISE;
  ROLLBACK;
  SELECT ( '99'
    || '|'
    || 0
    || '|'
    || '308'
    || '|'
    || 'Error Committing Transaction Reversal ' )
  INTO V_ReturnValue
  FROM DUAL;
  RETURN V_ReturnValue;
END;
--end;

/
--------------------------------------------------------
--  DDL for Function FN_PORTAL_OTP_SMS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_PORTAL_OTP_SMS" (
    iv_MobileNumber IN NVARCHAR2,
	iv_AccountNo IN NVARCHAR2,
	iv_Message IN NVARCHAR2,
	iv_Channel IN NVARCHAR2,
	iv_TXN_TYPE IN NVARCHAR2,
	iv_FIELD100 IN NVARCHAR2

)
 RETURN VARCHAR2
AS

v_Narration NVARCHAR2(500);
v_Resp_Code NVARCHAR2(50)   := '00';

BEGIN

	INSERT INTO TB_MESSAGES_SMS (PHONE_NUMBER,ACCOUNT_NUMBER,MESSAGE,CHANNEL,DATE_CREATED,TXN_TYPE,TRIALS,SENT,Field100)
			VALUES (iv_MobileNumber,iv_AccountNo,iv_Message,iv_Channel,SYSTIMESTAMP,iv_TXN_TYPE,0,0,iv_FIELD100);

	COMMIT ;


EXCEPTION
  WHEN OTHERS THEN
  ROLLBACK;

END FN_PORTAL_OTP_SMS;


/
--------------------------------------------------------
--  DDL for Function FN_PROCESS_REFERRAL
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "APP_USER"."FN_PROCESS_REFERRAL" (
    CUSTOMER_NO      IN NVARCHAR2,
    IV_REFERRAL_CODE IN NVARCHAR2)
  RETURN NVARCHAR2
AS
  V_COUNT  NUMBER           := 0;
  V_ID     NUMBER           :=0;
  V_POINTS NUMBER           := 0;
  V_FIELD103 NVARCHAR2(50)  :='';
  V_WALLET_NO NVARCHAR2(50) := '';
  V_RETURN_VALUE NVARCHAR2(50)     :='';
  V_POST_MINI_RESPONSE NVARCHAR2(100) :='';
  V_POST_MINI_RESP_MESSAGE NVARCHAR2(100) :='';
  V_FIELD37 NVARCHAR2(50) :='';
  C_1 SYS_REFCURSOR;
  
  V_GEMIFICATION_RESPONSE NVARCHAR2(50) := '';
  
BEGIN
  SELECT COUNT(ID)
  INTO V_COUNT
  FROM TB_INVITED_FRIENDS
  WHERE INVITED_PHONENUMBER = CUSTOMER_NO
  AND REFFERAL_C0DE         =IV_REFERRAL_CODE
  AND STATUS                ='PENDING'
  AND ROWNUM                =1;
  
  
  IF V_COUNT                < 1 THEN
    V_RETURN_VALUE         :='0|0';
    RETURN V_RETURN_VALUE;
  ELSE
    -- check if the customer exists
    SELECT ID,
      MWALLET_ACCOUNT
    INTO V_ID,
      V_WALLET_NO
    FROM TB_INVITED_FRIENDS
    WHERE INVITED_PHONENUMBER = CUSTOMER_NO
    AND REFFERAL_C0DE         =IV_REFERRAL_CODE
    AND STATUS                ='PENDING'
    AND ROWNUM                =1;
    
SELECT ACCOUNT_NO
INTO V_FIELD103
FROM TB_ACCOUNT
WHERE CUSTOMER_NO = V_WALLET_NO
AND ACCOUNT_CLASS = '207'
AND ROWNUM        = 1;
DBMS_OUTPUT.PUT_LINE('field103'||V_FIELD103);
DBMS_OUTPUT.PUT_LINE('amount '||V_POINTS);
    
    IF V_ID < 1 THEN
        V_RETURN_VALUE :='0|0';
    ELSE 
    
      DBMS_OUTPUT.PUT_LINE(V_WALLET_NO);
       V_POINTS := FN_GET_LOYALITY_POINTS('610000','REFERRALS',1,V_WALLET_NO, V_WALLET_NO||'001','');
       DBMS_OUTPUT.PUT_LINE('POINTS '||V_POINTS);
     
     SELECT ACCOUNT_NO INTO V_FIELD103 FROM TB_ACCOUNT WHERE CUSTOMER_NO = V_WALLET_NO AND ACCOUNT_CLASS = '207' AND ROWNUM = 1;
     DBMS_OUTPUT.PUT_LINE('field103 '||V_FIELD103);
     DBMS_OUTPUT.PUT_LINE('amount '||V_POINTS);
     
       -- GET GL FOR LOYALITY POINTS 
       V_FIELD37 := FN_GET_SERIES('PNT','1');
       A_SP_POST_TRANSACTIONS_GEMI('0200',V_WALLET_NO, '400000',V_POINTS,'', '163818','MM','POS','',
          V_FIELD37,'','GET POINTS FROM REFERRAL','','LOYALITY_COLLECTION','','',V_FIELD103,0,'PNT','','','','',C_1);
     
      FETCH C_1 INTO V_POST_MINI_RESPONSE;   
       DBMS_OUTPUT.PUT_LINE(V_POST_MINI_RESPONSE || ' 0999999');   
       UPDATE TB_INVITED_FRIENDS SET POST_MINI_RESPONSE = V_POST_MINI_RESPONSE WHERE invited_phonenumber = CUSTOMER_NO ;
      
       CLOSE C_1;   
       DBMS_OUTPUT.PUT_LINE(V_POST_MINI_RESPONSE || ' 6666'); -- tb_agent_devicelinking
        
        
        
        DBMS_OUTPUT.PUT_LINE('post mini response | '||SUBSTR(V_POST_MINI_RESPONSE,1,Instr(V_POST_MINI_RESPONSE,'|',1,1)-1));
        
        IF SUBSTR(V_POST_MINI_RESPONSE,1,Instr(V_POST_MINI_RESPONSE,'|',1,1)-1) = '00' THEN 
            UPDATE TB_INVITED_FRIENDS SET STATUS = 'ACCEPTED' WHERE invited_phonenumber = CUSTOMER_NO ;
        END IF;
        
        if  SUBSTR(V_POST_MINI_RESPONSE, 1, Instr(V_POST_MINI_RESPONSE,'|',1,1)-1) = '00' then
             V_GEMIFICATION_RESPONSE := FN_GEMIFICATION_RESPONSE(V_POINTS,'LOYALITY_COLLECTION','C'); -- this was a successful posting
        else
             V_GEMIFICATION_RESPONSE := '0|0'; -- this was a failed posting, hence lets not post to finacle 
        end if;
         UPDATE TB_INVITED_FRIENDS SET STATUS = 'ACCEPTED',post_mini_response = V_POST_MINI_RESPONSE  WHERE invited_phonenumber = CUSTOMER_NO ;
       
        
      RETURN V_GEMIFICATION_RESPONSE;
    END IF;
  END IF;
  EXCEPTION WHEN OTHERS THEN
  RAISE;
  V_RETURN_VALUE :='0|0';
  
   DBMS_OUTPUT.PUT_LINE('value '|| V_RETURN_VALUE);
RETURN V_RETURN_VALUE;
END FN_PROCESS_REFERRAL;

/
--------------------------------------------------------
--  DDL for Function FN_SPLIT_NAMES
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_SPLIT_NAMES" (
    IV_FULLNAME IN VARCHAR2,
    IV_POSITION IN VARCHAR2)
  RETURN VARCHAR2
AS
  V_SPLIT_NAME NVARCHAR2(100) :='';
BEGIN
  IF IV_POSITION    = '1' THEN
    V_SPLIT_NAME   := SUBSTR(IV_FULLNAME, 1, INSTR(IV_FULLNAME, ' ', 1, 1)-1);
  ELSIF IV_POSITION = '2' THEN
    V_SPLIT_NAME   := SUBSTR(IV_FULLNAME, INSTR(IV_FULLNAME, ' ', 1)+1, INSTR(IV_FULLNAME, ' ', -1,1) - INSTR(IV_FULLNAME, ' ', 1,1)-1);
  ELSIF IV_POSITION = '3' THEN
    V_SPLIT_NAME   := SUBSTR(IV_FULLNAME, INSTR(IV_FULLNAME, ' ', -1)+1);
  END IF;
RETURN V_SPLIT_NAME;
END FN_SPLIT_NAMES;


/
--------------------------------------------------------
--  DDL for Function FN_STR_FROM_BASE64
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_STR_FROM_BASE64" (t in varchar2) return varchar2 is
begin
  return utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw(t)));
end fn_str_FROM_BASE64;


/
--------------------------------------------------------
--  DDL for Function FN_STR_TO_BASE64
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_STR_TO_BASE64" (t in varchar2) return varchar2 is
 begin
    return utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(t)));
end fn_str_TO_BASE64;


/
--------------------------------------------------------
--  DDL for Function FN_VALIDATE_ACCOUNT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_VALIDATE_ACCOUNT" (
    IV_ACCOUNTNO IN VARCHAR2,
    DRCR         IN VARCHAR2 )
  RETURN VARCHAR2
AS
  V_RETURN       VARCHAR2(15):='OK';
  V_ISFROZEN     VARCHAR2(2) :='Y'; -- NUMBER DEFAULT 0; --
  V_ALLOWCR       VARCHAR2(2) :='N'; -- NUMBER DEFAULT 0;
  V_ALLOWDR      VARCHAR2(2) :='N'; -- NUMBER DEFAULT 0; 
  V_DORMANT       VARCHAR2(2) :='Y';--NUMBER DEFAULT 0; 
  V_BLOCKED      VARCHAR2(2) :='Y';  -- NUMBER DEFAULT 0;
    V_STOPPED      VARCHAR2(2) :='Y';  -- NUMBER DEFAULT 0;
    V_CLOSED      NUMBER DEFAULT 0; 
  V_ACCOUNTSTATUS VARCHAR2(2) :='C';
  V_PARTIAL_REG_BLOCK CHAR(1) :='1';
BEGIN
  SELECT IS_FROZEN,
    ALLOW_CR,
    ALLOW_DR,
    DORMANT,
    BLOCKED,ISCLOSED, PARTIAL_REG_BLOCK
  INTO V_ISFROZEN,
    V_ALLOWCR,
    V_ALLOWDR,
    V_DORMANT,
    V_BLOCKED,V_CLOSED , V_PARTIAL_REG_BLOCK
  FROM TB_ACCOUNT
  WHERE ACCOUNT_NO = IV_ACCOUNTNO
  AND ROWNUM       =1;
  
--  if V_PARTIAL_REG_BLOCK = '1' THEN
--    V_RETURN := 'NOTOK';
--    RETURN V_RETURN;
--  END IF;
  
  IF drcr          ='C' THEN
    IF V_ISFROZEN  = 'Y' OR V_ALLOWCR = 'N' OR V_BLOCKED = 'Y' THEN
      V_RETURN    :='NOTOK';
    ELSE
      V_RETURN :='OK';
    END IF;
  END IF;
IF drcr        ='D' THEN
  IF V_ALLOWDR ='N' OR V_DORMANT = 'Y' OR V_ISFROZEN ='Y' OR V_BLOCKED = 'Y' THEN
    V_RETURN  :='NOTOK';
  ELSE
    V_RETURN :='OK';
  END IF;
END IF;
IF V_CLOSED =1 THEN
  V_RETURN        :='NOTOK';
END IF;
RETURN V_RETURN;
EXCEPTION
WHEN OTHERS THEN
  V_RETURN:='NOTOK';
  RETURN V_RETURN;
END;

/
--------------------------------------------------------
--  DDL for Function FN_VALIDATE_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_VALIDATE_CUSTOMER" (
    IV_FIELD2   IN VARCHAR2,
    IV_FIELD24  IN VARCHAR2,
    IV_FIELD102 IN VARCHAR2,
    IV_FIELD103 IN VARCHAR2)
  RETURN VARCHAR2
AS
  V_COUNT         NUMBER      :=0;
  V_RETURN        VARCHAR2(15):='NOTOK';
  V_ACCOUNT_CLASS VARCHAR2(15):=SUBSTR(IV_FIELD102,0,3);
  V_102           NUMBER      :=0;
BEGIN
  IF SUBSTR(IV_FIELD102,0,3)   = '204' OR SUBSTR(IV_FIELD103,0,3) = '204' THEN
    IF SUBSTR(IV_FIELD102,0,3) = '204' THEN -- VALIDATE AGENT THEN VALIDATE CUSTOMER
      -- debit agent float account , credit customer account
      -- VALIDATE BOTH 102 AND 103
      SELECT COUNT(1)
      INTO V_COUNT
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = IV_FIELD102
      AND ROWNUM       =1;
      
      DBMS_OUTPUT.PUT_LINE('V_COUNT '||v_count);
      
      IF IV_FIELD103 <> '' THEN 
      SELECT COUNT(1)
      INTO V_102
      FROM VW_ALLCUSTOMERS
      WHERE MWALLET_ACCOUNT = IV_FIELD103
      AND ROWNUM       =1;
      
      ELSE
        V_102 := 1; -- agent not transacting with custoemer hence allow
      END IF;
      
       DBMS_OUTPUT.PUT_LINE('v_102 '||V_102);
          IF V_102  > 0 AND V_COUNT > 0 THEN
            V_RETURN      :='OK';
            --    RETURN V_RETURN;
          ELSE
            DBMS_OUTPUT.PUT_LINE('execution on agency');
            V_RETURN :='NOTOK';
          END IF;
          RETURN V_RETURN;
     END IF;
    IF SUBSTR(IV_FIELD103,0,3) = '204' THEN --
      -- credit agent float account , credit customer account
      SELECT COUNT(1)
      INTO V_COUNT
      FROM TB_ACCOUNT
      WHERE ACCOUNT_NO = IV_FIELD103
      AND ROWNUM       =1;
      
      IF IV_FIELD102 <> '' THEN
          SELECT COUNT(1) INTO V_102 FROM DUAL WHERE EXISTS(
              SELECT ID FROM VW_ALLCUSTOMERS WHERE MWALLET_ACCOUNT = IV_FIELD103
           AND ROWNUM       =1);
      
      ELSE 
        V_102 := 1 ;
      END IF;  
      
      
       IF V_102  > 0 AND V_COUNT > 0 THEN
            V_RETURN      :='OK';
            --    RETURN V_RETURN;
          ELSE
            DBMS_OUTPUT.PUT_LINE('execution on agency');
            V_RETURN :='NOTOK';
          END IF;
          RETURN V_RETURN;      
    END IF ;
-- VALIDATE BOTH 102 AND 103
SELECT COUNT(1)
INTO V_COUNT
FROM TB_ACCOUNT
WHERE ACCOUNT_NO = IV_FIELD103
AND ROWNUM       =1;
SELECT COUNT(1)
INTO V_102
FROM VW_ALLCUSTOMERS
WHERE MWALLET_ACCOUNT = IV_FIELD102
AND ROWNUM       =1;
IF V_102         > 1 OR V_COUNT > 1 THEN
  V_RETURN      :='OK';
  --    RETURN V_RETURN;
ELSE
  DBMS_OUTPUT.PUT_LINE('execution on agency');
  V_RETURN :='NOTOK';
END IF;
RETURN V_RETURN;
END IF;
-- loyality points check
IF SUBSTR(IV_FIELD102,0,3) = '207' OR SUBSTR(IV_FIELD103,0,3) = '207' THEN
  DBMS_OUTPUT.PUT_LINE('CHECKING LOYALITY POINTS');
  SELECT COUNT(1)
  INTO V_COUNT
  FROM TB_ACCOUNT
  WHERE ACCOUNT_NO = IV_FIELD103
  AND ROWNUM       =1;
  SELECT COUNT(1)
  INTO V_102
  FROM TB_ACCOUNT
  WHERE ACCOUNT_NO = IV_FIELD102
  AND ROWNUM       =1;
  IF V_COUNT       > 0 OR V_102 > 0 THEN
    RETURN 'OK';
  END IF;
END IF;
IF SUBSTR(IV_FIELD24,0,1) = 'C' OR SUBSTR(IV_FIELD24,0,1) = 'S' THEN
  SELECT COUNT(1)
  INTO V_COUNT
  FROM VW_ALLCUSTOMERS
  WHERE CUSTOMER_NO   = IV_FIELD2
  AND MWALLET_ACCOUNT = IV_FIELD103
  AND ROWNUM          =1;
ELSE
  DBMS_OUTPUT.PUT_LINE('executing from tb_accounts '||IV_FIELD102);
  SELECT COUNT(1)
  INTO V_COUNT
  FROM TB_ACCOUNT
  WHERE CUSTOMER_NO = IV_FIELD2
  AND ACCOUNT_NO    = IV_FIELD102
  AND ROWNUM        =1;
END IF;
IF V_COUNT  > 0 THEN
  V_RETURN :='OK';
ELSE

  DBMS_OUTPUT.PUT_LINE('ELSE FXN NOT FOUND');
    -- CHECK IF THE TRANSFER IS FROM CORE TO ANOTHER WALLET ACCOUNT
    BEGIN
        
         IF iv_field24 = 'CM' THEN  -- validatie intiating account
            DBMS_OUTPUT.PUT_LINE('checking CM');
              SELECT COUNT(1)
              INTO V_COUNT
              FROM VW_ALLCUSTOMERS
              WHERE CUSTOMER_NO   = IV_FIELD2
        --      AND MWALLET_ACCOUNT = IV_FIELD103
              AND ROWNUM          =1;
              
               SELECT COUNT(1)
              INTO v_102
              FROM VW_ALLCUSTOMERS
              WHERE
          --    CUSTOMER_NO   = IV_FIELD2
              MWALLET_ACCOUNT = IV_FIELD103
              AND ROWNUM          =1;
              
              
              IF v_count = 1 AND V_102 = 1 THEN
                V_RETURN := 'OK';
                ELSE
                    V_RETURN := 'NOTOK';
                    
                 END IF;   
           ELSE -- this one failed
           v_return :=0;
        END IF;
    END;
END IF;
RETURN V_RETURN;
EXCEPTION
WHEN OTHERS THEN
  raise;
  DBMS_OUTPUT.PUT_LINE('exception found');
  V_RETURN:='NOTOK';
  RETURN V_RETURN;
END FN_VALIDATE_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Function FN_VALIDATE_TXN_TYPE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "APP_USER"."FN_VALIDATE_TXN_TYPE" (
    IV_FIELD3   IN VARCHAR2,
    IV_FIELD100 IN VARCHAR2,
    IV_FIELD4   IN NUMBER,
     IV_FIELD24 IN VARCHAR2)
  RETURN NUMBER
AS
  V_COUNT NUMBER DEFAULT 0;
BEGIN
  SELECT COUNT(ID)
  INTO V_COUNT
  FROM TB_SERVICES
  WHERE FIELD3 = IV_FIELD3
  AND FIELD100 = IV_FIELD100;
  IF IV_FIELD4 > 0 THEN
    SELECT COUNT(ID)
    INTO V_COUNT
    FROM TB_TRANSACTION_MATRIX
    WHERE PROCODE = IV_FIELD3
    AND FIELD100  = IV_FIELD100 AND FIELD24 = IV_FIELD24;
  END IF;
RETURN V_COUNT;
END FN_VALIDATE_TXN_TYPE;


/
--------------------------------------------------------
--  Constraints for Table TB_CURRENCY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CURRENCY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL_BALANCE_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL_BALANCE_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL_BALANCE_ARCHIVE" MODIFY ("WORKING_DATE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL_BALANCE_ARCHIVE" ADD CONSTRAINT "TB_GL_BALANCE_ARCHIVE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ERROR_CODE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ERROR_CODE" MODIFY ("ERROR_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ERROR_CODE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ERROR_CODE" MODIFY ("LANG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUTH_ITEM_CHILD
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUTH_ITEM_CHILD" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUTH_ITEM_CHILD" ADD CONSTRAINT "AUTH_ITEM_CHILD_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL" MODIFY ("GL_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL" ADD CONSTRAINT "TB_GL_PK" PRIMARY KEY ("GL_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBADVERTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBADVERTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBADVERTS" ADD CONSTRAINT "TBADVERTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GROUP_LINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GROUP_LINKING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GROUP_LINKING" MODIFY ("MWALLET_AC" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GROUP_LINKING" MODIFY ("GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GROUP_LINKING" ADD CONSTRAINT "TB_GROUP_LINKING_PK" PRIMARY KEY ("MWALLET_AC", "GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_STAGING_PROCESS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_PROCESS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_STAGING_PROCESS" ADD CONSTRAINT "TB_STAGING_PROCESS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_USER_PRIVILEGES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_USER_PRIVILEGES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USER_PRIVILEGES" MODIFY ("USER_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USER_PRIVILEGES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USER_PRIVILEGES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USER_PRIVILEGES" ADD CONSTRAINT "MD_USER_PRIVILEGES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_OUTLET
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OUTLET" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_OUTLET" ADD CONSTRAINT "TB_OUTLET_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_OUTLET" ADD CONSTRAINT "TB_OUTLET_UK1" UNIQUE ("OUTLET_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_SUPER_AGENT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SUPER_AGENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SUPER_AGENT" ADD CONSTRAINT "TB_SUPER_AGENT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CARD_LINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CARD_LINKING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CARD_LINKING" ADD CONSTRAINT "TB_CARD_LINKING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CARD_LINKING" ADD CONSTRAINT "TB_CARD_LINKING_UK1" UNIQUE ("CARD_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL_SEQUENCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL_SEQUENCE" MODIFY ("PREFIX" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL_SEQUENCE" ADD CONSTRAINT "TB_GL_SEQUENCE_PK" PRIMARY KEY ("PREFIX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_JOINT_ACCOUNT_REGISTRATION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_JOINT_ACCOUNT_REGISTRATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_JOINT_ACCOUNT_REGISTRATION" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_BILLER_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BILLER_REQUESTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BILLER_REQUESTS" ADD CONSTRAINT "TB_BILLER_REQUESTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGGREGATED_C2B_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGGREGATED_C2B_REQUESTS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGENT_DEVICES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENT_DEVICES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICES" ADD CONSTRAINT "TB_AGENT_DEVICES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICES" ADD CONSTRAINT "TB_AGENT_DEVICES_UK1" UNIQUE ("DEVICE_IMEI")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICES" ADD CONSTRAINT "TB_AGENT_DEVICES_UK2" UNIQUE ("DEVICE_MOBILE_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_PROJECTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_PROJECTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PROJECTS" MODIFY ("PROJECT_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PROJECTS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PROJECTS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PROJECTS" ADD CONSTRAINT "MD_PROJECTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PESALINK_BANK_LIST
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PESALINK_BANK_LIST" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_PESALINK_BANK_LIST" MODIFY ("BANK_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_PESALINK_BANK_LIST" ADD CONSTRAINT "TB_PESALINK_BANK_LIST_PK" PRIMARY KEY ("BANK_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("CUSTOMER_NO" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER" ADD CONSTRAINT "TB_CUSTOMER_PK" PRIMARY KEY ("CUSTOMER_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("DATE_OF_BIRTH" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER" MODIFY ("IDENTIFICATION_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_LOYALITY_POINTS_MAPPING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOYALITY_POINTS_MAPPING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOYALITY_POINTS_MAPPING" ADD CONSTRAINT "TB_LOYALITY_POINTS_MAPPING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_LOYALITY_POINTS_MAPPING" MODIFY ("STATUS" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_INSURANCE_LEADS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INSURANCE_LEADS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_SP_ERROR_LOG
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SP_ERROR_LOG" ADD PRIMARY KEY ("ERROR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_KEY_HISTORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_KEY_HISTORY" ADD CONSTRAINT "TB_KEY_HISTORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_KEY_HISTORY" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_SCHOOL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SCHOOL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SCHOOL" ADD CONSTRAINT "TB_SCHOOL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CHARGE_RANGE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CHARGE_RANGE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_STAGING_COMMENTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_COMMENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_STAGING_COMMENTS" ADD CONSTRAINT "TB_STAGING_COMMENTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_OPTIONAL_BENEFIT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_OPTIONAL_BENEFIT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_DATA_WORKFLOW
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW" ADD CONSTRAINT "TB_DATA_WORKFLOW_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBDSSTXN_PERSONAL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" ADD CONSTRAINT "TBDSSTXN_PERSONAL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("DATEX" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSCUSTOMER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSACCOUNT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSPASSPORT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSSIGNATURE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("APP_USERREG" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSINTROLETTER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("CURRENCY" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("APP_USER_STATUS" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("PROCESSTRANSACTIONSTATUS" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("RECLASSIFY" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_PERSONAL" MODIFY ("DISTRIBUTION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_SEQUENCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SEQUENCE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SEQUENCE" MODIFY ("SERIES" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SEQUENCE" MODIFY ("SERIES_LENGTH" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SEQUENCE" ADD PRIMARY KEY ("UNIQUEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_AUDIT_TRAIL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_AUDIT_TRAIL" ADD CONSTRAINT "TB_CUSTOMER_AUDIT_TRAIL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_OPERATOR
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OPERATOR" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_OPERATOR" ADD CONSTRAINT "TB_OPERATOR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_OPERATOR" ADD CONSTRAINT "TB_OPERATOR_UK1" UNIQUE ("NATIONAL_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MERCHANTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MERCHANTS" ADD PRIMARY KEY ("MERCHANT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUTH_ITEM_GROUP
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUTH_ITEM_GROUP" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUTH_ITEM_GROUP" ADD CONSTRAINT "AUTH_ITEM_GROUP_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL_DEFINITION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL_DEFINITION" ADD CONSTRAINT "TB_GL_DEFINITION_PK" PRIMARY KEY ("PREFIX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_GL_DEFINITION" MODIFY ("PREFIX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_CATALOGS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_CATALOGS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CATALOGS" MODIFY ("CONNECTION_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CATALOGS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CATALOGS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CATALOGS" ADD CONSTRAINT "MD_CATALOGS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_BANK
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BANK" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BANK" MODIFY ("BANK_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BANK" ADD CONSTRAINT "TB_BANK_PK" PRIMARY KEY ("BANK_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_BANK" MODIFY ("REWORKED" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_PARTITIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_PARTITIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PARTITIONS" MODIFY ("TABLE_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PARTITIONS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PARTITIONS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_PARTITIONS" ADD CONSTRAINT "MD_PARTITIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGENT_CATEGORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENT_CATEGORY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_AGENT_CATEGORY" ADD CONSTRAINT "TB_AGENT_CATEGORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_CATEGORY" ADD CONSTRAINT "TB_AGENT_CATEGORY_UK1" UNIQUE ("CATEGORY_DESCRIPTION")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_FILE_ARTIFACTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_FILE_ARTIFACTS" MODIFY ("ID" CONSTRAINT "MD_APP_FILE_ART_NONULL" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_FILE_ARTIFACTS" MODIFY ("APPLICATIONFILES_ID" CONSTRAINT "MD_APPL_FILE_FK_NONULL" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_FILE_ARTIFACTS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_FILE_ARTIFACTS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_FILE_ARTIFACTS" ADD CONSTRAINT "MD_FILE_ARTIFACTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_FOREX
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_FOREX" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_FOREX" ADD CONSTRAINT "SYS_C0037901" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_SACCOS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SACCOS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SACCOS" MODIFY ("SACCO_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SACCOS" ADD CONSTRAINT "TB_SACCOS_PK" PRIMARY KEY ("SACCO_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_SACCOS" ADD CONSTRAINT "TB_SACCOS_UK1" UNIQUE ("SACCO_NAMES", "SACCO_WALLET_ACCOUNT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MESSAGES_EXTERNAL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" ADD CONSTRAINT "TB_MESSAGES_EXTERNAL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("FIELD2" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("FIELD3" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("FIELD32" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("FIELD37" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" MODIFY ("FIELD100" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_EXTERNAL" ADD CONSTRAINT "TB_MESSAGES_EXTERNAL_UK2" UNIQUE ("FIELD0", "FIELD37")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TEMP_TRIAL_BAL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TEMP_TRIAL_BAL" ADD PRIMARY KEY ("GLCODE") ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRADE_FIN_PROCURING_ENTITY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRADE_FIN_PROCURING_ENTITY" ADD PRIMARY KEY ("REFERENCE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_COLUMNS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("TABLE_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("COLUMN_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("COLUMN_ORDER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("NULLABLE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_COLUMNS" ADD CONSTRAINT "MD_COLUMNS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."MD_COLUMNS" ADD CONSTRAINT "MD_COLUMNS_NULLABLE_Y_N" CHECK ((UPPER(NULLABLE) IN ('Y','N'))) ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_REVERSAL_REQUEST
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_REVERSAL_REQUEST" ADD CONSTRAINT "TB_REVERSAL_REQUEST_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_REVERSAL_REQUEST" ADD UNIQUE ("REF_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_REVERSAL_REQUEST" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_ACCOUNT_MANDATE_ROLE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT_MANDATE_ROLE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT_MANDATE_ROLE" ADD CONSTRAINT "TB_ACCOUNT_MANDATE_ROLE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TILL_AGGREGATOR
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TILL_AGGREGATOR" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ACCOUNT_MANDATE_STAGING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT_MANDATE_STAGING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT_MANDATE_STAGING" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_BENEFICIARY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_BENEFICIARY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_REQUESTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_REQUESTS" ADD CONSTRAINT "TB_REQUESTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PROFILES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PROFILES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_PROFILES" ADD CONSTRAINT "TB_PROFILES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_PROFILES" ADD CONSTRAINT "TB_PROFILES_UK1" UNIQUE ("PROFILE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_COMPLIANCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_COMPLIANCE" ADD CONSTRAINT "TB_CUSTOMER_COMPLIANCE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CUSTOMER_COMPLIANCE" ADD CONSTRAINT "TB_CUSTOMER_COMPLIANCE_UK1" UNIQUE ("CUSTOMER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CUSTOMER_COMPLIANCE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_ISSUES_CATEGORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ISSUES_CATEGORY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ISSUES_CATEGORY" ADD CONSTRAINT "TB_ISSUES_CATEGORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CHARGES_GL_MAPPING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CHARGES_GL_MAPPING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CHARGES_GL_MAPPING" ADD CONSTRAINT "TB_CHARGES_GL_MAPPING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ACCOUNT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT" MODIFY ("ACCOUNT_NO" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT" ADD CONSTRAINT "TB_ACCOUNT_PK" PRIMARY KEY ("ACCOUNT_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_CONNECTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_CONNECTIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CONNECTIONS" MODIFY ("PROJECT_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CONNECTIONS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CONNECTIONS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_CONNECTIONS" ADD CONSTRAINT "MD_CONNECTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGENTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_AGENTS" ADD CONSTRAINT "TB_AGENTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENTS" ADD CONSTRAINT "TB_AGENTS_UK1" UNIQUE ("BUSINESS_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENTS" ADD UNIQUE ("AGENT_CODE_ALIAS")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_INSTITUTION_TYPES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INSTITUTION_TYPES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_INSTITUTION_TYPES" ADD CONSTRAINT "TB_INSTITUTION_TYPES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_JOINT_ACCOUNT_MANDATE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_JOINT_ACCOUNT_MANDATE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_JOINT_ACCOUNT_MANDATE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_INTERIM_BATCH_REPORTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INTERIM_BATCH_REPORTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_INTERIM_BATCH_REPORTS" ADD CONSTRAINT "TB_INTERIM_BATCH_REPORTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MESSAGES_SMS_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MESSAGES_SMS_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_SMS_ARCHIVE" ADD CONSTRAINT "TB_MESSAGES_SMS_ARCHIVE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_STAGING_ACTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" MODIFY ("WORKFLOW_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" MODIFY ("CURRENT_ACTION_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" ADD CONSTRAINT "TB_STAGING_ACTION_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ACCOUNT_STATUS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT_STATUS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT_STATUS" MODIFY ("STATUSCODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT_STATUS" ADD CONSTRAINT "TB_ACCOUNT_STATUS_PK" PRIMARY KEY ("STATUSCODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_SACCO_LINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SACCO_LINKING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SACCO_LINKING" MODIFY ("SACCO_ACCOUNT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SACCO_LINKING" MODIFY ("CUSTOMER_ACCOUNT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SACCO_LINKING" ADD CONSTRAINT "TB_SACCO_LINKING_PK" PRIMARY KEY ("SACCO_ACCOUNT", "CUSTOMER_ACCOUNT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CLOSED_AGGREGATED_TILL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CLOSED_AGGREGATED_TILL" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ROLES_IN_PROFILE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" MODIFY ("PROFILE_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" MODIFY ("ROLE_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" ADD CONSTRAINT "TB_ROLES_IN_PROFILE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" ADD CONSTRAINT "TB_ROLES_IN_PROFILE_UK1" UNIQUE ("PROFILE_ID", "ROLE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_DEFAULT_LIMIT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DEFAULT_LIMIT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_DEFAULT_LIMIT" ADD CONSTRAINT "TB_DEFAULT_LIMIT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_VOTE_CATEGORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_VOTE_CATEGORY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_VOTE_CATEGORY" ADD CONSTRAINT "TB_VOTE_CATEGORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUTH_ASSIGNMENT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUTH_ASSIGNMENT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUTH_ASSIGNMENT" ADD CONSTRAINT "AUTH_ASSIGNMENT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MERCHANT_OUTLET
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MERCHANT_OUTLET" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MERCHANT_OUTLET" ADD PRIMARY KEY ("MERCHANT_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_JAVASCRIPT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_JAVASCRIPT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_JAVASCRIPT" ADD CONSTRAINT "AUDIT_JAVASCRIPT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LOAN_RECOVERIES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOAN_RECOVERIES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_RECOVERIES" ADD CONSTRAINT "PK_TB_LOAN_RECOVERIES" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PAYBILL_AGGREGATOR
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PAYBILL_AGGREGATOR" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_BLOCK_ACCOUNT_AMOUNT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" ADD CONSTRAINT "TB_BLOCK_ACCOUNT_AMOUNT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" ADD CONSTRAINT "TB_BLOCK_ACCOUNT_UK_ACCNO" UNIQUE ("ACCOUNT_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_USERS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_USERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USERS" MODIFY ("SCHEMA_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USERS" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USERS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USERS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_USERS" ADD CONSTRAINT "MD_USERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_INSURANCE_REQUEST
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_INSURANCE_REQUEST" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CARDLESS_TRANSACTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CARDLESS_TRANSACTIONS" ADD CONSTRAINT "TB_CARDLESS_TRANSACTIONS_PK" PRIMARY KEY ("FIELD37")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CARDLESS_TRANSACTIONS" MODIFY ("FIELD37" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_GROUPS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GROUPS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GROUPS" MODIFY ("GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GROUPS" ADD CONSTRAINT "TB_GROUPS_PK" PRIMARY KEY ("GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_GROUPS" ADD CONSTRAINT "TB_GROUPS_UK1" UNIQUE ("GROUP_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MERCHANT_CATEGORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MERCHANT_CATEGORY" ADD PRIMARY KEY ("CATEGORY_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MERCHANT_CATEGORY" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_BRANCH
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BRANCH" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BRANCH" ADD CONSTRAINT "TB_BRANCH_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_BRANCH" ADD CONSTRAINT "TB_BRANCH_UK" UNIQUE ("BRANCH_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRADE_FINANCE_PRODUCTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRADE_FINANCE_PRODUCTS" ADD PRIMARY KEY ("PRODUCT_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_APPLICATIONFILES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("APPLICATIONS_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("URI" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("TYPE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("STATE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONFILES" ADD CONSTRAINT "MD_APPLICATIONFILES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGENT_DEVICELINKING_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING_ARCHIVE" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_ARC_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_AGENT_DEVICELINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_UK1" UNIQUE ("POS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ROLES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ROLES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES" MODIFY ("ROLE_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ROLES" ADD CONSTRAINT "TB_ROLES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_ROLES" ADD CONSTRAINT "TB_ROLES_UK1" UNIQUE ("ROLE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUTH_RULE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUTH_RULE" MODIFY ("CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUDIT_MAIL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_MAIL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_MAIL" ADD CONSTRAINT "AUDIT_MAIL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TEMP_TRIAL_BALANCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TEMP_TRIAL_BALANCE" ADD PRIMARY KEY ("GLCODE") ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("SECOND_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("CUSTOMER_NO" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("DATE_OF_BIRTH" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ARCHIVE" MODIFY ("GENDER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_CARD_TRANSACTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CARD_TRANSACTIONS" ADD CONSTRAINT "TB_CARD_TRANSACTIONS_PK" PRIMARY KEY ("FIELD37")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CARD_TRANSACTIONS" MODIFY ("FIELD37" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_CLOSED_AGGREGATED_PAYBILL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CLOSED_AGGREGATED_PAYBILL" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MERCHANT_DEALS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MERCHANT_DEALS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MERCHANT_DEALS" MODIFY ("DEAL_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MERCHANT_DEALS" ADD CONSTRAINT "SYS_C0038898" PRIMARY KEY ("DEAL_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_INDEX_DETAILS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("INDEX_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("COLUMN_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("DETAIL_ORDER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_INDEX_DETAILS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TITLE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TITLE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_ISSUES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ISSUES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ISSUES" ADD CONSTRAINT "TB_ISSUES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_DATA_WORKFLOW_ACTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW_ACTION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW_ACTION" ADD CONSTRAINT "TB_DATA_WORKFLOW_ACTION_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LINKED_ACCOUNTS_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LINKED_ACCOUNTS_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_SECURITY_QUESTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SECURITY_QUESTIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SECURITY_QUESTIONS" ADD CONSTRAINT "TB_SECURITY_QUESTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_VALIDATION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" MODIFY ("PARTIAL_REGISTRATION" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" MODIFY ("CUSTOMER_NO" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" ADD CONSTRAINT "TB_CUSTOMER_VALIDATION_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" MODIFY ("LANG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TXN_REF_SEQUENCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TXN_REF_SEQUENCE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TXN_REF_SEQUENCE" ADD CONSTRAINT "TB_TXN_REF_SEQUENCE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_ERROR
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_ERROR" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_ERROR" ADD CONSTRAINT "AUDIT_ERROR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PERSONAL_ACCIDENT_BENEFICIARY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PERSONAL_ACCIDENT_BENEFICIARY" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CHANNEL_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CHANNEL_REQUESTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CHANNEL_REQUESTS" ADD CONSTRAINT "TB_CHANNEL_REQUESTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_ANSWERS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_ANSWERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_ANSWERS" ADD CONSTRAINT "TB_CUSTOMER_ANSWERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_ENTRY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_ENTRY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_ENTRY" ADD CONSTRAINT "AUDIT_ENTRY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PRESCORED_LOAN
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PRESCORED_LOAN" ADD PRIMARY KEY ("REFERENCE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_MIGR_PARAMETER
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("CONNECTION_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("OBJECT_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("OBJECT_TYPE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("PARAM_EXISTING" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("PARAM_ORDER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("PARAM_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("PARAM_TYPE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("PARAM_DATA_TYPE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("NULLABLE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_MIGR_PARAMETER" ADD CONSTRAINT "MIGR_PARAMETER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_REPOVERSIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_REPOVERSIONS" MODIFY ("REVISION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_COMMISSION_RANGE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_COMMISSION_RANGE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTIONS_GL_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_GL_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_INSTITUTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INSTITUTIONS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_AGG_C2B_TRANSACTION_STAGING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGG_C2B_TRANSACTION_STAGING" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_SMS_TEMPLATE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("SMS_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("DEST" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("FIELD3" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("FIELD100" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" ADD CONSTRAINT "TB_SMS_TEMPLATE_PK" PRIMARY KEY ("SMS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("LANGUAGE_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("SMS_DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("SMS_TEMPLATE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SMS_TEMPLATE" MODIFY ("MTI" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_TABLESPACES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_TABLESPACES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_TABLESPACES" MODIFY ("SCHEMA_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_TABLESPACES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_TABLESPACES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_TABLESPACES" ADD CONSTRAINT "MD_TABLESPACES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_USER_INSTITUTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_USER_INSTITUTION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_USER_INSTITUTION" ADD CONSTRAINT "TB_USER_INSTITUTION_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_USER_INSTITUTION" ADD CONSTRAINT "TB_USER_INSTITUTION_UK1" UNIQUE ("USER_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_DATA_WORKFLOW_CATEGORY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW_CATEGORY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW_CATEGORY" ADD CONSTRAINT "TB_DATA_WORKFLOW_CATEGORY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRADE_FIN_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRADE_FIN_REQUESTS" ADD PRIMARY KEY ("REQ_REFERENCE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_WHITELIST
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_WHITELIST" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TEMP_TRIAL_BAL_DRILL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TEMP_TRIAL_BAL_DRILL" ADD PRIMARY KEY ("GLCODE") ENABLE;
--------------------------------------------------------
--  Constraints for Table TBREMIDIATION_ACCOUNTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBREMIDIATION_ACCOUNTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBREMIDIATION_ACCOUNTS" MODIFY ("DATEADDED" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBREMIDIATION_ACCOUNTS" ADD CONSTRAINT "ACCOUNTNO_UK" UNIQUE ("ACCOUNTNUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_THIRD_PARTY_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_THIRD_PARTY_REQUESTS" ADD CONSTRAINT "TB_THIRD_PARTY_REQUESTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_THIRD_PARTY_REQUESTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_THIRD_PARTY_REQUESTS" ADD UNIQUE ("ESB_REF")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_TRAIL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_TRAIL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_TRAIL" ADD CONSTRAINT "AUDIT_TRAIL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MESSAGES_SMS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MESSAGES_SMS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_SMS" ADD CONSTRAINT "TB_MESSAGES_SMS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANS_COMMISSION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION" MODIFY ("TRXCODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION" MODIFY ("PROCODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION" MODIFY ("CHANNEL" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_GENERAL_PARAMS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GENERAL_PARAMS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GENERAL_PARAMS" MODIFY ("ITEMNAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GENERAL_PARAMS" MODIFY ("ITEMVALUE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTIONS" ADD CONSTRAINT "TB_TRANSACTIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MESSAGES_CBS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" ADD CONSTRAINT "TB_MESSAGES_CBS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" ADD CONSTRAINT "TB_MESSAGES_CBS_UK1" UNIQUE ("FIELD37")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("FIELD2" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("FIELD3" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("FIELD32" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("FIELD37" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MESSAGES_CBS" MODIFY ("FIELD100" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MD_SEQUENCES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("SCHEMA_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("SEQ_START" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("INCR" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" MODIFY ("CREATED_BY" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_SEQUENCES" ADD CONSTRAINT "MD_SEQUENCES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_BANK_BRANCH
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BANK_BRANCH" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BANK_BRANCH" MODIFY ("BANK_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BANK_BRANCH" MODIFY ("BRANCH_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BANK_BRANCH" ADD CONSTRAINT "TB_BANK_BRANCH_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TEMP_TRIAL_DATA
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TEMP_TRIAL_DATA" ADD PRIMARY KEY ("GLCODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MVISA_MPASS_REGISTRATION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MVISA_MPASS_REGISTRATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_MVISA_MPASS_REGISTRATION" ADD CONSTRAINT "TB_MVISA_MASTEPASS_REGISTR_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_BILLERS_MAPPINGS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BILLERS_MAPPINGS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BILLERS_MAPPINGS" MODIFY ("FIELD100" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_BILLERS_MAPPINGS" ADD CONSTRAINT "TB_BILLERS_MAPPINGS_PK" PRIMARY KEY ("FIELD100")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_UNREGISTERED_CUSTOMERS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_UNREGISTERED_CUSTOMERS" ADD CONSTRAINT "TB_UNREGISTERED_CUSTOMERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_UNREGISTERED_CUSTOMERS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTIONS_GL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_GL" ADD CONSTRAINT "TB_TRANSACTIONS_GL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_GL" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_EOD_ACTIVITY
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_EOD_ACTIVITY" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_EOD_ACTIVITY" ADD CONSTRAINT "TB_EOD_ACTIVITY_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL_BALANCE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL_BALANCE" ADD CONSTRAINT "GL_CODE_PK" PRIMARY KEY ("GL_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_GL_BALANCE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_ACCOUNT_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT_ARCHIVE" MODIFY ("ACCOUNT_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_ACCOUNT_ARCHIVE" MODIFY ("ACCOUNT_NO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTION_MATRIX
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTION_MATRIX" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTION_MATRIX" ADD CONSTRAINT "TB_TRANSACTION_MATRIX_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table AUDIT_DATA
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUDIT_DATA" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUDIT_DATA" ADD CONSTRAINT "AUDIT_DATA_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_EOD_ACTIVITY_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE" ADD CONSTRAINT "TB_EOD_ACTIVITY_ARCHIVE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_EOD_ACTIVITY_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUTH_ITEM
--------------------------------------------------------

  ALTER TABLE "APP_USER"."AUTH_ITEM" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."AUTH_ITEM" ADD CONSTRAINT "AUTH_ITEM_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LOAN_SCORING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOAN_SCORING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_SCORING" MODIFY ("ACCOUNT_NUMBER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_SCORING" ADD CONSTRAINT "TB_LOAN_SCORING_PK" PRIMARY KEY ("ACCOUNT_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LOAN_PRODUCTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOAN_PRODUCTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_PRODUCTS" MODIFY ("PRODUCT_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_PRODUCTS" ADD CONSTRAINT "TB_LOAN_PRODUCTS_PK" PRIMARY KEY ("PRODUCT_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_REGISTRATIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_REGISTRATIONS" ADD CONSTRAINT "TB_REGISTRATIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_REGISTRATIONS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_SERVICES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SERVICES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SERVICES" MODIFY ("FIELD100" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_SERVICES" ADD CONSTRAINT "TB_SERVICES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_SERVICES" ADD CONSTRAINT "TB_SERVICES_UK1" UNIQUE ("FIELD100")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PRODUCTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PRODUCTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_PRODUCTS" MODIFY ("PRODUCT_CODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_PRODUCTS" ADD CONSTRAINT "TB_PRODUCTS_PK" PRIMARY KEY ("PRODUCT_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LINKED_ACCOUNTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LINKED_ACCOUNTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LINKED_ACCOUNTS" ADD CONSTRAINT "TB_LINKED_ACCOUNTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_LINKED_ACCOUNTS" ADD CONSTRAINT "TB_LINKED_ACCOUNTS_UK1" UNIQUE ("LINKEDACCOUNT")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_COVER_TYPE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_COVER_TYPE" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TERMS_AND_CONDITIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TERMS_AND_CONDITIONS" ADD CONSTRAINT "TB_TERMS_AND_CONDITIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_TERMS_AND_CONDITIONS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_MERCHANT_CUSTOMERS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MERCHANT_CUSTOMERS" ADD CONSTRAINT "TB_MERCHANT_CUSTOMERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MERCHANT_CUSTOMERS" ADD CONSTRAINT "TB_MERCHANT_CUSTOMERS_UK1" UNIQUE ("CUST_CODE", "MERCHANT_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_MERCHANT_CUSTOMERS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_USER_IN_PROFILE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_USER_IN_PROFILE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_USER_IN_PROFILE" ADD CONSTRAINT "TB_USER_IN_PROFILE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTION_AUDIT_TRAIL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" ADD CONSTRAINT "TB_TRANSACTION_AUDIT_TRAIL_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_BASIC_BENEFIT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_BASIC_BENEFIT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_EMAIL_TEMPLATE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_EMAIL_TEMPLATE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_EMAIL_TEMPLATE" ADD CONSTRAINT "SYS_C0038819" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_GROUP_MEMBERS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_GROUP_MEMBERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_GROUP_MEMBERS" MODIFY ("GROUP_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_GROUP_MEMBERS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_GROUP_MEMBERS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_GROUP_MEMBERS" ADD CONSTRAINT "MD_GROUP_MEMBERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LOAN_DECLINED
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOAN_DECLINED" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_DECLINED" MODIFY ("REFERENCE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_LOAN_DECLINED" ADD CONSTRAINT "TB_LOAN_DECLINED_PK" PRIMARY KEY ("REFERENCE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_VALIDATION_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION_ARCHIVE" MODIFY ("LANG" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION_ARCHIVE" MODIFY ("CUSTOMER_NO" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION_ARCHIVE" MODIFY ("PARTIAL_REGISTRATION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_PERSONAL_ACCIDENT_REQUEST
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PERSONAL_ACCIDENT_REQUEST" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_INSTITUTION_BATCH_PAYOUT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_INSTITUTION_BATCH_PAYOUT" ADD CONSTRAINT "TB_INSTITUTION_BATCH_PAYOU_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CHEQUE_BOOK_PARAMS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CHEQUE_BOOK_PARAMS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_PA_PREMIUM_OPTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_PA_PREMIUM_OPTION" ADD PRIMARY KEY ("PA_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_OPTIONAL_BENEFIT_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OPTIONAL_BENEFIT_REQUESTS" ADD PRIMARY KEY ("REQUEST_REF")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_USER
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_USER" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_USER" ADD CONSTRAINT "TB_USER_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_USER" ADD CONSTRAINT "TB_USER_UK1" UNIQUE ("USER_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_INVITED_FRIENDS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INVITED_FRIENDS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TRANS_COMMISSION_CHARGES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" MODIFY ("TRXCODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" MODIFY ("PROCODE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" MODIFY ("CHANNEL" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANS_COMMISSION_CHARGES" ADD CONSTRAINT "TB_TRANS_COMMISSION_CHARGES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_OFFLINE_BALANCES
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OFFLINE_BALANCES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_OFFLINE_BALANCES" ADD CONSTRAINT "TB_OFFLINE_BALANCES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_LOYALTYPOINTS_MATRIX
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LOYALTYPOINTS_MATRIX" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TB_TILLPAYBILL_STATUS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TILLPAYBILL_STATUS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTIONS_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_ARCHIVE" MODIFY ("ARCHIVE_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_ARCHIVE" ADD CONSTRAINT "TB_TRANSACTIONS_ARCHIVE_PK" PRIMARY KEY ("ARCHIVE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBCOBERRORS_ARCHIVE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBCOBERRORS_ARCHIVE" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBCOBERRORS_ARCHIVE" ADD CONSTRAINT "TBCOBERRORS_ARCHIVE_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MD_APPLICATIONS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."MD_APPLICATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONS" MODIFY ("PROJECT_ID_FK" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONS" MODIFY ("SECURITY_GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONS" MODIFY ("CREATED_ON" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."MD_APPLICATIONS" ADD CONSTRAINT "MD_APPLICATIONS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_INSTITUTION_UPLOADS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_INSTITUTION_UPLOADS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_INSTITUTION_UPLOADS" ADD CONSTRAINT "TB_INSTITUTION_UPLOADS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_INSTITUTION_UPLOADS" ADD CONSTRAINT "TB_INSTITUTION_UPLOADS_UK1" UNIQUE ("BATCH_NO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "APP_USER"."TB_INSTITUTION_UPLOADS" ADD CONSTRAINT "TB_INSTITUTION_UPLOADS_UK2" UNIQUE ("FILE_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTIONS_COB
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_COB" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTIONS_COB" ADD CONSTRAINT "TB_TRANSACTIONS_COB_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBDSSTXN_REMIDIATION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("DATEX" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("PROCESSCUSTOMER" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("PROCESSACCOUNT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("PROCESSPASSPORT" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("PROCESSSIGNATURE" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("NMBMOBILEREG" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("CURRENCY" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("NMBMOBILE_STATUS" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" MODIFY ("PROCESSTRANSACTIONSTATUS" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBDSSTXN_REMIDIATION" ADD CONSTRAINT "TBDSSTXN_REMIDIATION_UK1" UNIQUE ("ACCOUNTNUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_CUSTOMER_CARE_REQUESTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_CARE_REQUESTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_CUSTOMER_CARE_REQUESTS" ADD CONSTRAINT "TB_CUSTOMER_CARE_REQUESTS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TBCOBERRORS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TBCOBERRORS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TBCOBERRORS" ADD CONSTRAINT "TBCOBERRORS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_MOTORVEHICLE_EXCESS_BENEFIT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_MOTORVEHICLE_EXCESS_BENEFIT" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_GL_MAPPING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_GL_MAPPING" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_GL_MAPPING" ADD CONSTRAINT "TB_GL_MAPPING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TB_TRANSACTION_LIMIT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTION_LIMIT" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "APP_USER"."TB_TRANSACTION_LIMIT" ADD CONSTRAINT "TB_TRANSACTION_LIMIT_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_ACCOUNT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ACCOUNT" ADD CONSTRAINT "TB_ACCOUNT_BRANCH_ID" FOREIGN KEY ("BRANCH_ID")
	  REFERENCES "APP_USER"."TB_BRANCH" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_AGENT_DEVICELINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_FK1" FOREIGN KEY ("AGENT_ID")
	  REFERENCES "APP_USER"."TB_AGENTS" ("ID") ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_FK2" FOREIGN KEY ("DEVICE_IMEI")
	  REFERENCES "APP_USER"."TB_AGENT_DEVICES" ("DEVICE_IMEI") ENABLE;
  ALTER TABLE "APP_USER"."TB_AGENT_DEVICELINKING" ADD CONSTRAINT "TB_AGENT_DEVICELINKING_FK3" FOREIGN KEY ("DEVICE_MOBILE")
	  REFERENCES "APP_USER"."TB_AGENT_DEVICES" ("DEVICE_MOBILE_NUMBER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_BLOCK_ACCOUNT_AMOUNT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_BLOCK_ACCOUNT_AMOUNT" ADD CONSTRAINT "TB_BLOCK_ACCOUNT_BRANCHID" FOREIGN KEY ("ID")
	  REFERENCES "APP_USER"."TB_BRANCH" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_CARD_LINKING
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CARD_LINKING" ADD CONSTRAINT "TB_CARD_LINKING_FK1" FOREIGN KEY ("CUSTOMER_NO")
	  REFERENCES "APP_USER"."TB_CUSTOMER" ("CUSTOMER_NO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_CUSTOMER
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER" ADD CONSTRAINT "TB_CUSTOMER_BRANCH_ID" FOREIGN KEY ("LOCAL_BRANCH_ID")
	  REFERENCES "APP_USER"."TB_BRANCH" ("ID") DISABLE;
  ALTER TABLE "APP_USER"."TB_CUSTOMER" ADD CONSTRAINT "TB_CUSTOMER_DOMICILE_BRANCH" FOREIGN KEY ("DOMICILE_BRANCH_ID")
	  REFERENCES "APP_USER"."TB_BRANCH" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_CUSTOMER_VALIDATION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_CUSTOMER_VALIDATION" ADD CONSTRAINT "TB_CUSTOMER_VALIDATION_CUSTNO" FOREIGN KEY ("CUSTOMER_NO")
	  REFERENCES "APP_USER"."TB_CUSTOMER" ("CUSTOMER_NO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_DATA_WORKFLOW
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW" ADD CONSTRAINT "TB_DATA_WORKFLOW_FK1" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "APP_USER"."TB_DATA_WORKFLOW_CATEGORY" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_DATA_WORKFLOW_ACTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_DATA_WORKFLOW_ACTION" ADD CONSTRAINT "TB_DATA_WORKFLOW_ACTION_FK1" FOREIGN KEY ("WORKFLOW_ID")
	  REFERENCES "APP_USER"."TB_DATA_WORKFLOW" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_LINKED_ACCOUNTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_LINKED_ACCOUNTS" ADD CONSTRAINT "TB_LINKED_ACCOUNTS_CUSTNO_FK" FOREIGN KEY ("CUSTOMER_NO")
	  REFERENCES "APP_USER"."TB_CUSTOMER" ("CUSTOMER_NO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_OPERATOR
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OPERATOR" ADD CONSTRAINT "TB_OPERATOR_FK1" FOREIGN KEY ("OUTLET_ID")
	  REFERENCES "APP_USER"."TB_OUTLET" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_OUTLET
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_OUTLET" ADD CONSTRAINT "TB_OUTLET_FK1" FOREIGN KEY ("ID")
	  REFERENCES "APP_USER"."TB_AGENTS" ("ID") ON DELETE CASCADE DISABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_ROLES_IN_PROFILE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" ADD CONSTRAINT "TB_ROLES_IN_PROFILE_FK1" FOREIGN KEY ("PROFILE_ID")
	  REFERENCES "APP_USER"."TB_PROFILES" ("ID") ENABLE;
  ALTER TABLE "APP_USER"."TB_ROLES_IN_PROFILE" ADD CONSTRAINT "TB_ROLES_IN_PROFILE_FK2" FOREIGN KEY ("ROLE_ID")
	  REFERENCES "APP_USER"."TB_ROLES" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_SACCOS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SACCOS" ADD CONSTRAINT "TB_SACCOS_FK1" FOREIGN KEY ("SACCO_WALLET_ACCOUNT")
	  REFERENCES "APP_USER"."TB_ACCOUNT" ("ACCOUNT_NO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_STAGING_ACTION
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" ADD CONSTRAINT "TB_STAGING_ACTION_FK1" FOREIGN KEY ("WORKFLOW_ID")
	  REFERENCES "APP_USER"."TB_DATA_WORKFLOW" ("ID") ON DELETE SET NULL ENABLE;
  ALTER TABLE "APP_USER"."TB_STAGING_ACTION" ADD CONSTRAINT "TB_STAGING_ACTION_FK2" FOREIGN KEY ("CURRENT_ACTION_ID")
	  REFERENCES "APP_USER"."TB_DATA_WORKFLOW_ACTION" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_STAGING_COMMENTS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_COMMENTS" ADD CONSTRAINT "TB_STAGING_COMMENTS_FK1" FOREIGN KEY ("STAGING_ID")
	  REFERENCES "APP_USER"."TB_STAGING_ACTION" ("ID") ON DELETE SET NULL ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_STAGING_PROCESS
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_STAGING_PROCESS" ADD CONSTRAINT "TB_STAGING_PROCESS_FK1" FOREIGN KEY ("STAGING_ACTION_ID")
	  REFERENCES "APP_USER"."TB_STAGING_ACTION" ("ID") ENABLE;
  ALTER TABLE "APP_USER"."TB_STAGING_PROCESS" ADD CONSTRAINT "TB_STAGING_PROCESS_FK2" FOREIGN KEY ("STAGING_ID")
	  REFERENCES "APP_USER"."TB_DATA_WORKFLOW" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_SUPER_AGENT
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_SUPER_AGENT" ADD CONSTRAINT "TB_SUPER_AGENT_FK1" FOREIGN KEY ("CATEGORY_ID")
	  REFERENCES "APP_USER"."TB_AGENT_CATEGORY" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_TRANSACTION_AUDIT_TRAIL
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" ADD CONSTRAINT "TB_TRANSACTION_AUDIT_TRAI_FK1" FOREIGN KEY ("PHONE_NUMBER")
	  REFERENCES "APP_USER"."TB_CUSTOMER" ("CUSTOMER_NO") ENABLE;
  ALTER TABLE "APP_USER"."TB_TRANSACTION_AUDIT_TRAIL" ADD CONSTRAINT "TB_TRANSACTION_AUDIT_TRAI_FK2" FOREIGN KEY ("ACCOUNT_NO")
	  REFERENCES "APP_USER"."TB_ACCOUNT" ("ACCOUNT_NO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_USER
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_USER" ADD CONSTRAINT "TB_USER_FK1" FOREIGN KEY ("BRANCH_ID")
	  REFERENCES "APP_USER"."TB_BRANCH" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table TB_USER_IN_PROFILE
--------------------------------------------------------

  ALTER TABLE "APP_USER"."TB_USER_IN_PROFILE" ADD CONSTRAINT "TB_USER_IN_PROFILE_FK1" FOREIGN KEY ("USER_ID")
	  REFERENCES "APP_USER"."TB_USER" ("ID") ENABLE;
  ALTER TABLE "APP_USER"."TB_USER_IN_PROFILE" ADD CONSTRAINT "TB_USER_IN_PROFILE_FK2" FOREIGN KEY ("PROFILE_ID")
	  REFERENCES "APP_USER"."TB_PROFILES" ("ID") ENABLE;
